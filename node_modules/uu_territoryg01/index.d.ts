export = UuTerritory;
declare namespace UuTerritory {
    namespace Activity {
        namespace Bricks {
            interface ActivityTile$artifactWrapper {
            }
            interface ActivityTile$activityData {
            }
            interface ActivityTile$artifactData {
            }
            interface ActivityTile$Props {
                territoryBaseUri?: string;
                artifactWrapper?: ActivityTile$artifactWrapper;
                artifactId?: string;
                artifactCode?: string;
                activityId?: string;
                activityData?: ActivityTile$activityData;
                artifactData?: ActivityTile$artifactData;
                handleMeasure?(...args: any): any;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                borderRadius?: number | string;
                colorSchema?: string;
                type?: "simple" | "full";
                hideSubmitter?: boolean;
                hideDate?: boolean;
                hideActions?: boolean;
                updateActivityData?(...args: any): any;
                hideArtifact?: boolean;
                componentWidth?: number;
            }
            function ActivityTile(props: ActivityTile$Props): any;
            interface Note$note {
            }
            interface Note$Props {
                note?: Note$note;
                noteFor?: string;
                noStamp?: boolean;
            }
            function Note(props: Note$Props): any;
            interface NoteStamp$Props {
                authorName?: string;
                creationTs?: string;
                recipient?: string;
            }
            function NoteStamp(props: NoteStamp$Props): any;
            interface NoseMessage$Props {
                content?: string;
                setStateName?: string;
                setStateIcon?: string;
                importance?: string;
                rightSide?: boolean;
                noPhoto?: boolean;
            }
            function NoseMessage(props: NoseMessage$Props): any;
            interface StateSelector$defaultState {
            }
            interface StateSelector$Props {
                stateList?: any[];
                defaultState?: StateSelector$defaultState;
                onChange?(...args: any): any;
                dropup?: boolean;
                hideName?: boolean;
            }
            function StateSelector(props: StateSelector$Props): any;
            interface Participant$Props {
                uuid?: string;
                stateIcon?: string;
                name?: string;
                role?: string;
                authorized?: boolean;
            }
            function Participant(props: Participant$Props): any;
            interface SystemNote$data {
            }
            interface SystemNote$Props {
                type?: string;
                data?: SystemNote$data;
            }
            function SystemNote(props: SystemNote$Props): any;
            interface RemoveSolver$activity {
            }
            interface RemoveSolver$artifact {
            }
            interface RemoveSolver$Props {
                activity?: RemoveSolver$activity;
                artifact?: RemoveSolver$artifact;
                territoryBaseUri?: string;
                refreshData?(...args: any): any;
            }
            function RemoveSolver(props: RemoveSolver$Props): any;
            interface Detail$header {
            }
            interface Detail$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                activityId: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                showDefaultHeader?: boolean;
                header?: Detail$header | string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                cardView?: boolean;
                height?: number;
            }
            function Detail(props: Detail$Props): any;
            function ShowActivities(props: any): any;
            interface ActivityLink$Props {
                territoryBaseUri?: string;
                activityId: string;
                artifactId: string;
                activityName: string;
                typeIcon?: string;
                stateIcon?: string;
                stateName?: string;
                stateType?: string;
                singleLine?: boolean;
                fullStateIcon?: boolean;
                read?: boolean;
                openInNewTab?: boolean;
                updateCount?: number;
                width?: number;
            }
            function ActivityLink(props: ActivityLink$Props): any;
            interface ActivityTileDate$Props {
                diaryDisplayType?: "dayBlock" | "timeBlock" | "none";
                startTime?: any;
                endTime: any;
                type?: "simple" | "full";
                layout?: "singleLine" | "doubleLine";
                markPast?: boolean;
            }
            function ActivityTileDate(props: ActivityTileDate$Props): any;
            interface UpdateCount$Props {
                updateCount?: number;
            }
            function UpdateCount(props: UpdateCount$Props): any;
            interface CheckboxButton$Props {
                id?: string;
                onSelect?(...args: any): any;
                selected?: boolean;
            }
            function CheckboxButton(props: CheckboxButton$Props): any;
            interface ActivityList$header {
            }
            interface ActivityList$help {
            }
            interface ActivityList$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                showDefaultHeader?: boolean;
                header?: ActivityList$header | string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                tileType?: "simple" | "full";
                tileColorSchema?: string;
                tileElevation?: string | number;
                tileBgStyle?: string;
                tileBorderRadius?: string | number;
                tileHideActions?: boolean;
                tileHideSubmitter?: boolean;
                tileHideDate?: boolean;
                tileHideArtifact?: boolean;
                displayListBars?: boolean;
                createToModal?: boolean;
                cardView?: boolean;
                height?: number;
                help?: ActivityList$help | string;
                helpHidden?: boolean;
            }
            function ActivityList(props: ActivityList$Props): any;
            interface RoleIfcActivityList$header {
            }
            interface RoleIfcActivityList$help {
            }
            interface RoleIfcActivityList$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                showDefaultHeader?: boolean;
                header?: RoleIfcActivityList$header | string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                tileType?: "simple" | "full";
                tileColorSchema?: string;
                tileElevation?: string | number;
                tileBgStyle?: string;
                tileBorderRadius?: string | number;
                tileHideActions?: boolean;
                tileHideSubmitter?: boolean;
                tileHideDate?: boolean;
                tileHideArtifact?: boolean;
                displayListBars?: boolean;
                cardView?: boolean;
                height?: number;
                help?: RoleIfcActivityList$help | string;
                view?: any[];
                helpHidden?: boolean;
            }
            function RoleIfcActivityList(props: RoleIfcActivityList$Props): any;
            interface DetailGeneric$activityDto {
            }
            interface DetailGeneric$Props {
                territoryBaseUri?: string;
                activityDto?: DetailGeneric$activityDto;
                artifactId?: string;
                artifactCode?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
                fastActions?: any[];
                lsiFn?(...args: any): any;
                finalNoteTopMessage?: any;
                submitterLabel?: string;
                solversLabel?: string;
            }
            function DetailGeneric(props: DetailGeneric$Props): any;
            interface TileGeneric$activityData {
            }
            interface TileGeneric$artifactData {
            }
            interface TileGeneric$Props {
                territoryBaseUri?: string;
                activityData: TileGeneric$activityData;
                artifactData?: TileGeneric$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
                actionList?: any[];
            }
            function TileGeneric(props: TileGeneric$Props): any;
        }
        namespace Core {
            interface DetailDoIt$activityDto {
            }
            interface DetailDoIt$Props {
                artifactId?: string;
                activityId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
                activityDto?: DetailDoIt$activityDto;
            }
            function DetailDoIt(props: DetailDoIt$Props): any;
            interface DetailInfo$activityDto {
            }
            interface DetailInfo$Props {
                artifactId?: string;
                activityId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
                activityDto?: DetailInfo$activityDto;
            }
            function DetailInfo(props: DetailInfo$Props): any;
            interface DetailDecide$activityDto {
            }
            interface DetailDecide$Props {
                territoryBaseUri?: string;
                activityDto?: DetailDecide$activityDto;
                artifactId?: string;
                artifactCode?: string;
                activityId?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
            }
            function DetailDecide(props: DetailDecide$Props): any;
            interface DetailMilestone$activityDto {
            }
            interface DetailMilestone$Props {
                artifactId?: string;
                activityId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
                activityDto?: DetailMilestone$activityDto;
            }
            function DetailMilestone(props: DetailMilestone$Props): any;
            interface DetailReserveTime$activityDto {
            }
            interface DetailReserveTime$Props {
                territoryBaseUri?: string;
                activityDto?: DetailReserveTime$activityDto;
                artifactId?: string;
                artifactCode?: string;
                activityId?: string;
                contextType?: string;
                contextExpanded?: boolean;
                onAddComment?(...args: any): any;
                removeSolver?(...args: any): any;
                reactivateSolver?(...args: any): any;
                reloadActivity?(...args: any): any;
            }
            function DetailReserveTime(props: DetailReserveTime$Props): any;
            interface ActivityTileDoIt$activityData {
            }
            interface ActivityTileDoIt$artifactData {
            }
            interface ActivityTileDoIt$Props {
                territoryBaseUri?: string;
                activityData: ActivityTileDoIt$activityData;
                artifactData?: ActivityTileDoIt$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
            }
            function ActivityTileDoIt(props: ActivityTileDoIt$Props): any;
            interface ActivityTileInfo$activityData {
            }
            interface ActivityTileInfo$artifactData {
            }
            interface ActivityTileInfo$Props {
                territoryBaseUri?: string;
                activityData: ActivityTileInfo$activityData;
                artifactData?: ActivityTileInfo$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
            }
            function ActivityTileInfo(props: ActivityTileInfo$Props): any;
            interface ActivityTileDecide$activityData {
            }
            interface ActivityTileDecide$artifactData {
            }
            interface ActivityTileDecide$Props {
                territoryBaseUri?: string;
                activityData: ActivityTileDecide$activityData;
                artifactData?: ActivityTileDecide$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
            }
            function ActivityTileDecide(props: ActivityTileDecide$Props): any;
            interface ActivityTileMilestone$activityData {
            }
            interface ActivityTileMilestone$artifactData {
            }
            interface ActivityTileMilestone$Props {
                territoryBaseUri?: string;
                activityData: ActivityTileMilestone$activityData;
                artifactData?: ActivityTileMilestone$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
            }
            function ActivityTileMilestone(props: ActivityTileMilestone$Props): any;
            interface ActivityTileReserveTime$activityData {
            }
            interface ActivityTileReserveTime$artifactData {
            }
            interface ActivityTileReserveTime$Props {
                territoryBaseUri?: string;
                activityData: ActivityTileReserveTime$activityData;
                artifactData?: ActivityTileReserveTime$artifactData;
                type?: string;
                hideActions?: boolean;
                hideSubmitter?: boolean;
                hideDate?: boolean;
                handleMeasure?(...args: any): any;
                updateActivityData?(...args: any): any;
            }
            function ActivityTileReserveTime(props: ActivityTileReserveTime$Props): any;
        }
        namespace Routes {
            interface Detail$artifact {
            }
            interface Detail$Props {
                artifact?: Detail$artifact;
                activityId?: string;
            }
            function Detail(props: Detail$Props): any;
            interface Create$artifact {
            }
            interface Create$Props {
                artifact?: Create$artifact;
                descHidden?: boolean;
            }
            function Create(props: Create$Props): any;
            interface ShowActivities$artifact {
            }
            interface ShowActivities$Props {
                artifact?: ShowActivities$artifact;
                descHidden?: boolean;
            }
            function ShowActivities(props: ShowActivities$Props): any;
            interface ActivityList$artifact {
            }
            interface ActivityList$Props {
                artifact?: ActivityList$artifact;
                descHidden?: boolean;
            }
            function ActivityList(props: ActivityList$Props): any;
            interface RoleIfcActivityList$artifact {
            }
            interface RoleIfcActivityList$Props {
                artifact?: RoleIfcActivityList$artifact;
                descHidden?: boolean;
            }
            function RoleIfcActivityList(props: RoleIfcActivityList$Props): any;
        }
        namespace Context {
            interface Provider$data {
            }
            interface Provider$Props {
                data?: Provider$data;
            }
            function Provider(props: Provider$Props): any;
            const Consumer: any;
        }
        namespace Dw {
            interface Custom$tileProps {
            }
            interface Custom$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: "none" | "timeBlock" | "dayBlock";
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: Custom$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
                actionList?: any[];
            }
            function Custom(props: Custom$Props): any;
            interface Decide$tileProps {
            }
            interface Decide$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: string;
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: Decide$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
            }
            function Decide(props: Decide$Props): any;
            interface DoIt$tileProps {
            }
            interface DoIt$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: "none" | "timeBlock" | "dayBlock";
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: DoIt$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
            }
            function DoIt(props: DoIt$Props): any;
            interface Info$tileProps {
            }
            interface Info$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: string;
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: Info$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
            }
            function Info(props: Info$Props): any;
            interface Milestone$tileProps {
            }
            interface Milestone$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: string;
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: Milestone$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
            }
            function Milestone(props: Milestone$Props): any;
            interface ReserveTime$tileProps {
            }
            interface ReserveTime$Props {
                id: string;
                code: string;
                read?: boolean;
                state?: "active" | "finished";
                showInDiary?: string;
                sender: boolean;
                recipient: boolean;
                routeUri: string;
                sourceAppBaseUri: string;
                sourceArtifact: string;
                sourceArtifactName: string;
                name: string;
                desc?: string;
                startTime?: string;
                endTime: string;
                expirationTime?: string;
                tileProps: ReserveTime$tileProps;
                type?: "full" | "simple";
                showActions?: boolean;
                handleMeasure?(...args: any): any;
            }
            function ReserveTime(props: ReserveTime$Props): any;
        }
        namespace Forms {
            namespace AddSolver {
                interface Content$activityData {
                }
                interface Content$artifact {
                }
                interface Content$Props {
                    activityData?: Content$activityData;
                    artifact?: Content$artifact;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$activityData {
                }
                interface Context$artifact {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    activityData?: Context$activityData;
                    artifact?: Context$artifact;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$activityData {
                }
                interface Header$Props {
                    content?: any;
                    info?: any;
                    activityData?: Header$activityData;
                }
                function Header(props: Header$Props): any;
            }
            namespace SetBasicAttributes {
                interface Content$activityData {
                }
                interface Content$artifact {
                }
                interface Content$Props {
                    activityData?: Content$activityData;
                    artifact?: Content$artifact;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$activityData {
                }
                interface Context$artifact {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    activityData?: Context$activityData;
                    artifact?: Context$artifact;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$activityData {
                }
                interface Header$Props {
                    content?: any;
                    info?: any;
                    activityData?: Header$activityData;
                }
                function Header(props: Header$Props): any;
            }
            namespace SetSolver {
                interface Content$artifact {
                }
                interface Content$activityData {
                }
                interface Content$selectedActivity {
                }
                interface Content$Props {
                    territoryBaseUri?: string;
                    artifact?: Content$artifact;
                    activityData?: Content$activityData;
                    selectedActivity?: Content$selectedActivity;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$artifact {
                }
                interface Context$activityData {
                }
                interface Context$selectedActivity {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    territoryBaseUri?: string;
                    artifact?: Context$artifact;
                    activityData?: Context$activityData;
                    selectedActivity?: Context$selectedActivity;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$activityData {
                }
                interface Header$Props {
                    content?: any;
                    info?: any;
                    activityData?: Header$activityData;
                }
                function Header(props: Header$Props): any;
            }
            namespace SetSubmitter {
                interface Content$artifact {
                }
                interface Content$activityData {
                }
                interface Content$Props {
                    territoryBaseUri?: string;
                    artifact?: Content$artifact;
                    activityData?: Content$activityData;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$artifact {
                }
                interface Context$activityData {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    territoryBaseUri?: string;
                    artifact?: Context$artifact;
                    activityData?: Context$activityData;
                    refreshData?(...args: any): any;
                    activityId?: string;
                    artifactId?: string;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$activityData {
                }
                interface Header$Props {
                    content?: any;
                    info?: any;
                    activityData?: Header$activityData;
                }
                function Header(props: Header$Props): any;
            }
        }
    }
    namespace Bricks {
        namespace Bricks {
            interface ArtifactState$Props {
                type?: string;
                symbol?: string;
            }
            function ArtifactState(props: ArtifactState$Props): any;
            interface ArtifactTile$maxButtonCount {
                xs?: number;
                s?: number;
                m?: number;
                l?: number;
                xl?: number;
            }
            interface ArtifactTile$Props {
                typeIcon?: string;
                typeName?: string;
                artifactName?: string;
                artifactCode?: string;
                artifactStateIcon?: string;
                artifactId?: string;
                actionList?: any[];
                artifactIcon?: any;
                maxButtonCount?: ArtifactTile$maxButtonCount;
                territoryBaseUri?: string;
            }
            function ArtifactTile(props: ArtifactTile$Props): any;
            interface RoleIfcTile$maxButtonCount {
                xs?: number;
                s?: number;
                m?: number;
                l?: number;
                xl?: number;
            }
            interface RoleIfcTile$Props {
                typeIcon?: string;
                typeName?: string;
                typeCode?: string;
                artifactName?: string;
                artifactCode?: string;
                artifactStateIcon?: string;
                unitName?: string;
                artifactId?: string;
                actionList?: any[];
                uuIdentity?: string;
                artifactIcon?: string;
                maxButtonCount?: RoleIfcTile$maxButtonCount;
                territoryBaseUri?: string;
                mainUuIdentityName?: string;
                isMainCast?: boolean;
                showIcon?: boolean;
            }
            function RoleIfcTile(props: RoleIfcTile$Props): any;
            interface ArtifactLink$artifactData {
            }
            interface ArtifactLink$params {
            }
            interface ArtifactLink$contextMenuMap {
            }
            interface ArtifactLink$Props {
                territoryBaseUri?: string;
                artifactData?: ArtifactLink$artifactData;
                artifactId?: string;
                artifactName?: any[] | string;
                artifactCode?: string;
                artifactStateIcon?: string;
                artifactStateName?: string;
                icon?: any;
                uuIdentity?: string;
                mainUuIdentity?: string;
                useCase?: string;
                params?: ArtifactLink$params;
                stateIconStyle?: "mini" | "basic" | "full";
                openInNewTab?: boolean | string;
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: string;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                hideIcon?: boolean;
                hideStateIcon?: boolean;
                colorSchema?: string;
                href?: string;
                contextMenuMap?: ArtifactLink$contextMenuMap;
                disable?: boolean;
            }
            function ArtifactLink(props: ArtifactLink$Props): any;
            interface RoleIfcLink$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactName?: string;
                artifactCode?: string;
                artifactStateIcon?: string;
                useCase?: string;
                icon?: any;
                openInNewTab?: boolean;
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
                uuIdentity?: string;
                mainUuIdentity?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: string;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            }
            function RoleIfcLink(props: RoleIfcLink$Props): any;
            interface ActionList$maxButtonCount {
                xs?: number;
                s?: number;
                m?: number;
                l?: number;
                xl?: number;
            }
            interface ActionList$Props {
                actionList?: any[];
                maxButtonCount?: ActionList$maxButtonCount;
                artifactId?: string;
            }
            function ActionList(props: ActionList$Props): any;
            interface IconText$Props {
                icon?: string;
                content?: any;
            }
            function IconText(props: IconText$Props): any;
            interface IconLink$Props {
                icon?: string;
                name?: string;
                id?: string;
            }
            function IconLink(props: IconLink$Props): any;
            interface UnitAccessCheckerResult$roleGroupIfc {
            }
            interface UnitAccessCheckerResult$unitGroupData {
            }
            interface UnitAccessCheckerResult$Props {
                roleGroupIfc?: UnitAccessCheckerResult$roleGroupIfc;
                unitGroupData?: UnitAccessCheckerResult$unitGroupData;
                territoryBaseUri?: string;
            }
            function UnitAccessCheckerResult(props: UnitAccessCheckerResult$Props): any;
            interface CastList$artifactData {
            }
            interface CastList$territoryData {
            }
            interface CastList$castListData {
            }
            interface CastList$onAddCast {
            }
            interface CastList$onRemoveCast {
            }
            interface CastList$infoItem {
            }
            interface CastList$Props {
                artifactData?: CastList$artifactData;
                territoryData?: CastList$territoryData;
                castListData?: CastList$castListData;
                onAddCast?: CastList$onAddCast;
                onRemoveCast?: CastList$onRemoveCast;
                infoItem?: CastList$infoItem;
                actionList?: any[];
                territoryBaseUri?: string;
                icon?: string;
                showIcon?: boolean;
            }
            function CastList(props: CastList$Props): any;
            interface ArtifactNavigation$artifact {
            }
            interface ArtifactNavigation$Props {
                artifact?: ArtifactNavigation$artifact;
                onClick?(...args: any): any;
                reloadOnErrorFunc?(...args: any): any;
                territoryBaseUri?: string;
                useTerritoryBaseUri?: boolean;
            }
            function ArtifactNavigation(props: ArtifactNavigation$Props): any;
            interface ArtifactTouchIcon$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactName?: string;
                artifactCode?: string;
                artifactStateIcon?: string;
                useCase?: string;
                image?: any;
                icon?: any;
                openInNewTab?: boolean;
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
                hideStateIcon?: boolean;
            }
            function ArtifactTouchIcon(props: ArtifactTouchIcon$Props): any;
            interface BasicInfo$Props {
                blocksData?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface BlockArtifactTile$maxButtonCount {
                xs?: number;
                s?: number;
                m?: number;
                l?: number;
                xl?: number;
            }
            interface BlockArtifactTile$Props {
                typeIcon?: string;
                typeName?: string;
                artifactName?: string;
                artifactCode?: string;
                artifactStateIcon?: string;
                artifactId?: string;
                actionList?: any[];
                artifactIcon?: any;
                maxButtonCount?: BlockArtifactTile$maxButtonCount;
                territoryBaseUri?: string;
            }
            function BlockArtifactTile(props: BlockArtifactTile$Props): any;
            interface InfoGrid$Props {
                colWidth?: number[];
                data?: any[];
                header?: any | any | string;
            }
            function InfoGrid(props: InfoGrid$Props): any;
            interface Empty$text {
            }
            interface Empty$Props {
                icon?: string;
                text?: Empty$text | string;
            }
            function Empty(props: Empty$Props): any;
            interface ArtifactComponent$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                showDefaultHeader?: boolean;
                header?: any;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: string;
                colorSchema?: string;
                elevation?: number;
                elevationHover?: number;
                isExplorer?: boolean;
                content?: any;
                tagName?: string;
                useComponentCard?: boolean;
                shouldLoad?: boolean;
            }
            function ArtifactComponent(props: ArtifactComponent$Props): any;
            interface ArtifactContext$Props {
                contextType?: "none" | "basic" | "full";
                contextExpanded?: boolean;
            }
            function ArtifactContext(props: ArtifactContext$Props): any;
            interface TileListInfoBar$Props {
                totalSize?: number;
                pageSize?: number;
            }
            function TileListInfoBar(props: TileListInfoBar$Props): any;
            interface ArtifactBricksBar$Props {
                contextType?: "none" | "basic" | "full";
                contextExpanded?: boolean;
                showNavigation?: boolean;
                actions?: any[];
                useCase?: string;
                showCopyTagAction?: boolean;
            }
            function ArtifactBricksBar(props: ArtifactBricksBar$Props): any;
            interface State$Props {
                icon?: any;
                size?: number;
                hideIcon?: boolean;
                type?: "circle" | "button" | "mini" | "basic" | "full";
                stateIcon?: string;
                stateName?: string;
                stateType?: string;
                stateIconSize?: number;
                hideStateIcon?: boolean;
            }
            function State(props: State$Props): any;
            interface ArtifactResultItem$artifactData {
            }
            interface ArtifactResultItem$Props {
                artifactData?: ArtifactResultItem$artifactData;
                territoryBaseUri?: string;
                popover?: any;
            }
            function ArtifactResultItem(props: ArtifactResultItem$Props): any;
            interface ArtifactPopover$artifactData {
            }
            interface ArtifactPopover$Props {
                artifactData?: ArtifactPopover$artifactData;
                territoryBaseUri?: string;
                popover?: any;
            }
            function ArtifactPopover(props: ArtifactPopover$Props): any;
            namespace BlockLayout {
                interface Tile$Props {
                    bgStyle?: "filled" | "outline" | "transparent" | "underline";
                    elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                    borderRadius?: number | string;
                    width?: number | string;
                    padding?: number | string;
                    margin?: number | string;
                }
                function Tile(props: Tile$Props): any;
                interface Block$Props {
                    actions?: any[];
                }
                function Block(props: Block$Props): any;
                function Line(props: any): any;
                interface Row$Props {
                    size?: "s" | "m";
                    weight?: "primary" | "normal" | "secondary";
                    ellipsis?: boolean;
                }
                function Row(props: Row$Props): any;
                interface Text$Props {
                    size?: "s" | "m";
                    weight?: "primary" | "normal" | "secondary";
                    icon?: string;
                }
                function Text(props: Text$Props): any;
            }
            function withArtifactContext(WrappedComponent: any): any;
            interface TerritoryArtifactContext$artifactData$header {
            }
            interface TerritoryArtifactContext$artifactData$desc {
            }
            interface TerritoryArtifactContext$artifactData$additionalInfo {
            }
            interface TerritoryArtifactContext$artifactData {
                header?: string | TerritoryArtifactContext$artifactData$header;
                navigation?: any[];
                desc?: string | TerritoryArtifactContext$artifactData$desc;
                additionalInfo?: TerritoryArtifactContext$artifactData$additionalInfo;
            }
            interface TerritoryArtifactContext$Props {
                navigation?: any[];
                actionList?: any[];
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: string | number;
                colorSchema?: string;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                copyTagFunc?(...args: any): any;
                contextType?: "none" | "basic" | "full";
                defaultView?: "showDesc" | "hideDesc";
                useCase?: string;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactData?: TerritoryArtifactContext$artifactData;
            }
            function TerritoryArtifactContext(props: TerritoryArtifactContext$Props): any;
            interface ArtifactLocationInfo$artifactData {
            }
            interface ArtifactLocationInfo$Props {
                territoryBaseUri: string;
                artifactData: ArtifactLocationInfo$artifactData;
                territoryName: string;
                routeName?: string;
                disableNavigation?: boolean;
                hideNavigation?: boolean;
            }
            function ArtifactLocationInfo(props: ArtifactLocationInfo$Props): any;
            interface ArtifactLocationInfoLoader$Props {
                territoryBaseUri?: string;
                artifactUri?: string;
                artifactId?: string;
                artifactCode?: string;
                routeName?: string;
                disableNavigation?: boolean;
                hideNavigation?: boolean;
            }
            function ArtifactLocationInfoLoader(props: ArtifactLocationInfoLoader$Props): any;
            interface ActionTile$content {
            }
            interface ActionTile$Props {
                header?: any;
                content?: ActionTile$content | string;
                footer?: any;
                actionList?: any[];
                maxWidth?: string;
                maxHeight?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                elevation?: number | string;
                elevationHover?: number | string;
                handleMeasure?(...args: any): any;
                selected?: boolean;
                selectable?: boolean;
                onSelect?(...args: any): any;
                columnStyle?: boolean;
            }
            function ActionTile(props: ActionTile$Props): any;
            interface StructureTree$artifact {
            }
            interface StructureTree$Props {
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
                artifact?: StructureTree$artifact;
                territoryBaseUri?: string;
                allowUpperBrowsing?: boolean;
                showContext?: boolean;
                typeCodeList?: string[];
                structureData?: any[];
                scaffoldBlockPxWidth?: number;
            }
            function StructureTree(props: StructureTree$Props): any;
            interface ListPath$sideA {
            }
            interface ListPath$sideB {
            }
            interface ListPath$castPath {
            }
            interface ListPath$Props {
                territoryBaseUri?: string;
                sideA: ListPath$sideA;
                sideB: ListPath$sideB;
                castPath?: ListPath$castPath;
            }
            function ListPath(props: ListPath$Props): any;
            interface ArtifactInfo$Props {
                territoryBaseUri?: string;
                artifactUri?: string;
                artifactId?: string;
                artifactCode?: string;
                actionList?: any[];
            }
            function ArtifactInfo(props: ArtifactInfo$Props): any;
        }
    }
    namespace ArtifactIfc {
        namespace Bricks {
            interface ArtifactLink$Props {
                artifactName?: string;
                artifactStateIcon?: string;
                artifactIcon?: any;
                artifactUri?: string;
                uuIdentity?: string;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                useCase?: string;
                openInNewTab?: boolean;
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
            }
            function ArtifactLink(props: ArtifactLink$Props): any;
            interface PermissionSettings$help {
            }
            interface PermissionSettings$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                help?: PermissionSettings$help | string;
                helpHidden?: boolean;
                hideUnitAccessChecker?: boolean;
            }
            function PermissionSettings(props: PermissionSettings$Props): any;
            interface ContextPropertyList$Props {
                artifactUri?: string;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: number;
                elevationHover?: number;
                bgStyle?: string;
                colorSchema?: string;
                contextType?: string;
                contextExpanded?: boolean;
            }
            function ContextPropertyList(props: ContextPropertyList$Props): any;
            interface AarListBySideA$useCases {
                create?: string;
                delete?: string;
                update?: string;
            }
            interface AarListBySideA$help {
            }
            interface AarListBySideA$Props {
                allowCreating?: boolean;
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                tileColorSchema?: string;
                tileElevation?: string | number;
                tileBgStyle?: string;
                tileBorderRadius?: string | number;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                targetUri?: string;
                targetBaseUri?: string;
                useCases?: AarListBySideA$useCases;
                routeToApp?: boolean;
                cardView?: boolean;
                help?: AarListBySideA$help | string;
                helpHidden?: boolean;
            }
            function AarListBySideA(props: AarListBySideA$Props): any;
            interface AarListBySideB$help {
            }
            interface AarListBySideB$Props {
                artifactUri?: string;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                tileColorSchema?: string;
                tileElevation?: string | number;
                tileBgStyle?: string;
                tileBorderRadius?: string | number;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                routeToApp?: boolean;
                cardView?: boolean;
                help?: AarListBySideB$help | string;
                helpHidden?: boolean;
            }
            function AarListBySideB(props: AarListBySideB$Props): any;
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                helpHidden?: boolean;
                customInfo?: any[];
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface StateHistory$help {
            }
            interface StateHistory$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                help?: StateHistory$help | string;
                hideActions?: ("setState")[];
                helpHidden?: boolean;
            }
            function StateHistory(props: StateHistory$Props): any;
            function ActivityList(props: any): any;
            interface SetResponsibleRoleButton$artifactData {
            }
            interface SetResponsibleRoleButton$buttonProps {
            }
            interface SetResponsibleRoleButton$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                artifactData?: SetResponsibleRoleButton$artifactData;
                territoryBaseUri?: string;
                buttonProps?: SetResponsibleRoleButton$buttonProps;
                onSaveDone?(...args: any): any;
            }
            function SetResponsibleRoleButton(props: SetResponsibleRoleButton$Props): any;
            interface SetHomeFolderButton$artifactData {
            }
            interface SetHomeFolderButton$buttonProps {
            }
            interface SetHomeFolderButton$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                artifactData?: SetHomeFolderButton$artifactData;
                territoryBaseUri?: string;
                buttonProps?: SetHomeFolderButton$buttonProps;
                onSaveDone?(...args: any): any;
            }
            function SetHomeFolderButton(props: SetHomeFolderButton$Props): any;
            interface CreateArtifactButton$artifactData {
            }
            interface CreateArtifactButton$buttonProps {
            }
            interface CreateArtifactButton$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                artifactData?: CreateArtifactButton$artifactData;
                territoryBaseUri?: string;
                buttonProps?: CreateArtifactButton$buttonProps;
                onSaveDone?(...args: any): any;
                createToModal?: boolean;
            }
            function CreateArtifactButton(props: CreateArtifactButton$Props): any;
        }
        namespace Routes {
            interface Create$artifactData {
            }
            interface Create$territoryData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryData?: Create$territoryData;
                descHidden?: boolean;
                selectedType?: string;
            }
            function Create(props: Create$Props): any;
            interface PermissionSettings$artifact {
            }
            interface PermissionSettings$Props {
                descHidden?: boolean;
                artifact?: PermissionSettings$artifact;
            }
            function PermissionSettings(props: PermissionSettings$Props): any;
        }
        namespace Core {
            interface PermissionSettings$header {
            }
            interface PermissionSettings$help {
            }
            interface PermissionSettings$Props {
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: PermissionSettings$header | string;
                help?: PermissionSettings$help | string;
                helpHidden?: boolean;
                hideUnitAccessChecker?: boolean;
            }
            function PermissionSettings(props: PermissionSettings$Props): any;
            function ContextProperty(props: any): any;
            interface AarList$useCases {
                create?: string;
                delete?: string;
                update?: string;
            }
            interface AarList$tileProps {
            }
            interface AarList$help {
            }
            interface AarList$Props {
                allowCreating?: boolean;
                targetUri?: string;
                routeToApp?: boolean;
                targetBaseUri?: string;
                useCases?: AarList$useCases;
                sideA?: boolean;
                tileProps?: AarList$tileProps;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                header?: string;
                showDefaultHeader?: boolean;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                help?: AarList$help | string;
                helpHidden?: boolean;
            }
            function AarList(props: AarList$Props): any;
            interface StateHistory$help {
            }
            interface StateHistory$Props {
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                header?: string;
                showDefaultHeader?: boolean;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                help?: StateHistory$help | string;
                hideActions?: ("setState")[];
                helpHidden?: boolean;
            }
            function StateHistory(props: StateHistory$Props): any;
            interface BasicInfo$help {
            }
            interface BasicInfo$basicActionsSettings {
            }
            interface BasicInfo$Props {
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                header?: string;
                showDefaultHeader?: boolean;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                help?: BasicInfo$help | string;
                helpHidden?: boolean;
                customInfo?: any[];
                actionList?: any[];
                basicActionsSettings?: BasicInfo$basicActionsSettings;
            }
            function BasicInfo(props: BasicInfo$Props): any;
        }
        const Common: any;
        namespace Forms {
            namespace Create {
                interface Content$artifactData {
                }
                interface Content$territoryData {
                }
                interface Content$Props {
                    artifactData?: Content$artifactData;
                    territoryData?: Content$territoryData;
                    descHidden?: boolean;
                    modal?: any;
                    onSaveDone?(...args: any): any;
                    showContext?: boolean;
                }
                function Content(props: Content$Props): any;
                interface Context$artifactData {
                }
                interface Context$territoryData {
                }
                interface Context$Props {
                    artifactData: Context$artifactData;
                    territoryData?: Context$territoryData;
                    territoryBaseUri?: string;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$Props {
                    content?: any;
                    info?: any;
                }
                function Header(props: Header$Props): any;
            }
        }
    }
    namespace TerritoryGroup {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$header {
            }
            interface CastChecker$help {
            }
            interface CastChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: CastChecker$header | string;
                help?: CastChecker$help | string;
                helpHidden?: boolean;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                goToArtifactFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    namespace Forms {
        interface AddRoleInput$artifact {
        }
        interface AddRoleInput$Props {
            territoryBaseUri?: string;
            artifact?: AddRoleInput$artifact;
            restrictedIdList?: any[];
            maxItems?: number;
            required?: boolean;
        }
        function AddRoleInput(props: AddRoleInput$Props): any;
        interface ArtifactFind$resultsData {
        }
        interface ArtifactFind$findData {
        }
        interface ArtifactFind$Props {
            resultsData?: ArtifactFind$resultsData;
            onlyOne?: boolean;
            territoryBaseUri?: string;
            setDataFunc?(...args: any): any;
            modal?: any;
            uuAppTypeList?: any;
            value?: string;
            findData?: ArtifactFind$findData;
            showNewSearch?: boolean;
            uuUnitList?: string[];
            allowFromOtherTerritory?: boolean;
        }
        function ArtifactFind(props: ArtifactFind$Props): any;
        interface ArtifactFindButton$Props {
            territoryBaseUri?: string;
            onlyOne?: boolean;
            setDataFunc?(...args: any): any;
            input?: any;
            uuAppTypeList?: string[];
            uuUnitList?: string[];
            allowFromOtherTerritory?: boolean;
        }
        function ArtifactFindButton(props: ArtifactFindButton$Props): any;
        interface ArtifactInput$value {
        }
        interface ArtifactInput$Props {
            value?: string | ArtifactInput$value;
            required?: boolean;
            disabled?: boolean;
            territoryBaseUri?: string;
            types: any[];
            customValidation?(...args: any): any;
            getSelectedArtifactData?(...args: any): any;
            inputColWidth?: string;
            labelColWidth?: string;
            isEditable?: boolean;
            onBlur?(...args: any): any;
            uuUnitList?: string[];
            allowFromOtherTerritory?: boolean;
        }
        function ArtifactInput(props: ArtifactInput$Props): any;
        interface CastCheckerInput$errorMessage {
        }
        interface CastCheckerInput$placeHolder {
        }
        interface CastCheckerInput$Props {
            showLoading?: boolean;
            errorMessage?: CastCheckerInput$errorMessage;
            checkedText?: string;
            onClick?(...args: any): any;
            placeHolder?: CastCheckerInput$placeHolder;
            setDataFunc?(...args: any): any;
            territoryBaseUri?: string;
            uuAppTypeList?: string[];
        }
        function CastCheckerInput(props: CastCheckerInput$Props): any;
        interface CreateDefaultAar$uuAarItem {
        }
        interface CreateDefaultAar$artifactData {
        }
        interface CreateDefaultAar$Props {
            territoryBaseUri?: string;
            uuAarItem?: CreateDefaultAar$uuAarItem;
            targetUri?: string;
            onFinish?(...args: any): any;
            artifactData?: CreateDefaultAar$artifactData;
        }
        function CreateDefaultAar(props: CreateDefaultAar$Props): any;
        interface DeleteArtifactForm$artifactData {
        }
        interface DeleteArtifactForm$Props {
            artifactData?: DeleteArtifactForm$artifactData;
        }
        function DeleteArtifactForm(props: DeleteArtifactForm$Props): any;
        interface EditBasicAttributes$artifactData {
        }
        interface EditBasicAttributes$Props {
            artifactData?: EditBasicAttributes$artifactData;
            territoryBaseUri?: string;
            setArtifactDataFunc?(...args: any): any;
        }
        function EditBasicAttributes(props: EditBasicAttributes$Props): any;
        interface EditHomeFolder$artifactData {
        }
        interface EditHomeFolder$Props {
            artifactData?: EditHomeFolder$artifactData;
            territoryBaseUri?: string;
            setArtifactDataFunc?(...args: any): any;
        }
        function EditHomeFolder(props: EditHomeFolder$Props): any;
        interface EditResponsibleRole$artifactData {
        }
        interface EditResponsibleRole$Props {
            artifactData?: EditResponsibleRole$artifactData;
            territoryBaseUri?: string;
            setArtifactDataFunc?(...args: any): any;
        }
        function EditResponsibleRole(props: EditResponsibleRole$Props): any;
        interface EditState$artifactData {
        }
        interface EditState$territoryData {
        }
        interface EditState$Props {
            artifactData: EditState$artifactData;
            territoryData?: EditState$territoryData;
            territoryBaseUri?: string;
            setArtifactDataFunc?(...args: any): any;
        }
        function EditState(props: EditState$Props): any;
        interface LocationInput$location {
        }
        interface LocationInput$artifact {
        }
        interface LocationInput$Props {
            territoryBaseUri?: string;
            getSelectedLocation?(...args: any): any;
            allowUpperBrowsing?: boolean;
            typeCodeList?: string[];
            location?: LocationInput$location;
            inputColWidth?: string;
            required?: boolean;
            artifact?: LocationInput$artifact;
            onBlur?(...args: any): any;
            uuUnitList?: string[];
        }
        function LocationInput(props: LocationInput$Props): any;
        interface RoleInput$Props {
            territoryData?: string;
            required?: boolean;
            inputColWidth?: string;
            labelColWidth?: string;
        }
        function RoleInput(props: RoleInput$Props): any;
        namespace SetBasicAttributes {
            interface Content$artifactData {
            }
            interface Content$territoryData {
            }
            interface Content$Props {
                artifactData: Content$artifactData;
                territoryData?: Content$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Content(props: Content$Props): any;
            interface Context$artifactData {
            }
            interface Context$territoryData {
            }
            interface Context$Props {
                headerContent?: any;
                headerInfo?: any;
                artifactData: Context$artifactData;
                territoryData?: Context$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Context(props: Context$Props): any;
            function Controls(props: any): any;
            interface Header$artifactData {
            }
            interface Header$Props {
                content?: any;
                info?: any;
                artifactData?: Header$artifactData;
            }
            function Header(props: Header$Props): any;
        }
        namespace SetHomeFolder {
            interface Content$artifactData {
            }
            interface Content$territoryData {
            }
            interface Content$Props {
                artifactData: Content$artifactData;
                territoryData?: Content$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
                showContext?: boolean;
            }
            function Content(props: Content$Props): any;
            interface Context$artifactData {
            }
            interface Context$territoryData {
            }
            interface Context$Props {
                headerContent?: any;
                headerInfo?: any;
                artifactData: Context$artifactData;
                territoryData?: Context$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Context(props: Context$Props): any;
            function Controls(props: any): any;
            interface Header$Props {
                content?: any;
                info?: any;
            }
            function Header(props: Header$Props): any;
        }
        namespace SetResponsibleRole {
            interface Content$artifactData {
            }
            interface Content$territoryData {
            }
            interface Content$Props {
                artifactData: Content$artifactData;
                territoryData?: Content$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
                showContext?: boolean;
            }
            function Content(props: Content$Props): any;
            interface Context$artifactData {
            }
            interface Context$territoryData {
            }
            interface Context$Props {
                headerContent?: any;
                headerInfo?: any;
                artifactData: Context$artifactData;
                territoryData?: Context$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Context(props: Context$Props): any;
            function Controls(props: any): any;
            interface Header$Props {
                content?: any;
                info?: any;
            }
            function Header(props: Header$Props): any;
        }
        namespace SetState {
            interface Content$artifactData {
            }
            interface Content$territoryData {
            }
            interface Content$Props {
                artifactData: Content$artifactData;
                territoryData?: Content$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Content(props: Content$Props): any;
            interface Context$artifactData {
            }
            interface Context$territoryData {
            }
            interface Context$Props {
                headerContent?: any;
                headerInfo?: any;
                artifactData: Context$artifactData;
                territoryData?: Context$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Context(props: Context$Props): any;
            function Controls(props: any): any;
            interface Header$Props {
                content?: any;
                info?: any;
            }
            function Header(props: Header$Props): any;
        }
        interface SubmitterInput$Props {
            required?: boolean;
            disabled?: boolean;
            territoryBaseUri?: string;
            inputColWidth?: string;
            labelColWidth?: string;
            isEditable?: boolean;
        }
        function SubmitterInput(props: SubmitterInput$Props): any;
        namespace UpdateDefaultAar {
            interface Content$artifactData {
            }
            interface Content$territoryData {
            }
            interface Content$aarData {
            }
            interface Content$Props {
                artifactData: Content$artifactData;
                territoryData?: Content$territoryData;
                aarData: Content$aarData;
                territoryBaseUri?: string;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
                onSaveCallback?(...args: any): any;
            }
            function Content(props: Content$Props): any;
            interface Context$artifactData {
            }
            interface Context$territoryData {
            }
            interface Context$Props {
                headerContent?: any;
                headerInfo?: any;
                artifactData: Context$artifactData;
                territoryData?: Context$territoryData;
                territoryBaseUri?: string;
                setArtifactDataFunc?(...args: any): any;
                onSave?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                modal?: any;
            }
            function Context(props: Context$Props): any;
            function Controls(props: any): any;
            interface Header$artifactData {
            }
            interface Header$Props {
                content?: any;
                info?: any;
                artifactData?: Header$artifactData;
            }
            function Header(props: Header$Props): any;
        }
    }
    namespace Folder {
        namespace Bricks {
            interface Explorer$header {
            }
            interface Explorer$headerContent {
            }
            interface Explorer$help {
            }
            interface Explorer$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                viewType?: string;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                hideCreateActions?: boolean;
                createToModal?: boolean;
                cardView?: boolean;
                header?: Explorer$header | string;
                headerContent?: Explorer$headerContent;
                help?: Explorer$help | string;
                helpHidden?: boolean;
            }
            function Explorer(props: Explorer$Props): any;
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
            interface Info$territoryData {
            }
            interface Info$artifactData {
            }
            interface Info$Props {
                territoryData?: Info$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Info$artifactData;
                setArtifactDataFunc?(...args: any): any;
                goToArtifactFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Info(props: Info$Props): any;
        }
        namespace Core {
            interface Explorer$territoryData {
            }
            interface Explorer$artifactData {
            }
            interface Explorer$header {
            }
            interface Explorer$headerContent {
            }
            interface Explorer$help {
            }
            interface Explorer$Props {
                territoryBaseUri?: string;
                territoryData?: Explorer$territoryData;
                artifactData?: Explorer$artifactData;
                changeShownArtifactFunc?(...args: any): any;
                viewType?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                hideCreateActions?: boolean;
                createToModal?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: Explorer$header | string;
                headerContent?: Explorer$headerContent;
                help?: Explorer$help | string;
                helpHidden?: boolean;
            }
            function Explorer(props: Explorer$Props): any;
            interface ExplorerMenu$artifact {
            }
            interface ExplorerMenu$Props {
                changeViewTypeFunc?(...args: any): any;
                viewType?: string;
                artifact?: ExplorerMenu$artifact;
                hideCreateActions?: boolean;
            }
            function ExplorerMenu(props: ExplorerMenu$Props): any;
        }
        namespace Context {
            const ExplorerContext: any;
        }
    }
    namespace Unit {
        namespace Bricks {
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface UnitGroupList$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function UnitGroupList(props: UnitGroupList$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
                helpHidden?: boolean;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface UnitTrash$header {
            }
            interface UnitTrash$help {
            }
            interface UnitTrash$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitTrash$header | string;
                showDefaultHeader?: boolean;
                help?: UnitTrash$help | string;
                actionList?: any[];
            }
            function UnitTrash(props: UnitTrash$Props): any;
        }
        namespace Core {
            interface CreateUnitGroup$artifact {
            }
            interface CreateUnitGroup$Props {
                artifact?: CreateUnitGroup$artifact;
                ugPosition?: number;
                territoryBaseUri?: string;
                refresh?(...args: any): any;
            }
            function CreateUnitGroup(props: CreateUnitGroup$Props): any;
            interface CreateUnitForm$artifactData {
            }
            interface CreateUnitForm$territoryData {
            }
            interface CreateUnitForm$Props {
                artifactData?: CreateUnitForm$artifactData;
                territoryData?: CreateUnitForm$territoryData;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
                territoryBaseUri?: string;
            }
            function CreateUnitForm(props: CreateUnitForm$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                viewType?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
                helpHidden?: boolean;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
            interface Info$territoryData {
            }
            interface Info$artifactData {
            }
            interface Info$Props {
                territoryData?: Info$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Info$artifactData;
                setArtifactDataFunc?(...args: any): any;
                goToArtifactFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Info(props: Info$Props): any;
            interface Trash$territoryData {
            }
            interface Trash$artifactData {
            }
            interface Trash$Props {
                territoryData?: Trash$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Trash$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Trash(props: Trash$Props): any;
        }
    }
    namespace MetaModel {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface AppTypeInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function AppTypeInfo(props: AppTypeInfo$Props): any;
            interface ContextPropertyList$Props {
                territoryBaseUri?: string;
                artifactUri?: string;
                artifactId?: string;
                artifactCode?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: number;
                elevationHover?: number;
                bgStyle?: string;
                colorSchema?: string;
                contextType?: string;
                contextExpanded?: boolean;
            }
            function ContextPropertyList(props: ContextPropertyList$Props): any;
            interface AarList$Props {
                artifactUri?: string;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: number;
                elevationHover?: number;
                bgStyle?: string;
                colorSchema?: string;
                height?: number;
                contextType?: string;
                contextExpanded?: boolean;
            }
            function AarList(props: AarList$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
                territoryBaseUri?: string;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    namespace Person {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface DirectCastsBySideB$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideB(props: DirectCastsBySideB$Props): any;
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface BlackLists$header {
            }
            interface BlackLists$help {
            }
            interface BlackLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BlackLists$header | string;
                help?: BlackLists$help | string;
                helpHidden?: boolean;
            }
            function BlackLists(props: BlackLists$Props): any;
            interface WhiteLists$header {
            }
            interface WhiteLists$help {
            }
            interface WhiteLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: WhiteLists$header | string;
                help?: WhiteLists$help | string;
                helpHidden?: boolean;
            }
            function WhiteLists(props: WhiteLists$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
            interface Create$territoryData {
            }
            interface Create$artifactData {
            }
            interface Create$Props {
                territoryData?: Create$territoryData;
                artifactData?: Create$artifactData;
                goBack?(...args: any): any;
                descHidden?: boolean;
            }
            function Create(props: Create$Props): any;
        }
    }
    namespace Ai {
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
        }
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface DirectCastsBySideB$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideB(props: DirectCastsBySideB$Props): any;
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface BlackLists$header {
            }
            interface BlackLists$help {
            }
            interface BlackLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BlackLists$header | string;
                help?: BlackLists$help | string;
                helpHidden?: boolean;
            }
            function BlackLists(props: BlackLists$Props): any;
            interface WhiteLists$header {
            }
            interface WhiteLists$help {
            }
            interface WhiteLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: WhiteLists$header | string;
                help?: WhiteLists$help | string;
                helpHidden?: boolean;
            }
            function WhiteLists(props: WhiteLists$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
    }
    namespace UuEe {
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
        }
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface DirectCastsBySideB$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideB(props: DirectCastsBySideB$Props): any;
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface BlackLists$header {
            }
            interface BlackLists$help {
            }
            interface BlackLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BlackLists$header | string;
                help?: BlackLists$help | string;
                helpHidden?: boolean;
            }
            function BlackLists(props: BlackLists$Props): any;
            interface WhiteLists$header {
            }
            interface WhiteLists$help {
            }
            interface WhiteLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: WhiteLists$header | string;
                help?: WhiteLists$help | string;
                helpHidden?: boolean;
            }
            function WhiteLists(props: WhiteLists$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
    }
    namespace Thing {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface DirectCastsBySideB$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideB(props: DirectCastsBySideB$Props): any;
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface BlackLists$header {
            }
            interface BlackLists$help {
            }
            interface BlackLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BlackLists$header | string;
                help?: BlackLists$help | string;
                helpHidden?: boolean;
            }
            function BlackLists(props: BlackLists$Props): any;
            interface WhiteLists$header {
            }
            interface WhiteLists$help {
            }
            interface WhiteLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: WhiteLists$header | string;
                help?: WhiteLists$help | string;
                helpHidden?: boolean;
            }
            function WhiteLists(props: WhiteLists$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
                onSaveDone?(...args: any): any;
            }
            function Create(props: Create$Props): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    namespace Awsc {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                customInfo?: any[];
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
        }
        namespace Routes {
            interface Detail$artifactData {
            }
            interface Detail$Props {
                descHidden?: boolean;
                setArtifactDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    namespace Obc {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
                customInfo?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
        }
        namespace Routes {
            interface Detail$artifactData {
            }
            interface Detail$Props {
                descHidden?: boolean;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    namespace UnitGroup {
        namespace Bricks {
            interface BasicInfo$header {
            }
            interface BasicInfo$help {
            }
            interface BasicInfo$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                height?: number;
                elevation?: number;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BasicInfo$header | string;
                showDefaultHeader?: boolean;
                help?: BasicInfo$help | string;
                actionList?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface CastChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                searchBy?: string;
            }
            function CastChecker(props: CastChecker$Props): any;
            interface DirectCastsBySideA$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideA(props: DirectCastsBySideA$Props): any;
            interface DirectCastsBySideB$Props {
                artifactId?: string;
                artifactCode?: string;
                territoryBaseUri?: string;
            }
            function DirectCastsBySideB(props: DirectCastsBySideB$Props): any;
            interface UnitAccessChecker$header {
            }
            interface UnitAccessChecker$help {
            }
            interface UnitAccessChecker$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: UnitAccessChecker$header | string;
                help?: UnitAccessChecker$help | string;
            }
            function UnitAccessChecker(props: UnitAccessChecker$Props): any;
            interface Create$artifactData {
            }
            interface Create$Props {
                artifactData?: Create$artifactData;
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                onPrevious?(...args: any): any;
                onCancel?(...args: any): any;
            }
            function Create(props: Create$Props): any;
            function TerritoryGroupList(props: any): any;
        }
        namespace Routes {
            interface Detail$territoryData {
            }
            interface Detail$artifactData {
            }
            interface Detail$Props {
                territoryData?: Detail$territoryData;
                setTerritoryDataFunc?(...args: any): any;
                artifactData?: Detail$artifactData;
                setArtifactDataFunc?(...args: any): any;
                goToArtifactFunc?(...args: any): any;
                descHidden?: boolean;
            }
            function Detail(props: Detail$Props): any;
        }
    }
    const Lsi: {
        Common: {
            uuWhiteList: {
                cs: "WhiteList";
                en: "WhiteList";
            };
            uuBlackList: {
                cs: "BlackList";
                en: "BlackList";
            };
            yes: {
                cs: "Ano";
                en: "Yes";
            };
            no: {
                cs: "Ne";
                en: "No";
            };
        };
        ErrorMap: {
            wrongProps: {
                cs: "TODO: Component is not configured correctly. At least artifactUri and id/code must be set.";
                en: "Component is not configured correctly. At least artifactUri and id/code must be set.";
            };
            artifactIsNotFound: {
                cs: "Artefakt nenalezen.";
                en: "Artifact is not found.";
            };
            "authorization/artifactDoesNotExist": {
                cs: "Zvolený artefakt neexistuje.";
                en: "Artifact of given type does not exist.";
            };
            "uuRoleGroupIfc/listCastPath/invalidDtoIn": {
                cs: "Zadaný text není kód nebo id role nebo skupiny.";
                en: "Entered text isn't code or id of role or group.";
            };
            "uuRoleGroupIfc/listCastPath/sideADoesNotExist": {
                cs: "Role nebo skupina neexistuje.";
                en: "Role or group doesn't exists.";
            };
            "uuRoleGroupIfc/listCastPath/invalidSideAType": {
                cs: "Role nebo skupina neexistuje";
                en: "Entered role or group doesn't exists.";
            };
            "uuRoleGroupIfc/listCastPath/invalidSideAState": {
                cs: "Role nebo skupina není v správném stavu.";
                en: "Entered role or group is not in proper state.";
            };
            "uuRoleGroupIfc/listCastPath/sideBDoesNotExist": {
                cs: "Role nebo skupina neexistuje.";
                en: "Entered role or group doesn't exists.";
            };
            "uuRoleGroupIfc/listCastPath/invalidSideBType": {
                cs: "Role nebo skupina neexistuje.";
                en: "Entered role or group doesn't exists.";
            };
            "uuRoleGroupIfc/listCastPath/invalidSideBState": {
                cs: "Role nebo skupina není ve správném stavu.";
                en: "Entered role or group is not in proper state.";
            };
            "uuRoleGroupIfc/getUnitGroupCast/invalidDtoIn": {
                cs: "Nesprávný format vstupu.";
                en: "Invalid input format.";
            };
            "uuRoleGroupIfc/getUnitGroupCast/objectDoesNotExist": {
                cs: "Zadaná jednotka neexistuje.";
                en: "Given unit does not exist.";
            };
            "uuArtifactIfc/load/userIsNotAuthorized": {
                cs: "Přihlášený uživatel není autorizovaný.";
                en: "Logged user is not authorized to run this use case.";
            };
            "uuArtifactIfc/load/invalidDtoIn": {
                cs: "DtoIn není validní.";
                en: "Data is not valid.";
            };
            "uuArtifactIfc/restoreFromTrash/invalidDtoIn": {
                cs: "DtoIn není validní.";
                en: "Data is not valid.";
            };
            "uuArtifactIfc/restoreFromTrash/artifactCodeNotUnique": {
                cs: "Původní kód artefaktu je již použit.";
                en: "Former artifact code is already used.";
            };
            "uuArtifactIfc/restoreFromTrash/trashedHomeFolder": {
                cs: "Domovská složka artefaktu je v koši.";
                en: "Artifact's home folder is in trash.";
            };
            "authorization/accessDenied": {
                cs: "Uživatel nemá oprávnění.";
                en: "User is not authorized to execute the use case.";
            };
            "uuFolder/moveToTrash/notTrashedArtifactsInFolder": {
                cs: "Složka obsahuje artefakty, které nejsou v koši.";
                en: "Folder contains artifacts which are not in trash.";
            };
            errorAuthorization: {
                cs: "Uživatel není autorizovaný.";
                "en-gb": "The user is not authorized.";
            };
            errorUnexpected: {
                cs: "Neočekávaná chyba.";
                en: "Unexpected error.";
            };
            resourceNotFound: {
                cs: "Zdroj nenalezen";
                en: "Resource not found";
            };
            wrongRoleError: {
                cs: "Role nevyhovuje požadovanému formátu";
                en: "Role does not follow the required format";
            };
            roleExistsAlready: {
                cs: "Tato role je již přidaná";
                en: "Such role is added already";
            };
            solverNotFound: {
                cs: "Takový řešitel není na aktivitě";
                en: "Such solver is not on activity";
            };
            locationDoesNotExist: {
                cs: "Zadané umístění neexistuje.";
                en: "Entered location does not exist.";
            };
            invalidHomeFolderState: {
                cs: "Domácí složka není v aktivním stavu.";
                en: "The home folder is not in any active states.";
            };
            userIsNotAuthorizedToAddArtifact: {
                cs: "Nemáte oprávnění na přidání do zvolené složky.";
                en: "You are not authorized to add to entered home folder.";
            };
            invalidResponsibleRoleType: {
                cs: "Odpovědná role není typu uuRoleIfc.";
                en: "Responsible role does not meet uuRoleIfc.";
            };
            invalidResponsibleRoleState: {
                cs: "Odpovědná role není v aktivním stavu.";
                en: "Responsible role is not in an active state.";
            };
            authoritiesPermissionUpdated: {
                cs: "Oprávnění na první profil musí být nastaveno pro skupinu jednotky Authorities.";
                en: "Permission for the strongest uuAppType profile for Authorities unit group was added.";
            };
            artifactDoesNotExist: {
                cs: "Jeden nebo více zadaných artefaktů neexistuje.";
                en: "One or more entered artifacts do not exist.";
            };
            invalidArtifactState: {
                cs: "Artefakt není v aktivním stavu.";
                en: "Artifact is not in any active states.";
            };
            invalidPermissionMatrix: {
                cs: "Implicitní oprávnění jsou definována pro více nebo méně profilů než je na artefaktu.";
                en: "Implicit permissions are defined for less or more profiles than are defined for the artifact.";
            };
            folderDaoCreateFailed: {
                cs: "Artefakt se zadaným kódem již existuje. Prosím změňte kód.";
                en: "The code of the artifact already exists. Please change the code.";
            };
            artifactIfcDaoCreateFailedCodeNotUnique: {
                cs: "Artefakt se zadaným kódem již existuje. Prosím změňte kód.";
                en: "The code of the artifact already exists. Please change the code.";
            };
            explicitPermissionDaoCreateManyFailedUnit: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            explicitPermissionDaoCreateManyFailedFolder: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            invalidTypeState: {
                cs: "Artefakt není v aktivním stavu.";
                en: "Object type is not in active state.";
            };
            invalidUgMask: {
                cs: "Maska skupiny jednotky není správně nastavena.";
                en: "Unit group mask is not set properly.";
            };
            territoryGroupDoesNotExist: {
                cs: "Skupina territoria neexistuje.";
                en: "The territory group doesn't exist.";
            };
            invalidTerritoryGroupState: {
                cs: "Skupina territoria není v požadovaném stavu.";
                en: "The territory group is not in proper state.";
            };
            unitGroupDaoCreateFailed: {
                cs: "Skupina jednotky již existuje.";
                en: "The Unit group already exists.";
            };
            unitDaoUpdateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            territoryGroupDaoCreateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            sideBDoesNotExist: {
                cs: "Zadaný artefakt neexistuje.";
                en: "Entered artifact does not exist.";
            };
            invalidSideBType: {
                cs: "Zadaný artefakt není uuRoleInterface.";
                en: "Entered artifact does not meet uuRoleInterface.";
            };
            invalidSideBState: {
                cs: "Zadaný artefakt není v aktivním stavu.";
                en: "Entered artifact is not in any active states.";
            };
            roleDaoCreateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            groupDaoCreateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            invalidWhiteListTypeState: {
                cs: "Whitelist není v aktivním stavu.";
                en: "Type of WhiteList is not in any active states.";
            };
            invalidHomeFolderType: {
                cs: "Zadaný artefakt není typu Složka.";
                en: "Entered artifact is not Folder type.";
            };
            homeFolderIsNotInWhiteListsFolder: {
                cs: "Domácí složka není umístěna v uuB&wLists/whiteLists.";
                en: "Home folder is not located in uuB&wLists/whiteLists.";
            };
            "responsibleRoleIsNotB&WListAuthority": {
                cs: "Odpovědná role musí být odpovědná role za složku B&WListAuthority.";
                en: "Responsible role is not set by config B&WListAuthority.";
            };
            "invalidArtifactState/objectNotInProperState": {
                cs: "Artefakt není v aktivním stavu.";
                en: "Artifact is not in any acive states.";
            };
            whiteListDaoCreateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            invalidBlackListTypeState: {
                cs: "Blacklist není v aktivním stavu.";
                en: "Type of BlackList is not in any active states.";
            };
            homeFolderIsNotInBlackListsFolder: {
                cs: "Domácí složka není umístěna v uuB&wLists/blackLists.";
                en: "Home folder is not located in uuB&wLists/blackLists.";
            };
            blackListDaoCreateFailed: {
                cs: "Vytvoření artefaktu selhalo kvůli neočekávané chybě.";
                en: "The artifact wasn't created because of an unexpected error.";
            };
            invalidDtoIn: {
                cs: "Nevalidní vstup.";
                en: "Invalid input format.";
            };
            "authorization/useCaseDoesNotExist": {
                cs: "Zadaný useCase neexistuje.";
                en: "Given useCase doesn't exist.";
            };
            notSupportedType: {
                cs: "Tato funkčnost není podporována pro daný typ artefaktu.";
                en: "This is not supported for given artifact type.";
            };
        };
        Forms: {
            createArtifactHeader: {
                cs: "Vytvoř artefakt";
                en: "Create artifact";
            };
            buttonSubmit: {
                cs: "Uložit";
                en: "Save";
            };
            buttonCancel: {
                cs: "Zrušit";
                en: "Cancel";
            };
            buttonAdd: {
                cs: "Přidat";
                en: "Add";
            };
            buttonSetState: {
                cs: "Nastavit stav";
                en: "Set state";
            };
            buttonSetResponsibleRole: {
                cs: "Změnit kompetentní roli";
                en: "Set responsible role";
            };
            buttonSetFolder: {
                cs: "Nastavit složku";
                en: "Set folder";
            };
            castRemoveDone: {
                cs: "Obsazení úspěšně odebráno.";
                en: "Cast successfully removed.";
            };
            castAddDone: {
                cs: "Obsazení úspěšně přidáno.";
                en: "Cast successfully added.";
            };
        };
        Tools: {
            copyComponentTag: {
                cs: "Komponenta zkopírována do schránky.";
                en: "Component copied to clipboard.";
            };
            copyComponent: {
                cs: "Zkopíruj komponentu";
                en: "Copy component";
            };
        };
        trash: {
            successfullyRestore: {
                cs: "Artefakt byl úspěšně obnoven.";
                en: "Artifact successfully restored.";
            };
            moveTo: {
                cs: "Artefakt byl přesunut do";
                en: "Artifact has been moved to";
            };
            trash: {
                cs: "koše";
                en: "trash";
            };
            return: {
                cs: "Vrátit";
                en: "Return";
            };
            back: {
                cs: "zpět";
                en: "back";
            };
            restoreArtifact: {
                cs: "Obnovit artefakt";
                en: "Restore arifact";
            };
            newCode: {
                cs: "Nový kód";
                en: "New code";
            };
            restore: {
                cs: "Obnovit";
                en: "restore";
            };
            code: {
                cs: "Kód";
                en: "Code";
            };
            generateNewCode: {
                cs: "Vygenerovat kód automaticky pokud je obsazený";
                en: "Generate code automatically if is already used";
            };
        };
        tooltip: {
            trashButton: {
                cs: "Přesunou do koše";
                en: "Move to trash";
            };
            restoreButton: {
                cs: "Obnovit z koše";
                en: "Restore from trash";
            };
        };
    };
    const Tools: any;
    namespace Artifact {
        namespace Bricks {
        }
        namespace Routes {
            interface ImplicitPermissions$artifact {
            }
            interface ImplicitPermissions$Props {
                artifact?: ImplicitPermissions$artifact;
                profiles?: any[];
                states?: any[];
            }
            function ImplicitPermissions(props: ImplicitPermissions$Props): any;
            interface ExplicitPermissions$artifact {
            }
            interface ExplicitPermissions$Props {
                artifact?: ExplicitPermissions$artifact;
                profiles?: any[];
                states?: any[];
            }
            function ExplicitPermissions(props: ExplicitPermissions$Props): any;
        }
        namespace Core {
        }
    }
    namespace AccessRoleIfc {
        namespace Core {
            interface TerritoryGroupListImpl$header {
            }
            interface TerritoryGroupListImpl$headerContent {
            }
            interface TerritoryGroupListImpl$help {
            }
            interface TerritoryGroupListImpl$Props {
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: TerritoryGroupListImpl$header | string;
                headerContent?: TerritoryGroupListImpl$headerContent;
                help?: TerritoryGroupListImpl$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupListImpl(props: TerritoryGroupListImpl$Props): any;
            interface BlackListsImpl$header {
            }
            interface BlackListsImpl$headerContent {
            }
            interface BlackListsImpl$help {
            }
            interface BlackListsImpl$Props {
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: BlackListsImpl$header | string;
                headerContent?: BlackListsImpl$headerContent;
                help?: BlackListsImpl$help | string;
                helpHidden?: boolean;
            }
            function BlackListsImpl(props: BlackListsImpl$Props): any;
            interface WhiteListsImpl$header {
            }
            interface WhiteListsImpl$headerContent {
            }
            interface WhiteListsImpl$help {
            }
            interface WhiteListsImpl$Props {
                territoryBaseUri?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: WhiteListsImpl$header | string;
                headerContent?: WhiteListsImpl$headerContent;
                help?: WhiteListsImpl$help | string;
                helpHidden?: boolean;
            }
            function WhiteListsImpl(props: WhiteListsImpl$Props): any;
        }
        namespace Bricks {
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
                helpHidden?: boolean;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
            interface WhiteLists$header {
            }
            interface WhiteLists$help {
            }
            interface WhiteLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: WhiteLists$header | string;
                help?: WhiteLists$help | string;
                helpHidden?: boolean;
            }
            function WhiteLists(props: WhiteLists$Props): any;
            interface BlackLists$header {
            }
            interface BlackLists$help {
            }
            interface BlackLists$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: BlackLists$header | string;
                help?: BlackLists$help | string;
                helpHidden?: boolean;
            }
            function BlackLists(props: BlackLists$Props): any;
        }
    }
    namespace RoleGroupIfc {
        namespace Bricks {
            interface Casts$help {
            }
            interface Casts$Props {
                artifactId?: string;
                artifactCode?: string;
                artifactUri?: string;
                territoryBaseUri?: string;
                header?: string;
                showDefaultHeader?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                cardView?: boolean;
                help?: Casts$help | string;
                helpHidden?: boolean;
                searchBy?: string;
            }
            function Casts(props: Casts$Props): any;
        }
        namespace Core {
            interface AddCastForm$artifactData {
            }
            interface AddCastForm$Props {
                artifactData?: AddCastForm$artifactData;
                territoryBaseUri?: string;
                refreshDataFunc?(...args: any): any;
                refreshData?(...args: any): any;
            }
            function AddCastForm(props: AddCastForm$Props): any;
            interface DirectCastsBySideAImpl$artifactData {
            }
            interface DirectCastsBySideAImpl$territoryData {
            }
            interface DirectCastsBySideAImpl$Props {
                artifactData?: DirectCastsBySideAImpl$artifactData;
                territoryBaseUri?: string;
                territoryData?: DirectCastsBySideAImpl$territoryData;
                setArtifactDataFunc?(...args: any): any;
                actionList?: any[];
                refreshData?(...args: any): any;
                showIcon?: boolean;
                showAddCast?: boolean;
            }
            function DirectCastsBySideAImpl(props: DirectCastsBySideAImpl$Props): any;
            interface DirectCastsBySideBImpl$artifactData {
            }
            interface DirectCastsBySideBImpl$territoryData {
            }
            interface DirectCastsBySideBImpl$Props {
                artifactData?: DirectCastsBySideBImpl$artifactData;
                territoryBaseUri?: string;
                territoryData?: DirectCastsBySideBImpl$territoryData;
                showIcon?: boolean;
            }
            function DirectCastsBySideBImpl(props: DirectCastsBySideBImpl$Props): any;
            interface UnitAccessCheckerImpl$artifactData {
            }
            interface UnitAccessCheckerImpl$territoryData {
            }
            interface UnitAccessCheckerImpl$header {
            }
            interface UnitAccessCheckerImpl$headerContent {
            }
            interface UnitAccessCheckerImpl$help {
            }
            interface UnitAccessCheckerImpl$Props {
                artifactData?: UnitAccessCheckerImpl$artifactData;
                territoryData?: UnitAccessCheckerImpl$territoryData;
                territoryBaseUri?: string;
                changeShownArtifactFunc?(...args: any): any;
                viewType?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                hideCreateActions?: boolean;
                createToModal?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: UnitAccessCheckerImpl$header | string;
                headerContent?: UnitAccessCheckerImpl$headerContent;
                help?: UnitAccessCheckerImpl$help | string;
                helpHidden?: boolean;
                actionList?: any[];
            }
            function UnitAccessCheckerImpl(props: UnitAccessCheckerImpl$Props): any;
            namespace AddRoleCastForm {
                interface Content$artifactData {
                }
                interface Content$territoryData {
                }
                interface Content$castListData {
                }
                interface Content$Props {
                    artifactData?: Content$artifactData;
                    setArtifactDataFunc?(...args: any): any;
                    territoryBaseUri?: string;
                    territoryData?: Content$territoryData;
                    castListData?: Content$castListData;
                    refreshDataFunc?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$artifactData {
                }
                interface Context$territoryData {
                }
                interface Context$castListData {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    artifactData?: Context$artifactData;
                    setArtifactDataFunc?(...args: any): any;
                    territoryBaseUri?: string;
                    territoryData?: Context$territoryData;
                    castListData?: Context$castListData;
                    refreshDataFunc?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$Props {
                    content?: any;
                    info?: any;
                }
                function Header(props: Header$Props): any;
            }
            namespace AddGroupCastForm {
                interface Content$artifactData {
                }
                interface Content$territoryData {
                }
                interface Content$Props {
                    artifactData?: Content$artifactData;
                    setArtifactDataFunc?(...args: any): any;
                    territoryBaseUri?: string;
                    territoryData?: Content$territoryData;
                    refreshDataFunc?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$artifactData {
                }
                interface Context$territoryData {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    artifactData?: Context$artifactData;
                    setArtifactDataFunc?(...args: any): any;
                    territoryBaseUri?: string;
                    territoryData?: Context$territoryData;
                    refreshDataFunc?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$Props {
                    content?: any;
                    info?: any;
                }
                function Header(props: Header$Props): any;
            }
            interface Casts$territoryData {
            }
            interface Casts$artifactData {
            }
            interface Casts$header {
            }
            interface Casts$headerContent {
            }
            interface Casts$help {
            }
            interface Casts$Props {
                territoryBaseUri?: string;
                territoryData?: Casts$territoryData;
                artifactData?: Casts$artifactData;
                changeShownArtifactFunc?(...args: any): any;
                viewType?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                hideCreateActions?: boolean;
                createToModal?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: Casts$header | string;
                headerContent?: Casts$headerContent;
                help?: Casts$help | string;
                helpHidden?: boolean;
                searchBy?: string;
                actionList?: any[];
            }
            function Casts(props: Casts$Props): any;
        }
        const Lsi: {
            RemoveCast: {
                "uuUnitGroup/removeCast/invalidDtoIn": {
                    cs: "Nevalidní vstup.";
                    en: "DtoIn is not valid.";
                };
                "uuUnitGroup/removeCast/invalidSideAState": {
                    cs: "Skupina jednotky, do které chcete vytvořit obsazení je v nevalidním stavu.";
                    "en-gb": "The unit group is in invalid state.";
                };
                "uuUnitGroup/removeCast/sideBDoesNotExist": {
                    cs: "Zadaný artefakt neexistuje.";
                    "en-gb": "Given artifact does not exist";
                };
                "uuUnitGroup/removeCast/castDoesNotExist": {
                    cs: "Zadané obsazení neexistuje.";
                    "en-gb": "Given cast does not exist";
                };
                "uuUnitGroup/removeCast/sideBIsResponsibleRoleSideA": {
                    cs: "Nelze odobsadit roli kompetentní za jednotku ze skupiny jednotky Authorities.";
                    "en-gb": "It is not possible to remove responsible role of Unit from Authorities Unit Group.";
                };
                "uuGroup/removeCast/invalidDtoIn": {
                    cs: "Nevalidní vstup.";
                    en: "DtoIn is not valid.";
                };
                "uuGroup/removeCast/invalidSideAState": {
                    cs: "Skupina, do které chcete vytvořit obsazení je v nevalidním stavu.";
                    "en-gb": "The group is in invalid state.";
                };
                "uuGroup/removeCast/sideBDoesNotExist": {
                    cs: "Zadaný artefakt neexistuje.";
                    "en-gb": "Given artifact does not exist";
                };
                "uuGroup/removeCast/castDoesNotExist": {
                    cs: "Zadané obsazení neexistuje.";
                    "en-gb": "Given cast does not exist";
                };
                "uuRoleIfc/removeCast/invalidDtoIn": {
                    cs: "Nevalidní vstup.";
                    en: "DtoIn is not valid.";
                };
                "uuRoleIfc/removeCast/sideBDoesNotExist": {
                    cs: "Zadaná strana B neexistuje.";
                    en: "Entered SideB artifact does not exist.";
                };
                "uuRoleIfc/removeCast/castDoesNotExist": {
                    cs: "Zadané obsazení neexistuje.";
                    en: "Entered cast (SideA, SideB) does not exist.";
                };
                "uuRoleIfc/removeCast/sideAHasExistingCast": {
                    cs: "Tato strana je obsazena do jiné role či skupiny.";
                    en: "Role on sideA has existing cast.";
                };
                "uuRoleIfc/removeCast/isNotLastCast": {
                    cs: "Toto není poslední obsazení mezi stranou A a stranou B.";
                    en: "Is not last cast between sideA and sideB. Last cast must be main.";
                };
                "uuRoleIfc/removeCast/artifactResponsibleRole": {
                    cs: "Role je kompetentní alespoň za jeden neuzavřený artefakt.";
                    en: "SideA is responsible role for one or more artifact.";
                };
                "uuRoleIfc/removeCast/activityParticipant": {
                    cs: "Role je účastník na jedné nebo více aktivitách.";
                    en: "Role SideA is participant in one or more activites.";
                };
                "uuRoleIfc/removeCast/roleIsMainByAnotherRole": {
                    cs: "Role má hlavní obsazení do jiné role.";
                    en: "SideA is main by another role";
                };
                "uuRoleIfc/removeCast/castDaoDeleteFailed": {
                    cs: "Smazání obsazení selhalo.";
                    en: "Cast delete failed.";
                };
                "uuRoleIfc/removeCast/roleDaoUpdateFailed": {
                    cs: "Aktualizace role selhala.";
                    en: "Role update failed.";
                };
                successFullyRemoved: {
                    cs: "Obsazení úspěšně odebráno.";
                    en: "Cast successfully removed.";
                };
            };
            AddCast: {
                "uuGroupIfc/addCast/invalidDtoIn": {
                    cs: "Nevalidní vstup.";
                    en: "DtoIn is not valid.";
                };
                "uuGroupIfc/addCast/invalidSideAState": {
                    cs: "Skupina není ve správném stavu.";
                    en: "Entered SideA artifact is not in proper state.";
                };
                "uuGroupIfc/addCast/castLimitReached": {
                    cs: "Bylo dosaženo maximálního počtu obsazení.";
                    en: "Maximum number of cast was reached.";
                };
                "uuGroupIfc/addCast/sideBDoesNotExist": {
                    cs: "Zadaná strana B neexistuje.";
                    en: "Entered SideB artifact does not exist.";
                };
                "uuGroupIfc/addCast/invalidSideBTypeRoleGroupIfc": {
                    cs: "Zadaná strana B je nevalidního typu.";
                    en: "Entered SideB artifact is not of proper type.";
                };
                "uuGroupIfc/addCast/invalidSideBTypeTerritoryGroup": {
                    cs: "Zadaná strana B je nevalidního typu.";
                    en: "Entered SideB artifact is not of proper type.";
                };
                "uuGroupIfc/addCast/invalidSideBState": {
                    cs: "Zadaná strana B je v nevalidním stavu";
                    en: "Entered SideB artifact is not in proper state.";
                };
                "uuGroupIfc/addCast/castAlreadyExists": {
                    cs: "Obsazení nelze vytvořit, protože již existuje.";
                    en: "Cast cannot be created because it already exists.";
                };
                "uuGroupIfc/addCast/cyclicCast": {
                    cs: "Obsazení nelze vytvořit, protože by vzniklo cyklické obsazení.";
                    en: "Cast cannot be created because cast of SideB RoleIfc to SideA RoleIfc already exists.";
                };
                "uuGroupIfc/addCast/castDaoCreateFailed": {
                    cs: "Vytvoření obsazení selhalo.";
                    en: "Cast create failed.";
                };
                "uuRoleIfc/addCast/invalidDtoIn": {
                    cs: "Nevalidní vstup.";
                    en: "DtoIn is not valid.";
                };
                "uuRoleIfc/addCast/invalidSideAState": {
                    cs: "Role není ve správném stavu.";
                    en: "Entered SideA artifact is not in proper state.";
                };
                "uuRoleIfc/addCast/castLimitReached": {
                    cs: "Bylo dosaženo maximálního počtu obsazení.";
                    en: "Maximum number of cast was reached.";
                };
                "uuRoleIfc/addCast/sideBDoesNotExist": {
                    cs: "Zadaná strana B neexistuje.";
                    en: "Entered SideB artifact does not exist.";
                };
                "uuRoleIfc/addCast/invalidSideBType": {
                    cs: "Zadaná strana B je nevalidního typu.";
                    en: "Entered SideB artifact is not of proper type.";
                };
                "uuRoleIfc/addCast/invalidSideBState": {
                    cs: "Zadaná strana B je v nevalidním stavu";
                    en: "Entered SideB artifact is not in proper state.";
                };
                "uuRoleIfc/addCast/castAlreadyExists": {
                    cs: "Obsazení nelze vytvořit, protože již existuje.";
                    en: "Cast cannot be created because it already exists.";
                };
                "uuRoleIfc/addCast/cyclicCast": {
                    cs: "Obsazení nelze vytvořit, protože by vzniklo cyklické obsazení.";
                    en: "Cast cannot be created because cast of SideB RoleIfc to SideA RoleIfc already exists.";
                };
                "uuRoleIfc/addCast/castDaoCreateFailed": {
                    cs: "Vytvoření obsazení selhalo.";
                    en: "Cast create failed.";
                };
                "uuRoleIfc/addCast/castCacheServiceAddFailed": {
                    cs: "Vytvoření obsazení selhalo.";
                    en: "Cast create failed.";
                };
                successFullyAdded: {
                    cs: "Obsazení úspěšně přidáno.";
                    en: "Cast successfully added.";
                };
            };
            Common: {
                errorAuthorization: {
                    cs: "Uživatel není autorizovaný.";
                    "en-gb": "The user is not authorized.";
                };
                errorUnexpected: {
                    cs: "Neočekávaná chyba.";
                    "en-gb": "Unexpected exception.";
                };
                removeCast: {
                    cs: "Odebrat";
                    "en-gb": "Remove";
                };
                addCast: {
                    cs: "Přidat obsazení";
                    "en-gb": "Add cast";
                };
            };
        };
    }
    namespace RoleIfc {
        namespace Core {
        }
        namespace Lsi {
        }
    }
    namespace GroupIfc {
        namespace Bricks {
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                territoryBaseUri?: string;
                artifactId?: string;
                artifactCode?: string;
                height?: number;
                artifactUri?: string;
                contextType?: string;
                contextExpanded?: boolean;
                elevation?: number;
                showDefaultHeader?: boolean;
                elevationHover?: number;
                borderRadius?: number;
                bgStyle?: string;
                colorSchema?: string;
                cardView?: boolean;
                header?: TerritoryGroupList$header | string;
                help?: TerritoryGroupList$help | string;
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
        }
        namespace Core {
            namespace AddTerritoryGroupCastForm {
                interface Content$artifactData {
                }
                interface Content$Props {
                    artifactData?: Content$artifactData;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Content(props: Content$Props): any;
                interface Context$artifactData {
                }
                interface Context$Props {
                    headerContent?: any;
                    headerInfo?: any;
                    artifactData?: Context$artifactData;
                    territoryBaseUri?: string;
                    refreshData?(...args: any): any;
                    onSave?(...args: any): any;
                    onCancel?(...args: any): any;
                    onSaveDone?(...args: any): any;
                    onSaveFail?(...args: any): any;
                    modal?: any;
                }
                function Context(props: Context$Props): any;
                function Controls(props: any): any;
                interface Header$Props {
                    content?: any;
                    info?: any;
                }
                function Header(props: Header$Props): any;
            }
            interface TerritoryGroupList$artifactData {
            }
            interface TerritoryGroupList$territoryData {
            }
            interface TerritoryGroupList$header {
            }
            interface TerritoryGroupList$headerContent {
            }
            interface TerritoryGroupList$help {
            }
            interface TerritoryGroupList$Props {
                artifactData?: TerritoryGroupList$artifactData;
                territoryData?: TerritoryGroupList$territoryData;
                territoryBaseUri?: string;
                changeShownArtifactFunc?(...args: any): any;
                viewType?: string;
                height?: number;
                contextType?: "basic" | "full" | "none";
                contextExpanded?: boolean;
                hideCreateActions?: boolean;
                createToModal?: boolean;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: number;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                borderRadius?: number | string;
                colorSchema?: string;
                inlineHref?: string;
                showDefaultHeader?: boolean;
                cardView?: boolean;
                copyTagFunc?(...args: any): any;
                header?: TerritoryGroupList$header | string;
                headerContent?: TerritoryGroupList$headerContent;
                help?: TerritoryGroupList$help | string;
                actionList?: any[];
            }
            function TerritoryGroupList(props: TerritoryGroupList$Props): any;
        }
        namespace Lsi {
        }
    }
    interface Loader$data {
    }
    interface Loader$headers {
    }
    interface Loader$Props {
        uri?: string;
        method?: "get" | "post";
        data?: Loader$data;
        headers?: Loader$headers;
        authenticate?: boolean;
        onLoad?(...args: any): any;
        loading?: any;
        error?: ((...args: any)=>any) | any;
        reloadInterval?: number;
        waitForResult?: boolean;
        isExplorer?: boolean;
    }
    function Loader(props: Loader$Props): any;
    namespace Loader {
        function createContext(): any;
    }
}