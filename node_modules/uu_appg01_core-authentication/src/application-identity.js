"use strict";

/**
 * The identity of an application.
 * @deprecated Use ClientIdentity
 */
class ApplicationIdentity {
  /**
   * Creates new instance of application identity.
   * @param {String} uuIdentity Unique identifier of the client application
   * @param {Object} data Additional identity data.
   * @param {String} data.name Name of the application
   * @param {String} data.code Code of the application
   * @private
   */
  constructor(uuIdentity, data = {}) {
    if (typeof data === "string") {
      this._code = uuIdentity;
      this._name = data;
    } else if (data) {
      this._uuIdentity = uuIdentity;
      this._code = data.code;
      this._name = data.name;
    }
  }

  /**
   * Returns unique identifier of the client application.
   * @returns {String|null} Unique identifier of the client application
   */
  getUuIdentity() {
    return this._uuIdentity;
  }

  /**
   * Returns unique identifier of the application.
   * @returns {String} String representation of the unique identifier
   */
  getCode() {
    return this._code;
  }

  /**
   * Returns name of the application.
   * @returns {String|null} Name of the application
   */
  getName() {
    return this._name;
  }
}

module.exports = ApplicationIdentity;
