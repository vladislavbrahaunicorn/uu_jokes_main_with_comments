"use strict";

const { BaseError, Config } = require("uu_appg01_core-utils");

const DEFAULT_PROVIDER_PARAM = "uu_app_default_authn_provider";

/**
 * Component encapsulating authentication process.
 */
class AuthenticationService {
  /**
   * @returns {string} Name of configuration parameter for accessing default realization of authentication service.
   */
  static get DEFAULT_PROVIDER_PARAM() {
    return DEFAULT_PROVIDER_PARAM;
  }

  /**
   * Authenticates user.
   * @param {*} credentials User credentials to be verified
   * @param {String|null} scope Scope (single value or array) representing functionality to be invoked within session.
   * @returns {Promise<Session>} User session for passed user credentials.
   * @throws {InvalidCredentials} In case credentials are not valid.
   * @throws {AuthenticationError} In case authentication fails.
   */
  static async authenticate(credentials, scope = null) {
    let realization = AuthenticationService.get();
    if (scope) {
      return await realization.authenticate(credentials, scope);
    } else {
      return await realization.authenticate(credentials);
    }
  }

  /**
   * Returns particular realization of authentication service.
   * @param {String} realizationName Name of required authentication service realization
   * @returns {*} Object responding to "authenticate" method
   * @throws {BaseError} In case realization with given name does not exist
   */
  static get(realizationName = null) {
    let name = realizationName || Config.get(DEFAULT_PROVIDER_PARAM);
    if (!name) {
      throw new BaseError(`Unable to get default authentication provider. Configuration parameter ${DEFAULT_PROVIDER_PARAM} is not set.`);
    }
    let realization = AuthenticationService._realizations[name];
    if (realization) {
      return realization;
    } else {
      throw new BaseError(`There is no authentication provider with name "${name}".`);
    }
  }

  /**
   * Registers custom realization of authentication service.
   * @param {String} realizationName Custom authentication service realization name
   * @param {*} realization Object responding to "authenticate" method
   * @private
   */
  static _register(realizationName, realization) {
    AuthenticationService._realizations[realizationName] = realization;
  }
}

AuthenticationService._realizations = {};

module.exports = AuthenticationService;
