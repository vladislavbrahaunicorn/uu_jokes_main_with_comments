"use strict";

const UntrustedCredentials = require("./errors/untrusted-credentials.js");

/**
 * Object providing result of authentication process. It holds information about the user's identity, the information
 * about the application and also attributes related to authentication process itself.
 */
class Session {
  /**
   * Creates new instance of session.
   * @param {Object} data Authentication data.
   * @param {String} data.id Unique session instance ID.
   * @param {String} data.authenticationId Unique ID of authentication process (in whose scope was this session instance created).
   * @param {Date} data.authenticationTime Time of authentication process invocation (in whose scope was this session instance created).
   * @param {number} data.authenticationLevelOfAssurance Numeric representation of the means of authentication
   * @param {Identity} data.identity User identity
   * @param {ApplicationIdentity} data.applicationIdentity Application identity (deprecated, use clientIdentity)
   * @param {ClientIdentity} data.clientIdentity Client Application identity
   * @param {Object} data.attributes Implementation specific session attributes
   * @private
   */
  constructor(data = {}) {
    this._id = data.id || null;
    this._authenticationId = data.authenticationId || null;
    this._authenticationTime = data.authenticationTime || new Date();
    this._authenticationLevelOfAssurance = data.authenticationLevelOfAssurance
      ? parseInt(data.authenticationLevelOfAssurance)
      : 0;
    this._identity = data.identity;
    this._clientIdentity = data.clientIdentity;
    this._applicationIdentity = data.applicationIdentity;
    this._attributes = data.attributes || {};
    this._authenticated = !!(
      this._authenticationLevelOfAssurance &&
      (this._identity || this._applicationIdentity || this._clientIdentity)
    );
  }

  /**
   * Returns unique session instance ID.
   * @returns {String|null} Session ID.
   */
  getId() {
    return this._id;
  }

  /**
   * Returns unique ID of authentication process (in whose scope was this session instance created).
   * @returns {String|null} Unique ID of global session
   */
  getAuthenticationId() {
    return this._authenticationId;
  }

  /**
   * Returns the time of authentication process invocation (in whose scope was this session instance created).
   * @returns {Date|null} Time of authentication
   */
  getAuthenticationTime() {
    return this._authenticationTime;
  }

  /**
   * Returns the means of authentication (type of credentials) for current user.
   * @returns {number} Numeric representation of the means of authentication
   */
  getAuthenticationLevelOfAssurance() {
    return this._authenticationLevelOfAssurance;
  }

  /**
   * Returns user identity.
   * @returns {Identity} User identity
   */
  getIdentity() {
    return this._identity;
  }

  /**
   * Returns client application identity.
   * @returns {ClientIdentity|null} Client application identity
   */
  getClientIdentity() {
    return this._clientIdentity;
  }

  /**
   * Returns application identity.
   * @returns {ApplicationIdentity|null} Application identity
   * @deprecated Use getClientIdentity.
   */
  getApplicationIdentity() {
    return this._applicationIdentity;
  }

  /**
   * Returns true if the user is not anonymous.
   * @returns {boolean} True if user is not anonymous
   */
  isAuthenticated() {
    return !!this._authenticated;
  }

  /**
   * Returns call token scope based on URI of invoked command. This value may be then used for obtaining of
   * actual call token provided by method getCallToken.
   * @param {String|URI} uri URI of command to be invoked (for which to obtain call token scope).
   * @param {Object} opts Call token options.
   * @param {String|null} otps.scopeMode Scope mode (one of [useCase, allUseCases, none]).
   * @returns {Promise<String>} Call token scope
   */
  async getCallTokenScope(uri, opts = {}) {
    // Default implementation only removes parameters from given URI.
    return uri ? uri.toString().split("?")[0] : uri;
  }

  /**
   * Returns token to be used by client to call functionality provided by other application server.
   * @param {String|URI} scope Scope (single value or array) representing functionality to be invoked with token.
   * @param {Object} opts Call token options.
   * @param {boolean|null} otps.useTokenExchange Flag if call should use new token (derived from existing) or directly reuse existing one.
   * @param {boolean|null} opts.excludeAuthenticationType Flag if call token should be returned without authentication type prefix.
   * @param {boolean|null} opts.callTokenType Variant of call token (possible values depends on actual authentication implementation).
   * @returns {Promise<String>} Call token
   */
  async getCallToken(scope, opts = {}) {
    throw new Error("Method not implemented.");
  }

  /**
   * Checks if processed authentication conforms to required constraints.
   * @param {Object} constraints Session constraint object
   * @param {number|null} constraints.maxAuthenticationAge Maximum age of authentication in seconds
   * @param {number|null} constraints.minAuthenticationLevelOfAssurance Minimum required level of assurance
   * @throws {UntrustedCredentials} In case processed authentication does not conform to required constraints.
   */
  assertTrustiness(constraints = {}) {
    let mla = constraints.minAuthenticationLevelOfAssurance;
    if (mla != undefined && mla != null && mla > this.getAuthenticationLevelOfAssurance()) {
      throw new UntrustedCredentials(this, "Minimum login level of assurance not met.");
    }
    let maxAge = constraints.maxAuthenticationAge;
    if (maxAge != undefined && maxAge != null) {
      let epochAuthTime = this.getAuthenticationTime().getTime() / 1000;
      let epochCurTime = Date.now / 1000;
      if (epochAuthTime + maxAge < epochCurTime) {
        throw new UntrustedCredentials(this, "User re-authentication required.");
      }
    }
  }

  /**
   * Returns custom session attribute (actual attributes are dependant on particular session instance based on
   * technology used for authentication process)
   * @param {String} name Name of session attribute
   * @returns {*} Attribute value
   */
  getAttribute(name) {
    return this._attributes[name];
  }

  /**
   * Performs the log out of the user.
   */
  close() {
    this._authenticated = false;
  }

  /**
   * Serializes user and client data. Does not contain ids so that result can
   * be used for comparison between multiple instances of session.
   * @returns {String}
   */
  toJSON() {
    return {
      identity: this._identity,
      clientIdentity: this._clientIdentity,
      applicationIdentity: this._applicationIdentity
    }
  }

}

module.exports = Session;
