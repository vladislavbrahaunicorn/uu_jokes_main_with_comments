/**
 * @fileoverview find deprecated mixins and suggests the solution
 * @author Martin FarkaÅ¡
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const Selectors = require("../core/selectors");

module.exports = {
  meta: {
    type: "suggestion",
    docs: {
      description: "find deprecated mixins and suggests the solution",
      category: "uu5 Supportability",
      recommended: true,
      url:
        "https://uuapp.plus4u.net/uu-bookkit-maing01/78462435-0238a88bac124b3ca828835b57144ffa/book/page?code=uu5NoDeprecatedMixins"
    },
    messages: {
      callsMixinIsDeprecated:
        "UU5.Common.CallsMixin is deprecated. Use UU5.Common.DataManager or UU5.Common.ListDataManager instead.",
      identityMixinIsDeprecated:
        "UU5.Common.IdentityMixin is deprecated. Use UU5.Common.Session and UU5.Common.Identity instead.",
      loadMixinIsDeprecated: "UU5.Common.LoadMixin is deprecated. Use UU5.Common.Loader instead.",
      lsiMixinIsDeprecated: "UU5.Common.LsiMixin is deprecated. Use UU5.Bricks.Lsi instead.",
      resizeMixinIsDeprecated: "UU5.Common.ResizeMixin is deprecated. Use UU5.Bricks.Resize instead.",
      screenSizeMixinIsDeprecated: "UU5.Common.ScreenSizeMixin is deprecated. Use UU5.Bricks.ScreenSize instead.",
      sessionMixinIsDeprecated: "UU5.Common.SessionMixin is deprecated. Use UU5.Common.Identity instead.",
      vucMixinIsDeprecated: "UU5.Common.VucMixin is deprecated. Use UU5.Common.RouteMixin instead."
    }
  },

  create: function(context) {
    const DEPRECATED_MIXINS = [
      {
        name: "UU5.Common.CallsMixin",
        regExp: /[\[, ](UU5\.Common\.CallsMixin)[\], \n]/,
        messageId: "callsMixinIsDeprecated"
      },
      {
        name: "UU5.Common.IdentityMixin",
        regExp: /[\[, ](UU5\.Common\.IdentityMixin)[\], \n]/,
        messageId: "identityMixinIsDeprecated"
      },
      {
        name: "UU5.Common.LoadMixin",
        regExp: /[\[, ](UU5\.Common\.LoadMixin)[\], \n]/,
        messageId: "loadMixinIsDeprecated"
      },
      {
        name: "UU5.Common.LsiMixin",
        regExp: /[\[, ](UU5\.Common\.LsiMixin)[\], \n]/,
        messageId: "lsiMixinIsDeprecated"
      },
      {
        name: "UU5.Common.ResizeMixin",
        regExp: /[\[, ](UU5\.Common\.ResizeMixin)[\], \n]/,
        messageId: "resizeMixinIsDeprecated"
      },
      {
        name: "UU5.Common.ScreenSizeMixin",
        regExp: /[\[, ](UU5\.Common\.ScreenSizeMixin)[\], \n]/,
        messageId: "screenSizeMixinIsDeprecated"
      },
      {
        name: "UU5.Common.SessionMixin",
        regExp: /[\[, ](UU5\.Common\.SessionMixin)[\], \n]/,
        messageId: "sessionMixinIsDeprecated"
      },
      {
        name: "UU5.Common.VucMixin",
        regExp: /[\[, ](UU5\.Common\.VucMixin)[\], \n]/,
        messageId: "vucMixinIsDeprecated"
      }
    ];
    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    function checkRule(context, node) {
      const mixinNode = node.properties.find(prop => prop.key.name === "mixins");
      const src = context.getSourceCode().getText(mixinNode);

      DEPRECATED_MIXINS.forEach(mixin => {
        if (!src.match(mixin.regExp)) {
          return;
        }

        if (context.options.includes(mixin.name)) {
          return;
        }

        context.report({
          messageId: mixin.messageId,
          loc: mixinNode.loc
        });
      });
    }

    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      [Selectors.getCreateReactClassSelector()]: node => checkRule(context, node),
      [Selectors.getVsComponentCreateSelector()]: node => Selectors.checkVsComponent(context, node, checkRule)
    };
  }
};
