/**
 * @fileoverview check tag name of UU5 component
 * @author Martin FarkaÅ¡
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const Selectors = require("../core/selectors");

module.exports = {
  meta: {
    type: "problem",
    fixable: "code",
    docs: {
      description: "check tag name of UU5 component",
      category: "uu5 Supportability",
      recommended: true,
      url:
        "https://uuapp.plus4u.net/uu-bookkit-maing01/78462435-0238a88bac124b3ca828835b57144ffa/book/page?code=uu5TagName"
    },
    messages: {
      tagNameIsMissing: "UU5 component does not have tagName"
    }
  },

  create: function(context) {
    const STATICS_REGEXP = /^statics$/;
    const TAG_NAME_REGEXP = /^tagName$/;

    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    function findStaticsProp(node) {
      return node.properties.find(prop => {
        return prop.key.name.match(STATICS_REGEXP);
      });
    }

    function findTagNameProp(staticsProp) {
      return staticsProp.value.properties.find(prop => {
        return prop.key.name.match(TAG_NAME_REGEXP);
      });
    }

    function isStaticPropValid(staticsProp) {
      return staticsProp && staticsProp.value && staticsProp.value.type === "ObjectExpression";
    }

    function isTagNamePropValid(tagNameProp) {
      if (!tagNameProp) {
        return false;
      }

      const tagNameValue = tagNameProp.value;

      if (tagNameValue && tagNameValue.type && tagNameValue.type === "Literal" && !tagNameValue.value) {
        return false;
      }

      return true;
    }

    function checkRule(context, node) {
      const staticsProp = findStaticsProp(node);

      if (!isStaticPropValid(staticsProp)) {
        context.report({
          messageId: "tagNameIsMissing",
          loc: staticsProp ? staticsProp.loc : node.parent.loc
        });
        return;
      }

      const tagNameProp = findTagNameProp(staticsProp);

      if (!isTagNamePropValid(tagNameProp)) {
        context.report({
          messageId: "tagNameIsMissing",
          loc: tagNameProp ? tagNameProp.loc : staticsProp.loc
        });
      }
    }

    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      [Selectors.getCreateReactClassSelector()]: node => checkRule(context, node),
      [Selectors.getVsComponentCreateSelector()]: node => Selectors.checkVsComponent(context, node, checkRule)
    };
  }
};
