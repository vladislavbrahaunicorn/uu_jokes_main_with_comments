/**
 * @fileoverview check rules of hooks
 */
"use strict";

const reactHooks = require("eslint-plugin-react-hooks");
const reactRulesOfHooks = reactHooks.rules["rules-of-hooks"];

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = {
  ...reactRulesOfHooks,
  meta: {
    ...reactRulesOfHooks.meta,
    docs: {
      description: "check rules of hooks",
      category: "uu5 Supportability",
      recommended: true,
      url:
        "https://uuapp.plus4u.net/uu-bookkit-maing01/78462435-e884539c8511447a977c7ff070e7f2cf/book/page?code=uuAppCodeStyleUu5"
    }
  },

  create: function(context) {
    function getMemberName(node) {
      if (!node) return null;
      if (node.type === "Identifier") {
        return node.name == null ? null : node.name + "";
      } else if (node.type === "StringLiteral" || node.type === "NumericLiteral") {
        return node.value == null ? null : node.value + "";
      }
    }

    function getMemberNames(node) {
      if (!node) return null;
      if (node.type === "MemberExpression") {
        let name = getMemberName(node.property);
        let names = getMemberNames(node.object);
        if (names == null || name == null) return null;
        names.push(name + "");
        return names;
      } else {
        let name = getMemberName(node);
        return name != null ? [name] : null;
      }
    }

    function isHookUsageFromUu5RenderMethod(message, node) {
      let result = false;
      if (
        message &&
        message.match(/is called in function "render" (that|which) is neither a React function component/)
      ) {
        // allow usage of hooks in render() functions in a object descriptor passed to createComponent() / createVisualComponent() calls
        let fnExpressionNode = node;
        while (
          fnExpressionNode &&
          fnExpressionNode.type !== "FunctionExpression" &&
          fnExpressionNode.type !== "ArrowFunctionExpression"
        ) {
          fnExpressionNode = fnExpressionNode.parent;
        }
        if (fnExpressionNode) {
          let propertyNode = fnExpressionNode.parent;
          if (propertyNode && propertyNode.type === "Property") {
            let objExpressionNode = propertyNode.parent;
            if (objExpressionNode && objExpressionNode.type === "ObjectExpression") {
              let callExpressionNode = objExpressionNode.parent;
              if (callExpressionNode && callExpressionNode.type === "CallExpression") {
                let memberNames = getMemberNames(callExpressionNode.callee) || [];
                let lastName = memberNames.pop();
                if (lastName && lastName.match(/^(?:createComponent|createVisualComponent)(?:WithRef)?$/)) {
                  result = true;
                }
              }
            }
          }
        }
      }

      return result;
    }

    // use react-hooks/rules-of-hooks linter but filter some of reports that aren't invalid due to how uu5 components are declared
    let customizedContext = {
      ...context,
      report(...args) {
        // don't report invalid hook usage if inside of uu5 "createComponent({ render() { ... } })" method
        if (args[0] && isHookUsageFromUu5RenderMethod(args[0].message, args[0].node)) return;
        return context.report(...args);
      }
    };
    Object.setPrototypeOf(customizedContext, Object.getPrototypeOf(context));

    let reactRulesOfHooksLint = reactRulesOfHooks.create(customizedContext);
    return reactRulesOfHooksLint;
  }
};
