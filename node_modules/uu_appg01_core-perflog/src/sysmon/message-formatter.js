"use strict";

const BaseMessageFormatter = require("uu_appg01_core-logging").MessageFormatter;

const DEFAULT_MESSAGE_FORMAT =
  '[%d] SYSMN {"cpuLoad":"%L","memoryUsage":"%M","memoryLimit":"%x","cache":"%p","rss":"%r"}';

/**
 * Default log message formatter used by Perflog logger.
 */
class MessageFormatter extends BaseMessageFormatter {
  constructor() {
    super(DEFAULT_MESSAGE_FORMAT, null, null);
  }

  /**
   * Sets format of system monitor log message. Following tags are supported:
   * * <b>%%</b> - Escaped percent tag.
   * * <b>%C</b> - Full {UuApp::Logging::LoggerMdc logger MDC} in JSON format.
   * * <b>%d</b> - Date and time in format matching {*datetime_format}.
   * * <b>%L</b> - CPU load.
   * * <b>%l</b> - CPU load delta.
   * * <b>%M</b> - Memory usage.
   * * <b>%m</b> - Memory usage delta.
   * * <b>%x</b> - Memory limit.
   * * <b>%o</b> - Object count.
   * * <b>%p</b> - Page cache.
   * * <b>%r</b> - RSS.
   * * <b>%{ KEY }C</b> - Custom attribute from logger {UuApp::Logging::LoggerMdc logger
   *   MDC} with name KEY. Time values are printed in format matching {*datetime_format}.
   * * <b>%{ FMT }d</b> - Date and time in format matching FMT.
   * @param messageFormat Message format.
   */
  setMessageFormat(messageFormat) {
    super.setMessageFormat(messageFormat);
  }

  _processMessageFormatTag(tag, opts) {
    let result;
    switch (tag) {
      case "C":
        if (opts) {
          // TODO Format date if needed
          result = `LoggerMDC.get("${opts}")`;
        } else {
          result = "LoggerMDC.toJson()";
        }
        break;
      case "d":
        // TODO Format date
        result = "datetime.toISOString()";
        break;
      case "L":
        result = "message.cpuLoad";
        break;
      case "l":
        result = "message.cpuLoadDelta";
        break;
      case "M":
        result = "message.memUsage";
        break;
      case "m":
        result = "message.memUsageDelta";
        break;
      case "x":
        result = "message.memLimit";
        break;
      case "o":
        // Object count is not supported.
        result = '"-1"';
        break;
      case "p":
        result = "message.pageCache";
        break;
      case "r":
        result = "message.rss";
        break;
    }
    return result;
  }
}

module.exports = MessageFormatter;
