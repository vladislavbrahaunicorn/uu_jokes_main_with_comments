"use strict";

const { Config } = require("uu_appg01_core-utils");
const LoggerFactory = require("uu_appg01_core-logging").LoggerFactory;
const BaseLogger = require("uu_appg01_core-logging").Logger;
const LogLevel = require("uu_appg01_core-logging").LogLevel;
const MessageFormatter = require("./message-formatter.js");

const LOGGER_NAME = "UuApp.Sysmon.Logger";

/**
 * Logger component internally used by Sysmon for providing gathered performance
 * statistics data. Logger is transparently managed via LoggerFactory and
 * therefore supports external configuration via following configuration parameters:
 *
 * * <b>uuapp.sysmon.logger.log_level</b><br>
 *   Defines log level. Level can be defined either via name, or its numeric representation. Defaults to +OFF+.
 *
 * * <b>uuapp.perflog.logger.log_message_format</b><br>
 *   Allows to define custom message format. See {UuApp::Sysmon::MessageFormatter#message_format} for details.
 */
class Logger {
  /**
   * Overrides default message format.
   * @param messageFormat Format string.
   */
  static setMessageFormat(messageFormat) {
    Logger._getLogger().setMessageFormat(messageFormat);
  }

  /**
   * Logging severity threshold. Possible values are:
   # * OFF - Logger is disabled.
   # * INFO - Logger is enabled.
   * @param level Log level.
   */
  static setLevel(level) {
    Logger._getLogger().setLevel(level);
  }

  /**
   * Checks if system monitor log is enabled (log level is set to anything other than "OFF").
   * @returns {boolean} True if log is enabled, else false.
   */
  static isEnabled() {
    return Logger._getLogger().getLevel() < LogLevel.OFF;
  }

  /**
   * Transforms given section to log message and prints it.
   * @param section Section to be logged.
   */
  static log(section) {
    if (!section) return false;
    Logger._getLogger().log(section);
  }

  static _getLogger() {
    if (!this._logger) {
      let logger = new BaseLogger(LOGGER_NAME);
      if (!Config.get(`${LOGGER_NAME.toLowerCase()}.log_level`, false)) {
        Config.set(`${LOGGER_NAME.toLowerCase()}.log_level`, "OFF");
      }
      // TODO Should be settable via Logger API
      logger._formatter = new MessageFormatter();
      LoggerFactory.configure(logger, false);
      this._logger = logger;
    }
    return this._logger;
  }
}

module.exports = Logger;
