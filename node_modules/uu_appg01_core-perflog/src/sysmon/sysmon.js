"use strict";

const Provider = require("./provider.js");

let provider = new Provider();

/**
 * Module providing API for system monitoring. Captured monitoring data are
 * provided via {UuApp::Sysmon::Logger} (which is also used to turn monitoring
 * on and off).
 */
class Sysmon {
  static initProvider() {
    provider.startCollecting();
  }

  static teardownProvider() {
    provider.stopCollecting();
  }

  /**
   * Returns current snapshot of system monitor statistics.
   * @returns {Object} Current snapshot of system monitor statistics.
   */
  static getStatistics() {
    return provider.statistics();
  }

  /**
   * Returns system monitor snapshot sample rate.
   * @returns {Number} System monitor snapshot sample rate.
   */
  static getSampleRate() {
    return provider.sampleRate;
  }

  /**
   * Sets system monitor snapshot sample rate.
   * @param {Number} val System monitor snapshot sample rate.
   * @returns {void}
   */
  static setSampleRate(val) {
    provider.sampleRate = val;
  }

  /**
   * Returns maximum number of snapshots to be taken before
   * they are reported via configured logger.
   * @returns {Number} Maximum number of snapshots.
   */
  static getMaxSamples() {
    return provider.maxSamples;
  }
  /**
   * Sets maximum number of snapshots to be taken before
   * they are reported via configured logger.
   * @returns {void}
   */
  static setMaxSamples(val) {
    provider.maxSamples = val;
  }

  /**
   * Returns CPU load delta limit (current statistics are
   * immediately reported via configured logger once CPU
   * load changes more than this delta value between
   * consequent snapshots)
   * @returns {Number} CPU load delta limit.
   */
  static getCpuLoadDeltaLimit() {
    return provider.cpuLoadDeltaLimit;
  }

  /**
   * Sets CPU load delta limit (current statistics are
   * immediately reported via configured logger once CPU
   * load changes more than this delta value between
   * consequent snapshots)
   * @returns {void}
   */
  static setCpuLoadDeltaLimit(val) {
    provider.cpuLoadDeltaLimit = val;
  }

  /**
   * Returns memory usage load delta limit (current statistics are
   * immediately reported via configured logger once CPU
   * load changes more than this delta value between
   * consequent snapshots)
   * @returns {Number} Memory usage load delta limit.
   */
  static getMemUsageDeltaLimit() {
    return provider.memUsageDeltaLimit;
  }

  /**
   * Sets memory usage load delta limit (current statistics are
   * immediately reported via configured logger once CPU
   * load changes more than this delta value between
   * consequent snapshots)
   * @returns {void}
   */
  static setMemUsageDeltaLimit(val) {
    provider.memUsageDeltaLimit = val;
  }
}

module.exports = Sysmon;
