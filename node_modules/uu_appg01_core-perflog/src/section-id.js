"use strict";

// TODO Generate trace ID based on fingerprint
const TRACE_ID_PREFIX = ("0000" + Math.floor(Math.random() * 65535).toString(16)).slice(-4);

/**
 * Object representation of Perflog mesured section ID.
 */
class SectionId {
  /**
   * Creates new section ID from qualified section ID.
   * @param qualifiedId Qualified section ID.
   * @returns {SectionId} Section ID.
   */
  static create(qualifiedId) {
    let match;
    if (!qualifiedId) {
      return new SectionId(null, null);
    } else if ((match = /^([^-]+)-([^-]+)-([^-]+)-([^-]+)$/.exec(qualifiedId.toString()))) {
      return new SectionId(match[1], match[2], match[3], Number(match[4] || 0));
    } else {
      let traceId = qualifiedId.toString().replace(/-/g, "");
      return new SectionId(traceId, traceId);
    }
  }

  /**
   * Creates new section ID instance.
   * @param traceId Trace ID.
   * @param parentId Parent section ID.
   * @param childId Child section ID.
   * @param level Nesting level. In case childId
   *   is given, level is considered as "child level". In case
   *   childId is not set, level is considered as "parent
   *   level" and thus will be increased in new section ID.
   */
  constructor(traceId, parentId, childId = null, level = null) {
    if (typeof childId === "number") {
      level = childId;
      childId = null;
    }
    this._traceId = traceId || TRACE_ID_PREFIX + ("0000" + Math.floor(Math.random() * 65535).toString(16)).slice(-4);
    this._parentId = parentId || this._traceId;
    this._id = childId || ("00000000" + Math.floor(Math.random() * 4294967295).toString(16)).slice(-8);
    if (typeof level === "number") {
      this._level = childId ? level : level + 1;
    } else {
      this._level = 0;
    }
    this._qualifiedId = `${this._traceId}-${this._parentId}-${this._id}-${("0000" + this._level.toString()).slice(-4)}`;
  }

  /**
   * Trace ID shared by all sections within request scope (spanned
   * across clients and servers). For root section this ID is same
   * as parent ID.
   * @returns {*|string} Trace ID.
   */
  getTraceId() {
    return this._traceId;
  }

  /**
   * ID of parent section. For root section this ID is same as
   * trace ID.
   * @returns {*|string} Parent ID.
   */
  getParentId() {
    return this._parentId;
  }

  /**
   * ID of current section. This ID will be used as parent ID for
   * all nested sections.
   * @returns {*|string} Child/section ID.
   */
  getId() {
    return this._id;
  }

  /**
   * Section nesting level. For root section level is 0.
   * @returns {*|number} Nesting level.
   */
  getLevel() {
    return this._level;
  }

  /**
   * Returns formatted qualified section ID.
   * @returns {string} Formatted qualified section ID.
   */
  toString() {
    return this._qualifiedId;
  }
}

module.exports = SectionId;
