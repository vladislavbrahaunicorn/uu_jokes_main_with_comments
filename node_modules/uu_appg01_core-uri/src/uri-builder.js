const { BaseError } = require("uu_appg01_core-utils");
const Uri = require("./uri.js");
const UriParser = require("./uri-parser.js");

/**
 * Creates an instance of UriBuilder.
 *
 * @class UuApp.Uri.UriBuilder
 * @classdesc
 * Class for building uuUri. Typical usage:
 *
 *     // starting from current location
 *     let uriBuilder = UriBuilder.parse(location.protocol + "//" + location.host + location.pathname);
 *     let uri1 = uriBuilder.setUseCase("/sys/init").setParameters({ p1: "v1" }).toUri();
 *     console.log(uri1.toString()); // <gateway>/<product>/<workspace>/sys/init?p1=v1
 *
 *     // starting anew, using gateway from main HTML page location
 *     let gateway = location.origin || (location.protocol + "//" + location.host);
 *     let uri2 = UriBuilder.set({
 *       gateway: gateway,
 *       product: "uu-demoapp-main",
 *       workspace: "tid123-awid456",
 *       parameters: { p1: "v1", p2: "v2" }
 *     }).toUri(); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p1=v1&p2=v2
 *
 *     // parameters example
 *     let uriBuilder = UriBuilder.parse(uri2);
 *     let uri3 = uriBuilder.deleteParameter("p1").mergeParameters({ p3: "v3" }).toUri();
 *     console.log(uri3.toString()); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p2=v2&p3=v3
 *
 * @see {@link UuApp.Uri.UriBuilder.parse UriBuilder.parse}
 * @see {@link UuApp.Uri.UriBuilder.set UriBuilder.set}
 * @see {@link UuApp.Uri.UriBuilder#toUri UriBuilder#toUri}
 */
class UriBuilder {
  constructor() {
    this._parameters = {};
  }

  /**
   * Sets query parameter with given name to given value.
   *
   * @param {string} name The parameter name.
   * @param {string} value The parameter value.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#setParameter
   */
  setParameter(name, value) {
    UriParser.validateParameterName(name);
    UriParser.validateParameterValue(value);
    if (this._parameters.hasOwnProperty(name)) {
      if (Array.isArray(this._parameters[name])) {
        this._parameters[name].push(value);
      } else {
        this._parameters[name] = [this._parameters[name], value];
      }
    } else {
      this._parameters[name] = value;
    }
    return this;
  }

  /**
   * Removes query parameter with given name.
   *
   * @param {string} name The parameter name.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#deleteParameter
   */
  deleteParameter(name) {
    UriParser.validateParameterName(name);
    delete this._parameters[name];
    return this;
  }

  /**
   * Removes all query parameters.
   *
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#clearParameters
   */
  clearParameters() {
    this._parameters = {};
    return this;
  }

  /**
   * Parses URI string (or Uri instance) and resets all fields of this UriBuilder
   * to parsed values.
   *
   * @param {(string|UuApp.Uri.Uri)} uriObj URI to parse.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#parse
   */
  parse(uriObj) {
    let uri = typeof uriObj === "string" ? UriParser.parse(uriObj, this).toUri() : uriObj;
    this.setGateway(uri.getGateway());
    this.setProduct(uri.getProduct());
    this.setWorkspace(uri.getWorkspace());
    this.setUseCase(uri.getUseCase());
    this.setParameters(uri.getParameters());
    return this;
  }

  /**
   * Equivalent to <code>new UriBuilder().parse(uri)</code>.
   *
   * @param {(string|UuApp.Uri.Uri)} uri URI to parse.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.parse
   * @see UuApp.Uri.UriBuilder#parse
   */
  static parse(uri) {
    return new UriBuilder().parse(uri);
  }

  format() {
    return UriBuilder.format(this.toUri());
  }

  static format(uri) {
    return UriParser.format(uri);
  }

  static formatGateway(scheme, hostname, port) {
    return UriParser.formatGateway(scheme, hostname, port);
  }

  static formatProduct(vendor, app, subApp, spp) {
    return UriParser.formatProduct(vendor, app, subApp, spp);
  }

  static formatWorkspace(tid, awid) {
    return UriParser.formatWorkspace(tid, awid);
  }

  static formatParameters(params) {
    return UriParser.formatParameters(params);
  }

  toString() {
    return UriBuilder.format(this.toUri());
  }

  /**
   * Returns Uri instance from current values of this UriBuilder.
   *
   * @return {UuApp.Uri.Uri} Uri instance from current values of this UriBuilder.
   * @method UuApp.Uri.UriBuilder#toUri
   */
  toUri() {
    let missing = [];
    if (this.getScheme() == null && (this.getHostname() != null || this.getPort() != null)) missing.push("scheme");
    if (this.getHostname() == null && (this.getScheme() != null || this.getPort() != null)) missing.push("hostname");
    if (this.getVendor() == null && (this.getSubApp() != null || this.getSpp() != null)) missing.push("vendor");
    if (this.getApp() == null) missing.push("app");
    if (this.getSubApp() == null && this.getSpp() != null) missing.push("subApp");
    if (this.getAwid() == null) missing.push("awid");

    if (missing.length) throw new BaseError("Missing Uri parts: " + missing.join(", "));

    return new Uri(
      this.getScheme(),
      this.getHostname(),
      this.getPort(),
      this.getVendor(),
      this.getApp(),
      this.getSubApp(),
      this.getSpp(),
      this.getTid(),
      this.getAwid(),
      this.getUseCase(),
      this.getParameters()
    );
  }

  /**
   * Replaces current path with specified absolute path (or adds a relative path to the current path) for this UriBuilder.
   * Works exactly the same way as {@link UuApp.Uri.Uri#join Uri#join} but returns UriBuilder instead of Uri.
   *
   * @param {...string} path Absolute or relative paths to replace / add.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#join
   * @see UuApp.Uri.Uri#join
   * @example
   *  // replace path with an absolute path
   *  let srcUri = "https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1";
   *  let uriBuilder = UriBuilder.parse(srcUri);
   *  uriBuilder.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
   *
   *  // add relative paths
   *  let uriBuilder = UriBuilder.parse(srcUri);
   *  uriBuilder.join("./sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init
   *  let uriBuilder = UriBuilder.parse(srcUri);
   *  uriBuilder.join("+/sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init
   */
  join(/* ... */) {
    let uri = this.toUri();
    return this.parse(uri.join.apply(uri, arguments));
  }

  /**
   * Sets fields of this UriBuilder to given values.
   *
   * @param {...Object} fieldMap Object(s) containing fields to set to this UriBuilder. If more objects are given,
   *   fields in latter ones override fields in former ones.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#set
   * @example
   *   // replace spp, awid & remove useCase
   *   let resUri = UriBuilder.parse(someUri).set({
   *     spp: "async",
   *     awid: "12345",
   *     useCase: null
   *   }).toUri();
   *
   *   // multiple settings
   *   let defaults = { gateway: "...", product: "uu-demoapp-main", tid: "0", awid: "0" };
   *   let resUri = UriBuilder.set(defaults, {
   *     tid: "12f34", // overrides the one from "defaults" variable
   *     useCase: "/getData"
   *   }).toUri();
   */
  set(/* ... */) {
    for (let i = 0; i < arguments.length; ++i) {
      let hash = arguments[i];
      if (!hash) continue;
      if (typeof hash !== "object") continue;
      for (let k in hash) {
        this["set" + k.replace(/^./, m => m.toUpperCase())](hash[k]);
      } // this[k] = hash[k];
    }
    return this;
  }

  /**
   * Equivalent to <code>new UriBuilder().set(...)</code>.
   *
   * @param {...Object} fieldMap Object(s) containing fields to set to the UriBuilder. If more objects are given,
   *   fields in latter ones override fields in former ones.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.set
   * @see UuApp.Uri.UriBuilder#set
   */
  static set(/* ... */) {
    let builder = new UriBuilder();
    return builder.set.apply(builder, arguments);
  }

  /**
   * Equivalent to <code>new UriBuilder().setParameter(name, value)</code>.
   *
   * @param {string} name The parameter name.
   * @param {string} value The parameter value.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setParameter
   * @see UuApp.Uri.UriBuilder#setParameter
   */
  static setParameter(name, value) {
    return new UriBuilder().setParameter(name, value);
  }

  /**
   * Merges (replaces / adds) provided parameters into the ones already present
   * in this UriBuilder.
   *
   * @param {Object} map Map with parameters to merge.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#mergeParameters
   */
  mergeParameters(value) {
    if (value) for (let k in value) this.setParameter(k, value[k]);
    return this;
  }

  //---------------------------------------------

  getScheme() {
    return this._scheme;
  }

  get scheme() {
    return this.getScheme();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set scheme(attr) {
    this.throwOnSet("scheme");
  }

  getHostname() {
    return this._hostname;
  }

  get hostname() {
    return this.getHostname();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set hostname(attr) {
    this.throwOnSet("hostname");
  }

  getVendor() {
    return this._vendor;
  }

  get vendor() {
    return this.getVendor();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set vendor(attr) {
    this.throwOnSet("vendor");
  }

  getApp() {
    return this._app;
  }

  get app() {
    return this.getApp();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set app(attr) {
    this.throwOnSet("app");
  }

  getSubApp() {
    return this._subApp;
  }

  get subApp() {
    return this.getSubApp();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set subApp(attr) {
    this.throwOnSet("subApp");
  }

  getSpp() {
    return this._spp;
  }

  get spp() {
    return this.getSpp();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set spp(attr) {
    this.throwOnSet("spp");
  }

  getTid() {
    return this._tid;
  }

  get tid() {
    return this.getTid();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set tid(attr) {
    this.throwOnSet("tid");
  }

  getAwid() {
    return this._awid;
  }

  get awid() {
    return this.getAwid();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set awid(attr) {
    this.throwOnSet("awid");
  }

  /**
   * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
   * Note that each access returns new copy of the map (to prevent modification of the map without
   * validating the values / keys).
   *
   *     // GOOD
   *     uriBuilder.setParameter("myParam", "value");
   *
   * @name UuApp.Uri.UriBuilder#parameters
   */
  getParameters() {
    return Object.assign({}, this._parameters);
  }

  get parameters() {
    return this.getParameters();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set parameters(attr) {
    this.throwOnSet("parameters");
  }

  /**
   * Equivalent to <code>new UriBuilder().setScheme(value)</code>.
   *
   * @param {string} value Scheme to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setScheme
   * @see UuApp.Uri.UriBuilder#setScheme
   */
  setScheme(value) {
    // "instance" method
    if (value != null) UriParser.validateScheme(value);
    this._scheme = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for scheme.
   *
   * @param {string} value Scheme to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setScheme
   */
  static setScheme(value) {
    // "static" method
    return new UriBuilder().setScheme(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setHostname(value)</code>.
   *
   * @param {string} value Hostname to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setHostname
   * @see UuApp.Uri.UriBuilder#setHostname
   */
  setHostname(value) {
    // "instance" method
    if (value != null) UriParser.validateHostname(value);
    this._hostname = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for hostname.
   *
   * @param {string} value Hostname to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setHostname
   */
  static setHostname(value) {
    // "static" method
    return new UriBuilder().setHostname(value);
  }

  /**
   * Chainable setter for port.
   *
   * @param {string} value Port to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setPort
   */
  static setPort(value) {
    // "static" method
    return new UriBuilder().setPort(value);
  }

  /**
   * Chainable setter for gateway.
   *
   * @param {string} value Gateway to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setGateway
   */
  static setGateway(value) {
    // "static" method
    return new UriBuilder().setGateway(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setVendor(value)</code>.
   *
   * @param {string} value Vendor to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setVendor
   * @see UuApp.Uri.UriBuilder#setVendor
   */
  setVendor(value) {
    // "instance" method
    if (value != null) UriParser.validateVendor(value);
    this._vendor = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for vendor.
   *
   * @param {string} value Vendor to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setVendor
   */
  static setVendor(value) {
    // "static" method
    return new UriBuilder().setVendor(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setApp(value)</code>.
   *
   * @param {string} value Application to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setApp
   * @see UuApp.Uri.UriBuilder#setApp
   */
  setApp(value) {
    // "instance" method
    if (value != null) UriParser.validateApp(value);
    this._app = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for application.
   *
   * @param {string} value Application to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setApp
   */
  static setApp(value) {
    // "static" method
    return new UriBuilder().setApp(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setSubApp(value)</code>.
   *
   * @param {string} value Sub-application to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setSubApp
   * @see UuApp.Uri.UriBuilder#setSubApp
   */
  setSubApp(value) {
    // "instance" method
    if (value != null) UriParser.validateSubApp(value);
    this._subApp = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for sub-application.
   *
   * @param {string} value Sub-application to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setSubApp
   */
  static setSubApp(value) {
    // "static" method
    return new UriBuilder().setSubApp(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setSpp(value)</code>.
   *
   * @param {string} value SPP to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setSpp
   * @see UuApp.Uri.UriBuilder#setSpp
   */
  setSpp(value) {
    // "instance" method
    if (value != null) UriParser.validateSpp(value);
    this._spp = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for SPP.
   *
   * @param {string} value SPP to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setSpp
   */
  static setSpp(value) {
    // "static" method
    return new UriBuilder().setSpp(value);
  }

  /**
   * Chainable setter for product.
   *
   * @param {string} value Product to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setProduct
   */
  static setProduct(value) {
    // "static" method
    return new UriBuilder().setProduct(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setTid(value)</code>.
   *
   * @param {string} value Tenant ID to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setTid
   * @see UuApp.Uri.UriBuilder#setTid
   */
  setTid(value) {
    // "instance" method
    if (value != null) UriParser.validateTid(value);
    this._tid = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for tenant ID.
   *
   * @param {string} value Tenant ID to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setTid
   */
  static setTid(value) {
    // "static" method
    return new UriBuilder().setTid(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setAwid(value)</code>.
   *
   * @param {string} value awid to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setAwid
   * @see UuApp.Uri.UriBuilder#setAwid
   */
  setAwid(value) {
    // "instance" method
    if (value != null) UriParser.validateAwid(value);
    this._awid = value != null ? value : null;
    return this;
  }

  /**
   * Chainable setter for awid.
   *
   * @param {string} value awid to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setAwid
   */
  static setAwid(value) {
    // "static" method
    return new UriBuilder().setAwid(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setWorkspace(value)</code>.
   *
   * @param {string} value Workspace to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setWorkspace
   * @see UuApp.Uri.UriBuilder#setWorkspace
   */
  static setWorkspace(value) {
    // "static" method
    return new UriBuilder().setWorkspace(value);
  }

  /**
   * Chainable setter for use case.
   *
   * @param {string} value Use case to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setUseCase
   */
  static setUseCase(value) {
    // "static" method
    return new UriBuilder().setUseCase(value);
  }

  /**
   * Equivalent to <code>new UriBuilder().setParameters(value)</code>.
   *
   * @param {string} value Parameters to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setParameters
   * @see UuApp.Uri.UriBuilder#setParameters
   */
  setParameters(value) {
    // "instance" method
    this._parameters = {};
    if (value) for (let k in value) this.setParameter(k, value[k]);
    return this;
  }

  /**
   * Chainable setter for parameters (replaces all parameters).
   *
   * @param {string} value Parameters to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setParameters
   */
  static setParameters(value) {
    // "static" method
    return new UriBuilder().setParameters(value);
  }

  getPort() {
    return this._port != null ? Number(this._port) : this._port;
  }

  get port() {
    return this.getPort();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set port(attr) {
    this.throwOnSet("port");
  }

  /**
   * Equivalent to <code>new UriBuilder().setPort(value)</code>.
   *
   * @param {(string|number)} value Port to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setPort
   * @see UuApp.Uri.UriBuilder#setPort
   */
  setPort(value) {
    if (value != null) UriParser.validatePort(value);
    this._port = value != null ? value : null;
    return this;
  }

  getGateway() {
    return UriBuilder.formatGateway(this._scheme, this._hostname, this._port);
  }

  get gateway() {
    return this.getGateway();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set gateway(attr) {
    this.throwOnSet("gateway");
  }

  /**
   * Equivalent to <code>new UriBuilder().setGateway(value)</code>.
   *
   * @param {string} value Gateway to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setGateway
   * @see UuApp.Uri.UriBuilder#setGateway
   */
  setGateway(value) {
    let obj = value != null ? UriParser.parseGateway(value) : null;
    this._scheme = (obj && obj.scheme) || null;
    this._hostname = (obj && obj.hostname) || null;
    this._port = obj && obj.port != null ? obj.port : null;
    return this;
  }

  getProduct() {
    return UriBuilder.formatProduct(this._vendor, this._app, this._subApp, this._spp);
  }

  get product() {
    return this.getProduct();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set product(attr) {
    this.throwOnSet("product");
  }

  /**
   * Equivalent to <code>new UriBuilder().setProduct(value)</code>.
   *
   * @param {string} value Product to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setProduct
   * @see UuApp.Uri.UriBuilder#setProduct
   */
  setProduct(value) {
    let obj = value ? UriParser.parseProduct(value) : {};
    this._vendor = obj.vendor || null;
    this._app = obj.app || null;
    this._subApp = obj.subApp || null;
    this._spp = obj.spp || null;
    return this;
  }

  getWorkspace() {
    return UriBuilder.formatWorkspace(this._tid, this._awid);
  }

  get workspace() {
    return this.getWorkspace();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set workspace(attr) {
    this.throwOnSet("workspace");
  }

  /**
   * Chainable setter for workspace ID.
   *
   * @param {string} value Workspace ID to set.
   * @return This UriBuilder instance.
   * @method UuApp.Uri.UriBuilder#setWorkspace
   */
  setWorkspace(value) {
    let obj = value ? UriParser.parseWorkspace(value) : {};
    this._tid = obj.tid || null;
    this._awid = obj.awid || null;
    return this;
  }

  getUseCase() {
    return this._useCase;
  }

  get useCase() {
    return this.getUseCase();
  }

  /**
   * throws error to prevent from using setter
   * @param attr
   */
  set useCase(attr) {
    this.throwOnSet("useCase");
  }

  /**
   * Equivalent to <code>new UriBuilder().setUseCase(value)</code>.
   *
   * @param {string} value Use case to set.
   * @return New UriBuilder instance.
   * @method UuApp.Uri.UriBuilder.setUseCase
   * @see UuApp.Uri.UriBuilder#setUseCase
   */
  setUseCase(value) {
    if (value != null) {
      value = value.replace(/(^\/+|\/+$)/g, "");
      if (value) {
        UriParser.validateUseCase(encodeURIComponent(value));
      } else {
        value = null;
      }
    }
    this._useCase = value;
    return this;
  }

  throwOnSet(attr) {
    throw new BaseError(
      `
Setting of "${attr}" and other properties via property access 
is prohibited with UriBuilder to prevent typos. 
Use get${attr[0].toUpperCase()}${attr.substr(1)}() and 
set${attr[0].toUpperCase()}${attr.substr(1)}(value) instead.
`
    );
  }
}

Uri.prototype.Builder = UriBuilder;

module.exports = UriBuilder;
