/*!
 * Copyright (c) 2019 Unicorn a.s.
 * All rights reserved.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("module"), require("uu_appg01_core-utils"));
	else if(typeof define === 'function' && define.amd)
		define("uu_appg01_core-uri", ["module", "uu_appg01_core-utils"], factory);
	else if(typeof exports === 'object')
		exports["uu_appg01_core-uri"] = factory(require("module"), require("uu_appg01_core-utils"));
	else
		root["UuApp"] = root["UuApp"] || {}, root["UuApp"]["Uri"] = factory(root["undefined"], root["UuApp.Utils"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__5__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var mod = __webpack_require__(2);

var isDoc = typeof document !== "undefined";
var uri = ((mod ? mod.uri : isDoc && (document.currentScript || Array.prototype.slice.call(document.getElementsByTagName("script"), -1)[0] || {}).src) || "").toString();
uri = uri.split(/\//).slice(0, -1).join("/") + "/"; // runtime publicPath configuration required for proper linking of styles, background images, ...

var floatingVersion = "/4.0.0/";
if (uri.substr(-floatingVersion.length) === floatingVersion) uri = uri.substr(0, uri.length - floatingVersion.length) + "/4.7.2/";
__webpack_require__.p = uri;
module.exports = __webpack_require__(3);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Uri = __webpack_require__(4);

var UriBuilder = __webpack_require__(6);

var InvalidUriPartError = __webpack_require__(8);

module.exports = {
  Uri: Uri,
  UriBuilder: UriBuilder,
  InvalidUriPartError: InvalidUriPartError
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(5),
    BaseError = _require.BaseError;

var EMPTY = {};
/**
 * @class UuApp.Uri.Uri
 * @classdesc
 * Immutable representation of uuUri. An instance of the Uri can be obtained either by
 * {@link UuApp.Uri.Uri.parse Uri.parse} or by using {@link UuApp.Uri.UriBuilder UriBuilder} class.
 * Note that minimal Uri consists of at least "app" and "tid".
 *
 * Examples of usage:
 *
 *     // uri from parsing current location
 *     let locationUri = Uri.parse(location.protocol + "//" + location.host + location.pathname); // "http://example.com/vendor-app/0-0/some/uc"
 *     let baseUri = locationUri.baseUri; // "http://example.com/vendor-app/0-0"
 *     let callUri = baseUri.join("+/getConfig"); // "http://example.com/vendor-app/0-0/getConfig"
 *
 *     // uri from parsing
 *     let uri = UuApp.Uri.Uri.parse("https://uuos9.plus4u.net/vendor-app-subapp-spp/tid-awid/useCase?p1=v1");
 *     console.log(uri.gateway, uri.product, uri.workspace, uri.useCase);
 *     let params = uri.parameters; // always returns new copy of parameter map
 *     for (let k in params) console.log(k, "=", params[k]); // p1 = v1
 *
 *     // uri from UriBuilder
 *     let uri2 = UuApp.Uri.UriBuilder.parse(uri).setWorkspace("0-0").setUseCase("sys/init").toUri();
 *     console.log(uri2.toString()); // https://uuos9.plus4u.net/vendor-app-subapp-spp/0-0/sys/init?p1=v1
 *
 *     // uri from parsing (with ECMAScript6 template string, e.g. when using transpilers like Babel)
 *     // Note that query parameter values shouldn't be injected via template string as they might need
 *     // to be encoded first.
 *     let product = "vendor-app";
 *     let workspace = "tid-awid";
 *     let uri3 = UuApp.Uri.Uri.parse(`https://uuos9.plus4u.net/${product}/${workspace}`);
 *
 * @see UuApp.Uri.UriBuilder
 */

var Uri = /*#__PURE__*/function () {
  /**
   * New instance of URI should be created using {@link UuApp.Uri.Uri.parse}.
   * @private
   */
  function Uri(scheme, hostname, port, vendor, app, subApp, spp, tid, awid, useCase, parameters) {
    _classCallCheck(this, Uri);

    this._scheme = scheme;
    this._hostname = hostname;
    this._port = port;
    this._vendor = vendor;
    this._app = app;
    this._subApp = subApp;
    this._spp = spp;
    this._tid = tid;
    this._awid = awid;
    this._useCase = useCase;
    this._memory = {};
    this._useCase = useCase ? useCase.replace(/^\//, "") : useCase;

    if (this._port && typeof this._port !== "number") {
      this._port = parseInt(this._port + "", 10);
    }

    this._memory.gatewayValue = EMPTY;
    this._memory.productValue = EMPTY;
    this._memory.workspaceValue = EMPTY;
    this._memory.baseUriValue = undefined;
    this._memory.relativeUriValue = undefined;
    this._memory.strValue = undefined;
    this._paramsValue = Object.assign({}, parameters);
    Object.freeze(this);
  }
  /**
   * Returns string representation of URI.
   * @return {string}
   * @method UuApp.Uri.Uri#toString
   */


  _createClass(Uri, [{
    key: "toString",
    value: function toString() {
      if (this._memory.strValue !== undefined) {
        return this._memory.strValue;
      } else {
        this._memory.strValue = this.Builder.format(this);
        return this._memory.strValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#toString} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
    /**
     * Returns URI containing only mandatory routing data
     * (including only {#gateway}, {#product} and {#workspace}).
     * @throws {BaseError} In case URI does not contain all required parts.
     * @returns {UuApp.Uri.Uri}
     * @method UuApp.Uri.Uri#getBaseUri
     */

  }, {
    key: "getBaseUri",
    value: function getBaseUri() {
      if (this._memory.baseUriValue !== undefined) {
        return this._memory.baseUriValue;
      }

      if (this.getGateway() == null || this.getProduct() == null || this.getWorkspace() == null) {
        throw new BaseError("Insufficient URI - at least one of gateway, product and workspace is not set. Uri: " + this.toString());
      }

      this._memory.baseUri = this.Builder.parse(this).set({
        useCase: null
      }).clearParameters().toUri();
      return this._memory.baseUri;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getBaseUri} for further information.
     * @private
     */

  }, {
    key: "getRelativeUri",

    /**
     * Returns URI without gateway part.
     * @returns {UuApp.Uri.Uri}
     * @method UuApp.Uri.Uri#getRelativeUri
     */
    value: function getRelativeUri() {
      if (this._memory.relativeUriValue !== undefined) {
        return this._memory.relativeUriValue;
      }

      this._memory.relativeUriValue = this.Builder.parse(this).set({
        gateway: null
      }).toUri();
      return this._memory.relativeUriValue;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getRelativeUri} for further information.
     * @private
     */

  }, {
    key: "getGateway",

    /**
     * Returns Gateway (formatted {#scheme}, {#hostname} and {#port})
     * @returns {string}
     * @method UuApp.Uri.Uri#getGateway
     */
    value: function getGateway() {
      if (this._memory.gatewayValue !== EMPTY) {
        return this._memory.gatewayValue;
      } else {
        this._memory.gatewayValue = this.Builder.formatGateway(this._scheme, this._hostname, this._port);
        return this._memory.gatewayValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getGateway} for further information.
     * @private
     */

  }, {
    key: "getProduct",

    /**
     * Returns Product (formatted {#vendor}, {#app}, {#sub_app} and {#spp})
     * @returns {string}
     * @method UuApp.Uri.Uri#getProduct
     */
    value: function getProduct() {
      if (this._memory.productValue !== EMPTY) {
        return this._memory.productValue;
      } else {
        this._memory.productValue = this.Builder.formatProduct(this._vendor, this._app, this._subApp, this._spp);
        return this._memory.productValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getProduct} for further information.
     * @private
     */

  }, {
    key: "getWorkspace",

    /**
     * Returns Workspace (formatted {#tid} and {#awid})
     * @returns {string}
     * @method UuApp.Uri.Uri#getWorkspace
     */
    value: function getWorkspace() {
      if (this._memory.workspaceValue !== EMPTY) {
        return this._memory.workspaceValue;
      } else {
        this._memory.workspaceValue = this.Builder.formatWorkspace(this._tid, this._awid);
        return this._memory.workspaceValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getWorkspace} for further information.
     * @private
     */

  }, {
    key: "getScheme",

    /**
     * Returns Scheme
     * @returns {string}
     * @method UuApp.Uri.Uri#getScheme
     */
    value: function getScheme() {
      return this._scheme;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getScheme} for further information.
     * @private
     */

  }, {
    key: "getHostname",

    /**
     * Returns Hostname
     * @returns {string}
     * @method UuApp.Uri.Uri#getHostname
     */
    value: function getHostname() {
      return this._hostname;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getHostname} for further information.
     * @private
     */

  }, {
    key: "getPort",

    /**
     * Returns Port
     * @returns {number}
     * @method UuApp.Uri.Uri#getPort
     */
    value: function getPort() {
      if (this._port) {
        return this._port;
      }

      if (this._scheme) {
        return this._scheme.match(/^https$/) ? 443 : 80;
      }

      return null;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getPort} for further information.
     * @private
     */

  }, {
    key: "getVendor",

    /**
     * Returns Vendor
     * @returns {string}
     * @method UuApp.Uri.Uri#getVendor
     */
    value: function getVendor() {
      return this._vendor;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getVendor} for further information.
     * @private
     */

  }, {
    key: "getApp",

    /**
     * Returns Application
     * @returns {string}
     * @method UuApp.Uri.Uri#getApp
     */
    value: function getApp() {
      return this._app;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getApp} for further information.
     * @private
     */

  }, {
    key: "getSubApp",

    /**
     * Returns Sub-application
     * @returns {string}
     * @method UuApp.Uri.Uri#getSubApp
     */
    value: function getSubApp() {
      return this._subApp;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getSubApp} for further information.
     * @private
     */

  }, {
    key: "getSpp",

    /**
     * Returns SPP
     * @returns {string}
     * @method UuApp.Uri.Uri#getSpp
     */
    value: function getSpp() {
      return this._spp;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getSpp} for further information.
     * @private
     */

  }, {
    key: "getTid",

    /**
     * Returns Tenant ID
     * @returns {string}
     * @method UuApp.Uri.Uri#getTid
     */
    value: function getTid() {
      return this._tid;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getTid} for further information.
     * @private
     */

  }, {
    key: "getAwid",

    /**
     * Returns Application workspace ID
     * @returns {string}
     * @method UuApp.Uri.Uri#getAwid
     */
    value: function getAwid() {
      return this._awid;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getAwid} for further information.
     * @private
     */

  }, {
    key: "getUseCase",

    /**
     * Returns Use Case
     * @returns {string}
     * @method UuApp.Uri.Uri#getUseCase
     */
    value: function getUseCase() {
      return this._useCase;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getUseCase} for further information.
     * @private
     */

  }, {
    key: "getParameters",

    /**
     * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
     * Note that each access returns new copy of the map (to achieve immutability of the Uri class),
     * therefore usage should look like this:
     *
     *     // OPTIMAL (single read of "parameters" field on uri)
     *     let params = uri.parameters;
     *     for (let k in params) console.log(params[k]);
     *
     *     // SUB-OPTIMAL (multiple reads and therefore multiple copying of parameter map)
     *     // for (let k in uri.parameters) console.log(uri.parameters[k]);
     *
     * @method UuApp.Uri.Uri#getParameters
     */
    value: function getParameters() {
      return Object.assign({}, this._paramsValue);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getParameters} for further information.
     * @private
     */

  }, {
    key: "join",

    /**
     * Replaces current path with specified absolute path (or adds a relative path to the current path) returning new Uri.
     * Query parameters are preserved only on last path. Resolving relative path and usage of "./" and "../" works as in standard
     * URLs (see {@link https://tools.ietf.org/html/rfc2396#appendix-C RFC 2396, examples}).
     *
     * Additionally, it's possible to use "+/" at the beginning of paths - paths starting
     * with "+/" are joined as if current path (to which new path is being joined) denoted a "folder", i.e. current path
     * is appended with slash (unless it already ends with slash) and new path is appended afterwards (see examples).
     *
     * @param {...string} path Absolute or relative paths to replace / add.
     * @return New Uri whose path is the result of the join.
     * @method UuApp.Uri.Uri#join
     * @example
     *  // replace path with an absolute path (effectively removing also query parameters)
     *  let uri = Uri.parse("https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1?a=b");
     *  let uri2 = uri.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
     *
     *  // add relative paths
     *  let uri = Uri.parse("https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1");
     *  let uri2 = uri.join("sys/init?p=v");             // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init?p=v
     *  let uri3 = uri.join("+/sys/init?p=v");           // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init?p=v
     *  let uri4 = uri.join("+/sys/?a=b", "init?c=d");   // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init?c=d
     */
    value: function join()
    /* ... */
    {
      if (arguments.length <= 0) {
        return this;
      }

      var root = this.getGateway() || "";
      var path = this.toString().substr(root.length);

      for (var i = 0; i < arguments.length; ++i) {
        var pathPart = arguments[i];

        if (!pathPart) {
          continue;
        }

        path = path.replace(/[?#].*/, ""); // remove query part because we're going to add / replace path

        pathPart = pathPart.replace(/((^|\/)\.\.?)$/, "$1/"); // if new path part ends with two dots / one dot, treat it as a "folder", i.e. append "/"

        if (pathPart.charAt(0) === "/") {
          path = pathPart;
        } // new path part is absolute => replace whole path
        else if (pathPart.match(/^\+(\/|$)/)) {
            path = path.replace(/\/?$/, "/") + pathPart;
          } // new path part is relative with "+/" => append "/" and then new path
          else if (path.charAt(path.length - 1) === "/") {
              path += pathPart;
            } // new path part is relative and current path is a "folder" => append new path
            else {
                path = path.replace(/(^|\/)[^/]*$/, "$1") + pathPart;
              } // new path part is relative and current path is not a "folder" => replace last segment of current path

      } // normalize (modify segments to eliminate "../" and "./" from the path)


      var segments = [];
      path.split("/").forEach(function (part) {
        if (part === "..") {
          segments.pop();
        } else if (part !== "." && part !== "+") {
          segments.push(part);
        }
      });

      if (segments[0] !== "") {
        segments.unshift("");
      } // make sure that after "join" operation the path starts with "/"


      var resultPath = segments.join("/");
      return Uri.parse(root + resultPath);
    }
  }, {
    key: "throwOnSet",
    value: function throwOnSet(attr) {
      throw new BaseError("Cannot set " + attr + "on Uri because instances of Uri are immutable. Use UriBuilder instead.");
    }
    /**
     * Checks whether the other URI is equal to this one and returns true iff it is.
     *
     * @param {UuApp.Uri.Uri} uri Uri to check equality against.
     * @return True iff the specified uri is equal to this one.
     * @method UuApp.Uri.Uri#equals
     */

  }, {
    key: "equals",
    value: function equals(Uri) {
      return this.toString() === (Uri || "").toString();
    }
    /**
     * @param {(string|UuApp.Uri.Uri)} uriStr The string to parse as URI. If an instance of Uri class is given, it's returned as-is.
     * @return {UuApp.Uri.Uri} Parsed URI.
     * @method UuApp.Uri.Uri.parse
     * @example
     *    let uri = UuApp.Uri.Uri.parse("https://uuos9.plus4u.net/vendor-app/tid-awid/useCase?p1=v1");
     */

  }, {
    key: "href",
    get: function get() {
      return this.toString();
    }
  }, {
    key: "baseUri",
    get: function get() {
      return this.getBaseUri();
    }
  }, {
    key: "relativeUri",
    get: function get() {
      return this.getRelativeUri();
    }
    /**
     * Returns Pathname (String representation of URI without gateway and parameters).
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "pathname",
    get: function get() {
      return this.Builder.parse(this).set({
        gateway: null
      }).clearParameters().toString();
    }
  }, {
    key: "gateway",
    get: function get() {
      return this.getGateway();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getGateway} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "origin",
    get: function get() {
      return this.getGateway();
    }
  }, {
    key: "product",
    get: function get() {
      return this.getProduct();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "workspace",
    get: function get() {
      return this.getWorkspace();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "scheme",
    get: function get() {
      return this.getScheme();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * Returns Scheme with colon (:) on the end.
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "protocol",
    get: function get() {
      return this.getScheme() + ":";
    }
  }, {
    key: "hostname",
    get: function get() {
      return this.getHostname();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * Returns Host (formatted {#hostname} and {#port})
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "host",
    get: function get() {
      return this.getHostname() + ":" + this.getPort();
    }
  }, {
    key: "port",
    get: function get() {
      return this.getPort();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "vendor",
    get: function get() {
      return this.getVendor();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "app",
    get: function get() {
      return this.getApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "subApp",
    get: function get() {
      return this.getSubApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "spp",
    get: function get() {
      return this.getSpp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "tid",
    get: function get() {
      return this.getTid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "awid",
    get: function get() {
      return this.getAwid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "useCase",
    get: function get() {
      return this.getUseCase();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "parameters",
    get: function get() {
      return this.getParameters();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getParameters} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "searchParams",
    get: function get() {
      return this.getParameters();
    }
    /**
     * Returns string representation of all URI parameters
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "search",
    get: function get() {
      return this.Builder.formatParameters(this.getParameters());
    }
  }], [{
    key: "parse",
    value: function parse(uriStr) {
      if (uriStr instanceof Uri) {
        return uriStr;
      }

      return this.prototype.Builder.parse(uriStr).toUri();
    }
  }, {
    key: "createBuilder",
    value: function createBuilder() {
      return new this.prototype.Builder();
    }
  }]);

  return Uri;
}();

module.exports = Uri;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(5),
    BaseError = _require.BaseError;

var Uri = __webpack_require__(4);

var UriParser = __webpack_require__(7);
/**
 * Creates an instance of UriBuilder.
 *
 * @class UuApp.Uri.UriBuilder
 * @classdesc
 * Class for building uuUri. Typical usage:
 *
 *     // starting from current location
 *     let uriBuilder = UriBuilder.parse(location.protocol + "//" + location.host + location.pathname);
 *     let uri1 = uriBuilder.setUseCase("/sys/init").setParameters({ p1: "v1" }).toUri();
 *     console.log(uri1.toString()); // <gateway>/<product>/<workspace>/sys/init?p1=v1
 *
 *     // starting anew, using gateway from main HTML page location
 *     let gateway = location.origin || (location.protocol + "//" + location.host);
 *     let uri2 = UriBuilder.set({
 *       gateway: gateway,
 *       product: "uu-demoapp-main",
 *       workspace: "tid123-awid456",
 *       parameters: { p1: "v1", p2: "v2" }
 *     }).toUri(); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p1=v1&p2=v2
 *
 *     // parameters example
 *     let uriBuilder = UriBuilder.parse(uri2);
 *     let uri3 = uriBuilder.deleteParameter("p1").mergeParameters({ p3: "v3" }).toUri();
 *     console.log(uri3.toString()); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p2=v2&p3=v3
 *
 * @see {@link UuApp.Uri.UriBuilder.parse UriBuilder.parse}
 * @see {@link UuApp.Uri.UriBuilder.set UriBuilder.set}
 * @see {@link UuApp.Uri.UriBuilder#toUri UriBuilder#toUri}
 */


var UriBuilder = /*#__PURE__*/function () {
  function UriBuilder() {
    _classCallCheck(this, UriBuilder);

    this._parameters = {};
  }
  /**
   * Sets query parameter with given name to given value.
   *
   * @param {string} name The parameter name.
   * @param {string} value The parameter value.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#setParameter
   */


  _createClass(UriBuilder, [{
    key: "setParameter",
    value: function setParameter(name, value) {
      UriParser.validateParameterName(name);
      UriParser.validateParameterValue(value);

      if (this._parameters.hasOwnProperty(name)) {
        if (Array.isArray(this._parameters[name])) {
          this._parameters[name].push(value);
        } else {
          this._parameters[name] = [this._parameters[name], value];
        }
      } else {
        this._parameters[name] = value;
      }

      return this;
    }
    /**
     * Removes query parameter with given name.
     *
     * @param {string} name The parameter name.
     * @return This UriBuilder instance for chaining operations.
     * @method UuApp.Uri.UriBuilder#deleteParameter
     */

  }, {
    key: "deleteParameter",
    value: function deleteParameter(name) {
      UriParser.validateParameterName(name);
      delete this._parameters[name];
      return this;
    }
    /**
     * Removes all query parameters.
     *
     * @return This UriBuilder instance for chaining operations.
     * @method UuApp.Uri.UriBuilder#clearParameters
     */

  }, {
    key: "clearParameters",
    value: function clearParameters() {
      this._parameters = {};
      return this;
    }
    /**
     * Parses URI string (or Uri instance) and resets all fields of this UriBuilder
     * to parsed values.
     *
     * @param {(string|UuApp.Uri.Uri)} uriObj URI to parse.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#parse
     */

  }, {
    key: "parse",
    value: function parse(uriObj) {
      var uri = typeof uriObj === "string" ? UriParser.parse(uriObj, this).toUri() : uriObj;
      this.setGateway(uri.getGateway());
      this.setProduct(uri.getProduct());
      this.setWorkspace(uri.getWorkspace());
      this.setUseCase(uri.getUseCase());
      this.setParameters(uri.getParameters());
      return this;
    }
    /**
     * Equivalent to <code>new UriBuilder().parse(uri)</code>.
     *
     * @param {(string|UuApp.Uri.Uri)} uri URI to parse.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.parse
     * @see UuApp.Uri.UriBuilder#parse
     */

  }, {
    key: "format",
    value: function format() {
      return UriBuilder.format(this.toUri());
    }
  }, {
    key: "toString",
    value: function toString() {
      return UriBuilder.format(this.toUri());
    }
    /**
     * Returns Uri instance from current values of this UriBuilder.
     *
     * @return {UuApp.Uri.Uri} Uri instance from current values of this UriBuilder.
     * @method UuApp.Uri.UriBuilder#toUri
     */

  }, {
    key: "toUri",
    value: function toUri() {
      var missing = [];
      if (this.getScheme() == null && (this.getHostname() != null || this.getPort() != null)) missing.push("scheme");
      if (this.getHostname() == null && (this.getScheme() != null || this.getPort() != null)) missing.push("hostname");
      if (this.getVendor() == null && (this.getSubApp() != null || this.getSpp() != null)) missing.push("vendor");
      if (this.getApp() == null) missing.push("app");
      if (this.getSubApp() == null && this.getSpp() != null) missing.push("subApp");
      if (this.getAwid() == null) missing.push("awid");
      if (missing.length) throw new BaseError("Missing Uri parts: " + missing.join(", "));
      return new Uri(this.getScheme(), this.getHostname(), this.getPort(), this.getVendor(), this.getApp(), this.getSubApp(), this.getSpp(), this.getTid(), this.getAwid(), this.getUseCase(), this.getParameters());
    }
    /**
     * Replaces current path with specified absolute path (or adds a relative path to the current path) for this UriBuilder.
     * Works exactly the same way as {@link UuApp.Uri.Uri#join Uri#join} but returns UriBuilder instead of Uri.
     *
     * @param {...string} path Absolute or relative paths to replace / add.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#join
     * @see UuApp.Uri.Uri#join
     * @example
     *  // replace path with an absolute path
     *  let srcUri = "https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1";
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
     *
     *  // add relative paths
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("./sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("+/sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init
     */

  }, {
    key: "join",
    value: function join()
    /* ... */
    {
      var uri = this.toUri();
      return this.parse(uri.join.apply(uri, arguments));
    }
    /**
     * Sets fields of this UriBuilder to given values.
     *
     * @param {...Object} fieldMap Object(s) containing fields to set to this UriBuilder. If more objects are given,
     *   fields in latter ones override fields in former ones.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#set
     * @example
     *   // replace spp, awid & remove useCase
     *   let resUri = UriBuilder.parse(someUri).set({
     *     spp: "async",
     *     awid: "12345",
     *     useCase: null
     *   }).toUri();
     *
     *   // multiple settings
     *   let defaults = { gateway: "...", product: "uu-demoapp-main", tid: "0", awid: "0" };
     *   let resUri = UriBuilder.set(defaults, {
     *     tid: "12f34", // overrides the one from "defaults" variable
     *     useCase: "/getData"
     *   }).toUri();
     */

  }, {
    key: "set",
    value: function set()
    /* ... */
    {
      for (var i = 0; i < arguments.length; ++i) {
        var hash = arguments[i];
        if (!hash) continue;
        if (_typeof(hash) !== "object") continue;

        for (var k in hash) {
          this["set" + k.replace(/^./, function (m) {
            return m.toUpperCase();
          })](hash[k]);
        } // this[k] = hash[k];

      }

      return this;
    }
    /**
     * Equivalent to <code>new UriBuilder().set(...)</code>.
     *
     * @param {...Object} fieldMap Object(s) containing fields to set to the UriBuilder. If more objects are given,
     *   fields in latter ones override fields in former ones.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.set
     * @see UuApp.Uri.UriBuilder#set
     */

  }, {
    key: "mergeParameters",

    /**
     * Merges (replaces / adds) provided parameters into the ones already present
     * in this UriBuilder.
     *
     * @param {Object} map Map with parameters to merge.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#mergeParameters
     */
    value: function mergeParameters(value) {
      if (value) for (var k in value) {
        this.setParameter(k, value[k]);
      }
      return this;
    } //---------------------------------------------

  }, {
    key: "getScheme",
    value: function getScheme() {
      return this._scheme;
    }
  }, {
    key: "getHostname",
    value: function getHostname() {
      return this._hostname;
    }
  }, {
    key: "getVendor",
    value: function getVendor() {
      return this._vendor;
    }
  }, {
    key: "getApp",
    value: function getApp() {
      return this._app;
    }
  }, {
    key: "getSubApp",
    value: function getSubApp() {
      return this._subApp;
    }
  }, {
    key: "getSpp",
    value: function getSpp() {
      return this._spp;
    }
  }, {
    key: "getTid",
    value: function getTid() {
      return this._tid;
    }
  }, {
    key: "getAwid",
    value: function getAwid() {
      return this._awid;
    }
  }, {
    key: "getParameters",

    /**
     * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
     * Note that each access returns new copy of the map (to prevent modification of the map without
     * validating the values / keys).
     *
     *     // GOOD
     *     uriBuilder.setParameter("myParam", "value");
     *
     * @name UuApp.Uri.UriBuilder#parameters
     */
    value: function getParameters() {
      return Object.assign({}, this._parameters);
    }
  }, {
    key: "setScheme",

    /**
     * Equivalent to <code>new UriBuilder().setScheme(value)</code>.
     *
     * @param {string} value Scheme to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setScheme
     * @see UuApp.Uri.UriBuilder#setScheme
     */
    value: function setScheme(value) {
      // "instance" method
      if (value != null) UriParser.validateScheme(value);
      this._scheme = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for scheme.
     *
     * @param {string} value Scheme to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setScheme
     */

  }, {
    key: "setHostname",

    /**
     * Equivalent to <code>new UriBuilder().setHostname(value)</code>.
     *
     * @param {string} value Hostname to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setHostname
     * @see UuApp.Uri.UriBuilder#setHostname
     */
    value: function setHostname(value) {
      // "instance" method
      if (value != null) UriParser.validateHostname(value);
      this._hostname = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for hostname.
     *
     * @param {string} value Hostname to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setHostname
     */

  }, {
    key: "setVendor",

    /**
     * Equivalent to <code>new UriBuilder().setVendor(value)</code>.
     *
     * @param {string} value Vendor to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setVendor
     * @see UuApp.Uri.UriBuilder#setVendor
     */
    value: function setVendor(value) {
      // "instance" method
      if (value != null) UriParser.validateVendor(value);
      this._vendor = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for vendor.
     *
     * @param {string} value Vendor to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setVendor
     */

  }, {
    key: "setApp",

    /**
     * Equivalent to <code>new UriBuilder().setApp(value)</code>.
     *
     * @param {string} value Application to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setApp
     * @see UuApp.Uri.UriBuilder#setApp
     */
    value: function setApp(value) {
      // "instance" method
      if (value != null) UriParser.validateApp(value);
      this._app = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for application.
     *
     * @param {string} value Application to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setApp
     */

  }, {
    key: "setSubApp",

    /**
     * Equivalent to <code>new UriBuilder().setSubApp(value)</code>.
     *
     * @param {string} value Sub-application to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setSubApp
     * @see UuApp.Uri.UriBuilder#setSubApp
     */
    value: function setSubApp(value) {
      // "instance" method
      if (value != null) UriParser.validateSubApp(value);
      this._subApp = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for sub-application.
     *
     * @param {string} value Sub-application to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setSubApp
     */

  }, {
    key: "setSpp",

    /**
     * Equivalent to <code>new UriBuilder().setSpp(value)</code>.
     *
     * @param {string} value SPP to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setSpp
     * @see UuApp.Uri.UriBuilder#setSpp
     */
    value: function setSpp(value) {
      // "instance" method
      if (value != null) UriParser.validateSpp(value);
      this._spp = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for SPP.
     *
     * @param {string} value SPP to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setSpp
     */

  }, {
    key: "setTid",

    /**
     * Equivalent to <code>new UriBuilder().setTid(value)</code>.
     *
     * @param {string} value Tenant ID to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setTid
     * @see UuApp.Uri.UriBuilder#setTid
     */
    value: function setTid(value) {
      // "instance" method
      if (value != null) UriParser.validateTid(value);
      this._tid = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for tenant ID.
     *
     * @param {string} value Tenant ID to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setTid
     */

  }, {
    key: "setAwid",

    /**
     * Equivalent to <code>new UriBuilder().setAwid(value)</code>.
     *
     * @param {string} value awid to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setAwid
     * @see UuApp.Uri.UriBuilder#setAwid
     */
    value: function setAwid(value) {
      // "instance" method
      if (value != null) UriParser.validateAwid(value);
      this._awid = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for awid.
     *
     * @param {string} value awid to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setAwid
     */

  }, {
    key: "setParameters",

    /**
     * Equivalent to <code>new UriBuilder().setParameters(value)</code>.
     *
     * @param {string} value Parameters to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setParameters
     * @see UuApp.Uri.UriBuilder#setParameters
     */
    value: function setParameters(value) {
      // "instance" method
      this._parameters = {};
      if (value) for (var k in value) {
        this.setParameter(k, value[k]);
      }
      return this;
    }
    /**
     * Chainable setter for parameters (replaces all parameters).
     *
     * @param {string} value Parameters to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setParameters
     */

  }, {
    key: "getPort",
    value: function getPort() {
      return this._port != null ? Number(this._port) : this._port;
    }
  }, {
    key: "setPort",

    /**
     * Equivalent to <code>new UriBuilder().setPort(value)</code>.
     *
     * @param {(string|number)} value Port to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setPort
     * @see UuApp.Uri.UriBuilder#setPort
     */
    value: function setPort(value) {
      if (value != null) UriParser.validatePort(value);
      this._port = value != null ? value : null;
      return this;
    }
  }, {
    key: "getGateway",
    value: function getGateway() {
      return UriBuilder.formatGateway(this._scheme, this._hostname, this._port);
    }
  }, {
    key: "setGateway",

    /**
     * Equivalent to <code>new UriBuilder().setGateway(value)</code>.
     *
     * @param {string} value Gateway to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setGateway
     * @see UuApp.Uri.UriBuilder#setGateway
     */
    value: function setGateway(value) {
      var obj = value != null ? UriParser.parseGateway(value) : null;
      this._scheme = obj && obj.scheme || null;
      this._hostname = obj && obj.hostname || null;
      this._port = obj && obj.port != null ? obj.port : null;
      return this;
    }
  }, {
    key: "getProduct",
    value: function getProduct() {
      return UriBuilder.formatProduct(this._vendor, this._app, this._subApp, this._spp);
    }
  }, {
    key: "setProduct",

    /**
     * Equivalent to <code>new UriBuilder().setProduct(value)</code>.
     *
     * @param {string} value Product to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setProduct
     * @see UuApp.Uri.UriBuilder#setProduct
     */
    value: function setProduct(value) {
      var obj = value ? UriParser.parseProduct(value) : {};
      this._vendor = obj.vendor || null;
      this._app = obj.app || null;
      this._subApp = obj.subApp || null;
      this._spp = obj.spp || null;
      return this;
    }
  }, {
    key: "getWorkspace",
    value: function getWorkspace() {
      return UriBuilder.formatWorkspace(this._tid, this._awid);
    }
  }, {
    key: "setWorkspace",

    /**
     * Chainable setter for workspace ID.
     *
     * @param {string} value Workspace ID to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setWorkspace
     */
    value: function setWorkspace(value) {
      var obj = value ? UriParser.parseWorkspace(value) : {};
      this._tid = obj.tid || null;
      this._awid = obj.awid || null;
      return this;
    }
  }, {
    key: "getUseCase",
    value: function getUseCase() {
      return this._useCase;
    }
  }, {
    key: "setUseCase",

    /**
     * Equivalent to <code>new UriBuilder().setUseCase(value)</code>.
     *
     * @param {string} value Use case to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setUseCase
     * @see UuApp.Uri.UriBuilder#setUseCase
     */
    value: function setUseCase(value) {
      if (value != null) {
        value = value.replace(/(^\/+|\/+$)/g, "");

        if (value) {
          UriParser.validateUseCase(encodeURIComponent(value));
        } else {
          value = null;
        }
      }

      this._useCase = value;
      return this;
    }
  }, {
    key: "throwOnSet",
    value: function throwOnSet(attr) {
      throw new BaseError("\nSetting of \"".concat(attr, "\" and other properties via property access \nis prohibited with UriBuilder to prevent typos. \nUse get").concat(attr[0].toUpperCase()).concat(attr.substr(1), "() and \nset").concat(attr[0].toUpperCase()).concat(attr.substr(1), "(value) instead.\n"));
    }
  }, {
    key: "scheme",
    get: function get() {
      return this.getScheme();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("scheme");
    }
  }, {
    key: "hostname",
    get: function get() {
      return this.getHostname();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("hostname");
    }
  }, {
    key: "vendor",
    get: function get() {
      return this.getVendor();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("vendor");
    }
  }, {
    key: "app",
    get: function get() {
      return this.getApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("app");
    }
  }, {
    key: "subApp",
    get: function get() {
      return this.getSubApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("subApp");
    }
  }, {
    key: "spp",
    get: function get() {
      return this.getSpp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("spp");
    }
  }, {
    key: "tid",
    get: function get() {
      return this.getTid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("tid");
    }
  }, {
    key: "awid",
    get: function get() {
      return this.getAwid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("awid");
    }
  }, {
    key: "parameters",
    get: function get() {
      return this.getParameters();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("parameters");
    }
  }, {
    key: "port",
    get: function get() {
      return this.getPort();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("port");
    }
  }, {
    key: "gateway",
    get: function get() {
      return this.getGateway();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("gateway");
    }
  }, {
    key: "product",
    get: function get() {
      return this.getProduct();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("product");
    }
  }, {
    key: "workspace",
    get: function get() {
      return this.getWorkspace();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("workspace");
    }
  }, {
    key: "useCase",
    get: function get() {
      return this.getUseCase();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("useCase");
    }
  }], [{
    key: "parse",
    value: function parse(uri) {
      return new UriBuilder().parse(uri);
    }
  }, {
    key: "format",
    value: function format(uri) {
      return UriParser.format(uri);
    }
  }, {
    key: "formatGateway",
    value: function formatGateway(scheme, hostname, port) {
      return UriParser.formatGateway(scheme, hostname, port);
    }
  }, {
    key: "formatProduct",
    value: function formatProduct(vendor, app, subApp, spp) {
      return UriParser.formatProduct(vendor, app, subApp, spp);
    }
  }, {
    key: "formatWorkspace",
    value: function formatWorkspace(tid, awid) {
      return UriParser.formatWorkspace(tid, awid);
    }
  }, {
    key: "formatParameters",
    value: function formatParameters(params) {
      return UriParser.formatParameters(params);
    }
  }, {
    key: "set",
    value: function set()
    /* ... */
    {
      var builder = new UriBuilder();
      return builder.set.apply(builder, arguments);
    }
    /**
     * Equivalent to <code>new UriBuilder().setParameter(name, value)</code>.
     *
     * @param {string} name The parameter name.
     * @param {string} value The parameter value.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setParameter
     * @see UuApp.Uri.UriBuilder#setParameter
     */

  }, {
    key: "setParameter",
    value: function setParameter(name, value) {
      return new UriBuilder().setParameter(name, value);
    }
  }, {
    key: "setScheme",
    value: function setScheme(value) {
      // "static" method
      return new UriBuilder().setScheme(value);
    }
  }, {
    key: "setHostname",
    value: function setHostname(value) {
      // "static" method
      return new UriBuilder().setHostname(value);
    }
    /**
     * Chainable setter for port.
     *
     * @param {string} value Port to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setPort
     */

  }, {
    key: "setPort",
    value: function setPort(value) {
      // "static" method
      return new UriBuilder().setPort(value);
    }
    /**
     * Chainable setter for gateway.
     *
     * @param {string} value Gateway to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setGateway
     */

  }, {
    key: "setGateway",
    value: function setGateway(value) {
      // "static" method
      return new UriBuilder().setGateway(value);
    }
  }, {
    key: "setVendor",
    value: function setVendor(value) {
      // "static" method
      return new UriBuilder().setVendor(value);
    }
  }, {
    key: "setApp",
    value: function setApp(value) {
      // "static" method
      return new UriBuilder().setApp(value);
    }
  }, {
    key: "setSubApp",
    value: function setSubApp(value) {
      // "static" method
      return new UriBuilder().setSubApp(value);
    }
  }, {
    key: "setSpp",
    value: function setSpp(value) {
      // "static" method
      return new UriBuilder().setSpp(value);
    }
    /**
     * Chainable setter for product.
     *
     * @param {string} value Product to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setProduct
     */

  }, {
    key: "setProduct",
    value: function setProduct(value) {
      // "static" method
      return new UriBuilder().setProduct(value);
    }
  }, {
    key: "setTid",
    value: function setTid(value) {
      // "static" method
      return new UriBuilder().setTid(value);
    }
  }, {
    key: "setAwid",
    value: function setAwid(value) {
      // "static" method
      return new UriBuilder().setAwid(value);
    }
    /**
     * Equivalent to <code>new UriBuilder().setWorkspace(value)</code>.
     *
     * @param {string} value Workspace to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setWorkspace
     * @see UuApp.Uri.UriBuilder#setWorkspace
     */

  }, {
    key: "setWorkspace",
    value: function setWorkspace(value) {
      // "static" method
      return new UriBuilder().setWorkspace(value);
    }
    /**
     * Chainable setter for use case.
     *
     * @param {string} value Use case to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setUseCase
     */

  }, {
    key: "setUseCase",
    value: function setUseCase(value) {
      // "static" method
      return new UriBuilder().setUseCase(value);
    }
  }, {
    key: "setParameters",
    value: function setParameters(value) {
      // "static" method
      return new UriBuilder().setParameters(value);
    }
  }]);

  return UriBuilder;
}();

Uri.prototype.Builder = UriBuilder;
module.exports = UriBuilder;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(5),
    BaseError = _require.BaseError;

var InvalidUriPartError = __webpack_require__(8);

var UNRESERVED = "[\\w\\.\\-~]";
var UNRESERVED_ENCODED = "[\\w\\.\\-~%]";
var IDENTIFIER = "[a-zA-Z0-9_]";
var SCHEME = "(".concat(UNRESERVED, "+)"); // No reason to match IPv4 (invalid IP address is always
// matched as generic hostname - we cannot distinguish them)
// IPV4_PART = "(25[0-5]|2[0-5][0-9]|1[0-9][0-9]|[0-9][0-9]?)"
// IPV4 = "(#{IPV4_PART}(\\.#{IPV4_PART}){3})"
// Only rough validation
// see http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses

var IPV6_PART = "([0-9a-fA-F]{1,4})";
var IPV6 = "(\\[".concat(IPV6_PART, "(:(").concat(IPV6_PART, ")?){1,7}\\])");
var HOSTNAME = "(".concat(IPV6, "|").concat(UNRESERVED, "+)");
var PORT = "(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[0-5][0-9]{4}|[1-9][0-9]{0,3})";
var GATEWAY = "(".concat(SCHEME, "://").concat(HOSTNAME, "(:").concat(PORT, ")?)");
var VENDOR = "(".concat(IDENTIFIER, "{1,32})");
var APP = "(".concat(IDENTIFIER, "{1,32})");
var SUB_APP = "(".concat(IDENTIFIER, "{1,32})");
var SPP = "(".concat(IDENTIFIER, "{1,32})");
var PRODUCT = "(?=[^/]{1,131}(?:/|$))((?:".concat(VENDOR, "\\-)?").concat(APP, "(?:\\-").concat(SUB_APP, "(?:\\-").concat(SPP, ")?)?)");
var TID = "(".concat(IDENTIFIER, "{1,32})");
var AWID = "(".concat(IDENTIFIER, "{1,32})");
var WORKSPACE = "(?=[^/\\?]{1,65}(?:/|\\?|$))((?:".concat(TID, "\\-)?").concat(AWID, ")");
var USE_CASE = "(".concat(UNRESERVED_ENCODED, "+(?:/").concat(UNRESERVED_ENCODED, "+)*)");
var PARAMETER_NAME = "(?:".concat(UNRESERVED_ENCODED, "+)");
var PARAMETER_NAME_DECODED = "(?:[\\w\\.\\-~\\[\\]]+)";
var PARAMETER_VALUE = "(?:[^=&#]*)";
var PARAMETER = "(?:(?:".concat(PARAMETER_NAME, "(?:=").concat(PARAMETER_VALUE, ")?)?)");
var PARAMETERS = "(".concat(PARAMETER, "(?:&").concat(PARAMETER, ")*)");
var URI_REGEXP = new RegExp("^(?:".concat(GATEWAY, ")?\\/").concat(PRODUCT, "\\/").concat(WORKSPACE, "(?:/").concat(USE_CASE, ")?\\/?(?:\\?").concat(PARAMETERS, "?)?$"));

var UriParser = /*#__PURE__*/function () {
  function UriParser() {
    _classCallCheck(this, UriParser);
  }

  _createClass(UriParser, [{
    key: "parse",
    value: function parse(str, UriBuilder) {
      if (!UriBuilder) throw new BaseError("UriBuilder must be provided.");
      var result = (str || "").match(URI_REGEXP); //      console.log(result);

      if (!result) throw new BaseError("Parse error - invalid uri: " + (str || ""));
      UriBuilder.setScheme(result[2]);
      UriBuilder.setHostname(result[3]);
      UriBuilder.setPort(result[10]);
      UriBuilder.setVendor(result[12]);
      UriBuilder.setApp(result[13]);
      UriBuilder.setSubApp(result[14]);
      UriBuilder.setSpp(result[15]);
      UriBuilder.setTid(result[17]);
      UriBuilder.setAwid(result[18]);
      UriBuilder.setUseCase(result[19] ? decodeURIComponent(result[19]) : null);
      var uriBuilder = UriBuilder;
      var params = result[20];

      if (params) {
        params.split("&").forEach(function (pair) {
          if (!pair) return;
          var eqlSignIdx = pair.indexOf("=");
          var k = eqlSignIdx !== -1 ? pair.substr(0, eqlSignIdx) : pair;
          var v = eqlSignIdx !== -1 ? pair.substr(eqlSignIdx + 1) : "";
          uriBuilder.setParameter(decodeURIComponent(k), decodeURIComponent(v));
        });
      }

      return uriBuilder;
    }
  }, {
    key: "format",
    value: function format(uri) {
      var parts = [];
      parts.push("".concat(uri.getGateway() || "", "/").concat(uri.getProduct() || "", "/").concat(uri.getWorkspace() || ""));
      var uc = uri.getUseCase();

      if (uc) {
        if (uc.charAt(0) !== "/") parts.push("/");
        parts.push(encodeURI(uc));
      }

      parts = [parts.join("").replace(/\/+$/, "")]; // remove all trailing slashes

      var params = uri.getParameters();

      var paramParts = this._createParamParts(params);

      parts = parts.concat(paramParts);
      return parts.join("");
    }
  }, {
    key: "parseGateway",
    value: function parseGateway(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("gateway", value, GATEWAY);
      var result = value.match(new RegExp("^" + GATEWAY + "$"));
      if (!result) throw new InvalidUriPartError("gateway", value, GATEWAY); //  console.log(result);
      //      ["http://example.com:123", "http://example.com:123", "http",
      //       "example.com", undefined, undefined,
      //       undefined, undefined, undefined,
      //       ":123", "123"]

      return {
        scheme: result[2],
        hostname: result[3],
        port: result[10]
      };
    }
  }, {
    key: "formatGateway",
    value: function formatGateway(scheme, hostname, port) {
      if (!scheme && !hostname && !port) return null;
      this.validateScheme(scheme);
      this.validateHostname(hostname);
      if (port != null) this.validatePort(port);
      return "".concat(scheme, "://").concat(hostname).concat(port != null ? ":" + port : "");
    }
  }, {
    key: "parseProduct",
    value: function parseProduct(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("product", value, PRODUCT);
      var result = value.match(new RegExp("^" + PRODUCT + "$"));
      if (!result) throw new InvalidUriPartError("product", value, PRODUCT);
      return {
        vendor: result[2],
        app: result[3],
        subApp: result[4],
        spp: result[5]
      };
    }
  }, {
    key: "formatProduct",
    value: function formatProduct(vendor, app, subApp, spp) {
      if (!vendor && !app && !subApp && !spp) return null;
      if (vendor) this.validateVendor(vendor);
      this.validateApp(app);
      if (subApp) this.validateSubApp(subApp);
      if (spp) this.validateSpp(spp);
      var result = [];
      if (vendor) result.push(vendor + "-");
      result.push(app);
      if (subApp) result.push("-" + subApp);
      if (spp) result.push("-" + spp);
      return result.join("");
    }
  }, {
    key: "parseWorkspace",
    value: function parseWorkspace(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("workspace", value, WORKSPACE);
      var result = value.match(new RegExp("^" + WORKSPACE + "$"));
      if (!result) throw new InvalidUriPartError("workspace", value, WORKSPACE);
      return {
        tid: result[2],
        awid: result[3]
      };
    }
  }, {
    key: "formatWorkspace",
    value: function formatWorkspace(tid, awid) {
      if (!tid && !awid) return null;
      if (tid) this.validateTid(tid);
      this.validateAwid(awid);
      var result = [];
      if (tid) result.push(tid + "-");
      result.push(awid);
      return result.join("");
    }
  }, {
    key: "formatParameters",
    value: function formatParameters(params) {
      var parts = this._createParamParts(params);

      return parts.join("");
    }
  }, {
    key: "_createParamParts",
    value: function _createParamParts(params) {
      var _this = this;

      var parts = [];
      var paramKeys = Object.keys(params);
      paramKeys.sort();
      var first = true;

      var _loop = function _loop(i) {
        var k = paramKeys[i];
        var value = params[k];

        if (Array.isArray(value)) {
          value.forEach(function (v) {
            _this._encodeParams(first, k, v, parts);

            first = false;
          });
        } else {
          _this._encodeParams(first, k, value, parts);

          first = false;
        }
      };

      for (var i = 0; i < paramKeys.length; i++) {
        _loop(i);
      }

      return parts;
    }
  }, {
    key: "_encodeParams",
    value: function _encodeParams(first, k, v, parts) {
      parts.push(first ? "?" : "&");
      parts.push(encodeURIComponent(k));
      if (v == null || v === "") return parts;
      parts.push("=");
      parts.push(encodeURIComponent(v));
      return parts;
    }
  }, {
    key: "validate",
    value: function validate(value, regExp, name) {
      if (typeof value !== "string" || !value.match(new RegExp("^" + regExp + "$"))) throw new InvalidUriPartError(name, value, regExp);
    }
  }, {
    key: "validateScheme",
    value: function validateScheme(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SCHEME;
      this.validate(value, regExp, "scheme");
    }
  }, {
    key: "validateHostname",
    value: function validateHostname(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HOSTNAME;
      this.validate(value, regExp, "hostname");
    }
  }, {
    key: "validatePort",
    value: function validatePort(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PORT;
      value = typeof value === "number" ? value + "" : value;
      this.validate(value, regExp, "port");
    }
  }, {
    key: "validateGateway",
    value: function validateGateway(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GATEWAY;
      this.validate(value, regExp, "gateway");
    }
  }, {
    key: "validateVendor",
    value: function validateVendor(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VENDOR;
      this.validate(value, regExp, "vendor");
    }
  }, {
    key: "validateApp",
    value: function validateApp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APP;
      this.validate(value, regExp, "app");
    }
  }, {
    key: "validateSubApp",
    value: function validateSubApp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUB_APP;
      this.validate(value, regExp, "subApp");
    }
  }, {
    key: "validateSpp",
    value: function validateSpp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SPP;
      this.validate(value, regExp, "spp");
    }
  }, {
    key: "validateProduct",
    value: function validateProduct(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PRODUCT;
      this.validate(value, regExp, "product");
    }
  }, {
    key: "validateTid",
    value: function validateTid(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TID;
      this.validate(value, regExp, "tid");
    }
  }, {
    key: "validateAwid",
    value: function validateAwid(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AWID;
      this.validate(value, regExp, "awid");
    }
  }, {
    key: "validateWorkspace",
    value: function validateWorkspace(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WORKSPACE;
      this.validate(value, regExp, "workspace");
    }
  }, {
    key: "validateUseCase",
    value: function validateUseCase(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USE_CASE;
      this.validate(value, regExp, "useCase");
    }
  }, {
    key: "validateParameterName",
    value: function validateParameterName(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PARAMETER_NAME_DECODED;
      this.validate(value, regExp, "parameterName");
    }
  }, {
    key: "validateParameterValue",
    value: function validateParameterValue(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (value != null && !(typeof value === "string" || Array.isArray(value))) throw new InvalidUriPartError("parameterValue", value, String); // for our generic uuUri following check is always true; will skip for optimization
      //      if (value != null && !encodeURIComponent(value).match(new RegExp("^" + PARAMETER_VALUE + "$"))) throw new InvalidUriPartError("parameterValue", value, PARAMETER_VALUE);
    }
  }]);

  return UriParser;
}();

module.exports = new UriParser();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = __webpack_require__(5),
    BaseError = _require.BaseError;

var InvalidUriPartError = /*#__PURE__*/function (_BaseError) {
  _inherits(InvalidUriPartError, _BaseError);

  var _super = _createSuper(InvalidUriPartError);

  function InvalidUriPartError(partName, value, expected) {
    var _this;

    _classCallCheck(this, InvalidUriPartError);

    var message = "";

    if (typeof expected !== "string") {
      expected = expected === String ? "string" : expected;
      message = "Value \"".concat(value, "\" of URI part [").concat(partName, "] must be ").concat(expected, " but its typeof is ").concat(_typeof(value), ".");
    } else {
      message = "Value \"".concat(value, "\" of URI part [").concat(partName, "] does not match regular expression /").concat(expected.replace(/\//g, "\\/"), "/.");
    }

    _this = _super.call(this, message || "Unexpected error occurred during operation execution.", null);
    _this.code = "uu-app-uri/InvalidUriPartError";
    return _this;
  }

  return InvalidUriPartError;
}(BaseError);

module.exports = InvalidUriPartError;

/***/ })
/******/ ]);
});