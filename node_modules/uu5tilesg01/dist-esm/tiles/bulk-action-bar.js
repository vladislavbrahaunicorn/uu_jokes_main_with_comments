//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Lsi from "../config/lsi.js";
import { mergeButtonProps } from "./util.js";
import "./bulk-action-bar.less";
//@@viewOff:imports

export const BulkActionBar = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.ScreenSizeMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "BulkActionBar",
    classNames: {
      main: Cfg.CSS + "bulk-action-bar",
      visible: Cfg.CSS + "bulk-action-bar-visible",
      invisible: Cfg.CSS + "bulk-action-bar-invisible",
      showSelected: Cfg.CSS + "bulk-action-bar-show-selected",
      showSelectedActive: Cfg.CSS + "bulk-action-bar-show-selected-active",
      showSelectedXs: Cfg.CSS + "bulk-action-bar-show-selected-xs",
      showSelectedLabel: Cfg.CSS + "bulk-action-bar-show-selected-label",
      showSelectedLabelActive: Cfg.CSS + "bulk-action-bar-show-selected-label-active",
      counter: Cfg.CSS + "bulk-action-bar-counter",
      counterContainer: Cfg.CSS + "bulk-action-bar-counter-container",
      actions: Cfg.CSS + "bulk-action-bar-actions",
      actionButton: Cfg.CSS + "bulk-action-bar-action-button",
      actionDropdown: Cfg.CSS + "bulk-action-bar-action-dropdown",
      title: Cfg.CSS + "bulk-action-bar-title",
      chevron: Cfg.CSS + "bulk-action-bar-chevron",
      noanimation: Cfg.CSS + "bulk-action-bar-noanimation"
    },
    lsi: Lsi.bulkActionBar,
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    defaults: {
      buttonCount: {
        xl: 6,
        l: 4,
        m: 2,
        s: 1
      }
    },
    opt: {
      pureRender: true // avoid re-render from parent
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    controller: UU5.PropTypes.object,
    title: UU5.PropTypes.any,
    actions: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        content: UU5.PropTypes.any, // UU5 content
        icon: UU5.PropTypes.string,
        onClick: UU5.PropTypes.func,
        active: UU5.PropTypes.bool
      })
    ),
    bgStyle: UU5.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    buttonProps: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.func])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      controller: null,
      title: <UU5.Bricks.Lsi lsi={Lsi.bulkActionBar.title} />,
      actions: [],
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    if (!this.props.controller) {
      UU5.Common.Tools.error(
        `The prop \`controller\` cannot be empty for ${this.getTagName()}. Either provide the prop or nest the component into UU5.Tiles.ListController.`
      );
    }
    let { showSelected, selected, total } = this.props.controller.getStatus();

    return {
      expanded: null,
      showSelected,
      selectedCount: selected,
      total
    };
  },

  componentDidMount() {
    this.props.controller.registerBar("bulkActionBar", this);
    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      let domNode = this.findDOMNode();
      domNode.addEventListener("animationstart", this._animationFix);
      domNode.addEventListener("animationend", this._animationFix);
    }
  },

  componentWillReceiveProps(nextProps) {
    let { showSelected, selected, total } = nextProps.controller.getStatus();
    let expanded = selected > 0;
    expanded !== !!this.state.expanded && this.setState({ expanded, showSelected, selectedCount: selected, total });
  },

  componentWillUnmount() {
    this.props.controller.unregisterBar("bulkActionBar");
    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      let domNode = this.findDOMNode();
      domNode.removeEventListener("animationstart", this._animationFix);
      domNode.removeEventListener("animationend", this._animationFix);
    }
  },

  componentDidUpdate(prevProps, prevState) {
    if (
      (this.state.screenSize !== prevState.screenSize ||
        (this.state.expanded !== prevState.expanded && !this.state.expanded)) &&
      this._panel.isExpanded()
    ) {
      this._panel.collapse();
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  update(setStateCallback) {
    let { showSelected, selected, total } = this.props.controller.getStatus();
    let expanded = selected > 0 !== !!this.state.expanded ? true : this.state.expanded;
    this.setState({ expanded, showSelected, selectedCount: selected, total }, setStateCallback);
  },

  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _animationFix(e) {
    // Edge & IE doesn't support changing of CSS "overflow" during animation in @keyframes
    if (e.type === "animationstart") e.target.style.overflow = "hidden";
    else e.target.style.overflow = "";
  },

  _toggleSelected() {
    this.state.showSelected ? this.props.controller.hideJustSelected() : this.props.controller.showJustSelected();
  },

  _toggleSelectedButton(status) {
    let props = mergeButtonProps(
      {
        className: status.showSelected ? this.getClassName().showSelectedActive : this.getClassName().showSelected,
        onClick: this._toggleSelected,
        colorSchema: "orange",
        bgStyle: "outline"
      },
      this.props.buttonProps,
      status.showSelected ? "showAll" : "showSelection"
    );

    return (
      <UU5.Bricks.Button {...props}>
        {this.getLsiValue(status.showSelected ? "showAll" : "showSelection")}
        {!status.showSelected && (
          <UU5.Bricks.Span className={this.getClassName().counterContainer}>
            <UU5.Bricks.Span className={this.getClassName().counter}>{`${status.selectedCount}`}</UU5.Bricks.Span>
          </UU5.Bricks.Span>
        )}
      </UU5.Bricks.Button>
    );
  },

  _getToggleSelectedBadge(status) {
    return (
      <UU5.Bricks.Button
        bgStyle="outline"
        className={
          status.showSelected ? this.getClassName().showSelectedLabelActive : this.getClassName().showSelectedLabel
        }
        colorSchema="orange"
      >
        {`${status.selectedCount}`}
      </UU5.Bricks.Button>
    );
  },

  _getButtons() {
    let actions = [];
    let activeCount = 0;
    let items = [];
    this.props.actions.forEach((item, i) => {
      let { content, active, ...restProps } = item;
      if ((active && activeCount < this.getDefault().buttonCount[this.getScreenSize()]) || this.isXs()) {
        activeCount++;
        let usedContent = this.getLsiItem(content);
        let usedBtnProps = mergeButtonProps(
          {
            bgStyle: "transparent",
            colorSchema: "custom",
            className: this.getClassName().actionButton
          },
          this.props.buttonProps,
          item.key || "action-" + i
        );
        actions.push(
          <UU5.Bricks.Button {...usedBtnProps} {...restProps}>
            {usedContent}
          </UU5.Bricks.Button>
        );
      } else {
        items.push({
          label: this.getLsiItem(item.content),
          ...restProps
        });
      }
    });

    if (items.length) {
      let props = mergeButtonProps(
        {
          bgStyle: "transparent",
          label: <UU5.Bricks.Icon icon="mdi-dots-vertical" />,
          className: this.getClassName().actionDropdown,
          iconHidden: true,
          items: items,
          pullRight: true,
          colorSchema: "custom"
        },
        this.props.buttonProps,
        "menu"
      );
      actions.push(<UU5.Bricks.Dropdown {...props} />);
    }
    return UU5.Common.Children.toArray(actions);
  },

  _registerPanel(panel) {
    this._panel = panel;
  },

  _isLsi(value) {
    return value && typeof value === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },

  _buildHeader() {
    let result;
    let status = this.state;
    let title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;

    if (this.isXs()) {
      result = [
        <UU5.Bricks.Span key="title" className={this.getClassName().title} content={title} />,
        this._getToggleSelectedBadge(status)
      ];
    } else {
      result = [
        <UU5.Bricks.Div key="left">
          <UU5.Bricks.Span className={this.getClassName().title} content={title} />
          {this._toggleSelectedButton(status)}
        </UU5.Bricks.Div>,
        <UU5.Bricks.Div key="right">{this._getButtons()}</UU5.Bricks.Div>
      ];
    }

    return result;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let xs = this.isXs();
    let mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;

    if (this.state.expanded !== null) {
      mainProps.className += " " + this.getClassName(this.state.expanded ? "visible" : "invisible");
    }
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");

    return this.getNestingLevel() ? (
      <UU5.Bricks.Panel
        {...mainProps}
        openClick={!xs ? "none" : "header"}
        iconExpanded={xs ? "mdi-chevron-up" : undefined}
        iconCollapsed={xs ? "mdi-chevron-down" : undefined}
        ref_={this._registerPanel}
        header={this._buildHeader()}
        colorSchemaHeader="custom"
        bgStyle={this.props.bgStyle}
        borderRadius={this.props.borderRadius}
        elevation={this.props.elevation}
      >
        {xs && this._toggleSelectedButton(this.state)}
        {xs && this._getButtons()}
      </UU5.Bricks.Panel>
    ) : null;
  }
  //@@viewOff:render
});

export default BulkActionBar;
