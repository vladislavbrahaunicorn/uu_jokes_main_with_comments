//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";
import Cfg from "../config/config.js";
import Lsi from "../config/lsi.js";
import { mergeButtonProps } from "./util.js";

import "./sorter-bar.less";
//@@viewOff:imports

export const SorterBar = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.ScreenSizeMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "SorterBar",
    classNames: {
      main: Cfg.CSS + "sorter-bar",
      titleBox: Cfg.CSS + "sorter-bar-title-box",
      title: Cfg.CSS + "sorter-bar-title",
      sorterBadge: Cfg.CSS + "sorter-bar-badge",
      addButton: Cfg.CSS + "sorter-bar-add-button",
      buttons: Cfg.CSS + "sorter-bar-buttons",
      sorterButton: Cfg.CSS + "sorter-bar-sorter-button",
      cancelBox: Cfg.CSS + "sorter-bar-cancel-box",
      cancelButton: Cfg.CSS + "sorter-bar-cancel-button",
      collapsed: Cfg.CSS + "sorter-bar-collapsed",
      chevron: Cfg.CSS + "sorter-bar-chevron",
      visible: Cfg.CSS + "sorter-bar-visible",
      invisible: Cfg.CSS + "sorter-bar-invisible",
      noAnimation: Cfg.CSS + "sorter-bar-no-animation"
    },
    lsi: Lsi.sorterBar,
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    controller: UU5.PropTypes.object,
    title: UU5.PropTypes.any,
    bgStyle: UU5.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    buttonProps: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.func])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      controller: null,
      title: <UU5.Bricks.Lsi lsi={Lsi.sorterBar.title} />,
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    if (!this.props.controller) {
      UU5.Common.Tools.error(
        `The prop \`controller\` cannot be empty for ${this.getTagName()}. Either provide the prop or nest the component into UU5.Tiles.ListController.`
      );
    }
    this.props.controller.registerBar("sorterBar", this);
    // NOTE SorterBar merely displays data. InfoBar is the component that stores current sort state.
    // InfoBar needs to pass this info to SorterBar but it doesn't have access to its props so it
    // passes it via setSortProps(...) API and we have to store it in state.
    return {
      expanded: false,
      animate: false,
      sortProps: {}
    };
  },

  componentDidMount() {
    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      let domNode = this.findDOMNode();
      domNode.addEventListener("animationstart", this._animationFix);
      domNode.addEventListener("animationend", this._animationFix);
    }
  },

  componentWillUnmount() {
    this.props.controller.unregisterBar("sorterBar");
    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      let domNode = this.findDOMNode();
      domNode.removeEventListener("animationstart", this._animationFix);
      domNode.removeEventListener("animationend", this._animationFix);
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  setSortProps(sortProps, setStateCallback) {
    // { visible, sortItems, sortValues, onApply, onCancel }
    this.setState(state => {
      return {
        sortProps,
        animate:
          state.animate || (Object.keys(state.sortProps).length > 0 && sortProps.visible != state.sortProps.visible)
      };
    }, setStateCallback);
  },
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _animationFix(e) {
    // Edge & IE doesn't support changing of CSS "overflow" during animation in @keyframes
    if (e.type === "animationstart") e.target.style.overflow = "hidden";
    else e.target.style.overflow = "";
  },

  _cancelAdvancedSort() {
    let { onCancel } = this.state.sortProps;
    if (typeof onCancel === "function") onCancel();
  },

  _sortByItem(item, descending) {
    let { onApply, sortValues } = this.state.sortProps;
    if (typeof onApply === "function") {
      let newSortValues = sortValues.concat({
        key: item.key,
        descending
      });
      onApply(newSortValues);
    }
  },

  _cancelSortByItem(item) {
    let { onApply, sortValues } = this.state.sortProps;
    if (typeof onApply === "function") {
      let newSortValues = sortValues.filter(it => it.key !== item.key);
      onApply(newSortValues);
    }
  },

  _getSorterBadge() {
    let value = (this.state.sortProps.sortValues || []).length;
    return (
      value > 0 && (
        <UU5.Bricks.Button
          colorSchema={this.props.colorSchema || "blue"}
          className={this.getClassName().sorterBadge}
          content={value}
        />
      )
    );
  },

  _getDropdown(sortItems, sortValues) {
    if (!sortValues) sortValues = [];

    let items = [];
    if (Array.isArray(sortItems)) {
      for (let item of sortItems) {
        let applied = sortValues.some(it => it.key === item.key);
        items.push({
          label: `${this.getLsiItem(item.name)}\xa0-\xa0${this.getLsiValue("ascending")}`,
          onClick: () => this._sortByItem(item, false),
          disabled: applied
        });
        items.push({
          label: `${this.getLsiItem(item.name)}\xa0-\xa0${this.getLsiValue("descending")}`,
          onClick: () => this._sortByItem(item, true),
          disabled: applied
        });
      }
    }

    let props = mergeButtonProps(
      {
        key: "addButton",
        className: this.getClassName().addButton,
        onClick: this._addSorter,
        bgStyle: "outline",
        colorSchema: this.props.colorSchema || "blue",
        label: [<UU5.Bricks.Icon key="icon" icon="mdi-plus-circle" />, this.getLsiValue("addSorter")],
        iconHidden: true,
        items: items,
        borderRadius: "16px"
      },
      this.props.buttonProps,
      "addSorter"
    );

    return <UU5.Bricks.Dropdown {...props} />;
  },

  _getButtons() {
    let buttons = [];
    let { sortItems, sortValues } = this.state.sortProps;
    if (sortValues && Array.isArray(sortValues)) {
      for (let item of sortValues) {
        let { key, descending } = item || {};
        let { name } = (sortItems || []).find(it => it.key === key) || {};

        let content;
        if (UU5.Common.Element.isValid(name)) {
          content = name;
        } else if (name) {
          content = [
            this.getLsiItem(name),
            "\xA0-\xA0",
            <UU5.Bricks.Strong key="value">
              {this.getLsiValue(descending ? "descending" : "ascending")}
            </UU5.Bricks.Strong>
          ];
        } else {
          content = this.getLsiItem(item.value);
        }
        let props = mergeButtonProps(
          {
            key,
            className: this.getClassName().sorterButton,
            onClick: () => this._cancelSortByItem(item),
            colorSchema: this.props.colorSchema || "blue",
            bgStyle: "outline",
            borderRadius: "16px"
          },
          this.props.buttonProps,
          key,
          item
        );
        buttons.push(
          <UU5.Bricks.Button {...props}>
            {content}
            <UU5.Bricks.Icon icon="mdi-close" />
          </UU5.Bricks.Button>
        );
      }
    }

    buttons.push(this._getDropdown(sortItems, sortValues));

    return buttons;
  },

  _getCancelButton() {
    return (
      <UU5.Bricks.Div className={this.getClassName("cancelBox")} key="cancel">
        <UU5.Bricks.Button
          bgStyle="transparent"
          onClick={this._cancelAdvancedSort}
          className={this.getClassName().cancelButton}
          colorSchema="custom"
        >
          {this.getLsiValue("cancelAdvancedSort")}
        </UU5.Bricks.Button>
      </UU5.Bricks.Div>
    );
  },

  _isLsi(value) {
    return value && typeof value === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },

  _buildHeader() {
    let status = this.props.controller.getStatus();
    let title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;

    let result = [
      <UU5.Bricks.Div key="left" className={this.getClassName("titleBox")}>
        <UU5.Bricks.Span className={this.getClassName().title} content={title} />
        {this.isXs() ? this._getSorterBadge(status) : this._getButtons()}
      </UU5.Bricks.Div>
    ];

    if (!this.isXs()) {
      result.push(this._getCancelButton());
    }

    return result;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    // todo header
    let mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");

    let classNames = mainProps.className ? [mainProps.className] : [];
    let xs = this.isXs();
    if (xs && !this.state.expanded) {
      classNames.push(this.getClassName().collapsed);
    }
    classNames.push(this.getClassName(this.state.sortProps.visible ? "visible" : "invisible"));
    if (!this.state.animate) classNames.push(this.getClassName("noAnimation"));

    return this.getNestingLevel() ? (
      <UU5.Bricks.Panel
        {...mainProps}
        className={classNames.join(" ")}
        openClick={!xs ? "none" : "header"}
        iconExpanded={xs ? "mdi-chevron-up" : undefined}
        iconCollapsed={xs ? "mdi-chevron-down" : undefined}
        header={this._buildHeader()}
        colorSchemaHeader="custom"
        bgStyle={this.props.bgStyle}
        borderRadius={this.props.borderRadius}
        elevation={this.props.elevation}
      >
        {xs && <UU5.Bricks.Div className={this.getClassName("buttons")}>{this._getButtons()}</UU5.Bricks.Div>}
        {xs && this._getCancelButton()}
      </UU5.Bricks.Panel>
    ) : null;
  }
  //@@viewOff:render
});

export default SorterBar;
