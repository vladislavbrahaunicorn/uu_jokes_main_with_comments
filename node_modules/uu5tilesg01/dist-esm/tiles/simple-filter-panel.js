//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";
import Cfg from "../config/config.js";
import Lsi from "../config/lsi.js";
import { mergeButtonProps } from "./util.js";

import "./simple-filter-panel.less";
//@@viewOff:imports

export const SimpleFilterPanel = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.LsiMixin,
    UU5.Common.ScreenSizeMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "SimpleFilterPanel",
    classNames: {
      main: Cfg.CSS + "simple-filter-panel",
      formRow: Cfg.CSS + "simple-filter-panel-form-row"
    },
    opt: {
      pureRender: true // avoid re-render from parent
    },

    lsi: Lsi.simpleFilterPanel
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    appliedFilters: UU5.PropTypes.object,
    filters: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        key: UU5.PropTypes.string,
        label: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]),
        filterFn: UU5.PropTypes.func
      })
    ),
    addFilter: UU5.PropTypes.func,
    removeFilter: UU5.PropTypes.func,
    filterBar: UU5.PropTypes.object,
    buttonProps: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.func])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      appliedFilters: undefined,
      filters: undefined,
      addFilter: undefined,
      removeFilter: undefined,
      filterBar: undefined,
      buttonProps: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _registerForm(cmp) {
    this._form = cmp;
  },

  _save() {
    let values = this._form.getValues();
    let type = values.type || "";
    let value = values.value || "";
    if (type.length > 0 && value.length > 0) {
      let { key, label, filterFn } = this.props.filters[type];
      this.props.addFilter(key, label, value, filterFn, null, () => this.props.filterBar.collapse());
    }
  },

  _getOptions() {
    return Object.keys(this.props.filters).map(idx => (
      <UU5.Forms.Select.Option
        key={idx}
        value={idx}
        disabled={this.props.appliedFilters.hasOwnProperty(this.props.filters[idx].key)}
      >
        {this.getLsiItem(this.props.filters[idx].label)}
      </UU5.Forms.Select.Option>
    ));
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <UU5.Forms.Form {...this.getMainPropsToPass()} ref_={this._registerForm} saveOnEnter onSave={this._save}>
        <UU5.Bricks.Row className={this.getClassName().formRow}>
          <UU5.Bricks.Column colWidth="xs-12 s-6 m-5 l-4 xl-3">
            <UU5.Forms.Select
              name="type"
              labelColWidth="xs-12 s-11 m-5"
              inputColWidth="xs-12 s-11 m-7"
              label={this.getLsiValue("filterTypeLabel")}
              placeholder={this.getLsiValue("filterTypePlaceholder")}
            >
              {this._getOptions()}
            </UU5.Forms.Select>
          </UU5.Bricks.Column>
          <UU5.Bricks.Column colWidth="xs-12 s-6 m-5 l-4 xl-3">
            <UU5.Forms.Text
              name="value"
              labelColWidth="xs-12 m-5"
              inputColWidth="xs-12 m-7"
              label={this.getLsiValue("filterValueLabel")}
              placeholder={this.getLsiValue("filterValuePlaceholder")}
            />
          </UU5.Bricks.Column>
          {this.isS() && <UU5.Bricks.Column colWidth="xs-0 s-6 m-0" content={"\xa0"} />}
          <UU5.Bricks.Column colWidth="xs-12 s-6 m-2 xl-1">
            <UU5.Bricks.Button
              {...mergeButtonProps(
                { onClick: this._save, colorSchema: this.props.colorSchema || "primary" },
                this.props.buttonProps,
                "submitFilter"
              )}
            >
              {this.getLsiValue("addButton")}
            </UU5.Bricks.Button>
          </UU5.Bricks.Column>
        </UU5.Bricks.Row>
      </UU5.Forms.Form>
    );
  }
  //@@viewOff:render
});

export default SimpleFilterPanel;
