//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Lsi from "../config/lsi.js";

import "./info-bar.less";

// import "./toolbar.less";
//@@viewOff:imports

export const InfoBar = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.LsiMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.ScreenSizeMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "InfoBar",
    classNames: {
      main: Cfg.CSS + "info-bar",
      selectable: Cfg.CSS + "info-bar-selectable",
      selectableDropdown: Cfg.CSS + "info-bar-selectable-dropdown",
      sortable: Cfg.CSS + "info-bar-sortable",
      sortableDropdown: Cfg.CSS + "info-bar-sortable-dropdown",
      counter: Cfg.CSS + "info-bar-counter"
    },
    lsi: Lsi.infoBar,
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    controller: UU5.PropTypes.object,
    sortable: UU5.PropTypes.bool,
    selectable: UU5.PropTypes.bool,
    advancedSort: UU5.PropTypes.bool, // controlled-dependent
    sortItems: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        key: UU5.PropTypes.string,
        name: UU5.PropTypes.any,
        sortFn: UU5.PropTypes.func
      })
    ),
    sortValues: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        key: UU5.PropTypes.string,
        descending: UU5.PropTypes.bool
      })
    ),
    bgStyle: UU5.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      controller: null,
      sortable: true,
      selectable: undefined,
      advancedSort: false,
      sortItems: [],
      sortValues: [],
      bgStyle: "underline",
      borderRadius: null,
      elevation: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    if (!this.props.controller) {
      UU5.Common.Tools.error(
        `The prop \`controller\` cannot be empty for ${this.getTagName()}. Either provide the prop or nest the component into UU5.Tiles.ListController.`
      );
    }
    return {
      ...this._getSortSettings(this.props)
    };
  },

  componentDidMount() {
    this.props.controller.registerBar("infoBar", this);
    this._propagateSortValues(false);
  },

  componentWillUnmount() {
    this.props.controller.unregisterBar("infoBar");
  },

  componentWillReceiveProps(newProps) {
    if (
      newProps.controlled &&
      (this.props.advancedSort !== newProps.advancedSort ||
        !UU5.Common.Tools.deepEqual(this.props.sortItems, newProps.sortItems) ||
        !UU5.Common.Tools.deepEqual(this.props.sortValues, newProps.sortValues))
    ) {
      let sortSettings = this._getSortSettings(newProps);
      this.setState({ ...sortSettings }, () => {
        this._propagateSortValues();
      });
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  update(setStateCallback) {
    this.forceUpdate(setStateCallback);
  },

  clearSorters(setStateCallback) {
    // NOTE This method is expected NOT to propagate changes back to the controller (backward compatibility).
    this.setState({ sortValues: [] }, () => {
      this._updateSorterBar();
      if (typeof setStateCallback === "function") setStateCallback();
    });
  },
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _propagateSortValues(clearIfUnsorted = true) {
    this._updateSorterBar();
    let { sortValues } = this.state;
    if (sortValues.length > 0) {
      sortValues.forEach((it, i) => {
        let { key, descending } = it;
        let { name, sortFn } = this.props.sortItems.find(it => it.key === key);
        let item = { key, name, sortFn };
        this.props.controller[i ? "addSorter" : "setSorter"](
          key,
          this._buildSorter(item, descending ? "DESC" : "ASC", this.getLanguage())
        );
      });
    } else if (clearIfUnsorted) {
      this.props.controller.clearSorters();
    }
  },

  _updateSorterBar() {
    let sorterBar = this.props.controller.getBar("sorterBar");
    if (sorterBar) {
      let { advancedSort, sortValues } = this.state;
      sorterBar.setSortProps({
        visible: advancedSort,
        sortItems: this.props.sortItems,
        sortValues: sortValues,
        onApply: this._applyFromSorterBar,
        onCancel: this._cancelFromSorterBar
      });
    }
  },

  _applyFromSorterBar(newSortValues) {
    this.setState({ sortValues: newSortValues }, () => {
      this._propagateSortValues();
    });
  },

  _cancelFromSorterBar() {
    this.setState({ advancedSort: false, sortValues: [] }, () => this._propagateSortValues());
  },

  _getSortSettings(props = this.props) {
    let sortValues = (props.sortValues || [])
      .filter(Boolean)
      .filter(it => props.sortItems.some(si => si.key === it.key));
    return {
      sortValues: sortValues,
      advancedSort: props.advancedSort
    };
  },

  _getSorterDefault({ key, order, language }) {
    let cmp = new Intl.Collator(language, { sensitivity: "base" });
    let direction = order === "ASC" ? 1 : -1;
    return (a, b) => {
      let x = a[key] || "";
      let y = b[key] || "";
      x = this.getLsiItem(x);
      y = this.getLsiItem(y);

      return cmp.compare(x.toString(), y.toString()) * direction;
    };
  },

  _buildSorter(item, order, language) {
    let result;
    if (typeof this.props.controller.props.onLoad === "function") {
      result = order !== "ASC";
    } else {
      let opt = { ...item, order, language };
      if (typeof item.sortFn === "function") {
        result = (a, b) => item.sortFn(a, b, opt);
      } else {
        result = this._getSorterDefault(opt);
      }
    }
    return result;
  },

  _onSort(item, descending) {
    this.setState({ sortValues: [{ key: item.key, descending }] }, () => this._propagateSortValues());
  },

  _getDropDown() {
    let items = [];
    this.props.sortItems.forEach(item => {
      items.push({
        label: `${this.getLsiItem(item.name)}\xa0-\xa0${this.getLsiValue("ascending")}`,
        onClick: () => this._onSort(item, false)
      });
      items.push({
        label: `${this.getLsiItem(item.name)}\xa0-\xa0${this.getLsiValue("descending")}`,
        onClick: () => this._onSort(item, true)
      });
    });

    if (items.length > 0) {
      items.push({ divider: true });
    }
    items.push({
      label: this.getLsiValue("unsorted"),
      onClick: () => this.props.controller.clearSorters()
    });
    let sorterBar = this.props.controller.getBar("sorterBar");
    if (sorterBar) {
      items.push({
        label: this.getLsiValue("advancedSort"),
        onClick: this._setAdvancedSort
      });
    }

    let label;
    if (this.state.advancedSort) label = this.getLsiValue("advancedSort");
    else if (this.state.sortValues.length > 0) {
      let firstItem = this.state.sortValues[0];
      let itemDef = this.props.sortItems.find(it => it.key === firstItem.key);
      label = `${this.getLsiItem(itemDef.name)} - ${this.getLsiValue(
        firstItem.descending ? "descending" : "ascending"
      )}`;
    } else {
      label = this.getLsiValue("unsorted");
    }

    return (
      <UU5.Bricks.Dropdown
        className={this.getClassName().sortableDropdown}
        bgStyle="transparent"
        label={label}
        items={items}
        disabled={this.state.advancedSort && !!this.props.controller.getBar("sorterBar")}
        colorSchema="custom"
      />
    );
  },

  _getSelectionButtons(status) {
    let r;

    let items = [];
    (!this.props.controller || !this.props.controller.props.onLoad) &&
      items.push({
        label: this.getLsiValue("select"),
        onClick: this._selectAll
      });

    status.selected > 0 &&
      items.push({
        label: this.getLsiValue("deselect"),
        onClick: this._clearSelected
      });

    if ((this.isXs() || this.isS()) && items.length > 1) {
      r = (
        <UU5.Bricks.Dropdown
          className={this.getClassName().selectableDropdown}
          bgStyle="transparent"
          label={this.getLsiValue("selectionDropdown")}
          items={items}
          pullRight
          colorSchema="custom"
        />
      );
    } else if (items.length > 0) {
      r = items.map((item, i) => {
        return (
          <UU5.Bricks.Button
            key={i}
            bgStyle="transparent"
            onClick={item.onClick}
            content={item.label}
            colorSchema="custom"
          />
        );
      });
    } else {
      r = <UU5.Bricks.Div />; // use empty element so that other elements in this bar don't get misaligned
    }
    return r;
  },

  _selectAll() {
    this.props.controller.selectAll();
  },

  _clearSelected() {
    this.props.controller.clearSelected();
  },

  _isSelectable() {
    return this.props.selectable !== false;
  },

  _setAdvancedSort() {
    this.setState({ advancedSort: true }, () => this._updateSorterBar());
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let counterClassNames = [this.getClassName().counter];
    if (this.props.sortable && this._isSelectable()) counterClassNames.push(this.getClassName("counter") + "-center");
    else if (this.props.sortable) counterClassNames.push(this.getClassName("counter") + "-end");
    else if (this._isSelectable()) counterClassNames.push(this.getClassName("counter") + "-start");

    let status = this.props.controller.getStatus();
    let selectionButtons = this._isSelectable() ? this._getSelectionButtons(status) : null;

    let mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");
    if (this.props.borderRadius) {
      mainProps.style = { ...mainProps.style };
      mainProps.style.borderRadius = this.props.borderRadius;
    }
    if (this.props.bgStyle) mainProps.className += " uu5-common-bg-style-" + this.props.bgStyle;
    if (this.props.elevation) mainProps.className += " uu5-elevation-" + this.props.elevation;

    return this.getNestingLevel() ? (
      <UU5.Bricks.Div {...mainProps}>
        {this.props.sortable && (
          <UU5.Bricks.Div className={this.getClassName().sortable}>{this._getDropDown()}</UU5.Bricks.Div>
        )}
        <UU5.Bricks.Div className={counterClassNames.join(" ")}>
          <UU5.Bricks.Span>{this.getLsiItem(this.getLsi("counter"), [status.displayed, status.total])}</UU5.Bricks.Span>
        </UU5.Bricks.Div>
        {selectionButtons && (
          <UU5.Bricks.Div className={this.getClassName().selectable}>{selectionButtons}</UU5.Bricks.Div>
        )}
      </UU5.Bricks.Div>
    ) : null;
  }
  //@@viewOff:render
});

export default InfoBar;
