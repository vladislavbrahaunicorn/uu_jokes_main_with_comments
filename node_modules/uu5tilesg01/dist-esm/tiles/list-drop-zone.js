import UU5 from "uu5g04";
import "uu5g04-bricks";

import Cfg from "../config/config.js";

import "./list-drop-zone.less";

export const DropZone = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "List.DropZone",
    classNames: {
      main: Cfg.CSS + "list-drop-zone",
      dragOver: Cfg.CSS + "list-drop-zone-drag-over",
      dropIndicator: Cfg.CSS + `list-drop-zone-indicator ${Cfg.CSS}tile-drop-indicator`
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    _connectDropTarget: UU5.PropTypes.func,
    _isDragOver: UU5.PropTypes.bool,
    _onDragOverChange: UU5.PropTypes.func,
    _canDrop: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      _connectDropTarget: null,
      _isDragOver: false,
      _onDragOverChange: null,
      _canDrop: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  componentDidMount() {
    this._fireDragOverChange();
  },
  componentDidUpdate(prevProps) {
    if (prevProps._isDragOver !== this.props._isDragOver) this._fireDragOverChange();
  },
  componentWillUnmount() {
    if (this.props._isDragOver) this._fireDragOverChange({ ...this.props, _isDragOver: false, _canDrop: false });
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _fireDragOverChange(props = this.props) {
    if (typeof props._onDragOverChange === "function") {
      let opt = { isDragOver: props._isDragOver, canDrop: props._canDrop, component: this };
      props._onDragOverChange(opt);
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { _connectDropTarget, _isDragOver } = this.props;
    let mainAttrs = this.getMainAttrs();
    if (_isDragOver) mainAttrs.className += " " + this.getClassName("dragOver");
    return _connectDropTarget(
      <div {...mainAttrs}>
        <div className={this.getClassName("dropIndicator")} />
      </div>
    );
  }
  //@@viewOff:render
});

DropZone.dropTarget = {
  canDrop(props, monitor) {
    return true;
  },
  drop(props, monitor, component) {
    if (!monitor.didDrop()) {
      const item = monitor.getItem();
      if (typeof props.onDrop === "function") {
        props.onDrop({
          item,
          component,
          before: true
        });
      }
    }
  }
};
export default DropZone;
