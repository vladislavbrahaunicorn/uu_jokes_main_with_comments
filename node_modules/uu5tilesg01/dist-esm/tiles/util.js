export function mergeButtonProps(resultProps, buttonProps, ...buttonPropsCallArgs) {
  let result = resultProps;
  if (buttonProps) {
    let { className, onClick, ...restProps } =
      typeof buttonProps === "function" ? buttonProps(...buttonPropsCallArgs) : buttonProps || {};
    let usedOnClick;
    if (onClick) {
      usedOnClick = (...args) => {
        onClick(...args);
        resultProps.onClick(...args);
      };
    } else {
      usedOnClick = resultProps.onClick;
    }
    result = {
      ...resultProps,
      ...restProps,
      className: [resultProps.className, className].filter(Boolean).join(" "),
      onClick: usedOnClick
    };
  }
  return result;
}

/**
 *
 * @param {*} element
 * @param {*} baseElement
 * @return Distance of element's top edge from baseElement's top edge ignoring scrolls (i.e. as if all parents had overflow: visible).
 *         Works correctly only if there is no extra scrollable parent in parent chain from element to baseElemen (baseElement can be
 *         scrollable).
 */
export function getRelativeTop(element, baseElement = document.body) {
  let usedBaseElement = baseElement === window ? document.body : baseElement;
  let elRect = element.getBoundingClientRect();
  let baseElRect = usedBaseElement.getBoundingClientRect();
  return elRect.top - baseElRect.top + usedBaseElement.scrollTop;
}
