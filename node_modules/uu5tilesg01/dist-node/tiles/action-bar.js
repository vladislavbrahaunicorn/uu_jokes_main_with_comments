"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ActionBar = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _util = require("./util.js");

require("./action-bar.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

//@@viewOff:imports
var ActionBar = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Common.ScreenSizeMixin, _uu5g.default.Common.ColorSchemaMixin, _uu5g.default.Common.PureRenderMixin, _uu5g.default.Common.NestingLevelMixin, _uu5g.default.Common.LsiMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "ActionBar",
    classNames: {
      main: _config.default.CSS + "action-bar",
      searchInput: _config.default.CSS + "action-bar-search-input",
      titleBox: _config.default.CSS + "action-bar-titlebox",
      title: _config.default.CSS + "action-bar-title",
      titleSticky: _config.default.CSS + "action-bar-title-sticky",
      buttonsBox: _config.default.CSS + "action-bar-buttonsbox",
      controlledContentButton: _config.default.CSS + "action-bar-controlled-content-button",
      inputBox: _config.default.CSS + "action-bar-inputbox",
      selectedButton: _config.default.CSS + "action-bar-selected-button",
      selectedButtonActive: _config.default.CSS + "action-bar-selected-button-active",
      filteredButton: _config.default.CSS + "action-bar-filtered-button",
      dropdown: _config.default.CSS + "action-bar-dropdown",
      chevron: _config.default.CSS + "action-bar-chevron",
      searchButton: _config.default.CSS + "action-bar-search-button",
      searchButtonActive: _config.default.CSS + "action-bar-search-button-active"
    },
    defaults: {
      maxButtons: 3
    },
    lsi: _lsi.default.actionBar,
    nestingLevelList: _uu5g.default.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent

    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: _uu5g.default.PropTypes.object,
    title: _uu5g.default.PropTypes.any,
    searchable: _uu5g.default.PropTypes.bool,
    searchPlaceholder: _uu5g.default.PropTypes.any,
    searchEvents: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    onItemSearch: _uu5g.default.PropTypes.func,
    collapsible: _uu5g.default.PropTypes.bool,
    collapsed: _uu5g.default.PropTypes.bool,
    actions: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      content: _uu5g.default.PropTypes.any,
      // UU5 content
      controlledContent: _uu5g.default.PropTypes.bool,
      icon: _uu5g.default.PropTypes.string,
      onClick: _uu5g.default.PropTypes.func,
      active: _uu5g.default.PropTypes.bool,
      bgStyle: _uu5g.default.PropTypes.string,
      borderRadius: _uu5g.default.PropTypes.string,
      disabled: _uu5g.default.PropTypes.bool
    })),
    bgStyle: _uu5g.default.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: _uu5g.default.PropTypes.string,
    elevation: _uu5g.default.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    buttonProps: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.object, _uu5g.default.PropTypes.func])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      controller: null,
      title: "Action Bar",
      searchable: true,
      searchEvents: ["onBlur", "onEnter"],
      actions: [],
      searchPlaceholder: _lsi.default.actionBar.searchPlaceholder,
      collapsible: true,
      collapsed: false,
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    if (!this.props.controller) {
      _uu5g.default.Common.Tools.error("The prop `controller` cannot be empty for ".concat(this.getTagName(), ". Either provide the prop or nest the component into UU5.Tiles.ListController."));
    }

    return {
      searchText: "",
      toolbarExpanded: !this.props.collapsed
    };
  },
  componentDidMount: function componentDidMount() {
    this.props.controller.registerBar("actionBar", this);
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.props.controlled && (this.props.collapsible && this.props.collapsed !== prevProps.collapsed && this.props.collapsed === this.state.toolbarExpanded || this.props.collapsible !== prevProps.collapsible && !this.state.toolbarExpanded)) {
      this._toggleToolbar();
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("actionBar");
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  resetSearch: function resetSearch() {
    var _this = this;

    this.setState({
      searchText: ""
    }, function () {
      return _this._search.setValue("");
    });
  },
  search: function search(value) {
    if (value !== undefined && this._search) this._search.setValue(value || "");

    this._onSearch({
      value: value === undefined && this._search ? this._search.getValue() : value || ""
    });
  },
  update: function update(setStateCallback) {
    if (this._search && this.props.controller.getStatus().showSelected) {
      this._search.readOnly();

      this._search.setValue("");
    } else if (this._search && this._search.isReadOnly()) {
      this._search.editable();

      this._search.setValue(this.state.searchText);
    }

    this.forceUpdate(setStateCallback);
    return true;
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _buildGenericSearchFunc: function _buildGenericSearchFunc() {
    var _this2 = this;

    return function (item, searchValue) {
      var searchList = searchValue.toLowerCase().split(/[.,;:!?\s]/g).filter(Boolean);
      return Object.values(item).some(function (value) {
        var r;

        var v = _this2.getLsiItem(value);

        if (typeof v === "string" || typeof v === "number") r = Boolean(searchList.some(function (searchWord) {
          return v.toString().toLowerCase().indexOf(searchWord.toLowerCase()) !== -1;
        }));else r = false;
        return r;
      });
    };
  },
  _onSearch: function _onSearch(opt, eventName) {
    var _this3 = this;

    //TODO remove magic key
    var searchText = opt.value.trim();
    var searchTextLabel = searchText.length - 1 > 16 ? searchText.substr(0, 15) + "\u2026" : searchText;

    if (this.state.searchText !== searchText) {
      var searchFunc = this.props.onItemSearch || this._buildGenericSearchFunc(opt.value);

      this.setState({
        searchText: searchText
      }, function () {
        if (searchText) {
          _this3.props.controller.addFilterExt("search", _this3.getLsiValue("searchFilterLabel"), searchTextLabel, function (item) {
            return searchFunc(item, searchText);
          }, _this3.resetSearch);
        } else {
          _this3.props.controller.removeFilterExt("search");
        }
      });
    }

    if (eventName === "onChange") {
      // TODO: debounce & min 3 char?
      opt.component.setValue(opt.value);
    }
  },
  _toggleSearch: function _toggleSearch() {
    var _this4 = this;

    if (this._searchPanel.isHidden()) {
      this.state.toolbarExpanded ? this._searchPanel.show() : this._toggleToolbar(function () {
        return _this4._searchPanel.show();
      });
    } else {
      this._searchPanel.hide();
    }
  },
  _getInput: function _getInput() {
    var _this5 = this;

    var child = null;

    if (this.props.searchable) {
      var eventProps = {};
      var searchEvents = [].concat(_toConsumableArray(this.props.searchEvents), ["onClick"]);
      searchEvents.forEach(function (event) {
        return eventProps[event] = function (opt) {
          return _this5._onSearch(opt, event);
        };
      });
      child = _uu5g.default.Common.Element.create(_uu5g.default.Forms.TextIcon, _extends({
        ref_: function ref_(r) {
          return _this5._search = r;
        },
        className: this.getClassName().searchInput,
        name: "search",
        controlled: false,
        iconPosition: "right",
        icon: "mdi-magnify",
        placeholder: this.props.controller.getStatus().showSelected ? this.getLsiValue("searchInactive") : this.getLsiItem(this.props.searchPlaceHolder || this.props.searchPlaceholder)
      }, eventProps));
    }

    return child;
  },
  _getButtons: function _getButtons() {
    var _this6 = this;

    var maxItems = this.getDefault("maxButtons");
    var actions = [];

    if (this.props.searchable) {
      if (this.isXs()) {
        var colorSchema = this.state.searchText ? this.props.colorSchema || "blue" : "grey";
        actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
          bgStyle: "outline",
          ref_: function ref_(r) {
            return _this6._searchButton = r;
          },
          onClick: this._toggleSearch,
          colorSchema: colorSchema
        }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
          icon: "mdi-magnify"
        })));
      } // search space


      maxItems--;
    }

    var isMoreButton = this.props.actions.length > maxItems;

    if (isMoreButton) {
      // other buttons space
      maxItems--;
    }

    var items = [];
    this.props.actions.forEach(function (item, i) {
      if (item.active && maxItems > 0) {
        var active = item.active,
            content = item.content,
            icon = item.icon,
            controlledContent = item.controlledContent,
            restProps = _objectWithoutProperties(item, ["active", "content", "icon", "controlledContent"]); // eslint-disable-line


        var usedBtnProps = (0, _util.mergeButtonProps)({
          colorSchema: _this6.props.colorSchema || "blue"
        }, _this6.props.buttonProps, item.key || "action-" + i);

        if (controlledContent) {
          content = content && _this6.getLsiItem(content);
          usedBtnProps.className = (usedBtnProps.className || "") + " ".concat(_this6.getClassName("controlledContentButton"));
        } else {
          content = _this6.isXs() || _this6.isS() ? null : _this6.getLsiItem(content);
        }

        actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, _extends({}, usedBtnProps, restProps), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
          icon: icon
        }), content)); // button space

        maxItems--;
      } else {
        // other buttons space
        !items.length && !isMoreButton && maxItems--;
        items.push({
          label: _this6.getLsiItem(item.content),
          onClick: item.onClick,
          disabled: item.disabled
        });
      }
    });

    if (items.length) {
      var props = (0, _util.mergeButtonProps)({
        bgStyle: "outline",
        label: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
          icon: "mdi-dots-vertical"
        }),
        className: this.getClassName("dropdown"),
        colorSchema: "grey",
        iconHidden: true,
        items: items,
        pullRight: true
      }, this.props.buttonProps, "menu");
      actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Dropdown, props));
    }

    return _uu5g.default.Common.Children.toArray(actions);
  },
  _getButtonsWidth: function _getButtonsWidth() {
    var width = 0;
    var buttonsLength = this.props.actions.length;
    var buttonWidth = 40;

    if (this.isXs()) {
      if (this.props.searchable) {
        buttonsLength++;
        width = 2;
      }

      buttonsLength = Math.min(buttonsLength, this.getDefault("maxButtons"));
      width = width + buttonsLength * buttonWidth;
    } else if (this.isS()) {
      var maxButtons = this.getDefault("maxButtons");

      if (this.props.searchable) {
        maxButtons--;
        width = 172;
      }

      buttonsLength = Math.min(buttonsLength, maxButtons);
      width = width + buttonsLength * buttonWidth;
    }

    return width;
  },
  _toggleToolbar: function _toggleToolbar(setStateCallback) {
    var _this7 = this;

    this.setState(function (prevState) {
      return {
        toolbarExpanded: !prevState.toolbarExpanded
      };
    }, function () {
      return _this7.props.controller.toggleToolbar(setStateCallback);
    });
  },
  _getStatusButtons: function _getStatusButtons() {
    var _this8 = this;

    var actions = [_uu5g.default.Common.Element.create("br", {
      key: "br"
    })];
    var status = this.props.controller.getStatus();
    if (status.selected) actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      bgStyle: "outline",
      className: status.showSelected ? this.getClassName().selectedButtonActive : this.getClassName().selectedButton,
      onClick: function onClick() {
        return _this8._toggleToolbar();
      }
    }, "".concat(status.selected)));
    if (status.filterCount && !status.showSelected) actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      colorSchema: "blue",
      className: this.getClassName().filteredButton,
      onClick: function onClick() {
        return _this8._toggleToolbar();
      }
    }, "".concat(status.filterCount)));
    return actions.length > 1 && _uu5g.default.Common.Children.toArray(actions);
  },
  _getChevron: function _getChevron() {
    var _this9 = this;

    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      bgStyle: "transparent",
      onClick: function onClick() {
        return _this9._toggleToolbar();
      },
      colorSchema: "grey",
      className: this.getClassName().chevron
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
      icon: this.state.toolbarExpanded ? "mdi-chevron-up" : "mdi-chevron-down"
    }));
  },
  _isLsi: function _isLsi(value) {
    return value && _typeof(value) === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var _this10 = this;

    var buttonsWidth = this._getButtonsWidth();

    var titleClassName = this.getClassName("title");
    if (!this.props.collapsible) titleClassName += " " + this.getClassName("titleSticky");
    var title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;
    var mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");

    if (this.props.borderRadius) {
      mainProps.style = _objectSpread({}, mainProps.style);
      mainProps.style.borderRadius = this.props.borderRadius;
    }

    if (this.props.bgStyle) mainProps.className += " uu5-common-bg-style-" + this.props.bgStyle;
    if (this.props.elevation) mainProps.className += " uu5-elevation-" + this.props.elevation;
    return this.getNestingLevel() ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, mainProps, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("titleBox"),
      style: {
        maxWidth: buttonsWidth ? "calc(100% - ".concat(buttonsWidth, "px)") : undefined
      }
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
      className: titleClassName,
      content: title
    }), this.props.collapsible && this._getChevron()), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("buttonsBox")
    }, !this.isXs() && this._getInput(), this._getButtons()), this.isXs() && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("inputBox"),
      hidden: true,
      ref_: function ref_(r) {
        return _this10._searchPanel = r;
      }
    }, this._getInput())) : null;
  } //@@viewOff:render

});

exports.ActionBar = ActionBar;
var _default = ActionBar;
exports.default = _default;