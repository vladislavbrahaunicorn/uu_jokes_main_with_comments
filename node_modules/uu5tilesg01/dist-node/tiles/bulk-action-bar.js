"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.BulkActionBar = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _util = require("./util.js");

require("./bulk-action-bar.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//@@viewOff:imports
var BulkActionBar = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Common.ColorSchemaMixin, _uu5g.default.Common.ScreenSizeMixin, _uu5g.default.Common.PureRenderMixin, _uu5g.default.Common.NestingLevelMixin, _uu5g.default.Common.LsiMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "BulkActionBar",
    classNames: {
      main: _config.default.CSS + "bulk-action-bar",
      visible: _config.default.CSS + "bulk-action-bar-visible",
      invisible: _config.default.CSS + "bulk-action-bar-invisible",
      showSelected: _config.default.CSS + "bulk-action-bar-show-selected",
      showSelectedActive: _config.default.CSS + "bulk-action-bar-show-selected-active",
      showSelectedXs: _config.default.CSS + "bulk-action-bar-show-selected-xs",
      showSelectedLabel: _config.default.CSS + "bulk-action-bar-show-selected-label",
      showSelectedLabelActive: _config.default.CSS + "bulk-action-bar-show-selected-label-active",
      counter: _config.default.CSS + "bulk-action-bar-counter",
      counterContainer: _config.default.CSS + "bulk-action-bar-counter-container",
      actions: _config.default.CSS + "bulk-action-bar-actions",
      actionButton: _config.default.CSS + "bulk-action-bar-action-button",
      actionDropdown: _config.default.CSS + "bulk-action-bar-action-dropdown",
      title: _config.default.CSS + "bulk-action-bar-title",
      chevron: _config.default.CSS + "bulk-action-bar-chevron",
      noanimation: _config.default.CSS + "bulk-action-bar-noanimation"
    },
    lsi: _lsi.default.bulkActionBar,
    nestingLevelList: _uu5g.default.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    defaults: {
      buttonCount: {
        xl: 6,
        l: 4,
        m: 2,
        s: 1
      }
    },
    opt: {
      pureRender: true // avoid re-render from parent

    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: _uu5g.default.PropTypes.object,
    title: _uu5g.default.PropTypes.any,
    actions: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      content: _uu5g.default.PropTypes.any,
      // UU5 content
      icon: _uu5g.default.PropTypes.string,
      onClick: _uu5g.default.PropTypes.func,
      active: _uu5g.default.PropTypes.bool
    })),
    bgStyle: _uu5g.default.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: _uu5g.default.PropTypes.string,
    elevation: _uu5g.default.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    buttonProps: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.object, _uu5g.default.PropTypes.func])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      controller: null,
      title: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
        lsi: _lsi.default.bulkActionBar.title
      }),
      actions: [],
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    if (!this.props.controller) {
      _uu5g.default.Common.Tools.error("The prop `controller` cannot be empty for ".concat(this.getTagName(), ". Either provide the prop or nest the component into UU5.Tiles.ListController."));
    }

    var _this$props$controlle = this.props.controller.getStatus(),
        showSelected = _this$props$controlle.showSelected,
        selected = _this$props$controlle.selected,
        total = _this$props$controlle.total;

    return {
      expanded: null,
      showSelected: showSelected,
      selectedCount: selected,
      total: total
    };
  },
  componentDidMount: function componentDidMount() {
    this.props.controller.registerBar("bulkActionBar", this);

    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      var domNode = this.findDOMNode();
      domNode.addEventListener("animationstart", this._animationFix);
      domNode.addEventListener("animationend", this._animationFix);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _nextProps$controller = nextProps.controller.getStatus(),
        showSelected = _nextProps$controller.showSelected,
        selected = _nextProps$controller.selected,
        total = _nextProps$controller.total;

    var expanded = selected > 0;
    expanded !== !!this.state.expanded && this.setState({
      expanded: expanded,
      showSelected: showSelected,
      selectedCount: selected,
      total: total
    });
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("bulkActionBar");

    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      var domNode = this.findDOMNode();
      domNode.removeEventListener("animationstart", this._animationFix);
      domNode.removeEventListener("animationend", this._animationFix);
    }
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if ((this.state.screenSize !== prevState.screenSize || this.state.expanded !== prevState.expanded && !this.state.expanded) && this._panel.isExpanded()) {
      this._panel.collapse();
    }
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  update: function update(setStateCallback) {
    var _this$props$controlle2 = this.props.controller.getStatus(),
        showSelected = _this$props$controlle2.showSelected,
        selected = _this$props$controlle2.selected,
        total = _this$props$controlle2.total;

    var expanded = selected > 0 !== !!this.state.expanded ? true : this.state.expanded;
    this.setState({
      expanded: expanded,
      showSelected: showSelected,
      selectedCount: selected,
      total: total
    }, setStateCallback);
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _animationFix: function _animationFix(e) {
    // Edge & IE doesn't support changing of CSS "overflow" during animation in @keyframes
    if (e.type === "animationstart") e.target.style.overflow = "hidden";else e.target.style.overflow = "";
  },
  _toggleSelected: function _toggleSelected() {
    this.state.showSelected ? this.props.controller.hideJustSelected() : this.props.controller.showJustSelected();
  },
  _toggleSelectedButton: function _toggleSelectedButton(status) {
    var props = (0, _util.mergeButtonProps)({
      className: status.showSelected ? this.getClassName().showSelectedActive : this.getClassName().showSelected,
      onClick: this._toggleSelected,
      colorSchema: "orange",
      bgStyle: "outline"
    }, this.props.buttonProps, status.showSelected ? "showAll" : "showSelection");
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, props, this.getLsiValue(status.showSelected ? "showAll" : "showSelection"), !status.showSelected && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
      className: this.getClassName().counterContainer
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
      className: this.getClassName().counter
    }, "".concat(status.selectedCount))));
  },
  _getToggleSelectedBadge: function _getToggleSelectedBadge(status) {
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      bgStyle: "outline",
      className: status.showSelected ? this.getClassName().showSelectedLabelActive : this.getClassName().showSelectedLabel,
      colorSchema: "orange"
    }, "".concat(status.selectedCount));
  },
  _getButtons: function _getButtons() {
    var _this = this;

    var actions = [];
    var activeCount = 0;
    var items = [];
    this.props.actions.forEach(function (item, i) {
      var content = item.content,
          active = item.active,
          restProps = _objectWithoutProperties(item, ["content", "active"]);

      if (active && activeCount < _this.getDefault().buttonCount[_this.getScreenSize()] || _this.isXs()) {
        activeCount++;

        var usedContent = _this.getLsiItem(content);

        var usedBtnProps = (0, _util.mergeButtonProps)({
          bgStyle: "transparent",
          colorSchema: "custom",
          className: _this.getClassName().actionButton
        }, _this.props.buttonProps, item.key || "action-" + i);
        actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, _extends({}, usedBtnProps, restProps), usedContent));
      } else {
        items.push(_objectSpread({
          label: _this.getLsiItem(item.content)
        }, restProps));
      }
    });

    if (items.length) {
      var props = (0, _util.mergeButtonProps)({
        bgStyle: "transparent",
        label: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
          icon: "mdi-dots-vertical"
        }),
        className: this.getClassName().actionDropdown,
        iconHidden: true,
        items: items,
        pullRight: true,
        colorSchema: "custom"
      }, this.props.buttonProps, "menu");
      actions.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Dropdown, props));
    }

    return _uu5g.default.Common.Children.toArray(actions);
  },
  _registerPanel: function _registerPanel(panel) {
    this._panel = panel;
  },
  _isLsi: function _isLsi(value) {
    return value && _typeof(value) === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },
  _buildHeader: function _buildHeader() {
    var result;
    var status = this.state;
    var title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;

    if (this.isXs()) {
      result = [_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
        key: "title",
        className: this.getClassName().title,
        content: title
      }), this._getToggleSelectedBadge(status)];
    } else {
      result = [_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
        key: "left"
      }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
        className: this.getClassName().title,
        content: title
      }), this._toggleSelectedButton(status)), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
        key: "right"
      }, this._getButtons())];
    }

    return result;
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var xs = this.isXs();
    var mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;

    if (this.state.expanded !== null) {
      mainProps.className += " " + this.getClassName(this.state.expanded ? "visible" : "invisible");
    }

    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");
    return this.getNestingLevel() ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Panel, _extends({}, mainProps, {
      openClick: !xs ? "none" : "header",
      iconExpanded: xs ? "mdi-chevron-up" : undefined,
      iconCollapsed: xs ? "mdi-chevron-down" : undefined,
      ref_: this._registerPanel,
      header: this._buildHeader(),
      colorSchemaHeader: "custom",
      bgStyle: this.props.bgStyle,
      borderRadius: this.props.borderRadius,
      elevation: this.props.elevation
    }), xs && this._toggleSelectedButton(this.state), xs && this._getButtons()) : null;
  } //@@viewOff:render

});

exports.BulkActionBar = BulkActionBar;
var _default = BulkActionBar;
exports.default = _default;