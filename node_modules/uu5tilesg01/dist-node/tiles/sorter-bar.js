"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SorterBar = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

require("uu5g04-forms");

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _util = require("./util.js");

require("./sorter-bar.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//@@viewOff:imports
var SorterBar = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Common.PureRenderMixin, _uu5g.default.Common.ColorSchemaMixin, _uu5g.default.Common.ScreenSizeMixin, _uu5g.default.Common.NestingLevelMixin, _uu5g.default.Common.LsiMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "SorterBar",
    classNames: {
      main: _config.default.CSS + "sorter-bar",
      titleBox: _config.default.CSS + "sorter-bar-title-box",
      title: _config.default.CSS + "sorter-bar-title",
      sorterBadge: _config.default.CSS + "sorter-bar-badge",
      addButton: _config.default.CSS + "sorter-bar-add-button",
      buttons: _config.default.CSS + "sorter-bar-buttons",
      sorterButton: _config.default.CSS + "sorter-bar-sorter-button",
      cancelBox: _config.default.CSS + "sorter-bar-cancel-box",
      cancelButton: _config.default.CSS + "sorter-bar-cancel-button",
      collapsed: _config.default.CSS + "sorter-bar-collapsed",
      chevron: _config.default.CSS + "sorter-bar-chevron",
      visible: _config.default.CSS + "sorter-bar-visible",
      invisible: _config.default.CSS + "sorter-bar-invisible",
      noAnimation: _config.default.CSS + "sorter-bar-no-animation"
    },
    lsi: _lsi.default.sorterBar,
    nestingLevelList: _uu5g.default.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent

    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: _uu5g.default.PropTypes.object,
    title: _uu5g.default.PropTypes.any,
    bgStyle: _uu5g.default.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: _uu5g.default.PropTypes.string,
    elevation: _uu5g.default.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    buttonProps: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.object, _uu5g.default.PropTypes.func])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      controller: null,
      title: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
        lsi: _lsi.default.sorterBar.title
      }),
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    if (!this.props.controller) {
      _uu5g.default.Common.Tools.error("The prop `controller` cannot be empty for ".concat(this.getTagName(), ". Either provide the prop or nest the component into UU5.Tiles.ListController."));
    }

    this.props.controller.registerBar("sorterBar", this); // NOTE SorterBar merely displays data. InfoBar is the component that stores current sort state.
    // InfoBar needs to pass this info to SorterBar but it doesn't have access to its props so it
    // passes it via setSortProps(...) API and we have to store it in state.

    return {
      expanded: false,
      animate: false,
      sortProps: {}
    };
  },
  componentDidMount: function componentDidMount() {
    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      var domNode = this.findDOMNode();
      domNode.addEventListener("animationstart", this._animationFix);
      domNode.addEventListener("animationend", this._animationFix);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("sorterBar");

    if (navigator.userAgent.match(/Trident\/[.0-9]*|Edge\/[.0-9]*|Mac.*?Version\/.*?Safari\//)) {
      var domNode = this.findDOMNode();
      domNode.removeEventListener("animationstart", this._animationFix);
      domNode.removeEventListener("animationend", this._animationFix);
    }
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  setSortProps: function setSortProps(sortProps, setStateCallback) {
    // { visible, sortItems, sortValues, onApply, onCancel }
    this.setState(function (state) {
      return {
        sortProps: sortProps,
        animate: state.animate || Object.keys(state.sortProps).length > 0 && sortProps.visible != state.sortProps.visible
      };
    }, setStateCallback);
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _animationFix: function _animationFix(e) {
    // Edge & IE doesn't support changing of CSS "overflow" during animation in @keyframes
    if (e.type === "animationstart") e.target.style.overflow = "hidden";else e.target.style.overflow = "";
  },
  _cancelAdvancedSort: function _cancelAdvancedSort() {
    var onCancel = this.state.sortProps.onCancel;
    if (typeof onCancel === "function") onCancel();
  },
  _sortByItem: function _sortByItem(item, descending) {
    var _this$state$sortProps = this.state.sortProps,
        onApply = _this$state$sortProps.onApply,
        sortValues = _this$state$sortProps.sortValues;

    if (typeof onApply === "function") {
      var newSortValues = sortValues.concat({
        key: item.key,
        descending: descending
      });
      onApply(newSortValues);
    }
  },
  _cancelSortByItem: function _cancelSortByItem(item) {
    var _this$state$sortProps2 = this.state.sortProps,
        onApply = _this$state$sortProps2.onApply,
        sortValues = _this$state$sortProps2.sortValues;

    if (typeof onApply === "function") {
      var newSortValues = sortValues.filter(function (it) {
        return it.key !== item.key;
      });
      onApply(newSortValues);
    }
  },
  _getSorterBadge: function _getSorterBadge() {
    var value = (this.state.sortProps.sortValues || []).length;
    return value > 0 && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      colorSchema: this.props.colorSchema || "blue",
      className: this.getClassName().sorterBadge,
      content: value
    });
  },
  _getDropdown: function _getDropdown(sortItems, sortValues) {
    var _this = this;

    if (!sortValues) sortValues = [];
    var items = [];

    if (Array.isArray(sortItems)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var item = _step.value;
          var applied = sortValues.some(function (it) {
            return it.key === item.key;
          });
          items.push({
            label: "".concat(_this.getLsiItem(item.name), "\xA0-\xA0").concat(_this.getLsiValue("ascending")),
            onClick: function onClick() {
              return _this._sortByItem(item, false);
            },
            disabled: applied
          });
          items.push({
            label: "".concat(_this.getLsiItem(item.name), "\xA0-\xA0").concat(_this.getLsiValue("descending")),
            onClick: function onClick() {
              return _this._sortByItem(item, true);
            },
            disabled: applied
          });
        };

        for (var _iterator = sortItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    var props = (0, _util.mergeButtonProps)({
      key: "addButton",
      className: this.getClassName().addButton,
      onClick: this._addSorter,
      bgStyle: "outline",
      colorSchema: this.props.colorSchema || "blue",
      label: [_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
        key: "icon",
        icon: "mdi-plus-circle"
      }), this.getLsiValue("addSorter")],
      iconHidden: true,
      items: items,
      borderRadius: "16px"
    }, this.props.buttonProps, "addSorter");
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Dropdown, props);
  },
  _getButtons: function _getButtons() {
    var _this2 = this;

    var buttons = [];
    var _this$state$sortProps3 = this.state.sortProps,
        sortItems = _this$state$sortProps3.sortItems,
        sortValues = _this$state$sortProps3.sortValues;

    if (sortValues && Array.isArray(sortValues)) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        var _loop2 = function _loop2() {
          var item = _step2.value;

          var _ref = item || {},
              key = _ref.key,
              descending = _ref.descending;

          var _ref2 = (sortItems || []).find(function (it) {
            return it.key === key;
          }) || {},
              name = _ref2.name;

          var content = void 0;

          if (_uu5g.default.Common.Element.isValid(name)) {
            content = name;
          } else if (name) {
            content = [_this2.getLsiItem(name), "\xA0-\xA0", _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Strong, {
              key: "value"
            }, _this2.getLsiValue(descending ? "descending" : "ascending"))];
          } else {
            content = _this2.getLsiItem(item.value);
          }

          var props = (0, _util.mergeButtonProps)({
            key: key,
            className: _this2.getClassName().sorterButton,
            onClick: function onClick() {
              return _this2._cancelSortByItem(item);
            },
            colorSchema: _this2.props.colorSchema || "blue",
            bgStyle: "outline",
            borderRadius: "16px"
          }, _this2.props.buttonProps, key, item);
          buttons.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, props, content, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
            icon: "mdi-close"
          })));
        };

        for (var _iterator2 = sortValues[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          _loop2();
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    buttons.push(this._getDropdown(sortItems, sortValues));
    return buttons;
  },
  _getCancelButton: function _getCancelButton() {
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("cancelBox"),
      key: "cancel"
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      bgStyle: "transparent",
      onClick: this._cancelAdvancedSort,
      className: this.getClassName().cancelButton,
      colorSchema: "custom"
    }, this.getLsiValue("cancelAdvancedSort")));
  },
  _isLsi: function _isLsi(value) {
    return value && _typeof(value) === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },
  _buildHeader: function _buildHeader() {
    var status = this.props.controller.getStatus();
    var title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;
    var result = [_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      key: "left",
      className: this.getClassName("titleBox")
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
      className: this.getClassName().title,
      content: title
    }), this.isXs() ? this._getSorterBadge(status) : this._getButtons())];

    if (!this.isXs()) {
      result.push(this._getCancelButton());
    }

    return result;
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    // todo header
    var mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");
    var classNames = mainProps.className ? [mainProps.className] : [];
    var xs = this.isXs();

    if (xs && !this.state.expanded) {
      classNames.push(this.getClassName().collapsed);
    }

    classNames.push(this.getClassName(this.state.sortProps.visible ? "visible" : "invisible"));
    if (!this.state.animate) classNames.push(this.getClassName("noAnimation"));
    return this.getNestingLevel() ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Panel, _extends({}, mainProps, {
      className: classNames.join(" "),
      openClick: !xs ? "none" : "header",
      iconExpanded: xs ? "mdi-chevron-up" : undefined,
      iconCollapsed: xs ? "mdi-chevron-down" : undefined,
      header: this._buildHeader(),
      colorSchemaHeader: "custom",
      bgStyle: this.props.bgStyle,
      borderRadius: this.props.borderRadius,
      elevation: this.props.elevation
    }), xs && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("buttons")
    }, this._getButtons()), xs && this._getCancelButton()) : null;
  } //@@viewOff:render

});

exports.SorterBar = SorterBar;
var _default = SorterBar;
exports.default = _default;