"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeButtonProps = mergeButtonProps;
exports.getRelativeTop = getRelativeTop;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function mergeButtonProps(resultProps, buttonProps) {
  var result = resultProps;

  if (buttonProps) {
    for (var _len = arguments.length, buttonPropsCallArgs = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      buttonPropsCallArgs[_key - 2] = arguments[_key];
    }

    var _ref = typeof buttonProps === "function" ? buttonProps.apply(void 0, buttonPropsCallArgs) : buttonProps || {},
        className = _ref.className,
        onClick = _ref.onClick,
        restProps = _objectWithoutProperties(_ref, ["className", "onClick"]);

    var usedOnClick;

    if (onClick) {
      usedOnClick = function usedOnClick() {
        onClick.apply(void 0, arguments);
        resultProps.onClick.apply(resultProps, arguments);
      };
    } else {
      usedOnClick = resultProps.onClick;
    }

    result = _objectSpread({}, resultProps, restProps, {
      className: [resultProps.className, className].filter(Boolean).join(" "),
      onClick: usedOnClick
    });
  }

  return result;
}
/**
 *
 * @param {*} element
 * @param {*} baseElement
 * @return Distance of element's top edge from baseElement's top edge ignoring scrolls (i.e. as if all parents had overflow: visible).
 *         Works correctly only if there is no extra scrollable parent in parent chain from element to baseElemen (baseElement can be
 *         scrollable).
 */


function getRelativeTop(element) {
  var baseElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;
  var usedBaseElement = baseElement === window ? document.body : baseElement;
  var elRect = element.getBoundingClientRect();
  var baseElRect = usedBaseElement.getBoundingClientRect();
  return elRect.top - baseElRect.top + usedBaseElement.scrollTop;
}