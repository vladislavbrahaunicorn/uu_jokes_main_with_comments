"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var MAX_ITEM_COUNT_IN_MEMORY = 1000;
var _default = {
  evictItems: function evictItems(list, exceptFrom, exceptTo) {
    var needsEvict = list.length > MAX_ITEM_COUNT_IN_MEMORY;

    if (needsEvict) {
      var inMemoryItems = [];

      for (var i = 0, len = list.length; i < len; ++i) {
        var item = list[i];

        if (item && (i < exceptFrom || i >= exceptTo)) {
          // the item is not in page and we've exceeded memory limit => compute its relevancy
          // (least relevant items will be then removed from memory); relevancy is based
          // on distance from current page and from start / end of the list to match
          // standard scroll patterns (PgUp, PgDn, arrows; Home; End)
          var distancePage = i < exceptFrom ? exceptFrom - i : i - exceptTo + 1;
          var distanceStart = i;
          var distanceEnd = len - i - 1;
          var relevancy = -distancePage;
          if (distanceStart <= 100) relevancy = Math.max(relevancy, -distanceStart);
          if (distanceEnd <= 100) relevancy = Math.max(relevancy, -distanceEnd);
          inMemoryItems.push({
            index: i,
            item: item,
            relevancy: relevancy
          });
        }
      }

      inMemoryItems.sort(function (a, b) {
        return a.relevancy - b.relevancy;
      }); // less relevant are at the start of the array

      var itemsToForget = inMemoryItems.slice(0, -Math.max(0, MAX_ITEM_COUNT_IN_MEMORY - (exceptTo - exceptFrom)));
      itemsToForget.forEach(function (_ref) {
        var index = _ref.index;
        return list[index] = undefined;
      });
    }
  }
};
exports.default = _default;