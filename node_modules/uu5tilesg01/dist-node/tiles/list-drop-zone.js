"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DropZone = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

var _config = _interopRequireDefault(require("../config/config.js"));

require("./list-drop-zone.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DropZone = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "List.DropZone",
    classNames: {
      main: _config.default.CSS + "list-drop-zone",
      dragOver: _config.default.CSS + "list-drop-zone-drag-over",
      dropIndicator: _config.default.CSS + "list-drop-zone-indicator ".concat(_config.default.CSS, "tile-drop-indicator")
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    _connectDropTarget: _uu5g.default.PropTypes.func,
    _isDragOver: _uu5g.default.PropTypes.bool,
    _onDragOverChange: _uu5g.default.PropTypes.func,
    _canDrop: _uu5g.default.PropTypes.bool
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      _connectDropTarget: null,
      _isDragOver: false,
      _onDragOverChange: null,
      _canDrop: false
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  componentDidMount: function componentDidMount() {
    this._fireDragOverChange();
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (prevProps._isDragOver !== this.props._isDragOver) this._fireDragOverChange();
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this.props._isDragOver) this._fireDragOverChange(_objectSpread({}, this.props, {
      _isDragOver: false,
      _canDrop: false
    }));
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _fireDragOverChange: function _fireDragOverChange() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

    if (typeof props._onDragOverChange === "function") {
      var opt = {
        isDragOver: props._isDragOver,
        canDrop: props._canDrop,
        component: this
      };

      props._onDragOverChange(opt);
    }
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var _this$props = this.props,
        _connectDropTarget = _this$props._connectDropTarget,
        _isDragOver = _this$props._isDragOver;
    var mainAttrs = this.getMainAttrs();
    if (_isDragOver) mainAttrs.className += " " + this.getClassName("dragOver");
    return _connectDropTarget(_uu5g.default.Common.Element.create("div", mainAttrs, _uu5g.default.Common.Element.create("div", {
      className: this.getClassName("dropIndicator")
    })));
  } //@@viewOff:render

});

exports.DropZone = DropZone;
DropZone.dropTarget = {
  canDrop: function canDrop(props, monitor) {
    return true;
  },
  drop: function drop(props, monitor, component) {
    if (!monitor.didDrop()) {
      var item = monitor.getItem();

      if (typeof props.onDrop === "function") {
        props.onDrop({
          item: item,
          component: component,
          before: true
        });
      }
    }
  }
};
var _default = DropZone;
exports.default = _default;