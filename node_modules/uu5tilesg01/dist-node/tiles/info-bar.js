"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.InfoBar = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

require("./info-bar.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// import "./toolbar.less";
//@@viewOff:imports
var InfoBar = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Common.PureRenderMixin, _uu5g.default.Common.LsiMixin, _uu5g.default.Common.ColorSchemaMixin, _uu5g.default.Common.NestingLevelMixin, _uu5g.default.Common.ScreenSizeMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "InfoBar",
    classNames: {
      main: _config.default.CSS + "info-bar",
      selectable: _config.default.CSS + "info-bar-selectable",
      selectableDropdown: _config.default.CSS + "info-bar-selectable-dropdown",
      sortable: _config.default.CSS + "info-bar-sortable",
      sortableDropdown: _config.default.CSS + "info-bar-sortable-dropdown",
      counter: _config.default.CSS + "info-bar-counter"
    },
    lsi: _lsi.default.infoBar,
    nestingLevelList: _uu5g.default.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent

    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: _uu5g.default.PropTypes.object,
    sortable: _uu5g.default.PropTypes.bool,
    selectable: _uu5g.default.PropTypes.bool,
    advancedSort: _uu5g.default.PropTypes.bool,
    // controlled-dependent
    sortItems: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      key: _uu5g.default.PropTypes.string,
      name: _uu5g.default.PropTypes.any,
      sortFn: _uu5g.default.PropTypes.func
    })),
    sortValues: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      key: _uu5g.default.PropTypes.string,
      descending: _uu5g.default.PropTypes.bool
    })),
    bgStyle: _uu5g.default.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: _uu5g.default.PropTypes.string,
    elevation: _uu5g.default.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      controller: null,
      sortable: true,
      selectable: undefined,
      advancedSort: false,
      sortItems: [],
      sortValues: [],
      bgStyle: "underline",
      borderRadius: null,
      elevation: null
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    if (!this.props.controller) {
      _uu5g.default.Common.Tools.error("The prop `controller` cannot be empty for ".concat(this.getTagName(), ". Either provide the prop or nest the component into UU5.Tiles.ListController."));
    }

    return _objectSpread({}, this._getSortSettings(this.props));
  },
  componentDidMount: function componentDidMount() {
    this.props.controller.registerBar("infoBar", this);

    this._propagateSortValues(false);
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("infoBar");
  },
  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    var _this = this;

    if (newProps.controlled && (this.props.advancedSort !== newProps.advancedSort || !_uu5g.default.Common.Tools.deepEqual(this.props.sortItems, newProps.sortItems) || !_uu5g.default.Common.Tools.deepEqual(this.props.sortValues, newProps.sortValues))) {
      var sortSettings = this._getSortSettings(newProps);

      this.setState(_objectSpread({}, sortSettings), function () {
        _this._propagateSortValues();
      });
    }
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  update: function update(setStateCallback) {
    this.forceUpdate(setStateCallback);
  },
  clearSorters: function clearSorters(setStateCallback) {
    var _this2 = this;

    // NOTE This method is expected NOT to propagate changes back to the controller (backward compatibility).
    this.setState({
      sortValues: []
    }, function () {
      _this2._updateSorterBar();

      if (typeof setStateCallback === "function") setStateCallback();
    });
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _propagateSortValues: function _propagateSortValues() {
    var _this3 = this;

    var clearIfUnsorted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    this._updateSorterBar();

    var sortValues = this.state.sortValues;

    if (sortValues.length > 0) {
      sortValues.forEach(function (it, i) {
        var key = it.key,
            descending = it.descending;

        var _this3$props$sortItem = _this3.props.sortItems.find(function (it) {
          return it.key === key;
        }),
            name = _this3$props$sortItem.name,
            sortFn = _this3$props$sortItem.sortFn;

        var item = {
          key: key,
          name: name,
          sortFn: sortFn
        };

        _this3.props.controller[i ? "addSorter" : "setSorter"](key, _this3._buildSorter(item, descending ? "DESC" : "ASC", _this3.getLanguage()));
      });
    } else if (clearIfUnsorted) {
      this.props.controller.clearSorters();
    }
  },
  _updateSorterBar: function _updateSorterBar() {
    var sorterBar = this.props.controller.getBar("sorterBar");

    if (sorterBar) {
      var _this$state = this.state,
          advancedSort = _this$state.advancedSort,
          sortValues = _this$state.sortValues;
      sorterBar.setSortProps({
        visible: advancedSort,
        sortItems: this.props.sortItems,
        sortValues: sortValues,
        onApply: this._applyFromSorterBar,
        onCancel: this._cancelFromSorterBar
      });
    }
  },
  _applyFromSorterBar: function _applyFromSorterBar(newSortValues) {
    var _this4 = this;

    this.setState({
      sortValues: newSortValues
    }, function () {
      _this4._propagateSortValues();
    });
  },
  _cancelFromSorterBar: function _cancelFromSorterBar() {
    var _this5 = this;

    this.setState({
      advancedSort: false,
      sortValues: []
    }, function () {
      return _this5._propagateSortValues();
    });
  },
  _getSortSettings: function _getSortSettings() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    var sortValues = (props.sortValues || []).filter(Boolean).filter(function (it) {
      return props.sortItems.some(function (si) {
        return si.key === it.key;
      });
    });
    return {
      sortValues: sortValues,
      advancedSort: props.advancedSort
    };
  },
  _getSorterDefault: function _getSorterDefault(_ref) {
    var _this6 = this;

    var key = _ref.key,
        order = _ref.order,
        language = _ref.language;
    var cmp = new Intl.Collator(language, {
      sensitivity: "base"
    });
    var direction = order === "ASC" ? 1 : -1;
    return function (a, b) {
      var x = a[key] || "";
      var y = b[key] || "";
      x = _this6.getLsiItem(x);
      y = _this6.getLsiItem(y);
      return cmp.compare(x.toString(), y.toString()) * direction;
    };
  },
  _buildSorter: function _buildSorter(item, order, language) {
    var result;

    if (typeof this.props.controller.props.onLoad === "function") {
      result = order !== "ASC";
    } else {
      var opt = _objectSpread({}, item, {
        order: order,
        language: language
      });

      if (typeof item.sortFn === "function") {
        result = function result(a, b) {
          return item.sortFn(a, b, opt);
        };
      } else {
        result = this._getSorterDefault(opt);
      }
    }

    return result;
  },
  _onSort: function _onSort(item, descending) {
    var _this7 = this;

    this.setState({
      sortValues: [{
        key: item.key,
        descending: descending
      }]
    }, function () {
      return _this7._propagateSortValues();
    });
  },
  _getDropDown: function _getDropDown() {
    var _this8 = this;

    var items = [];
    this.props.sortItems.forEach(function (item) {
      items.push({
        label: "".concat(_this8.getLsiItem(item.name), "\xA0-\xA0").concat(_this8.getLsiValue("ascending")),
        onClick: function onClick() {
          return _this8._onSort(item, false);
        }
      });
      items.push({
        label: "".concat(_this8.getLsiItem(item.name), "\xA0-\xA0").concat(_this8.getLsiValue("descending")),
        onClick: function onClick() {
          return _this8._onSort(item, true);
        }
      });
    });

    if (items.length > 0) {
      items.push({
        divider: true
      });
    }

    items.push({
      label: this.getLsiValue("unsorted"),
      onClick: function onClick() {
        return _this8.props.controller.clearSorters();
      }
    });
    var sorterBar = this.props.controller.getBar("sorterBar");

    if (sorterBar) {
      items.push({
        label: this.getLsiValue("advancedSort"),
        onClick: this._setAdvancedSort
      });
    }

    var label;
    if (this.state.advancedSort) label = this.getLsiValue("advancedSort");else if (this.state.sortValues.length > 0) {
      var firstItem = this.state.sortValues[0];
      var itemDef = this.props.sortItems.find(function (it) {
        return it.key === firstItem.key;
      });
      label = "".concat(this.getLsiItem(itemDef.name), " - ").concat(this.getLsiValue(firstItem.descending ? "descending" : "ascending"));
    } else {
      label = this.getLsiValue("unsorted");
    }
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Dropdown, {
      className: this.getClassName().sortableDropdown,
      bgStyle: "transparent",
      label: label,
      items: items,
      disabled: this.state.advancedSort && !!this.props.controller.getBar("sorterBar"),
      colorSchema: "custom"
    });
  },
  _getSelectionButtons: function _getSelectionButtons(status) {
    var r;
    var items = [];
    (!this.props.controller || !this.props.controller.props.onLoad) && items.push({
      label: this.getLsiValue("select"),
      onClick: this._selectAll
    });
    status.selected > 0 && items.push({
      label: this.getLsiValue("deselect"),
      onClick: this._clearSelected
    });

    if ((this.isXs() || this.isS()) && items.length > 1) {
      r = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Dropdown, {
        className: this.getClassName().selectableDropdown,
        bgStyle: "transparent",
        label: this.getLsiValue("selectionDropdown"),
        items: items,
        pullRight: true,
        colorSchema: "custom"
      });
    } else if (items.length > 0) {
      r = items.map(function (item, i) {
        return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
          key: i,
          bgStyle: "transparent",
          onClick: item.onClick,
          content: item.label,
          colorSchema: "custom"
        });
      });
    } else {
      r = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, null); // use empty element so that other elements in this bar don't get misaligned
    }

    return r;
  },
  _selectAll: function _selectAll() {
    this.props.controller.selectAll();
  },
  _clearSelected: function _clearSelected() {
    this.props.controller.clearSelected();
  },
  _isSelectable: function _isSelectable() {
    return this.props.selectable !== false;
  },
  _setAdvancedSort: function _setAdvancedSort() {
    var _this9 = this;

    this.setState({
      advancedSort: true
    }, function () {
      return _this9._updateSorterBar();
    });
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var counterClassNames = [this.getClassName().counter];
    if (this.props.sortable && this._isSelectable()) counterClassNames.push(this.getClassName("counter") + "-center");else if (this.props.sortable) counterClassNames.push(this.getClassName("counter") + "-end");else if (this._isSelectable()) counterClassNames.push(this.getClassName("counter") + "-start");
    var status = this.props.controller.getStatus();
    var selectionButtons = this._isSelectable() ? this._getSelectionButtons(status) : null;
    var mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;
    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");

    if (this.props.borderRadius) {
      mainProps.style = _objectSpread({}, mainProps.style);
      mainProps.style.borderRadius = this.props.borderRadius;
    }

    if (this.props.bgStyle) mainProps.className += " uu5-common-bg-style-" + this.props.bgStyle;
    if (this.props.elevation) mainProps.className += " uu5-elevation-" + this.props.elevation;
    return this.getNestingLevel() ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, mainProps, this.props.sortable && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName().sortable
    }, this._getDropDown()), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: counterClassNames.join(" ")
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, null, this.getLsiItem(this.getLsi("counter"), [status.displayed, status.total]))), selectionButtons && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName().selectable
    }, selectionButtons)) : null;
  } //@@viewOff:render

});

exports.InfoBar = InfoBar;
var _default = InfoBar;
exports.default = _default;