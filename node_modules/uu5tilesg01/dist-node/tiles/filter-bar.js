"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FilterBar = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

require("uu5g04-forms");

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _simpleFilterPanel = _interopRequireDefault(require("./simple-filter-panel.js"));

var _util = require("./util.js");

require("./filter-bar.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//@@viewOff:imports
var FilterBar = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Common.PureRenderMixin, _uu5g.default.Common.ColorSchemaMixin, _uu5g.default.Common.ScreenSizeMixin, _uu5g.default.Common.NestingLevelMixin, _uu5g.default.Common.LsiMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "FilterBar",
    classNames: {
      main: _config.default.CSS + "filter-bar",
      panelBody: _config.default.CSS + "filter-bar-panel-body",
      titleBox: _config.default.CSS + "filter-bar-title-box",
      title: _config.default.CSS + "filter-bar-title",
      filterBadge: _config.default.CSS + "filter-bar-badge",
      addButton: _config.default.CSS + "filter-bar-add-button",
      buttons: _config.default.CSS + "filter-bar-buttons",
      filterButton: _config.default.CSS + "filter-bar-filter-button",
      cancelBox: _config.default.CSS + "filter-bar-cancel-box",
      cancelButton: _config.default.CSS + "filter-bar-cancel-button",
      collapsed: _config.default.CSS + "filter-bar-collapsed",
      chevron: _config.default.CSS + "filter-bar-chevron"
    },
    lsi: _lsi.default.filterBar,
    nestingLevelList: _uu5g.default.Environment.getNestingLevelList("bigBoxCollection", "boxCollection"),
    opt: {
      pureRender: true // avoid re-render from parent

    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: _uu5g.default.PropTypes.object,
    title: _uu5g.default.PropTypes.any,
    children: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.element, _uu5g.default.PropTypes.func]),
    filters: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      key: _uu5g.default.PropTypes.string,
      label: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.string, _uu5g.default.PropTypes.object]),
      filterFn: _uu5g.default.PropTypes.func
    })),
    simpleFilterPanel: _uu5g.default.PropTypes.bool,
    bgStyle: _uu5g.default.PropTypes.oneOf(["outline", "underline"]),
    borderRadius: _uu5g.default.PropTypes.string,
    elevation: _uu5g.default.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    filterValues: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      key: _uu5g.default.PropTypes.string,
      value: _uu5g.default.PropTypes.string
    })),
    buttonProps: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.object, _uu5g.default.PropTypes.func])
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      controller: null,
      title: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
        lsi: _lsi.default.filterBar.title
      }),
      filters: {},
      simpleFilterPanel: false,
      bgStyle: "underline",
      borderRadius: null,
      elevation: null,
      filterValues: [],
      buttonProps: null
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    if (!this.props.controller) {
      _uu5g.default.Common.Tools.error("The prop `controller` cannot be empty for ".concat(this.getTagName(), ". Either provide the prop or nest the component into UU5.Tiles.ListController."));
    }

    return {
      applied: {}
    };
  },
  componentWillMount: function componentWillMount() {
    var _this = this;

    this.props.controller.registerBar("filterBar", this);
    this.props.filterValues.forEach(function (filterValue) {
      var _this$props$filters$f = _this.props.filters.find(function (filter) {
        return filter.key === filterValue.key;
      }),
          label = _this$props$filters$f.label,
          filterFn = _this$props$filters$f.filterFn;

      _this.addFilter(filterValue.key, label, filterValue.value, filterFn);
    });
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("filterBar");
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (!_uu5g.default.Common.Tools.deepEqual(nextProps.filterValues, this.props.filterValues)) {
      var toAdd = [],
          toRemove = [];
      this.props.filterValues.forEach(function (filterValue) {
        var foundExisting = nextProps.filterValues.find(function (nextFilterValue) {
          return nextFilterValue.key === filterValue.key;
        });

        if (!foundExisting) {
          toRemove.push(filterValue);
        } else if (foundExisting && foundExisting.value !== filterValue.value) {
          toRemove.push(filterValue);
          toAdd.push(filterValue);
        } else {
          toAdd.push(filterValue);
        }
      });
      nextProps.filterValues.forEach(function (filterValue) {
        var foundExisting = _this2.props.filterValues.find(function (existingFilterValue) {
          return existingFilterValue.key === filterValue.key;
        });

        if (!foundExisting) {
          toAdd.push(filterValue);
        }
      });
      toRemove.forEach(function (filterValue) {
        _this2.removeFilter(filterValue.key);
      });
      toAdd.forEach(function (filterValue) {
        var _nextProps$filters$fi = nextProps.filters.find(function (filter) {
          return filter.key === filterValue.key;
        }),
            label = _nextProps$filters$fi.label,
            filterFn = _nextProps$filters$fi.filterFn;

        _this2.addFilter(filterValue.key, label, filterValue.value, filterFn);
      });
    }
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.state.screenSize !== prevState.screenSize && this._panel.isExpanded()) {
      this._panel.collapse();
    }
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  addFilter: function addFilter(key, label, value, filterFn, removeFilterFn, setStateCallback) {
    var _this3 = this;

    var controller = this.props.controller;

    if (controller.isFilterUsable("addFilter")) {
      this.setState(function (prevState) {
        var applied = _objectSpread({}, prevState.applied);

        applied[key] = {
          label: label,
          value: value
        };
        return {
          applied: applied
        };
      }, function () {
        var valueOrFilterFn;

        if (typeof controller.props.onLoad === "function") {
          valueOrFilterFn = value;
        } else {
          var filterFunction = filterFn || _this3._buildGenericOnFilter(key);

          valueOrFilterFn = function valueOrFilterFn(item) {
            return filterFunction(item, value);
          };
        }

        controller.addFilter(key, valueOrFilterFn, removeFilterFn, setStateCallback);
      });
      return this;
    } else {
      return false;
    }
  },
  removeFilter: function removeFilter(key, setStateCallback) {
    var _this4 = this;

    if (this.props.controller.isFilterUsable("removeFilter")) {
      this.setState(function (prevState) {
        var applied = _objectSpread({}, prevState.applied);

        delete applied[key];
        return {
          applied: applied
        };
      }, function () {
        return _this4.props.controller.removeFilter(key, setStateCallback);
      });
      return this;
    } else {
      return false;
    }
  },
  update: function update(setStateCallback) {
    var status = this.props.controller.getStatus();
    status.showSelected ? this.hide(setStateCallback) : this.show(setStateCallback);
  },
  collapse: function collapse() {
    this._panel.collapse();
  },
  clearFilters: function clearFilters(setStateCallback) {
    var _this5 = this;

    if (this.props.controller.isFilterUsable("clearFilters")) {
      this.setState({
        applied: {}
      }, function () {
        return _this5._panel.collapse(setStateCallback);
      });
      return this;
    } else {
      return false;
    }
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _buildGenericOnFilter: function _buildGenericOnFilter(itemKey) {
    return function (item, filterValue) {
      return item[itemKey] && item[itemKey] === filterValue;
    };
  },
  _clearFilters: function _clearFilters() {
    this.props.controller.clearFilters();
  },
  _addFilter: function _addFilter() {
    this._panel.toggle();
  },
  _hideJustSelected: function _hideJustSelected() {
    this.props.controller.hideJustSelected();
  },
  _getFilterBadge: function _getFilterBadge() {
    var value = Object.keys(this.state.applied).length;
    return value > 0 && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      colorSchema: this.props.colorSchema || "blue",
      className: this.getClassName().filterBadge,
      content: value
    });
  },
  _getButtons: function _getButtons(justTags) {
    var _this6 = this;

    var buttons = [];

    var _loop = function _loop(key) {
      var item = _this6.state.applied[key];
      var content = void 0;

      if (_uu5g.default.Common.Element.isValid(item.label)) {
        content = item.label;
      } else if (item.label) {
        content = [_this6.getLsiItem(item.label), "\xA0", _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Strong, {
          key: "value"
        }, _this6.getLsiItem(item.value))];
      } else content = _this6.getLsiItem(item.value);

      var props = (0, _util.mergeButtonProps)({
        key: key,
        className: _this6.getClassName().filterButton,
        onClick: function onClick() {
          return _this6.removeFilter(key);
        },
        colorSchema: _this6.props.colorSchema || "blue",
        borderRadius: "16px"
      }, _this6.props.buttonProps, key, item);
      buttons.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, props, content, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
        icon: "mdi-close"
      })));
    };

    for (var key in this.state.applied) {
      _loop(key);
    }

    if (!justTags) {
      var props = (0, _util.mergeButtonProps)({
        key: "addButton",
        className: this.getClassName().addButton,
        onClick: function onClick() {
          return _this6._addFilter();
        },
        colorSchema: this.props.colorSchema || "blue",
        bgStyle: "outline",
        borderRadius: "16px"
      }, this.props.buttonProps, "addFilter");
      buttons.push(_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, props, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
        icon: "mdi-plus-circle"
      }), this.getLsiValue("addFilter")));
    }

    return buttons;
  },
  _isApplied: function _isApplied() {
    return Object.keys(this.state.applied).length > 0;
  },
  _getCancelButton: function _getCancelButton() {
    return this._isApplied() && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("cancelBox"),
      key: "cancel",
      parent: this
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Button, {
      bgStyle: "transparent",
      onClick: this._clearFilters,
      className: this.getClassName().cancelButton,
      colorSchema: "custom"
    }, this.getLsiValue("cancelFilters")));
  },
  _isLsi: function _isLsi(value) {
    return value && _typeof(value) === "object" && ("en" in value || "cs" in value); // good-enough detection for backward compatibility
  },
  _buildHeader: function _buildHeader() {
    var status = this.props.controller.getStatus();
    var title = this._isLsi(this.props.title) ? this.getLsiItem(this.props.title) : this.props.title;
    var result = [_uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      key: "left",
      className: this.getClassName("titleBox")
    }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Span, {
      className: this.getClassName().title,
      content: title
    }), this.isXs() ? this._getFilterBadge(status) : this._getButtons())];

    if (!this.isXs()) {
      this._isApplied() && result.push(this._getCancelButton());
    }

    return result;
  },
  _registerPanel: function _registerPanel(panel) {
    this._panel = panel;
  },
  _buildChildren: function _buildChildren() {
    var r = [];

    if (this.props.children && typeof this.props.children === "function") {
      this.props.children(this.props.controller, this.state.applied, this.addFilter, this.removeFilter, this.props.filters, this);
    } else {
      var props = {
        controller: this.props.controller,
        appliedFilters: this.state.applied,
        addFilter: this.addFilter,
        removeFilter: this.removeFilter,
        filters: this.props.filters,
        filterBar: this
      };

      _uu5g.default.Common.Children.forEach(this.props.children, function (element) {
        if (_uu5g.default.Common.Element.isValid(element)) {
          var p = _objectSpread({}, element.props, props);

          r.push(_uu5g.default.Common.Element.clone(element, p));
        } else r.push(element);
      });
    }

    return _uu5g.default.Common.Children.toArray(r);
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    // todo header
    var mainProps = this.getMainPropsToPass();
    delete mainProps.nestingLevel;

    if (this.isXs() && !this.state.expanded) {
      mainProps.className = mainProps.className ? "".concat(mainProps.className, " ").concat(this.getClassName().collapsed) : null;
    }

    mainProps.colorSchema = "custom";
    if (mainProps.className) mainProps.className = mainProps.className.replace(/\bcolor-schema-\S+/g, "");
    var xs = this.isXs();
    return this.getNestingLevel() ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Panel, _extends({}, mainProps, {
      openClick: !xs ? "none" : "header",
      iconExpanded: xs ? "mdi-chevron-up" : undefined,
      iconCollapsed: xs ? "mdi-chevron-down" : undefined,
      ref_: this._registerPanel,
      header: this._buildHeader(),
      colorSchemaHeader: "custom",
      bgStyle: this.props.bgStyle,
      borderRadius: this.props.borderRadius,
      elevation: this.props.elevation
    }), _uu5g.default.Common.Element.create("div", null, xs && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      key: "buttons",
      className: this.getClassName("buttons"),
      parent: this
    }, this._getButtons(true)), xs && this._getCancelButton(), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Well, {
      key: "body",
      className: this.getClassName("panelBody"),
      colorSchema: (this.getColorSchema() || "blue").replace(/-rich/, ""),
      borderRadius: this.props.borderRadius,
      parent: this
    }, this.props.simpleFilterPanel ? _uu5g.default.Common.Element.create(_simpleFilterPanel.default, {
      controller: this.props.controller,
      appliedFilters: this.state.applied,
      addFilter: this.addFilter,
      removeFilter: this.removeFilter,
      filters: this.props.filters,
      filterBar: this,
      colorSchema: this.props.colorSchema,
      buttonProps: this.props.buttonProps
    }) : this._buildChildren()))) : null;
  } //@@viewOff:render

});

exports.FilterBar = FilterBar;
var _default = FilterBar;
exports.default = _default;