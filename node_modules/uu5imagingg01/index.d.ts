import UU5 = require('uu5g04');
export = Imaging;
declare module 'uu5g04' {
    namespace Imaging {
        namespace Imaging {
            interface Lightbox$Props {
                data?: any[];
                blackBackground?: boolean;
                name?: string;
            }
            function Lightbox(props: Lightbox$Props): any;
            interface Image$Props {
                src?: string;
                loadingSrc?: string;
                thumb?: string;
                caption?: string;
                fit?: "default" | "coverNoScaleUp";
                effect?: "none" | "zoom" | "grayscale" | "blur" | "sepia" | "invert" | "tilt" | "morph";
                shape?: "default" | "rounded" | "square" | "roundedSquare" | "circle" | "rect" | "rect4x3" | "rect3x2" | "rect5x4" | "rect2x1" | "rect3x1" | "rect4x1" | "rect45x10" | "rect16x9" | "rect16x10" | "rect3x4" | "rect4x5" | "rect2x3" | "rect1x2" | "roundedRect" | "roundedRect4x3" | "roundedRect3x2" | "roundedRect5x4" | "roundedRect2x1" | "roundedRect3x1" | "roundedRect4x1" | "roundedRect45x10" | "roundedRect16x9" | "roundedRect16x10" | "roundedRect3x4" | "roundedRect4x5" | "roundedRect2x3" | "roundedRect1x2";
                width?: number | string;
                height?: number | string;
                onClick?(...args: any): any;
                lightbox?: boolean | string;
                authenticate?: boolean;
                alt?: string;
                originalDimensions?: boolean;
                aspectRatio?: string;
            }
            function Image(props: Image$Props): any;
            interface ThumbnailList$Props {
                data?: any;
                authenticate?: boolean;
                mode?: string;
            }
            function ThumbnailList(props: ThumbnailList$Props): any;
            interface ImageRow$Props {
                data?: any;
                alignment?: string;
                authenticate?: boolean;
            }
            function ImageRow(props: ImageRow$Props): any;
            interface ImageColumn$Props {
                data?: any;
                alignment?: string;
                authenticate?: boolean;
            }
            function ImageColumn(props: ImageColumn$Props): any;
            const Carousel: any;
            interface Input$value$value {
            }
            interface Input$value$originalValue {
            }
            interface Input$value {
                id?: string;
                name?: string;
                value?: Input$value$value;
                src?: string;
                originalValue?: Input$value$originalValue;
                error?: any;
            }
            interface Input$placeholder {
            }
            interface Input$Props {
                value?: Input$value | any[];
                placeholder?: Input$placeholder | string;
                multiple?: boolean;
                outputWidth?: number | string;
                outputHeight?: number | string;
                outputType?: any;
                outputRotation?: "auto" | number;
                outputQuality?: number;
                ignorePaste?: boolean;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                previewWidth?: number;
                previewHeight?: number;
                previewShape?: string;
            }
            function Input(props: Input$Props): any;
            interface UploadInput$value$value {
            }
            interface UploadInput$value$originalValue {
            }
            interface UploadInput$value {
                id?: string;
                name?: string;
                value?: UploadInput$value$value;
                uri?: string;
                progress?: number;
                src?: string;
                originalValue?: UploadInput$value$originalValue;
                error?: any;
            }
            interface UploadInput$placeholder {
            }
            interface UploadInput$Props {
                value?: UploadInput$value | any[];
                placeholder?: UploadInput$placeholder | string;
                multiple?: boolean;
                outputWidth?: number | string;
                outputHeight?: number | string;
                outputType?: any;
                outputRotation?: "auto" | number;
                outputQuality?: number;
                ignorePaste?: boolean;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                previewWidth?: number;
                previewHeight?: number;
                previewShape?: string;
            }
            function UploadInput(props: UploadInput$Props): any;
            const Adjustment: {
                OUTPUT_TYPES: string[];
                resize(imageFile: any, width: any, height: any): any;
                resizeMax(imageFile: any, maxWidth: any, maxHeight: any): any;
                changeType(imageFile: any, requiredType: any, quality: any): any;
                rotate(imageFile: any, method: any, originalFile?: any): any;
                crop(imageFile: any, x: any, y: any, width: any, height: any): any;
                cropRatio(imageFile: any, dxWidth: any, dxHeight: any): any;
            };
            interface ThumbnailGenerator$Props {
                onChange?(...args: any): any;
                thumbnailTypes?: ("1:1" | "avatar" | "2:3" | "3:2" | "3:4" | "4:3")[];
                outputType?: "png" | "jpeg";
            }
            function ThumbnailGenerator(props: ThumbnailGenerator$Props): any;
        }
    }
}
declare namespace Imaging {
    namespace Imaging {
        interface Lightbox$Props {
            data?: any[];
            blackBackground?: boolean;
            name?: string;
        }
        function Lightbox(props: Lightbox$Props): any;
        interface Image$Props {
            src?: string;
            loadingSrc?: string;
            thumb?: string;
            caption?: string;
            fit?: "default" | "coverNoScaleUp";
            effect?: "none" | "zoom" | "grayscale" | "blur" | "sepia" | "invert" | "tilt" | "morph";
            shape?: "default" | "rounded" | "square" | "roundedSquare" | "circle" | "rect" | "rect4x3" | "rect3x2" | "rect5x4" | "rect2x1" | "rect3x1" | "rect4x1" | "rect45x10" | "rect16x9" | "rect16x10" | "rect3x4" | "rect4x5" | "rect2x3" | "rect1x2" | "roundedRect" | "roundedRect4x3" | "roundedRect3x2" | "roundedRect5x4" | "roundedRect2x1" | "roundedRect3x1" | "roundedRect4x1" | "roundedRect45x10" | "roundedRect16x9" | "roundedRect16x10" | "roundedRect3x4" | "roundedRect4x5" | "roundedRect2x3" | "roundedRect1x2";
            width?: number | string;
            height?: number | string;
            onClick?(...args: any): any;
            lightbox?: boolean | string;
            authenticate?: boolean;
            alt?: string;
            originalDimensions?: boolean;
            aspectRatio?: string;
        }
        function Image(props: Image$Props): any;
        interface ThumbnailList$Props {
            data?: any;
            authenticate?: boolean;
            mode?: string;
        }
        function ThumbnailList(props: ThumbnailList$Props): any;
        interface ImageRow$Props {
            data?: any;
            alignment?: string;
            authenticate?: boolean;
        }
        function ImageRow(props: ImageRow$Props): any;
        interface ImageColumn$Props {
            data?: any;
            alignment?: string;
            authenticate?: boolean;
        }
        function ImageColumn(props: ImageColumn$Props): any;
        const Carousel: any;
        interface Input$value$value {
        }
        interface Input$value$originalValue {
        }
        interface Input$value {
            id?: string;
            name?: string;
            value?: Input$value$value;
            src?: string;
            originalValue?: Input$value$originalValue;
            error?: any;
        }
        interface Input$placeholder {
        }
        interface Input$Props {
            value?: Input$value | any[];
            placeholder?: Input$placeholder | string;
            multiple?: boolean;
            outputWidth?: number | string;
            outputHeight?: number | string;
            outputType?: any;
            outputRotation?: "auto" | number;
            outputQuality?: number;
            ignorePaste?: boolean;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            previewWidth?: number;
            previewHeight?: number;
            previewShape?: string;
        }
        function Input(props: Input$Props): any;
        interface UploadInput$value$value {
        }
        interface UploadInput$value$originalValue {
        }
        interface UploadInput$value {
            id?: string;
            name?: string;
            value?: UploadInput$value$value;
            uri?: string;
            progress?: number;
            src?: string;
            originalValue?: UploadInput$value$originalValue;
            error?: any;
        }
        interface UploadInput$placeholder {
        }
        interface UploadInput$Props {
            value?: UploadInput$value | any[];
            placeholder?: UploadInput$placeholder | string;
            multiple?: boolean;
            outputWidth?: number | string;
            outputHeight?: number | string;
            outputType?: any;
            outputRotation?: "auto" | number;
            outputQuality?: number;
            ignorePaste?: boolean;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            previewWidth?: number;
            previewHeight?: number;
            previewShape?: string;
        }
        function UploadInput(props: UploadInput$Props): any;
        const Adjustment: {
            OUTPUT_TYPES: string[];
            resize(imageFile: any, width: any, height: any): any;
            resizeMax(imageFile: any, maxWidth: any, maxHeight: any): any;
            changeType(imageFile: any, requiredType: any, quality: any): any;
            rotate(imageFile: any, method: any, originalFile?: any): any;
            crop(imageFile: any, x: any, y: any, width: any, height: any): any;
            cropRatio(imageFile: any, dxWidth: any, dxHeight: any): any;
        };
        interface ThumbnailGenerator$Props {
            onChange?(...args: any): any;
            thumbnailTypes?: ("1:1" | "avatar" | "2:3" | "3:2" | "3:4" | "4:3")[];
            outputType?: "png" | "jpeg";
        }
        function ThumbnailGenerator(props: ThumbnailGenerator$Props): any;
    }
}
declare global {
namespace UU5 {
    namespace Imaging {
        namespace Imaging {
            interface Lightbox$Props {
                data?: any[];
                blackBackground?: boolean;
                name?: string;
            }
            function Lightbox(props: Lightbox$Props): any;
            interface Image$Props {
                src?: string;
                loadingSrc?: string;
                thumb?: string;
                caption?: string;
                fit?: "default" | "coverNoScaleUp";
                effect?: "none" | "zoom" | "grayscale" | "blur" | "sepia" | "invert" | "tilt" | "morph";
                shape?: "default" | "rounded" | "square" | "roundedSquare" | "circle" | "rect" | "rect4x3" | "rect3x2" | "rect5x4" | "rect2x1" | "rect3x1" | "rect4x1" | "rect45x10" | "rect16x9" | "rect16x10" | "rect3x4" | "rect4x5" | "rect2x3" | "rect1x2" | "roundedRect" | "roundedRect4x3" | "roundedRect3x2" | "roundedRect5x4" | "roundedRect2x1" | "roundedRect3x1" | "roundedRect4x1" | "roundedRect45x10" | "roundedRect16x9" | "roundedRect16x10" | "roundedRect3x4" | "roundedRect4x5" | "roundedRect2x3" | "roundedRect1x2";
                width?: number | string;
                height?: number | string;
                onClick?(...args: any): any;
                lightbox?: boolean | string;
                authenticate?: boolean;
                alt?: string;
                originalDimensions?: boolean;
                aspectRatio?: string;
            }
            function Image(props: Image$Props): any;
            interface ThumbnailList$Props {
                data?: any;
                authenticate?: boolean;
                mode?: string;
            }
            function ThumbnailList(props: ThumbnailList$Props): any;
            interface ImageRow$Props {
                data?: any;
                alignment?: string;
                authenticate?: boolean;
            }
            function ImageRow(props: ImageRow$Props): any;
            interface ImageColumn$Props {
                data?: any;
                alignment?: string;
                authenticate?: boolean;
            }
            function ImageColumn(props: ImageColumn$Props): any;
            const Carousel: any;
            interface Input$value$value {
            }
            interface Input$value$originalValue {
            }
            interface Input$value {
                id?: string;
                name?: string;
                value?: Input$value$value;
                src?: string;
                originalValue?: Input$value$originalValue;
                error?: any;
            }
            interface Input$placeholder {
            }
            interface Input$Props {
                value?: Input$value | any[];
                placeholder?: Input$placeholder | string;
                multiple?: boolean;
                outputWidth?: number | string;
                outputHeight?: number | string;
                outputType?: any;
                outputRotation?: "auto" | number;
                outputQuality?: number;
                ignorePaste?: boolean;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                previewWidth?: number;
                previewHeight?: number;
                previewShape?: string;
            }
            function Input(props: Input$Props): any;
            interface UploadInput$value$value {
            }
            interface UploadInput$value$originalValue {
            }
            interface UploadInput$value {
                id?: string;
                name?: string;
                value?: UploadInput$value$value;
                uri?: string;
                progress?: number;
                src?: string;
                originalValue?: UploadInput$value$originalValue;
                error?: any;
            }
            interface UploadInput$placeholder {
            }
            interface UploadInput$Props {
                value?: UploadInput$value | any[];
                placeholder?: UploadInput$placeholder | string;
                multiple?: boolean;
                outputWidth?: number | string;
                outputHeight?: number | string;
                outputType?: any;
                outputRotation?: "auto" | number;
                outputQuality?: number;
                ignorePaste?: boolean;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                previewWidth?: number;
                previewHeight?: number;
                previewShape?: string;
            }
            function UploadInput(props: UploadInput$Props): any;
            const Adjustment: {
                OUTPUT_TYPES: string[];
                resize(imageFile: any, width: any, height: any): any;
                resizeMax(imageFile: any, maxWidth: any, maxHeight: any): any;
                changeType(imageFile: any, requiredType: any, quality: any): any;
                rotate(imageFile: any, method: any, originalFile?: any): any;
                crop(imageFile: any, x: any, y: any, width: any, height: any): any;
                cropRatio(imageFile: any, dxWidth: any, dxHeight: any): any;
            };
            interface ThumbnailGenerator$Props {
                onChange?(...args: any): any;
                thumbnailTypes?: ("1:1" | "avatar" | "2:3" | "3:2" | "3:4" | "4:3")[];
                outputType?: "png" | "jpeg";
            }
            function ThumbnailGenerator(props: ThumbnailGenerator$Props): any;
        }
    }
}
}