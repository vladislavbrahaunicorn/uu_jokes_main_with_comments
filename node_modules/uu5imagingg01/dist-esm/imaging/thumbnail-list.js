import UU5 from "uu5g04";
import Cfg from "../config/config.js";
import ThumbnailListBody from "./internal/thumbnail-list-body.js";
import "./thumbnail-list.less";

const bodyProps = {
  data: true,
  effect: true,
  shape: true,
  thumbSuffix: true,
  lightbox: true,
  rowMaxHeight: true,
  rowMinHeight: true,
  lastRowMaxHeight: true,
  colWidth: true,
  alignment: true,
  rowWidth: true,
  session: true,
  authenticate: true,
  mode: true,
  path: true
};

export const ThumbnailList = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ThumbnailList",
    classNames: {
      main: Cfg.CSS + "thumbnail-list",
      mode: Cfg.CSS + "thumbnail-list-mode-"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.any,
    authenticate: UU5.PropTypes.bool,
    mode: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: [],
      authenticate: false,
      mode: "default"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _renderResizeBody({ width, height }) {
    if (width === 0 && height === 0) {
      // fix for Resize rendering without dimensions first
      return null;
    } else {
      return this._renderBody(width);
    }
  },

  _renderBody(width = undefined) {
    let data = this.props.data || [];
    let props = {};

    for (let propKey in bodyProps) {
      props[propKey] = this.props[propKey];
    }

    if (props.authenticate) {
      return (
        <UU5.Common.SessionContext.Consumer>
          {session => (
            <ThumbnailListBody
              {...props}
              rowWidth={width}
              data={data}
              session={session ? session.session : undefined}
            />
          )}
        </UU5.Common.SessionContext.Consumer>
      );
    } else {
      return <ThumbnailListBody {...props} data={data} rowWidth={width} />;
    }
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    if (this.props.mode === "track") {
      return <UU5.Bricks.Resize {...this.getMainPropsToPass()}>{this._renderResizeBody}</UU5.Bricks.Resize>;
    } else {
      return <UU5.Bricks.Div {...this.getMainPropsToPass()}>{this._renderBody()}</UU5.Bricks.Div>;
    }
  }
  //@@viewOff:render
});

export default ThumbnailList;
