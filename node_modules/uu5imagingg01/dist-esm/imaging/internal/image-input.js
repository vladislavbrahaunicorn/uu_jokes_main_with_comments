import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "./image-input.less";
import Cfg from "../../config/config.js";
export const Input = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ImageInput",
    classNames: {
      main: Cfg.CSS + "image-input",
      input: Cfg.CSS + "image-input-file-input",
      placeholder: Cfg.CSS + "image-input-placeholder",
      dragover: Cfg.CSS + "image-input-dragover"
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    onChange: UU5.PropTypes.func,
    placeholder: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.string]),
    multiple: UU5.PropTypes.bool,
    readOnly: UU5.PropTypes.bool,
    loading: UU5.PropTypes.bool,
    inputWidth: UU5.PropTypes.string,
    borderRadius: UU5.PropTypes.string,
    bgStyle: UU5.PropTypes.oneOf(["filled", "outline", "transparent", "underline"]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5])
  },

  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      onChange: null,
      placeholder: null,
      multiple: false,
      readOnly: false,
      loading: false,
      inputWidth: null,
      borderRadius: null,
      bgStyle: null,
      elevation: null
    };
  },

  //@@viewOff:getDefaultProps
  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      dragover: false
    };
  },

  componentDidMount() {
    if (this._visualInput) {
      UU5.Environment.EventListener.addEvent(this._visualInput, "dragover", this.getId(), this._handleDragOver);
      UU5.Environment.EventListener.addEvent(this._visualInput, "dragleave", this.getId(), this._handleDragLeave);
      UU5.Environment.EventListener.addEvent(this._visualInput, "drop", this.getId(), this._handleFileSelect);
    }
  },

  componentWillUnmount() {
    if (this._visualInput) {
      UU5.Environment.EventListener.removeEvent(this._visualInput, "dragover", this.getId());
      UU5.Environment.EventListener.removeEvent(this._visualInput, "dragleave", this.getId());
      UU5.Environment.EventListener.removeEvent(this._visualInput, "drop", this.getId());
      UU5.Environment.EventListener.removeWindowEvent("keyup", this.getId());
    }
  },

  //@@viewOff:standardComponentLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods
  //@@viewOn:componentSpecificHelpers
  _handleDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = "copy";
    this.setState({
      dragover: true
    });
  },

  _handleDragLeave(e) {
    e.stopPropagation();
    e.preventDefault();
    this.setState({
      dragover: false
    });
  },

  _handleFileSelect(e) {
    e.stopPropagation();
    e.preventDefault();

    if (e.dataTransfer.files) {
      this.setState({
        dragover: false
      }, () => this._onChange(e.dataTransfer.files));
    }
  },

  _onFocus() {
    UU5.Environment.EventListener.addWindowEvent("keyup", this.getId(), e => {
      const isEnter = e.which === 13;
      isEnter && !this.isDisabled() && this._open();
    });
  },

  _onBlur() {
    UU5.Environment.EventListener.removeWindowEvent("keyup", this.getId());
  },

  _onChange(list) {
    // NOTE "list" might not be Array, nor iterable (in Edge) but it has "length" and access via indices.
    if (list) {
      let files = [];

      for (let i = 0; i < list.length; ++i) {
        let file = list[i];
        files.push({
          id: UU5.Common.Tools.generateUUID(),
          value: file,
          name: file.name
        });
      }

      if (files.length) {
        UU5.Environment.EventListener.removeWindowEvent("keyup", this.getId());
        this.props.onChange(files);
      }
    }
  },

  _open() {
    this._input.click();

    return this;
  },

  _getInputWidth() {
    return this.props.inputWidth === "auto" ? null : this.props.inputWidth;
  },

  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();
    let visulInputClassName = this.getClassName("main");

    if (this.state.dragover) {
      visulInputClassName += " " + this.getClassName("dragover");
    }

    mainAttrs = Object.assign(mainAttrs, {
      ref: visualInput => this._visualInput = visualInput,
      className: visulInputClassName + (mainAttrs.className ? " " + mainAttrs.className : ""),
      tabIndex: !this.props.readOnly && !this.props.disabled ? "0" : null,
      onClick: !this.props.readOnly && !this.props.disabled && !this.props.loading ? () => this._open() : null,
      onFocus: this._onFocus,
      onBlur: this._onBlur
    });
    mainAttrs.style = { ...mainAttrs.style,
      ...{
        borderRadius: this.props.borderRadius
      }
    };

    if (this.props.elevation) {
      mainAttrs.className += " " + UU5.Common.ClassNames.elevation + this.props.elevation;
    }

    if (this.props.bgStyle) {
      mainAttrs.className += " " + UU5.Common.ClassNames[this.props.bgStyle];
    }

    if (this.props.inputWidth) {
      mainAttrs = UU5.Common.Tools.mergeDeep(mainAttrs, {
        style: {
          width: this._getInputWidth()
        }
      });
    }

    return mainAttrs;
  },

  _getInput() {
    let inputAttrs = {
      onChange: e => this._onChange(e.target.files),
      type: "file",
      accept: "image/*",
      key: process.env.NODE_ENV !== "test" ? Math.random() : this.getId(),
      // onChange is always only simulated in Jest tests so no need for different keys (and random just screws up snapshots)
      id: this.getId() + "-hidden-input",
      className: this.getClassName("input"),
      ref: item => this._input = item,
      multiple: this.props.multiple,
      disabled: this.props.disabled || this.props.readOnly,
      files: null
    };
    return <div {...this._getMainAttrs()}>
        <span className={this.getClassName("placeholder")}>{this.props.placeholder}</span>
        <UU5.Bricks.Icon icon="mdi-image" />
        <input {...inputAttrs} />
      </div>;
  },

  //@@viewOff:componentSpecificHelpers
  //@@viewOn:render
  render() {
    return this._getInput();
  } //@@viewOn:render


});
export default Input;