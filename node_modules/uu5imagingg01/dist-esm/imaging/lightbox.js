import UU5 from "uu5g04";
import Cfg from "../config/config.js";

import LightboxBody from "./lightbox-body.js";

import "./lightbox.less";

let modalRoot;
function getModalRoot() {
  if (!modalRoot) {
    modalRoot = document.createElement("div");
    modalRoot.id = "uu5-imaging-lightbox-modal-root";
    document.body.appendChild(modalRoot);
  }
  return modalRoot;
}

export const Lightbox = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "Lightbox",
    classNames: {
      main: Cfg.CSS + "lightbox"
    },
    defaults: {
      key: "general"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.array,
    blackBackground: UU5.PropTypes.bool,
    name: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: [],
      blackBackground: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    let key = this.props.name || this.getDefault("key");
    UU5.Environment.Lightboxes = UU5.Environment.Lightboxes || {};
    UU5.Environment.Lightboxes[key] = UU5.Environment.Lightboxes[key] || [];
    UU5.Environment.Lightboxes[key].push(this);

    this._createPortal();
    this._options = {};
    let data = this.props.data && this.props.data.map(dataItem => ({ ...dataItem, sourceLightbox: this }));
    let opt = { blackBackground: this.props.blackBackground, index: 0, data };
    this._setOptions(opt);

    if (!this._isTargetLightbox() && data) {
      let targetLightbox = this._getTargetLightbox();
      data.forEach(item => {
        targetLightbox._addImage(item.src, item.id, item.authenticate, item.sourceComponent, this);
      });
    }
  },

  componentWillUnmount() {
    this._unregisterLightbox();
    this._removePortal();
  },

  componentWillReceiveProps(nextProps) {
    let options;
    if (this._isTargetLightbox()) {
      if (this.props.name !== nextProps.name) {
        let key = nextProps.name || this.getDefault("key");
        UU5.Environment.Lightboxes = UU5.Environment.Lightboxes || {};
        this._unregisterLightbox();
        UU5.Environment.Lightboxes[key] = UU5.Environment.Lightboxes[key] || [];
        UU5.Environment.Lightboxes[key].push(this);
      }

      options = { blackBackground: nextProps.blackBackground };
    }

    if (this.props.data !== nextProps.data) {
      let targets = [this];
      if (!this._isTargetLightbox()) targets.push(this._getTargetLightbox());

      targets.forEach(target => {
        // remove old items
        this.props.data.forEach(dataItem => {
          target._options.data = target._options.data.filter(optionsItem => {
            return !(optionsItem === dataItem || optionsItem.id === (dataItem.id || dataItem.src));
          });
        });

        // add new items
        let newData = nextProps.data && nextProps.data.map(dataItem => ({ ...dataItem, sourceLightbox: this }));
        newData.forEach(item => {
          target._addImage(item.src, item.id, item.authenticate, item.sourceComponent, this, true);
        });
      });
    }

    if (options) {
      this._setOptions(options);
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  addImage(src, id, authenticate, sourceComponent) {
    if (id === undefined) {
      id = src;
    }

    if (this._isTargetLightbox()) {
      this._addImage(src, id, authenticate, sourceComponent, this);
    } else {
      this._getTargetLightbox()._addImage(src, id, authenticate, sourceComponent, this);
    }

    return this;
  },

  removeImage(id) {
    if (this._isTargetLightbox()) {
      let i = this._findIndex(id);
      this._options.data.splice(i, 1);
    } else {
      this._getTargetLightbox().removeImage(id);
    }
    return this;
  },

  replaceImage(newSrc, id) {
    if (this._isTargetLightbox()) {
      if (id === undefined) {
        id = newSrc;
      }

      let i = this._findIndex(id);
      this._options.data[i].src = newSrc;
    } else {
      this._getTargetLightbox().replaceImage(newSrc, id);
    }
    return this;
  },

  getImages() {
    if (this._isTargetLightbox()) {
      return this._options.data;
    } else {
      return this._getTargetLightbox().getImages();
    }
  },

  getImage(id) {
    if (this._isTargetLightbox()) {
      let i = this._findIndex(id);
      return this._options.data[i];
    } else {
      this._getTargetLightbox().getImage(id);
    }
  },

  getImageBySrc(src) {
    if (this._isTargetLightbox()) {
      let i = this._findIndexBySrc(src);
      return this._options.data[i];
    } else {
      this._getTargetLightbox().getImageBySrc(src);
    }
  },

  open(id, setStateCallback) {
    if (this._isTargetLightbox()) {
      if (this._options.data.length) {
        this._options.data.sort((firstImage, secondImage) => {
          let result;
          if (firstImage.sourceComponent === secondImage.sourceComponent) {
            result = 0;
          } else {
            let firstImageNode = firstImage.sourceComponent ? firstImage.sourceComponent.findDOMNode() : null; // eslint-disable-line react/no-find-dom-node
            let secondImageNode = secondImage.sourceComponent ? secondImage.sourceComponent.findDOMNode() : null; // eslint-disable-line react/no-find-dom-node
            if (firstImageNode && secondImageNode) {
              let compareResult = firstImageNode.compareDocumentPosition(secondImageNode);
              result = compareResult & document.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
            } else {
              result = firstImageNode ? -1 : 1;
            }
          }
          return result;
        });

        if (id !== undefined) {
          let i;
          if (typeof id === "number") {
            i = id;
          } else if (typeof id === "string") {
            i = this._findIndex(id);
          } else {
            i = 0;
          }

          if (i === -1) {
            UU5.Common.Tools.warning("Target Lightbox can't find the image that you are trying to open.");
            return;
          }

          this._setOptions({ index: i });
        }
        this._modal.open({ content: this._getBody() }, () => {
          this._onOpen();
          typeof setStateCallback === "function" && setStateCallback();
        });
      }
    } else {
      this._getTargetLightbox().open(id, setStateCallback);
    }

    return this;
  },

  close(setStateCallback) {
    if (this._isTargetLightbox()) {
      this._onClose({ component: this._modal, callback: setStateCallback });
    } else {
      this._getTargetLightbox().close(setStateCallback);
    }
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _addImage(src, id, authenticate, sourceComponent, sourceLightbox = this, ignoreTarget) {
    if (id === undefined) {
      id = src;
    }

    if (ignoreTarget || this._isTargetLightbox()) {
      this._options.data.push({ id, src, authenticate, sourceComponent, sourceLightbox });
    } else {
      this._getTargetLightbox()._addImage(src, id, authenticate, sourceComponent, sourceLightbox);
    }

    return this;
  },

  _createPortal() {
    this._portalElement = document.createElement("div");
    this._portalElement.id = this.getId() + "_portal";
    getModalRoot().appendChild(this._portalElement);
  },

  _removePortal() {
    getModalRoot().removeChild(this._portalElement);
  },

  _getTargetLightbox() {
    let key = this.props.name || this.getDefault("key");
    return UU5.Environment.Lightboxes[key][0];
  },

  _unregisterLightbox() {
    let oldKey = this.props.name || this.getDefault("key");
    let firstLightbox = UU5.Environment.Lightboxes[oldKey][0];
    UU5.Environment.Lightboxes[oldKey].forEach((lightbox, index) =>
      lightbox === this ? UU5.Environment.Lightboxes[oldKey].splice(index, 1) : null
    );
    // "re-activate" next instance of Lightbox so that it renders its <Modal />
    let newFirstLightbox = UU5.Environment.Lightboxes[oldKey][0];
    if (firstLightbox !== newFirstLightbox && newFirstLightbox) {
      this._options.data = this._options.data.filter(item => item.sourceLightbox !== this);
      newFirstLightbox._setOptions(this._options);
      newFirstLightbox.forceUpdate();
    }
  },

  _findIndexByType(type, value) {
    if (typeof this._options.data.findIndex === "function") {
      return this._options.data.findIndex(img => img[type] === value);
    } else {
      // IE
      for (let i = 0; i < this._options.data.length; i++) {
        if (this._options.data[i][type] === value) {
          return i;
        }
      }
    }
  },

  _findIndex(id) {
    return this._findIndexByType("id", id);
  },

  _findIndexBySrc(src) {
    return this._findIndexByType("src", src);
  },

  _isTargetLightbox() {
    return this._getTargetLightbox().getId() === this.getId();
  },

  _setOptions(opt) {
    opt &&
      opt.data &&
      opt.data.forEach(item => {
        if (item.id === undefined) {
          item.id = item.src;
        }
      });
    Object.assign(this._options, opt);
    return this;
  },

  _getOptions() {
    return this._options;
  },

  _onOpen() {
    if (this._lightboxBody) {
      this._lightboxBody.onOpenModal();
    }
    return this;
  },

  _onClose(opt) {
    if (this._lightboxBody) {
      this._lightboxBody.onCloseModal();
    }
    opt.component.close(false, opt.callback);
    return this;
  },

  _getBody() {
    return (
      <LightboxBody
        ref_={component => (this._lightboxBody = component)}
        setOptions={this._setOptions}
        getOptions={this._getOptions}
        closeModal={() => this._onClose({ component: this._modal })}
      />
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._isTargetLightbox()
      ? UU5.Common.Portal.create(
          <UU5.Bricks.Modal
            {...this.getMainPropsToPass()}
            ref_={modal => (this._modal = modal)}
            onClose={opt => this._onClose(opt)}
            forceRender={true}
          />,
          this._portalElement
        )
      : null;
  }
  //@@viewOff:render
});

export default Lightbox;
