const Fs = require("fs-extra");
const Path = require("path");
const Package = require("./tools/package.js");
const StringUtil = require("./tools/string-util.js");
const execSync = require("child_process").execSync;

const INITIAL_PROJECT_VERSION = "0.1.0";

const UU_APP_VERSION = "2.+";

const UU_APP_DEVKIT_VERSION = "1.+";

module.exports = async function (opts) {
  let {stack, name, namespace, skipInstall} = opts || {};
  let rootProjectName = Path.basename(Path.resolve("."));
  name = StringUtil.snakeCase(name || rootProjectName);
  let {vendor, app, subApp} = Package.parseProduct(name);
  let productGroupId = vendor;
  if (app) {
    productGroupId = productGroupId.concat(".", app);
  }
  if (subApp) {
    productGroupId = productGroupId.concat(".", subApp);
  }
  productGroupId = productGroupId.toLowerCase();
  let productPackage = productGroupId.replace(/g[0-9]{2}(\.|$)/, (match, $1) => {
    return $1;
  });
  let uuappJson = {};
  if (Fs.existsSync("uuapp.json")) {
    uuappJson = JSON.parse(Fs.readFileSync("uuapp.json"));
  }
  let productVersion = uuappJson.version || INITIAL_PROJECT_VERSION;

  // Create root build.gradle (if necessary)
  let buildGradlePath = Path.resolve(".", "build.gradle");
  if (!Fs.existsSync(buildGradlePath)) {
    let buildGradle = null;
    // enable beta versions if requested
    if (process.env.UUAPP_DEV_ENABLED) {
      buildGradle = Fs.readFileSync(Path.resolve(__dirname, "templates", "__java-root", "build.gradle.dev"));
    } else if (process.env.UUAPP_BETA_ENABLED) {
      buildGradle = Fs.readFileSync(Path.resolve(__dirname, "templates", "__java-root", "build.gradle.beta"));
    } else {
      buildGradle = Fs.readFileSync(Path.resolve(__dirname, "templates", "__java-root", "build.gradle"));
    }
    let context = {
      uuAppVersion: UU_APP_VERSION,
      uuAppDevKitVersion: UU_APP_DEVKIT_VERSION,
      productGroupId,
      productVersion,
      productPackage
    };
    buildGradle = StringUtil.evalExpressions(buildGradle.toString(), context);
    Fs.writeFileSync(buildGradlePath, buildGradle);
  }

  // Invoke project generator
  let cmd = "gradle --refresh-dependencies --stacktrace";
  if (stack === "java-app") {
    cmd += " createUuApp"
  } else if (stack === "java-service") {
    cmd += " createUuService"
  } else if (stack === "java-lib") {
    cmd += " createUuLib"
  }
  cmd += ` -Pvendor=${vendor} -Papp=${app} -PsubApp=${subApp} -PprojectName=${name}`;
  if (namespace) {
    cmd += ` -Pnamespace=${namespace}`;
  }
  if (skipInstall != null) {
    cmd += ` -PskipInstall=${skipInstall}`;
  }
  execSync(cmd, {stdio: [0, 1, 2]});
};
