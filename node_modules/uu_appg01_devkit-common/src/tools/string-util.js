module.exports = {

  /**
   * TextDashXyz => text-dash-xyz
   */
  dashCase(text) {
    if (!text) return "";
    return text
      .replace(/[A-Z]/g, m => "-" + m.toLowerCase())
      .replace(/^-+|-+$/g, "")
      .replace(/--*/g, "-");
  },

  /**
   * TextDashXyz => text_dash_xyz
   */
  snakeCase(text) {
    if (!text) return "";
    return text
      .replace(/[A-Z]/g, m => "_" + m.toLowerCase())
      .replace(/^_+|_+$/g, "")
      .replace(/__*/g, "_");
  },

  /**
   * text-dash_xyz => TextDashXyz
   */
  camelCase(text) {
    if (!text) return "";
    return text
      .replace(/_/g, "-")
      .replace(/^-+|-+$/g, "")
      .replace(/^.|-+./g, m => m.charAt(m.length - 1).toUpperCase());
  },

  regexpQuote(text) {
    return text.replace(/[.?*+^$[\]\\(){}|]/g, "\\$&");
  },

  evalExpressions(/*text, context, filePath?*/) {
    try {
      let context = arguments[1]; // eslint-disable-line
      return arguments[0].replace(/<%=((?:\s|\S)*?)%>/g, function(/*m, expr*/) {
        return eval(arguments[1]);
      });
    } catch (e) {
      console.error(
        "Unable to evaluate expressions in " + (arguments[2] ? "file " + arguments[2] : "text:\n" + arguments[0])
      );
      throw e;
    }
  }
};
