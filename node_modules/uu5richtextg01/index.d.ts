import UU5 = require('uu5g04');
export = RichText;
declare module 'uu5g04' {
    namespace RichText {
        const Area: any;
        function Block(props: any): any;
        const Editor: any;
        interface EditorContext$plugins {
        }
        interface EditorContext$Props {
            value?: string;
            buttons?: string[];
            plugins?: any[] | EditorContext$plugins;
            readOnly?: boolean;
            onChange?(...args: any): any;
            onBlur?(...args: any): any;
            onFocus?(...args: any): any;
            handleKeyCommand?: boolean;
            getToolbar?(...args: any): any;
            placeholder?: string;
            forceRenderModal?: boolean;
            bgStyle?: "outline" | "transparent";
            animatedToolbar?: boolean;
            dynamicToolbar?: boolean;
            height?: number | string;
            minHeight?: number | string;
            maxHeight?: number | string;
        }
        function EditorContext(props: EditorContext$Props): any;
        const EditorInput: any;
        const ExpandableEditorInput: any;
        const HtmlEditor: any;
        interface HtmlEditorContext$plugins {
        }
        interface HtmlEditorContext$Props {
            value?: string;
            buttons?: string[];
            plugins?: any[] | HtmlEditorContext$plugins;
            readOnly?: boolean;
            onChange?(...args: any): any;
            handleKeyCommand?: boolean;
            getToolbar?(...args: any): any;
            placeholder?: string;
            bgStyle?: "outline" | "transparent";
            animatedToolbar?: boolean;
            dynamicToolbar?: boolean;
            height?: number | string;
            minHeight?: number | string;
            maxHeight?: number | string;
        }
        function HtmlEditorContext(props: HtmlEditorContext$Props): any;
        const Toolbar: any;
        const Plugins: {
            fontSize: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            p: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            uu5string: any;
            uu5stringEntity: any;
            uu5StringBlock: any;
            icon: any;
            error: any;
            whitespace: any;
        };
        const plugins: {
            fontSize: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            p: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            uu5string: any;
            uu5stringEntity: any;
            uu5StringBlock: any;
            icon: any;
            error: any;
            whitespace: any;
        };
        const HtmlPlugins: {
            fontSIze: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            blockquote: any;
            image: any;
            htmlFragment: any;
            whitespace: any;
            htmlFragmentBlock: any;
            htmlFragmentEntity: any;
            error: any;
        };
        const htmlPlugins: {
            fontSIze: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            blockquote: any;
            image: any;
            htmlFragment: any;
            whitespace: any;
            htmlFragmentBlock: any;
            htmlFragmentEntity: any;
            error: any;
        };
        const _contentKitPlugins: {
            link: any;
            fileLink: any;
        };
        interface ExpandableEditor$Props {
            width?: string | number;
            height?: string | number;
            minHeight?: string | number;
            maxHeight?: string | number;
            modalHeader?: any;
            buttons?: string[];
            onBlur?(...args: any): any;
            onFocus?(...args: any): any;
            readOnly?: boolean;
            ref_?(...args: any): any;
            getToolbar?(...args: any): any;
        }
        function ExpandableEditor(props: ExpandableEditor$Props): any;
        const EmptyPlugin: any;
        function withEditorContext(Component: any): any;
        interface createEditablePlugin$3 {
        }
        function createEditablePlugin(pluginName: any, tagName: any, buttonDef: any, opts?: createEditablePlugin$3): any;
        const Bricks: {
            Block(props: any): any;
        };
    }
}
declare namespace RichText {
    const Area: any;
    function Block(props: any): any;
    const Editor: any;
    interface EditorContext$plugins {
    }
    interface EditorContext$Props {
        value?: string;
        buttons?: string[];
        plugins?: any[] | EditorContext$plugins;
        readOnly?: boolean;
        onChange?(...args: any): any;
        onBlur?(...args: any): any;
        onFocus?(...args: any): any;
        handleKeyCommand?: boolean;
        getToolbar?(...args: any): any;
        placeholder?: string;
        forceRenderModal?: boolean;
        bgStyle?: "outline" | "transparent";
        animatedToolbar?: boolean;
        dynamicToolbar?: boolean;
        height?: number | string;
        minHeight?: number | string;
        maxHeight?: number | string;
    }
    function EditorContext(props: EditorContext$Props): any;
    const EditorInput: any;
    const ExpandableEditorInput: any;
    const HtmlEditor: any;
    interface HtmlEditorContext$plugins {
    }
    interface HtmlEditorContext$Props {
        value?: string;
        buttons?: string[];
        plugins?: any[] | HtmlEditorContext$plugins;
        readOnly?: boolean;
        onChange?(...args: any): any;
        handleKeyCommand?: boolean;
        getToolbar?(...args: any): any;
        placeholder?: string;
        bgStyle?: "outline" | "transparent";
        animatedToolbar?: boolean;
        dynamicToolbar?: boolean;
        height?: number | string;
        minHeight?: number | string;
        maxHeight?: number | string;
    }
    function HtmlEditorContext(props: HtmlEditorContext$Props): any;
    const Toolbar: any;
    const Plugins: {
        fontSize: any;
        bold: any;
        index: any;
        italic: any;
        strike: any;
        underline: any;
        removeFormat: any;
        textAlign: any;
        unstyled: any;
        paragraph: any;
        p: any;
        link: any;
        list: any;
        color: any;
        fontFamily: any;
        indent: any;
        code: any;
        uu5string: any;
        uu5stringEntity: any;
        uu5StringBlock: any;
        icon: any;
        error: any;
        whitespace: any;
    };
    const plugins: {
        fontSize: any;
        bold: any;
        index: any;
        italic: any;
        strike: any;
        underline: any;
        removeFormat: any;
        textAlign: any;
        unstyled: any;
        paragraph: any;
        p: any;
        link: any;
        list: any;
        color: any;
        fontFamily: any;
        indent: any;
        code: any;
        uu5string: any;
        uu5stringEntity: any;
        uu5StringBlock: any;
        icon: any;
        error: any;
        whitespace: any;
    };
    const HtmlPlugins: {
        fontSIze: any;
        bold: any;
        index: any;
        italic: any;
        strike: any;
        underline: any;
        removeFormat: any;
        textAlign: any;
        unstyled: any;
        paragraph: any;
        link: any;
        list: any;
        color: any;
        fontFamily: any;
        indent: any;
        code: any;
        blockquote: any;
        image: any;
        htmlFragment: any;
        whitespace: any;
        htmlFragmentBlock: any;
        htmlFragmentEntity: any;
        error: any;
    };
    const htmlPlugins: {
        fontSIze: any;
        bold: any;
        index: any;
        italic: any;
        strike: any;
        underline: any;
        removeFormat: any;
        textAlign: any;
        unstyled: any;
        paragraph: any;
        link: any;
        list: any;
        color: any;
        fontFamily: any;
        indent: any;
        code: any;
        blockquote: any;
        image: any;
        htmlFragment: any;
        whitespace: any;
        htmlFragmentBlock: any;
        htmlFragmentEntity: any;
        error: any;
    };
    const _contentKitPlugins: {
        link: any;
        fileLink: any;
    };
    interface ExpandableEditor$Props {
        width?: string | number;
        height?: string | number;
        minHeight?: string | number;
        maxHeight?: string | number;
        modalHeader?: any;
        buttons?: string[];
        onBlur?(...args: any): any;
        onFocus?(...args: any): any;
        readOnly?: boolean;
        ref_?(...args: any): any;
        getToolbar?(...args: any): any;
    }
    function ExpandableEditor(props: ExpandableEditor$Props): any;
    const EmptyPlugin: any;
    function withEditorContext(Component: any): any;
    interface createEditablePlugin$3 {
    }
    function createEditablePlugin(pluginName: any, tagName: any, buttonDef: any, opts?: createEditablePlugin$3): any;
    const Bricks: {
        Block(props: any): any;
    };
}
declare global {
namespace UU5 {
    namespace RichText {
        const Area: any;
        function Block(props: any): any;
        const Editor: any;
        interface EditorContext$plugins {
        }
        interface EditorContext$Props {
            value?: string;
            buttons?: string[];
            plugins?: any[] | EditorContext$plugins;
            readOnly?: boolean;
            onChange?(...args: any): any;
            onBlur?(...args: any): any;
            onFocus?(...args: any): any;
            handleKeyCommand?: boolean;
            getToolbar?(...args: any): any;
            placeholder?: string;
            forceRenderModal?: boolean;
            bgStyle?: "outline" | "transparent";
            animatedToolbar?: boolean;
            dynamicToolbar?: boolean;
            height?: number | string;
            minHeight?: number | string;
            maxHeight?: number | string;
        }
        function EditorContext(props: EditorContext$Props): any;
        const EditorInput: any;
        const ExpandableEditorInput: any;
        const HtmlEditor: any;
        interface HtmlEditorContext$plugins {
        }
        interface HtmlEditorContext$Props {
            value?: string;
            buttons?: string[];
            plugins?: any[] | HtmlEditorContext$plugins;
            readOnly?: boolean;
            onChange?(...args: any): any;
            handleKeyCommand?: boolean;
            getToolbar?(...args: any): any;
            placeholder?: string;
            bgStyle?: "outline" | "transparent";
            animatedToolbar?: boolean;
            dynamicToolbar?: boolean;
            height?: number | string;
            minHeight?: number | string;
            maxHeight?: number | string;
        }
        function HtmlEditorContext(props: HtmlEditorContext$Props): any;
        const Toolbar: any;
        const Plugins: {
            fontSize: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            p: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            uu5string: any;
            uu5stringEntity: any;
            uu5StringBlock: any;
            icon: any;
            error: any;
            whitespace: any;
        };
        const plugins: {
            fontSize: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            p: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            uu5string: any;
            uu5stringEntity: any;
            uu5StringBlock: any;
            icon: any;
            error: any;
            whitespace: any;
        };
        const HtmlPlugins: {
            fontSIze: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            blockquote: any;
            image: any;
            htmlFragment: any;
            whitespace: any;
            htmlFragmentBlock: any;
            htmlFragmentEntity: any;
            error: any;
        };
        const htmlPlugins: {
            fontSIze: any;
            bold: any;
            index: any;
            italic: any;
            strike: any;
            underline: any;
            removeFormat: any;
            textAlign: any;
            unstyled: any;
            paragraph: any;
            link: any;
            list: any;
            color: any;
            fontFamily: any;
            indent: any;
            code: any;
            blockquote: any;
            image: any;
            htmlFragment: any;
            whitespace: any;
            htmlFragmentBlock: any;
            htmlFragmentEntity: any;
            error: any;
        };
        const _contentKitPlugins: {
            link: any;
            fileLink: any;
        };
        interface ExpandableEditor$Props {
            width?: string | number;
            height?: string | number;
            minHeight?: string | number;
            maxHeight?: string | number;
            modalHeader?: any;
            buttons?: string[];
            onBlur?(...args: any): any;
            onFocus?(...args: any): any;
            readOnly?: boolean;
            ref_?(...args: any): any;
            getToolbar?(...args: any): any;
        }
        function ExpandableEditor(props: ExpandableEditor$Props): any;
        const EmptyPlugin: any;
        function withEditorContext(Component: any): any;
        interface createEditablePlugin$3 {
        }
        function createEditablePlugin(pluginName: any, tagName: any, buttonDef: any, opts?: createEditablePlugin$3): any;
        const Bricks: {
            Block(props: any): any;
        };
    }
}
}