import * as UU5 from "uu5g04";
import Config from "./config.js";

import "./toolbar-button.less";

const ToolbarButton = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "Toolbar.Button",
    classNames: {
      main: Config.CSS + "toolbar-button",
      dropdownItemIcon: Config.CSS + "toolbar-dropdown-item-icon",
      dropdownItemLabel: Config.CSS + "toolbar-dropdown-item-label" + " " + Config.CSS + "toolbar-dropdown-item-icon",
      dropdownButton: Config.CSS + "toolbar-dropdown-button",
      itemWithButton: Config.CSS + "item-with-button"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    onClick: UU5.PropTypes.func,
    type: UU5.PropTypes.string.isRequired,
    value: UU5.PropTypes.string.isRequired,
    pressed: UU5.PropTypes.bool,
    items: UU5.PropTypes.array,
    label: UU5.PropTypes.string,
    icon: UU5.PropTypes.string,
    getArea: UU5.PropTypes.func,
    baseline: UU5.PropTypes.bool,
    buttonProps: UU5.PropTypes.object,
    preserveStyle: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      onClick: null,
      type: "",
      value: "",
      pressed: false,
      items: null,
      label: undefined,
      icon: undefined,
      getArea: null,
      baseline: false,
      buttonProps: undefined,
      preserveStyle: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  componentWillUnmount() {
    /* eslint-disable react/prop-types */
    // prop ref_ is defined in base-mixin
    if (typeof this.props.ref_ === "function") {
      this.props.ref_(null);
    }
    /* eslint-enable */
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  press() {
    if (this._button) {
      this._button.press();
    }
  },

  pressUp() {
    if (this._button) {
      this._button.pressUp();
    }
  },

  isPressed() {
    return this._button ? this._button.isPressed() : this.props.pressed;
  },

  isDropdown() {
    return this._dropdown && this._dropdown.isDropdown();
  },

  isOpen() {
    return this.isDropdown() && this._dropdown.isOpen();
  },

  open() {
    return this._dropdown ? this._dropdown.open() : null;
  },

  close() {
    return this._dropdown ? this._dropdown.close() : null;
  },
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _onClick(e) {
    if (this._blockEditorBlur(this.props.type)) this._blockEvent(e);
    if (typeof this.props.onClick === "function") {
      this.props.onClick({
        component: this,
        type: this.props.type,
        value: this.props.value,
        preserveStyle: this.props.preserveStyle
      });
    }
  },

  _onItemClick(e, item) {
    let opt = {
      component: this,
      type: item.type || this.props.type,
      value: item.value,
      preserveStyle: this.props.preserveStyle
    };
    if (typeof item.onClick === "function") {
      opt.onClick = item.onClick;
    }
    if (typeof this.props.onClick === "function") {
      this.props.onClick(opt);
    }
  },

  _blockEvent(e) {
    e.preventDefault();
    e.stopPropagation();
  },

  _blockUU5Click(button, e) {
    this._blockEvent(e);
  },

  _blockEditorBlur(type) {
    return true;
  },

  _registerButton(button) {
    this._button = button;
  },

  _registerDropdown(dropdown) {
    this._dropdown = dropdown;
  },

  _getItemClickFn(item) {
    return e => this._onItemClick(e, item);
  },
  //@@viewOff:private

  //@@viewOn:render
  _renderDropDownItems(items = this.props.items) {
    let useIcon = items.some(item => item.icon);
    return items.map(item => {
      let props = item.props;
      if (item.props) {
        item = { ...item, ...props };
      }
      return (
        <UU5.Bricks.Dropdown.Item
          key={item.label}
          className={(item.className || "") + (item.button ? this.getClassName("itemWithButton") : "")}
          label={
            item.button ? (
              <item.button
                className={this.getClassName("dropdownButton")}
                label={item.dropdownItemLabel || item.label}
                icon={item.icon}
                onClick={this.props.onClick}
                selected={item.selected}
                disabled={item.disabled}
                dropdownItem={true}
                getArea={this.props.getArea}
                colorSchema={this.props.colorSchema} // eslint-disable-line react/prop-types
                preserveStyle={this.props.preserveStyle}
                {...props}
              />
            ) : (
              <UU5.Common.Fragment>
                {useIcon &&
                  (item.icon ? (
                    <UU5.Bricks.Icon
                      className={this.getClassName("dropdownItemIcon")}
                      icon={item.icon || "mdi-blank"}
                    />
                  ) : item.dropdownItemLabel ? (
                    <span className={this.getClassName("dropdownItemLabel")}>{item.label}</span>
                  ) : (
                    <UU5.Bricks.Icon className={this.getClassName("dropdownItemIcon")} icon="mdi-blank" />
                  ))}
                {item.dropdownItemLabel || item.label}
              </UU5.Common.Fragment>
            )
          }
          linkProps={this._blockEditorBlur(item.type) ? { mainAttrs: { onMouseDown: this._blockEvent } } : undefined}
          selected={item.selected}
          onClick={item.button || item.items ? this._blockUU5Click : this._getItemClickFn(item)}
        >
          {item.items ? this._renderDropDownItems(item.items) : undefined}
        </UU5.Bricks.Dropdown.Item>
      );
    });
  },
  render() {
    let mainProps = this.getMainPropsToPass();

    if (Array.isArray(this.props.items) && this.props.items.length > 0) {
      let iconLabel = this.props.icon && `<uu5string /><UU5.Bricks.Icon icon="${this.props.icon}" />`;
      return (
        <UU5.Bricks.Dropdown
          {...mainProps}
          {...this.props.buttonProps}
          ref_={this._registerDropdown}
          label={iconLabel || this.props.label}
          iconHidden={true}
          buttonProps={{ mainAttrs: { onMouseDown: this._blockEvent, tabIndex: -1 } }}
          baseline={this.props.baseline}
          colorSchema={this.props.colorSchema} // eslint-disable-line react/prop-types
        >
          {this._renderDropDownItems()}
        </UU5.Bricks.Dropdown>
      );
    } else {
      return (
        <UU5.Bricks.Button
          ref_={this._registerButton}
          {...mainProps}
          pressed={this.props.pressed}
          mainAttrs={{ onMouseDown: this._onClick, tabIndex: -1 }}
          onClick={this._blockUU5Click}
          baseline={this.props.baseline}
          colorSchema={this.props.colorSchema} // eslint-disable-line react/prop-types
          {...this.props.buttonProps}
        >
          {this.props.icon ? <UU5.Bricks.Icon icon={this.props.icon} /> : this.props.label}
        </UU5.Bricks.Button>
      );
    }
  }
  //@@viewOff:render
});

export default ToolbarButton;
