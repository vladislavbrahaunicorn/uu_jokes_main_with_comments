//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-forms";
import Config from "./config.js";

import { Suspense, lazy } from "./internal/suspense.js";
import { EditorContext } from "./context.js";

const Editor = lazy(() => import("./editor.js"));
//@@viewOff:imports

const IS_IE = navigator.userAgent.match("Trident");
const BUTTON_CANCEL_PROPS = { colorSchema: "default" };

export const ExpandableEditor = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "ExpandableEditor",
    classNames: {
      main: (props, state) =>
        Config.CSS +
        "expandable-editor " +
        UU5.Common.Css.css(`
          position: relative;

          :hover {
            > .uu5-bricks-button {
              opacity: 1;
            }
          }

          > .uu5-richtext-editor {
              .public-DraftEditorPlaceholder-root,
              .public-DraftEditor-content {
                padding: 4px;

              }

              .public-DraftEditor-content ${IS_IE ? "" : " > div"} {
                overflow: hidden;
              }
            }
          }

          > .uu5-bricks-button {
            position: absolute;
            right: 4px;
            bottom: 4px;
            opacity: 0;

            &:not(:hover) {
              background: #FFFFFF;
            }
          }
        `) +
        (props.width !== "auto"
          ? " " + UU5.Common.Css.css(`width: ${typeof props.width === "string" ? props.width : props.width + "px"}`)
          : ""),
      modal: props =>
        UU5.Common.Css.css("color: rgba(0,0,0,0.87);") +
        " " +
        (props.modalHeader ? "" : UU5.Common.Css.css(".uu5-bricks-modal-body { padding-top: 16px;}")),
      modalForm: () => UU5.Common.Css.css("&& { padding: 0; }")
    },
    getDerivedStateFromError(error) {
      return { error };
    },
    opt: {
      hoc: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    width: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    height: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    minHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    maxHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    modalHeader: UU5.PropTypes.any,
    buttons: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    onBlur: UU5.PropTypes.func,
    onFocus: UU5.PropTypes.func,
    readOnly: UU5.PropTypes.bool,
    ref_: UU5.PropTypes.func,
    getToolbar: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      width: "auto",
      height: undefined,
      minHeight: 0,
      maxHeight: undefined,
      modalHeader: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return { focus: this.props.focus || false, error: null }; // eslint-disable-line react/prop-types
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _onFocusHandler(onFocus, ...params) {
    if (typeof onFocus === "function") {
      onFocus(...params);
    }

    this.setState({ focus: true });
  },

  _onBlurHandler(onBlur, ...params) {
    let domNode = this._editor.findDOMNode(); // eslint-disable-line react/no-find-dom-node
    domNode.scrollLeft = 0;
    domNode.scrollTop = 0;

    if (typeof onBlur === "function") {
      onBlur(...params);
    }

    this.setState({ focus: false });
  },

  _registerEditor(editor) {
    this._editor = editor;
    typeof this.props.ref_ === "function" && this.props.ref_(editor);
  },

  _registerModal(modal) {
    this._modal = modal;
  },

  _registerModalEditor(editor) {
    this._modalEditor = editor;
  },

  _registerForm(form) {
    this._form = form;
  },

  _getForm() {
    return this._form;
  },

  _openModal(e) {
    e.preventDefault();
    this._editor.getArea().setReadOnly(true, () => {
      this._modal.open(undefined, () =>
        // modal has opening animation. Focus will be lost at the end of the animation.
        //Due to this set focus one frame (16ms ~ 1 frame) after end of the animation.
        setTimeout(
          () => this._modalEditor.setValue(this._editor.getValue(), true),
          UU5.Bricks.Modal.defaults.animationDuration + 16
        )
      );
    });
  },

  _closeModal() {
    return this._closeModalWithCallback();
  },

  _closeModalWithCallback(callback) {
    this._modal.close(false);
    this._editor.getArea().setReadOnly(false, () => {
      this._editor.focus();
      typeof callback === "function" && callback();
    });
  },

  _saveValue() {
    const value = this._modalEditor.getValue();
    this._closeModalWithCallback(() => this._editor.setValue(value, { focus: true }));
  },

  _getMockToolbar() {
    return null;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { error } = this.state;
    return error ? (
      <UU5.Common.Error error={error} content="UU5.RichText.SingleLineEditor failed to render." moreInfo />
    ) : (
      <Suspense fallback={<UU5.Bricks.Loading />}>
        <EditorContext.Consumer>
          {context => (
            <UU5.Bricks.Div {...this.getMainPropsToPass()}>
              <Editor
                {...context}
                {...this.props}
                getToolbar={context.getToolbar || this.props.getToolbar || this._getMockToolbar}
                buttons={typeof context.getToolbar === "function" ? this.props.buttons || context.buttons : []}
                // eslint-disable-next-line react/jsx-no-bind
                onBlur={(...params) => this._onBlurHandler(this.props.onBlur || context.onBlur, ...params)}
                // eslint-disable-next-line react/jsx-no-bind
                onFocus={(...params) => this._onFocusHandler(this.props.onFocus || context.onFocus, ...params)}
                ref_={this._registerEditor}
              />
              <UU5.Bricks.Button
                bgStyle="transparent"
                size="s"
                mainAttrs={{ onMouseDown: this._openModal }}
                hidden={this.props.readOnly}
              >
                <UU5.Bricks.Icon icon="mdi-arrow-expand" />
              </UU5.Bricks.Button>
              <UU5.Bricks.PortalModal
                ref_={this._registerModal}
                header={this.props.modalHeader}
                footer={<UU5.Forms.Controls getForm={this._getForm} buttonCancelProps={BUTTON_CANCEL_PROPS} />}
                size="max"
                onClose={this._closeModal}
                className={this.getClassName("modal")}
                mountContent="onEachOpen"
                overflow
                sticky
                stickyBackground
                controlled={false}
              >
                <UU5.Forms.Form
                  ref_={this._registerForm}
                  onCancel={this._closeModal}
                  onSave={this._saveValue}
                  className={this.getClassName("modalForm")}
                  key={this.getId()}
                >
                  <Editor
                    {...context}
                    {...this.props}
                    getToolbar={null}
                    ref_={this._registerModalEditor}
                    dynamicToolbar={false}
                    animatedToolbar={false}
                    height={254}
                    minHeight={undefined}
                    maxHeight={undefined}
                    onBlur={undefined}
                    onFocus={undefined}
                  />
                </UU5.Forms.Form>
              </UU5.Bricks.PortalModal>
            </UU5.Bricks.Div>
          )}
        </EditorContext.Consumer>
      </Suspense>
    );
  }
  //@@viewOff:render
});

export default ExpandableEditor;
