//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-forms";

import Config from "../config.js";
//@@viewOff:imports

const ICON_FONT_SIZES = {
  s: "14px",
  m: "16px",
  l: "18px",
  xl: "20px"
};

const BUTTON_SIZES = {
  s: "20px",
  m: "24px",
  l: "26px",
  xl: "28px"
};

export const createInputComponent = ({ Component, lsi, tagName, mainClassName }) =>
  UU5.Forms.Context.withContext(
    UU5.Common.VisualComponent.create({
      //@@viewOn:mixins
      mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Forms.TextInputMixin],
      //@@viewOff:mixins

      //@@viewOn:statics
      statics: {
        tagName: tagName,
        classNames: {
          main: props =>
            `${mainClassName} ${UU5.Common.Css.css`
            && > .uu5-bricks-button {
              min-height: ${BUTTON_SIZES[props.size]};
              width: ${BUTTON_SIZES[props.size]};
              height: ${BUTTON_SIZES[props.size]};
              padding: 0;

              > .uu5-bricks-icon {
                position: static;
                width: auto;
                padding: 0;
                font-size: ${ICON_FONT_SIZES[props.size]};
              }
            }
        `}`,
          elevationMock: Config.CSS + "elevation-mock"
        },
        lsi: lsi
      },
      //@@viewOff:statics

      //@@viewOn:propTypes
      propTypes: {
        getToolbar: UU5.PropTypes.func,
        forceRenderModal: UU5.PropTypes.bool,
        plugins: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.array]),
        buttons: UU5.PropTypes.any
      },
      //@@viewOff:propTypes

      //@@viewOn:getDefaultProps
      getDefaultProps() {
        return {
          getToolbar: undefined,
          forceRenderModal: undefined,
          plugins: undefined,
          buttons: undefined
        };
      },
      //@@viewOff:getDefaultProps

      //@@viewOn:reactLifeCycle
      getInitialState() {
        this._resetValue = this.props.value;

        return {};
      },

      componentWillMount() {
        // props onValidate, feedback and message
        if (this.props.onValidate && typeof this.props.onValidate === "function") {
          this._validateOnChange({ value: this.state.value, event: null, component: this });
        } else {
          this.setFeedback(this.props.feedback || "initial", this.props.message, this.state.value);
        }

        return this;
      },

      componentWillReceiveProps(nextProps) {
        // props controlled, required, value, requiredMessage, feedback, message
        if (this.props.controlled) {
          if (nextProps.required && (nextProps.value === "" || nextProps.value === null)) {
            this.setError(nextProps.requiredMessage);
          } else {
            this.setFeedback(nextProps.feedback, nextProps.message, nextProps.value);
          }
        }
        return this;
      },
      //@@viewOff:reactLifeCycle

      //@@viewOn:interface
      setCursorPosition(cursorPosition) {
        return this._editor ? this._editor.setCursorPosition(cursorPosition) : null;
      },
      //@@viewOff:interface

      //@@viewOn:overriding
      setValue_(value, setStateCallback) {
        // props onValidate
        if (this._checkRequired({ value: value })) {
          if (typeof this.props.onValidate === "function") {
            this._validateOnChange({ value: value, event: null, component: this });
          } else {
            this.props.required ? this.setSuccess(null, value) : this.setInitial(null, value);
          }
        }

        this._editor.setValue(value, undefined, setStateCallback);

        return this;
      },

      getValue_(editorState) {
        return this._editor.getValue(editorState);
      },

      reset_() {
        this.setValue(this._resetValue);
      },
      //@@viewOff:overriding

      //@@viewOn:private
      _validateOnChange(opt) {
        // props onValidate
        let result = typeof this.props.onValidate === "function" ? this.props.onValidate(opt) : null;
        if (result) {
          if (typeof result === "object") {
            if (result.feedback) {
              this.setFeedback(result.feedback, result.message, result.value);
            } else {
              this.setState({ value: opt.value });
            }
          } else {
            this.showError("validateError", null, {
              context: { event: null, func: this.props.onValidate, result: result }
            });
          }
        }
        return this;
      },

      _onChange(e, editorState) {
        let opt = { value: this.getValue_(editorState), event: e, component: this };

        // props onChange, validateOnChange
        if (!this.isDisabled() && !this.isReadOnly()) {
          if (typeof this.props.onChange === "function") {
            this.props.onChange(opt);
          } else if (this.props.validateOnChange) {
            this._validateOnChange(opt);
          } else {
            let result = this.getChangeFeedback(opt);
            this.setState({
              feedback: result.feedback,
              message: result.message,
              value: result.value
            });
          }
        }
      },

      _onBlur(e) {
        // props onBlur, validateOnChange, required
        let opt = { value: this.getValue(), event: e, component: this };

        if (typeof this.props.onBlur === "function") {
          this.props.onBlur(opt);
        } else {
          if (this._checkRequired({ value: opt.value }) && !this.props.validateOnChange) {
            opt.required = this.props.required;
            let blurResult = this.getBlurFeedback(opt);
            this._setFeedback(blurResult.feedback, blurResult.message, blurResult.value);
          }
        }
      },

      _onFocus(e) {
        // props onFocus
        let opt = { value: this.getValue(), event: e, component: this };
        if (typeof this.props.onFocus === "function") {
          this.props.onFocus(opt);
        } else {
          let result = this.getFocusFeedback(opt);
          result && this._setFeedback(result.feedback, result.message, result.value);
        }
      },

      _validateUu5String(data) {
        let result;
        if (data.value && !UU5.Common.UU5String.isValid(data.value)) {
          result = {
            feedback: "error",
            message: this.getLsiComponent("invalidUu5String"),
            value: data.value
          };
        } else {
          result = {
            feedback: "success",
            message: null,
            value: data.value
          };
        }
        return result;
      },

      _registerEditor(editor) {
        this._editor = editor;
        this._textInput = editor.getArea();
      },

      _getBgStyle() {
        if (this.props.bgStyle === "outline" || this.props.bgStyle === "transparent") {
          return this.props.bgStyle;
        }

        return undefined;
      },
      //@@viewOff:private

      //@@viewOn:render
      render() {
        let inputId = this.getId() + "-uu5richtext-editor";
        let inputAttrs = this._getInputAttrs();
        const mainProps = this.getMainPropsToPass();
        if (this.props.elevation) {
          mainProps.className +=
            " " +
            (this.props.elevation === -1
              ? this.getClassName("elevationMock")
              : UU5.Common.ClassNames.elevation + this.props.elevation);
        }

        return (
          <div {...inputAttrs}>
            {this.getLabel(inputId)}
            {this.getInputWrapper([
              <Component
                {...this.props}
                {...mainProps}
                hidden={this.isHidden()}
                key="uu5richtext-expandable-editor"
                id={inputId}
                ref_={this._registerEditor}
                value={this.state.value}
                mainAttrs={this.props.inputAttrs}
                onChange={this._onChange}
                onBlur={this._onBlur}
                onFocus={this._onFocus}
                readOnly={this.isReadOnly() || this.isDisabled()}
                controlled={true}
                plugins={this.props.plugins}
                buttons={this.props.buttons}
                placeholder={this.props.placeholder || undefined}
                getToolbar={this.props.getToolbar}
                bgStyle={this._getBgStyle()}
              />
            ])}
          </div>
        );
      }
      //@@viewOff:render
    })
  );

export default createInputComponent;
