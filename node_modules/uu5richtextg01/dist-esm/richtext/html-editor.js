//@@viewOn:imports
import UU5 from "uu5g04";
import Config from "./config.js";
import Plugin from "./bricks/plugin.js";
import pluginMap from "./plugins/html/plugins.js";
import Editor from "./editor.js";
import { HtmlEditorContext as Context } from "./context.js";
import { HTML_EDITOR_BUTTONS } from "./bricks/defaults.js"; //@@viewOff:imports

const withContext = Component => {
  // disable context for jest tests - enzyme doesn't support React 16.3 Context API
  if (!UU5.Common.Context.create || process.env.NODE_ENV === "test") return Component;
  let forwardRef = UU5.Common.Reference.forward((props, ref) => {
    const definedProps = {};

    for (let propName in props) {
      if (props[propName] !== undefined) {
        definedProps[propName] = props[propName];
      }
    }

    return <Context.Consumer>{context => <Component ref={ref} {...context} {...definedProps} />}</Context.Consumer>;
  });
  forwardRef.isUu5PureComponent = true;
  forwardRef.displayName = `forwardRef(${Component.displayName || Component.name || "Component"})`;
  forwardRef.tagName = Component.tagName;
  return forwardRef;
};

export const HtmlEditor = withContext(UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "HtmlEditor",
    classNames: {
      main: Config.CSS + "html-editor"
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    value: UU5.PropTypes.string,
    plugins: UU5.PropTypes.oneOfType([UU5.PropTypes.arrayOf(UU5.PropTypes.object), UU5.PropTypes.object]),
    buttons: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    readOnly: UU5.PropTypes.bool,
    onChange: UU5.PropTypes.func,
    pluginExtensions: UU5.PropTypes.object,
    handleKeyCommand: UU5.PropTypes.bool,
    placeholder: UU5.PropTypes.string,
    getToolbar: UU5.PropTypes.func,
    forceRenderModal: UU5.PropTypes.bool,
    bgStyle: UU5.PropTypes.oneOf(["outline", "transparent"]),
    animatedToolbar: UU5.PropTypes.bool,
    dynamicToolbar: UU5.PropTypes.bool,
    height: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    minHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    maxHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string])
  },

  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: "",
      onChange: null,
      buttons: undefined,
      plugins: null,
      readOnly: false,
      pluginExtensions: {},
      handleKeyCommand: true,
      placeholder: "",
      getToolbar: null,
      forceRenderModal: false,
      bgStyle: undefined,
      animatedToolbar: undefined,
      dynamicToolbar: undefined,
      height: undefined,
      minHeight: undefined,
      maxHeight: undefined
    };
  },

  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      plugins: Plugin.mergePlugins(this.props, pluginMap)
    };
  },

  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  setValue(html, focus = false) {
    this._editor && this._editor.setValue(this._formatValueForUU5Editor(html), {
      focus: focus,
      propsFormatter: this._formatPropsToObject
    });
    return this;
  },

  getValue(editorState) {
    return this._editor ? this._editor.getValue(editorState, this._formatPropsToString).replace(/^<uu5string\s*\/>/, "") : "";
  },

  getArea() {
    return this._editor ? this._editor.getArea() : null;
  },

  setCursorPosition(cursorPosition) {
    return this._editor ? this._editor.setCursorPosition(cursorPosition) : null;
  },

  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _registerEditor(editor) {
    this._editor = editor;

    if (this.props.value) {
      this.setValue(this.props.value);
    }
  },

  _onChange(editor, editorState) {
    if (typeof this.props.onChange === "function") {
      this.props.onChange(this, editorState);
    }
  },

  _formatPropsToString(props) {
    if (props.style) {
      let style = "";

      for (let name in props.style) {
        style += `${name.replace(/[A-Z]/g, $1 => {
          return "-" + $1.toLowerCase();
        })}: ${props.style[name]};`;
      }

      props.style = style;
    }

    return props;
  },

  _formatPropsToObject(props) {
    for (let propName in props) {
      if (propName === "style") {
        let style = {};
        let cssRules = props.style.split(";");
        cssRules.forEach(rule => {
          if (!rule) return;
          let parts = rule.split(":");
          if (parts.length !== 2) return;
          let name = parts[0].replace(/-([a-z])/g, (_, $1) => {
            return $1.toUpperCase();
          }).trim();
          let value = parts[1].trim();
          style[name] = value;
        });
        props.style = style;
        break;
      }
    }

    return props;
  },

  _formatValueForUU5Editor(value = this.props.value) {
    return value ? "<uu5string />" + value : null;
  },

  //@@viewOff:private
  //@@viewOn:render
  render() {
    return <Editor ref_={this._registerEditor} {...this.getMainPropsToPass()} plugins={this.state.plugins} buttons={this.props.buttons === undefined ? HTML_EDITOR_BUTTONS : this.props.buttons} onChange={this._onChange} pluginExtensions={this.props.pluginExtensions} handleKeyCommand={this.props.handleKeyCommand} readOnly={this.props.readOnly} getToolbar={this.props.getToolbar} placeholder={this.props.placeholder} forceRenderModal={this.props.forceRenderModal} value="" onFocus={null} onBlur={null} bgStyle={this.props.bgStyle} animatedToolbar={this.props.animatedToolbar} dynamicToolbar={this.props.dynamicToolbar} height={this.props.height} minHeight={this.props.minHeight} maxHeight={this.props.maxHeight} />;
  } //@@viewOff:render


}));
export default HtmlEditor;