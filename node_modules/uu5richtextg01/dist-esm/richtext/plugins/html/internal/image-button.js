//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";

import "./image-button.less";
//@@viewOff:imports

const ColorButton = UU5.Common.VisualComponent.create({
  displayName: "UU5.RichText.ImageButton",
  tagName: "UU5.RichText.ImageButton",

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    classNames: {
      main: "uu5-richtext-image-button"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    getArea: UU5.PropTypes.func.isRequired,
    icon: UU5.PropTypes.string,
    ruleName: UU5.PropTypes.string,
    onUpload: UU5.PropTypes.func,
    baseline: UU5.PropTypes.bool,
    dropdownItem: UU5.PropTypes.bool,
    label: UU5.PropTypes.string,
    dropdownItemLabel: UU5.PropTypes.string,
    colorSchema: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      getArea: undefined,
      icon: "mdi-image",
      ruleName: "image",
      onUpload: null,
      baseline: undefined,
      dropdownItem: false,
      label: undefined,
      dropdownItemLabel: undefined,
      colorSchema: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return { open: false };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _onMouseDown(e) {
    e.preventDefault();
    const area = this.props.getArea();
    if (this._picker && area) {
      if (this._picker.isOpen()) {
        area.setReadOnly(false, this._closePicker);
      } else {
        area.setReadOnly(true, () => {
          this._picker.open({
            onClose: this._onPickerClose,
            aroundElement: this,
            position: "bottom",
            offset: 4,
            content: this._renderForm()
          });
          this.setState({ open: true });
        });
      }
    }
  },

  _onSave(opt) {
    // load file by FileReader
    // https://stackoverflow.com/questions/20999205/get-file-input-value-as-binary-data
    let { src } = opt.component.getValues();

    if (!src || this.state.loading) return;

    if (typeof this.props.onUpload === "function") {
      this.setState({ loading: true });
      this.props
        .onUpload("image", { src })
        .then(
          result => {
            this._submitValueToArea(result.src);
          },
          error => {
            // TODO - what to do when image cannot be uploaded
            console.log(error); // eslint-disable-line no-console
          }
        )
        .finally(() => {
          this.setState({ loading: false });
        });
    } else {
      // src is File object -> get binary from file
      let reader = new FileReader();
      reader.onloadend = () => {
        this._submitValueToArea(`data:${src.type || "image/jpeg"};base64,${btoa(reader.result)}`);
      };

      // return opt.component.onChangeDefault(opt);
      reader.readAsBinaryString(src);
    }
  },

  _submitValueToArea(src) {
    let area = this.props.getArea();
    if (area) {
      area.setReadOnly(false, () => {
        let newEditorState = area.selectCurrentEntity(area.getEditorState(), this.props.ruleName);
        area.createEntity(
          newEditorState,
          undefined,
          this.props.ruleName,
          undefined,
          {
            props: { src }
          },
          {
            isMutable: false
          }
        );
      });
    }

    this._closePicker();
  },

  _onCancel() {
    this._closePicker();
  },

  _closePicker() {
    this._picker.close(this._onPickerClose);
  },

  _onPickerClose() {
    this.setState({ open: false });
  },

  _blockUU5Event(item, e) {
    this._blockEvent(e);
  },

  _blockEvent(e) {
    e.preventDefault();
    e.stopPropagation();
  },

  _stopEvent(e) {
    e.stopPropagation();
  },

  _registerPicker(picker) {
    this._picker = picker;
  },

  _renderForm() {
    // TODO finish form
    return (
      <UU5.Forms.Form onSave={this._onSave} onCancel={this._onCancel} id={Date.now().toString()}>
        <UU5.Forms.File name="src" controlled={false} />
        <UU5.Forms.Controls />
      </UU5.Forms.Form>
    );
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <UU5.Bricks.Span {...this.getMainPropsToPass()}>
        <UU5.Bricks.Button
          pressed={this.state.open}
          mainAttrs={{ onMouseDown: this._onMouseDown, tabIndex: -1 }}
          onClick={this._blockUU5Event}
          className={this.props.dropdownItem ? "uu5-richtext-toolbar-dropdown-button" : null}
          baseline={this.props.baseline}
          colorSchema={this.props.colorSchema}
        >
          <UU5.Bricks.Icon icon={this.props.icon} />
          {this.props.dropdownItem ? this.props.dropdownItemLabel || this.props.label : null}
        </UU5.Bricks.Button>
        <UU5.Bricks.Popover
          ref_={this._registerPicker}
          controlled={false}
          mainAttrs={{ onMouseDown: this._stopEvent, onClick: this._stopEvent }}
        />
      </UU5.Bricks.Span>
    );
  }
  //@@viewOff:render
});

export default ColorButton;
