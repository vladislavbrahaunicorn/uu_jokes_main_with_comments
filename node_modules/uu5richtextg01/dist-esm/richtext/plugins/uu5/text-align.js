import UU5 from "uu5g04";

import Immutable from "immutable";

const PLUGIN_NAME = "textAlign";

const NAMES = {
  left: "textAlignLeft",
  center: "textAlignCenter",
  right: "textAlignRight",
  all: "textAlign"
};

const ICONS = {
  left: "mdi-format-align-left",
  center: "mdi-format-align-center",
  right: "mdi-format-align-right",
  default: "mdi-format-align-left"
};

const getAlignIcon = editorState => {
  if (!editorState) return;
  let selection = editorState.getSelection();
  let currentContent = editorState.getCurrentContent();
  let block = currentContent.getBlockForKey(selection.getStartKey());
  let data = block.getData().toJSON();
  let align = data.props && data.props.style && data.props.style.textAlign;
  return { icon: ICONS[align] || ICONS.default };
};

const isSelected = (editorState, direction) => {
  let selection = editorState.getSelection();
  let currentContent = editorState.getCurrentContent();
  let block = currentContent.getBlockForKey(selection.getStartKey());
  let data = block.getData().toJSON();
  return data.props && data.props.style && data.props.style.textAlign === direction;
};

const getAlignButtonDef = align => {
  return {
    name: NAMES[align],
    icon: ICONS[align],
    label: () => UU5.Environment.Lsi.RichText.plugins.textAlign.label[align],
    onClick: (editorState, area) => {
      return area.toggleSelectedBlocksStyles(editorState, [{ name: "textAlign", value: align }]);
    },
    isSelected: editorState => {
      return isSelected(editorState, align);
    }
  };
};

const buttons = [getAlignButtonDef("left"), getAlignButtonDef("center"), getAlignButtonDef("right"), undefined];

buttons[3] = {
  name: NAMES.all,
  icon: "mdi-format-align-left",
  items: [buttons[0], buttons[1], buttons[2]],
  label: () => UU5.Environment.Lsi.RichText.plugins.textAlign.label.all,
  getProps: getAlignIcon
};

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    buttonDefs: buttons,
    opts: {
      htmlMappings: { tagName: true, style: { textAlign: true }, result: { style: { textAlign: true } } }
    }
  })
);

export default pluginDef;
