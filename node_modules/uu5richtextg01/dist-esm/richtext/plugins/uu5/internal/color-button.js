//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import "./color-button.less";
//@@viewOff:imports

const baseClassName = "uu5-richtext-plugin-color-button";

const isWhiteColor = color => {
  return color === "#FFFFFF" || color === "white" || color === "rgb(255, 255, 255)";
};

const getStyleForColor = color => {
  return { background: color, border: isWhiteColor(color) ? "1px solid #000000" : "none" };
};

const ColorButton = UU5.Common.VisualComponent.create({
  displayName: "UU5.RichText.ColorButton",
  tagName: "UU5.RichText.ColorButton",

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    classNames: {
      main: baseClassName + " uu5-richtext-toolbar-button",
      popover: baseClassName + "-popover",
      dropdownItem: baseClassName + "-dropdown-item",
      colorPicker: UU5.Common.Css.css(`
        position: absolute;
        top: 0;
        left: 0;
        display: inline-block;
        white-space: normal;
        vertical-align: bottom;
        width: 0;
        height: 0;

        &&& {
          margin: 0;
        }
        
        && > .uu5-forms-input-wrapper > .uu5-bricks-button {
          width: 32px;
        }

        > .uu5-forms-input-wrapper > .uu5-bricks-button {
          height: 32px;
          visibility: hidden;
          pointer-events: none;
        }
      `)
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    onClick: UU5.PropTypes.func.isRequired,
    getArea: UU5.PropTypes.func.isRequired,
    icon: UU5.PropTypes.string,
    defaultColor: UU5.PropTypes.string,
    styleName: UU5.PropTypes.string,
    rulePrefix: UU5.PropTypes.string,
    colors: UU5.PropTypes.arrayOf(UU5.PropTypes.arrayOf(UU5.PropTypes.string)).isRequired,
    selectedColor: UU5.PropTypes.string,
    baseline: UU5.PropTypes.bool,
    dropdownItem: UU5.PropTypes.bool,
    preserveStyle: UU5.PropTypes.bool,
    label: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      onClick: undefined,
      getArea: undefined,
      defaultColor: "#000000",
      icon: "mdi-format-color-text",
      rulePrefix: "color",
      styleName: "color",
      selectedColor: undefined,
      baseline: false,
      dropdownItem: false,
      preserveStyle: false,
      label: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return { open: false };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _registerPicker(picker) {
    this._colorPicker = picker;
  },

  _onMouseDown(e) {
    e.preventDefault();
    let area = typeof this.props.getArea === "function" ? this.props.getArea() : null;
    if (area) {
      area.setReadOnly(!this.state.open);
    }
  },

  _togglePicker() {
    this.setState(state => {
      state.open ? this._colorPicker.close() : this._colorPicker.open();
      return { open: !state.open };
    });
  },

  _handleChangeColor(opt) {
    let color = opt.value;
    this.setState({ color, open: false });
    let value = this._getRule(color);
    let area = typeof this.props.getArea === "function" && this.props.getArea();
    if (!area) return;

    area.setReadOnly(false, () => {
      this.props.onClick({
        type: "inline",
        value,
        preserveStyle: this.props.preserveStyle,
        focus: true
      });
    });
  },

  _getSelectedColor() {
    return this.props.selectedColor || this.props.defaultColor;
  },

  _getRule(color) {
    let colorCode = color ? `${this.props.styleName}:${color}` : "";
    return `${this.props.rulePrefix}.${colorCode}`;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let mainProps = this.getMainPropsToPass();
    if (this.props.dropdownItem) {
      mainProps.className += ` ${this.getClassName("dropdownItem")}`;
    }

    // disable linting of undefined property className ( defined on base mixin )
    /* eslint-disable react/prop-types */
    let buttonClassName = this.props.className
      ? this.props.className + " uu5-richtext-toolbar-button"
      : "uu5-richtext-toolbar-button";
    /* eslint-enable */

    return (
      <UU5.Bricks.Span {...mainProps}>
        <UU5.Bricks.Button
          {...this.props}
          className={buttonClassName}
          pressed={this.state.open}
          baseline={this.props.baseline}
          mainAttrs={{ onMouseDown: this._onMouseDown, tabIndex: -1 }}
          onClick={this._togglePicker}
        >
          <UU5.Bricks.Icon icon={this.props.icon} />
          <UU5.Bricks.Span
            className="uu5-richtext-plugin-color-preview"
            style={getStyleForColor(this._getSelectedColor())}
          />
          {this.props.dropdownItem && this.props.label}
        </UU5.Bricks.Button>
        <UU5.Forms.ColorPicker
          className={this.getClassName("colorPicker")}
          onChange={this._handleChangeColor}
          value={this.state.color}
          ref_={this._registerPicker}
        />
      </UU5.Bricks.Span>
    );
  }
  //@@viewOff:render
});

export default ColorButton;
