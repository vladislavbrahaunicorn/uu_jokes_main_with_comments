//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";
//@@viewOff:imports

const DEFAULT_VALUES = {
  href: "",
  target: "_self",
  download: false,
  smoothScroll: 1000,
  offset: 0
};

const LinkForm = UU5.Common.VisualComponent.create({
  displayName: "UU5.RichText.LinkForm",
  tagName: "UU5.RichText.LinkForm",

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    classNames: {
      main: "uu5-richtext-plugin-link-form"
    },
    lsi: () => UU5.Environment.Lsi.RichText.plugins.linkForm
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    text: UU5.PropTypes.string,
    data: UU5.PropTypes.object,
    onCancel: UU5.PropTypes.func,
    onSave: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      text: "",
      data: {},
      onCancel: null,
      onSave: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _onSave(form) {
    if (!form.values.href) {
      if (typeof this.props.onSave === "function") {
        this.props.onSave(null, form.values.text);
      }
      return;
    }
    let data = UU5.Common.Tools.merge({}, this.props.data);
    data.props = UU5.Common.Tools.merge(data.props, form.values);
    // input with name text is handled separately as a children
    let text = data.props.text;
    delete data.props.text;
    // filter props with default values
    for (let propName in data.props) {
      if (data.props[propName] === DEFAULT_VALUES[propName]) {
        delete data.props[propName];
      }
    }
    // save form
    if (typeof this.props.onSave === "function") {
      this.props.onSave("link", text, data);
    }
  },

  _onCancel() {
    if (typeof this.props.onCancel === "function") {
      this.props.onCancel();
    }
  },

  _setMessage(opt) {
    opt.component.onChangeDefault(opt, () => {
      opt.component.setMessage(this.getLsiComponent("hrefAttributeMessage"))
    });
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let props = this.props.data.props || {};
    let href = props.href || DEFAULT_VALUES.href;
    let target = props.target || DEFAULT_VALUES.target;
    let download = props.download || DEFAULT_VALUES.download;
    let smoothScroll = props.smoothScroll || DEFAULT_VALUES.smoothScroll;
    let offset = props.offset || DEFAULT_VALUES.offset;
    return (
      <UU5.Forms.Form onSave={this._onSave} onCancel={this._onCancel} spacing={16}>
        <UU5.Forms.Text name="text" label="Text" value={this.props.text} />
        <UU5.Forms.Text
          name="href"
          label="Href"
          value={href}
          feedback="initial"
          message={this.getLsiValue("hrefAttributeMessage")}
          onChange={this._setMessage}
        />
        <UU5.Forms.Radios
          name="target"
          label="Target"
          inline
          value={[
            { label: "Blank", name: "_blank", value: target === "_blank" },
            { label: "Parent", name: "_parent", value: target === "_parent" },
            { label: "Top", name: "_top", value: target === "_top" },
            { label: "Self", name: "_self", value: target === "_self" }
          ]}
        />
        <UU5.Forms.Checkbox label="Download" name="download" value={download} />
        <UU5.Bricks.Panel
          bgStyleHeader="underline"
          iconAlign="after"
          iconCollapsed="mdi-menu-down"
          iconExpanded="mdi-menu-up"
          header={<UU5.Bricks.Lsi lsi={this.getLsi("additionalProps")} />}
          className={this.getClassName("additionalPropsPanel")}
        >
          <UU5.Forms.Number label="Smooth Scroll" name="smoothScroll" value={smoothScroll} />
          <UU5.Forms.Number label="Offset" name="offset" value={offset} />
        </UU5.Bricks.Panel>
        <UU5.Forms.Controls />
      </UU5.Forms.Form>
    );
  }
  //@@viewOff:render
});

export default LinkForm;
