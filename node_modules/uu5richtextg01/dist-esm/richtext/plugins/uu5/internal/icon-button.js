//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";

import "./icon-button.less";
//@@viewOff:imports

const stopEvent = e => e.stopPropagation();

const IconButton = UU5.Common.VisualComponent.create({
  displayName: "UU5.RichText.IconButton",
  tagName: "UU5.RichText.IconButton",

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    classNames: {
      main: "uu5-richtext-plugin-icon-picker uu5-bricks-button"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    getArea: UU5.PropTypes.func.isRequired,
    icon: UU5.PropTypes.string,
    ruleName: UU5.PropTypes.string,
    onUpload: UU5.PropTypes.func,
    baseline: UU5.PropTypes.bool,
    dropdownItem: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      getArea: undefined,
      baseline: undefined,
      dropdownItem: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _iconUpdate(opt) {
    let area = this.props.getArea();
    if (area) {
      area.setReadOnly(false, () => {
        let newEditorState = area.selectCurrentEntity(area.getEditorState(), "icon");
        area.createEntity(newEditorState, undefined, "icon", undefined, { props: { icon: opt.value } }, false);
        this._onPickerClose();
      });
    }
    return opt.component.onChangeDefault(opt);
  },

  _onMouseDown(e) {
    e.preventDefault();
    let area = this.props.getArea();
    if (area && this._picker) {
      if (this._picker.isOpen()) {
        this._picker.close(this._onPickerClose);
      } else {
        area.setReadOnly(true, () => this._picker.open());
        this._onPickerOpen();
      }
    }
  },

  _registerPicker(picker) {
    this._picker = picker;
  },

  // workaround to prevent block richtext from editting ... remove after implement onClose on IconPicker
  _onPickerOpen() {
    UU5.Environment.EventListener.addWindowEvent("click", this.getId(), () => {
      setTimeout(() => {
        if (!this._picker || !this._picker.isOpen()) {
          this._onPickerClose();
        }
      }, 10);
    });
  },

  _onPickerClose() {
    const area = this.props.getArea();
    if (area) {
      area.setReadOnly(false, area.focus);
    }
    UU5.Environment.EventListener.removeWindowEvent("click", this.getId());
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    const mainProps = this.getMainPropsToPass();
    if (this.props.baseline) {
      mainProps.className += " uu5-bricks-button-baseline";
    }
    mainProps.mainAttrs = mainProps.mainAttrs || {};
    mainProps.mainAttrs.onClick = stopEvent;
    mainProps.mainAttrs.onMouseDown = stopEvent;

    return (
      <UU5.Bricks.Div {...mainProps}>
        <UU5.Forms.Iconpicker
          {...this.props}
          ref_={this._registerPicker}
          openToContent={false}
          label={undefined}
          value={this.props.icon}
          className="uu5-richtext-toolbar-iconpicker"
          onChange={this._iconUpdate}
          colorSchema={this.props.colorSchema} // eslint-disable-line react/prop-types
          mainAttrs={{
            "data-richtext-iconpicker-label": this.props.dropdownItem && this.props.label // eslint-disable-line react/prop-types
          }}
          inputAttrs={{
            tabIndex: -1
          }}
        />
        <div onMouseDown={this._onMouseDown} />
      </UU5.Bricks.Div>
    );
  }
  //@@viewOff:render
});

export default IconButton;
