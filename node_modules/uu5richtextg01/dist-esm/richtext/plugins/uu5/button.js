import * as UU5 from "uu5g04";

import Immutable from "immutable";

const PLUGIN_NAME = "button";
const ENTITY_NAME = PLUGIN_NAME;

const getButtonEditationForm = (entityName, text, data, onSave, onCancel, isEdit) => {
  // plugin register only entity LINK so its not needed to check entity
  return {
    header: isEdit ? "Editace komponenty UU5.Bricks.Button" : "Vlo≈æte UU5.Bricks.Button",
    content: UU5.Common.UU5String.toChildren(
      `<uu5string />
      <UU5.Forms.Form onSave="\${onSave}" onCancel="\${onCancel}" >
        <UU5.Forms.Text name="text" label="Text" ${text ? 'value="${text}"' : ""} />
        <UU5.CodeKit.JsonEditor name="props" label="props" value="\${props}" />
        <UU5.Forms.Controls />
      </UU5.Forms.Form>`,
      {
        onSave: () => form => {
          data.props = JSON.parse(form.values.props);
          onSave(ENTITY_NAME, form.values.text, data);
        },
        onCancel: () => onCancel,
        props: data.props || {},
        text
      }
    )
  };
};

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    map: PLUGIN_NAME,
    type: "entity",
    buttonDefs: {
      name: "button",
      icon: "mdi-crop-landscape",
      label: () => UU5.Environment.Lsi.RichText.plugins.button.label
    },
    toEditorItemDefs: {
      tagName: "UU5.Bricks.Button",
      htmlAliases: [{ tagName: "button" }],
      getEditationForm: getButtonEditationForm,
      component: properties => {
        const dataProps = properties.contentState.getEntity(properties.entityKey).getData().props || {};
        return <UU5.Bricks.Button {...dataProps}>{properties.children}</UU5.Bricks.Button>;
      }
    }
  })
);

export default pluginDef;
