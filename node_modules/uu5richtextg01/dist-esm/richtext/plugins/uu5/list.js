import UU5 from "uu5g04";

import EditorBlockLazy from "../../editor-block-lazy.js";

import Immutable from "immutable";
import ListWrapper from "./internal/list-wrapper.js";
import Environment from "../../environment.js";

// const listWrapper = <ListWrapper />;

Environment.wrapperMap = Environment.wrapperMap || {};
Environment.wrapperMap.uu5listWrapper = <ListWrapper />;

const PLUGIN_NAME = "list";

const OL_NAME = "ordered-list-item";
const UL_NAME = "unordered-list-item";
const OL_TAG_NAME = "UU5.Bricks.Ol";
const UL_TAG_NAME = "UU5.Bricks.Ul";

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    type: "block",
    buttonDefs: [
      {
        name: "ol",
        icon: "mdi-format-list-numbers",
        label: () => UU5.Environment.Lsi.RichText.plugins.list.orderedListLabel,
        type: "block",
        value: OL_NAME
      },
      {
        name: "ul",
        icon: "mdi-format-list-bulleted-type",
        label: () => UU5.Environment.Lsi.RichText.plugins.list.unorderedListLabel,
        type: "block",
        value: UL_NAME
      }
    ],
    toEditorItemDefs: [
      {
        name: UL_TAG_NAME,
        tagName: UL_TAG_NAME,
        type: "wrapper",
        htmlAliases: [{ tagName: "ul" }]
      },
      {
        name: OL_TAG_NAME,
        tagName: OL_TAG_NAME,
        type: "wrapper",
        htmlAliases: [{ tagName: "ol" }]
      },
      {
        name: OL_NAME,
        tagName: "UU5.Bricks.Li",
        component: props => {
          return <EditorBlockLazy {...props} />;
        },
        wrapperName: "uu5listWrapper",
        wrapperTagName: OL_TAG_NAME,
        htmlAliases: [{ tagName: "li" }]
      },
      {
        name: UL_NAME,
        tagName: "UU5.Bricks.Li",
        component: props => {
          return <EditorBlockLazy {...props} />;
        },
        wrapperName: "uu5listWrapper",
        wrapperTagName: UL_TAG_NAME
      }
    ],
    commands: {
      keyCode: 13,
      fn: (editorState, area) => {
        // remove last list item if is empty and user press enter key
        let selection = editorState.getSelection();
        if (!selection.isCollapsed()) return true;
        let content = editorState.getCurrentContent();
        let block = content.getBlockForKey(selection.getStartKey());
        if ((block.getType() === OL_NAME || block.getType() === UL_NAME) && !block.getText()) {
          let nextBlock = content.getBlockAfter(block.getKey());
          if (!nextBlock || nextBlock.getType() !== block.getType()) {
            // toggle block type only if it is last list item
            let depth = block.getDepth();
            if (depth) {
              area.setEditorState(
                area.modifyEditorState(
                  editorState,
                  { currentContent: content.setIn(["blockMap", block.getKey(), "depth"], depth - 1) },
                  "list depth"
                )
              );
            } else {
              area.setEditorState(area.toggleBlock(editorState, block.getType()));
            }
            return true;
          }
        }
        return false;
      }
    }
  })
);

export default pluginDef;
