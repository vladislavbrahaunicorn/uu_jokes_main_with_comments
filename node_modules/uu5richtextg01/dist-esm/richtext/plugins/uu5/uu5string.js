import * as UU5 from "uu5g04";
import Immutable from "immutable";

import EditorBlockLazy from "../../editor-block-lazy.js";
import { removeSpecialNodes } from "../../bricks/uu5string.js";

import "./uu5string.less";

const PLUGIN_NAME = "uu5string";
const ENTITY_NAME = PLUGIN_NAME;

const toEditorItem = () => {
  // return block component if there is no parent block
  let result = {
    display: "entity",
    type: ENTITY_NAME,
    data: {},
    getChildren: uu5stringObject => {
      return { children: removeSpecialNodes(uu5stringObject).toString() };
    }
  };

  return result;
};

const toObject = (/*type, name, props*/) => {
  return { tag: null };
};

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    buttonDefs: {
      name: "uu5string",
      label: "UU5",
      dropdownItemLabel: "uu5string",
      tooltip: "uu5string",
      type: "entity",
      value: ENTITY_NAME,
      props: {
        className: "uu5string-button"
      }
    },
    toEditorItemDefs: [
      {
        name: "uu5string",
        type: "block",
        tagName: true,
        component: properties => {
          const dataProps = properties.blockProps;
          return (
            <UU5.Bricks.Div>
              <UU5.Bricks.Code
                {...dataProps}
                className="uu5-richtext-editor-uu5string uu5-richtext-editor-uu5string-block"
              >
                <EditorBlockLazy {...properties} />
              </UU5.Bricks.Code>
            </UU5.Bricks.Div>
          );
        },
        fn: toEditorItem,
        preserveEnters: true
      },
      {
        name: "uu5string",
        type: "entity",
        tagName: true,
        component: properties => {
          const dataProps = properties.contentState.getEntity(properties.entityKey).getData();
          return (
            <UU5.Bricks.Code {...dataProps} className="uu5-richtext-editor-uu5string">
              {properties.children}
            </UU5.Bricks.Code>
          );
        },
        fn: toEditorItem,
        preserveEnters: true
      }
    ],
    toObjectDefs: [
      {
        name: "uu5string",
        type: "entity",
        fn: toObject,
        preserveEnters: true
      },
      {
        name: "uu5string",
        type: "block",
        fn: toObject,
        preserveEnters: true
      }
    ],
    opts: { order: 10 }
  })
);

export default pluginDef;
