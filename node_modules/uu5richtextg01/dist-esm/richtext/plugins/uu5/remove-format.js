import UU5 from "uu5g04";

import Immutable from "immutable";

const PLUGIN_NAME = "removeFormat";

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    buttonDefs: {
      name: "removeFormat",
      icon: "mdi-format-clear",
      label: () => UU5.Environment.Lsi.RichText.plugins.removeFormat.label,
      onClick: (editorState, area) => {
        let newEditorState = editorState;
        if (!newEditorState.getSelection().isCollapsed()) {
          // remove style prop from block data
          let blockKeys = [];
          let blocks = newEditorState.getCurrentContent().getBlocksAsArray();
          const selection = newEditorState.getSelection();
          let before = true;

          // get keys of alll fully selected blocks
          for (let i = 0; i < blocks.length; i++) {
            let block = blocks[i];
            const blockKey = block.getKey();
            if (before && blockKey === selection.getStartKey()) {
              // mark that we are inside selection
              before = false;
              // if block is not selected from begining do not add this block's key into array
              if (selection.getStartOffset() > 0) {
                continue;
              }
            }

            // skip blocks before selection
            if (before) continue;

            if (blockKey === selection.getEndKey()) {
              if (block.getText().length === selection.getEndOffset()) {
                // last block is also fully selected => add it to the array of block keys
                blockKeys.push(blockKey);
              }
              break;
            }
            // store keys of block which are fully selected
            blockKeys.push(blockKey);
          }

          let newContent = newEditorState.getCurrentContent();
          blockKeys.forEach(key => {
            newContent = newContent.deleteIn(["blockMap", key, "data", "props", "style"]);
          });

          newEditorState = area.modifyEditorState(newEditorState, { currentContent: newContent });
        }
        return area.removeInlineStyle(newEditorState, "*");
      },
      isSelected: () => {
        return false;
      }
    }
  })
);

export default pluginDef;
