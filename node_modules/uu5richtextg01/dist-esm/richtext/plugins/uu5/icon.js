import * as UU5 from "uu5g04";
import "uu5g04-forms";

import Immutable from "immutable";

import IconButton from "./internal/icon-button.js";

const PLUGIN_NAME = "icon";

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    type: "entity",
    buttonDefs: {
      name: "icon",
      icon: "mdi-emoticon-outline",
      label: () => UU5.Environment.Lsi.RichText.plugins.icon.label,
      type: "custom",
      value: PLUGIN_NAME,
      button: IconButton
    },
    toEditorItemDefs: {
      name: PLUGIN_NAME,
      tagName: "UU5.Bricks.Icon",
      fn: (tagName, props) => {
        return {
          type: PLUGIN_NAME,
          display: "entity",
          children: ["\u200b"],
          props: props
        };
      },
      htmlAliases: [
        {
          tagName: "span",
          className: /uu5-bricks-icon/,
          result: comp => {
            if (!comp.props.className) {
              return null;
            }
            let classNames = comp.props.className.split(/\s+/);
            let possibleIconNames = classNames.filter(className => className.indexOf("-") !== -1);
            if (possibleIconNames.length === 0) {
              return null;
            }

            let iconClass;
            for (let pIndex = 0; pIndex < possibleIconNames.length; pIndex++) {
              let prefix = possibleIconNames[pIndex].split("-")[0];
              iconClass = classNames.find(className => className === prefix);
              if (iconClass) {
                // in icon class is founded prefix - set current class as a icon's name
                iconClass = possibleIconNames[pIndex];
                break;
              }
            }

            // cannot find value of icon prop
            if (!iconClass) {
              return null;
            }

            return { tagName: "UU5.Bricks.Icon", props: { icon: iconClass } };
          },
          final: true
        }
      ],
      component: properties => {
        const dataProps = properties.contentState.getEntity(properties.entityKey).getData();
        const iconProps = (dataProps || {}).props || {};
        return <UU5.Bricks.Icon {...iconProps}>{properties.children}</UU5.Bricks.Icon>;
      }
    }
  })
);

export default pluginDef;
