import * as UU5 from "uu5g04";

import Immutable from "immutable";

const PLUGIN_NAME = "fontSize";

const DEFAULT_SIZE = 15;
const SIZES = [8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 26, 28, 32, 40, 48];

const getDefaultFontSize = (getArea, defaultSize) => {
  const area = typeof getArea === "function" && getArea();
  if (area) {
    const areaStyles = area.getStyles();
    if (areaStyles) {
      return parseFloat(areaStyles.fontSize);
    }
  }

  return defaultSize;
};

const getSizes = (sizes, defaultFontSize) => {
  let result = [];
  let addedDefaultFontSize = false;
  sizes.forEach(size => {
    // lower sizes then default push into sizes
    if (size < defaultFontSize) {
      result.push(size);
    }
    // if size is already in the array, mark that default size is in the result array
    if (size === defaultFontSize) {
      addedDefaultFontSize = true;
    }
    // is size is greater then default size - for first time add default size into the array
    if (size >= defaultFontSize) {
      if (!addedDefaultFontSize) {
        addedDefaultFontSize = true;
        result.push(defaultFontSize);
      }
      result.push(size);
    }
  });
  if (!addedDefaultFontSize) {
    result.push(defaultFontSize);
  }

  return result;
};

const getItems = (getArea, toolbar) => {
  let defaultFontSize = getDefaultFontSize(getArea, DEFAULT_SIZE);
  return getSizes(SIZES, defaultFontSize).map(size => {
    return {
      label:
        size.toString() +
        (size === defaultFontSize ? toolbar.getLsiItem(UU5.Environment.Lsi.RichText.plugins.fontSize.default) : ""),
      value: size === defaultFontSize ? "" : `fontSize:${size}px`
    };
  });
};

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: PLUGIN_NAME,
    type: "inline",
    buttonDefs: [
      {
        name: "fontSize",
        icon: null,
        label: () => UU5.Environment.Lsi.RichText.plugins.fontSize.label,
        styleName: PLUGIN_NAME,
        preserveStyle: true,
        props: {
          className: UU5.Common.Css.css(".uu5-bricks-dropdown-menu-list { max-height: 250px; overflow-y: auto; }")
        },
        getProps: (editorState, getArea, toolbar) => {
          const area = typeof getArea === "function" ? getArea() : undefined;
          let styles = editorState && area && area.getCurrentStylesWithPrefix(editorState, PLUGIN_NAME);
          return {
            label:
              styles && styles.length
                ? styles[0].replace(`${PLUGIN_NAME}.fontSize:`, "").replace("px", "")
                : getDefaultFontSize(getArea, DEFAULT_SIZE).toString(),
            items: getItems(getArea, toolbar)
          };
        }
      }
    ],
    toEditorItemDefs: {
      tagName: "UU5.Bricks.Span",
      htmlAliases: {
        tagName: "span",
        style: { fontSize: true }
      },
      style: { fontSize: true },
      prefix: PLUGIN_NAME
    },
    toObjectDefs: { prefix: PLUGIN_NAME, tagName: "UU5.Bricks.Span", style: { fontSize: "${1}" }, order: 55 }
  })
);

export default pluginDef;
