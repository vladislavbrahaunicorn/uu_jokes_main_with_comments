import Immutable from "immutable";

let iterator = 0;

let map = {};

const pluginDef = Immutable.Map(
  Immutable.fromJS({
    name: "whitespace",
    type: "inline",
    toEditorItemDefs: [
      {
        tagName: "UU5.RichText.Whitespace",
        fn: (tag, props, children) => {
          map[iterator] = props.spaces;
          // iterator++;
          return {
            type: `whitespace.display:${props.hidden ? "none" : "inline"};#${iterator++}`,
            display: "inline",
            children: children
          };
        }
      }
    ],
    toObjectDefs: {
      type: "inline",
      prefix: "whitespace",
      tagName: "UU5.RichText.Whitespace",
      index: -1,
      fn: (type, style) => {
        return {
          replaceChar: text => {
            let index = text.indexOf(" ");

            // no space to replace
            if (index < 0) return null;

            return {
              offset: index,
              replace: map[parseInt(style.match(/#(.+)$/)[1])],
              hidden: style.indexOf("display:none;") > 0
            };
          }
        };
      }
    }
  })
);

export default pluginDef;
