import { RichUtils } from "draft-js";
import Selection from "./selection.js";
import * as UU5 from "uu5g04";

const Entity = {
  getDefaultStrategy(entityName) {
    return (contentBlock, callback, content) => {
      contentBlock.findEntityRanges(character => {
        const entityKey = character.getEntity();
        return entityKey !== null && content.getEntity(entityKey).getType() === entityName;
      }, callback);
    };
  },

  getDefaultEntityForm({ tag, props, onSave, onCancel, text }) {
    return UU5.Common.UU5String.toChildren(
      `<uu5string />
      <UU5.Forms.Form onSave="\${onSave}" onCancel="\${onCancel}">
      <UU5.Forms.Text label="Tag name" name="tag" value="\${tag}" disabled />
      <UU5.CodeKit.JsonEditor label="Props" name="props" ${props ? 'value="${props}"' : ""} />
      <UU5.Forms.Text label="content" name="text" ${text ? 'value="${text}"' : ""} />
      <UU5.Forms.Controls /></UU5.Forms.Form>`,
      { onSave: () => onSave, onCancel: () => onCancel, tag, props: JSON.stringify(props || {}), text }
    );
  },

  getCurrentEntityKey(editorState) {
    const selection = editorState.getSelection();
    const content = editorState.getCurrentContent();
    const blockKey = selection.getStartKey();
    const block = content.getBlockForKey(blockKey);
    return block.getEntityAt(selection.getStartOffset());
  },

  getEntityByKey(editorState, entityKey) {
    return editorState.getCurrentContent().getEntity(entityKey);
  },

  getCurrentEntity(editorState) {
    let entityKey = Entity.getCurrentEntityKey(editorState);
    return entityKey && Entity.getEntityByKey(editorState, entityKey);
  },

  seĺectEntity(editorState, entityKey) {
    let newEditorState = editorState;
    const selection = editorState.getSelection();
    const content = editorState.getCurrentContent();
    const blockKey = selection.getStartKey();
    const block = content.getBlockForKey(blockKey);

    // update selection - select whole component
    block.findEntityRanges(
      character => character.getEntity() === entityKey,
      (startOffset, endOffset) => {
        newEditorState = Selection.updateSelection(editorState, { startOffset, endOffset });
      }
    );

    return newEditorState;
  },

  selectCurrentEntity(editorState, entityName) {
    let selection = editorState.getSelection();
    let content = editorState.getCurrentContent();
    let block = content.getBlockForKey(selection.getAnchorKey());
    let entityKey = block.getEntityAt(selection.getStartOffset());
    let entity = entityKey && content.getEntity(entityKey);
    if (entity && entity.getType() === entityName) {
      // update selection over whole entity
      return Entity.seĺectEntity(editorState, entityKey);
    }

    return editorState;
  },

  toggle(editorState, entityName, props, data) {
    let content = editorState.getCurrentContent();
    content.createEntity(entityName, "MUTABLE", { props, data });
    const compKey = content.getLastCreatedEntityKey();

    // update inline component
    editorState = RichUtils.toggleLink(editorState, editorState.getSelection(), compKey);
  },

  remove(editorState) {
    return editorState;
  },

  create(editorState, entityName, isMutable = true, data) {
    let content = editorState.getCurrentContent();
    content.createEntity(entityName, isMutable ? "MUTABLE" : "IMMUTABLE", data);
    return content.getLastCreatedEntityKey();
  }
};

export default Entity;
