//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { Suspense, lazy } from "./internal/suspense.js";

import Config from "./config.js";

const Editor = lazy(() => import("./editor.js"));
// import { Editor } from "./editor.js";

import SavePlugin from "./plugins/uu5/save.js";

import "./block.less";
//@@viewOff:imports

let lazyLoaded = false;

export const Block = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.EditableMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "Block",
    classNames: {
      main: Config.CSS + "block",
      closeButton: Config.CSS + "block-close-button",
      largeScreenEditor: Config.CSS + "large-screen-editor"
    },
    getDerivedStateFromError(error) {
      return { error };
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uu5string: UU5.PropTypes.oneOfType([
      UU5.PropTypes.string,
      UU5.PropTypes.arrayOf(UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]))
    ]),
    buttons: UU5.PropTypes.any,
    plugins: UU5.PropTypes.any,
    placeholder: UU5.PropTypes.string,
    getToolbar: UU5.PropTypes.func,
    forceRenderModal: UU5.PropTypes.bool,
    readOnly: UU5.PropTypes.bool,
    bgStyle: UU5.PropTypes.oneOf(["outline", "transparent"]),
    editorHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    editorMinHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    editorMaxHeight: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      uu5string: undefined,
      buttons: undefined,
      plugins: undefined,
      placeholder: undefined,
      getToolbar: undefined,
      forceRenderModal: undefined,
      readOnly: undefined,
      bgStyle: "transparent",
      editorHeight: undefined,
      editorMinHeight: undefined,
      editorMaxHeight: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    this._savePlugin = SavePlugin.setIn(["commands", "fn"], () => {
      this._editor.setInfo(this.getLsiItem(UU5.Environment.Lsi.RichText.block.saving));
      this.saveEditation({ uu5string: this._editor.getValue() });
      return true;
    });
    return { uu5string: this._getUu5String(), lazyLoaded: false };
  },

  componentWillReceiveProps(nextProps) {
    const nextUu5String = this._getUu5String(nextProps);
    if (nextUu5String !== this.state.uu5string) {
      this.setState({ uu5string: nextUu5String });
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  setCursorPosition(cursorPosition) {
    if (this.state.editation) {
      return this._editor ? this._editor.setCursorPosition(cursorPosition) : null;
    }
  },
  //@@viewOff:interface

  //@@viewOn:overriding
  onBeforeForceEndEditation_() {
    return { uu5string: this._editor.getValue() };
  },
  //@@viewOff:overriding

  //@@viewOn:private
  _registerNull(inst) {
    // unmount of component means that suspense is loaded and component should be rendered
    if (!inst) {
      this.setState(state => {
        if (state.lazyLoaded) return;

        // Editor is loaded - need to set to static variable because other Editor does not render fallback component
        // lazyLoaded is stored in both state and static for cases when more editors is loaded in same time
        lazyLoaded = true;
        return { lazyLoaded: true };
      });
    }
  },

  _isLazyLoaded() {
    return lazyLoaded;
  },

  _getUu5String(props = this.props) {
    if (props.getEditablePropValue) {
      return props.getEditablePropValue(this, "uu5string") || props.uu5string;
    }

    return props.uu5string;
  },
  _endEditation() {
    let uu5string = this._editor.getValue();
    this.endEditation({ uu5string });
    this.setState({ uu5string });
  },

  _registerEditor(editor) {
    this._editor = editor;
  },

  _getLsiItem(name) {
    return <UU5.Bricks.Lsi lsi={UU5.Environment.Lsi.RichText.block[name]} />;
  },

  _renderContent(isLarge) {
    return (
      <>
        <Editor
          key="editor"
          className={isLarge ? this.getClassName("largeScreenEditor") : undefined}
          value={this.state.uu5string}
          ref_={this._registerEditor}
          placeholder={this.props.placeholder}
          getToolbar={this.props.getToolbar}
          forceRenderModal={this.props.forceRenderModal}
          readOnly={this.props.readOnly}
          plugins={{ ...this.props.plugins, save: this._savePlugin }}
          bgStyle={this.props.bgStyle}
          buttons={this.props.buttons}
          animatedToolbar={false}
          dynamicToolbar={false}
          height={this.props.editorHeight}
          minHeight={this.props.editorMinHeight}
          maxHeight={this.props.editorMaxHeight}
        />
        <UU5.Bricks.Button
          key="end-button"
          className={this.getClassName("closeButton")}
          onClick={this._endEditation}
          bgStyle="transparent"
          colorSchema="green"
          borderRadius="12px"
          size="s"
        >
          {isLarge ? this._getLsiItem("endEditation") : <UU5.Bricks.Icon icon="mdi-check-circle-outline" />}
        </UU5.Bricks.Button>
      </>
    );
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    if (this.state.error) {
      return <UU5.Common.Error error={this.state.error} content="UU5.RichText.Block failed to render." moreInfo />;
    }

    let components = [];

    if (!this.state.editation || !this._isLazyLoaded()) {
      components.push(
        <UU5.Bricks.Div key="standard-mode" {...this.getMainPropsToPass()} content={this.state.uu5string} />
      );
    }
    if (this.state.editation) {
      components.push(
        <Suspense fallback={<span ref={this._registerNull} />}>
          <UU5.Bricks.Div key="editation-mode" {...this.getMainPropsToPass()}>
            <UU5.Bricks.Resize>
              <UU5.Bricks.Resize.Item max={768} key="resize-item">
                {this._renderContent()}
              </UU5.Bricks.Resize.Item>
              <UU5.Bricks.Resize.Item key="resize-item">{this._renderContent(true)}</UU5.Bricks.Resize.Item>
            </UU5.Bricks.Resize>
          </UU5.Bricks.Div>
        </Suspense>
      );
    }

    return components;
  }
  //@@viewOff:render
});

export default Block;
