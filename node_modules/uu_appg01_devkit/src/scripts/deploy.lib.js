const fs = require("fs");
const os = require("os");
const path = require("path");

const paths = require("../config/paths.js");
const helpers = require("../tools/helpers.js");
const Package = require("uu_appg01_devkit-common/src/tools/package.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");

module.exports = class Deploy {
  constructor(config) {
    this.config = config;
  }

  async process() {
    let { npmDeploy = false, cdnDeploy = false, cdnDeployMajor = false, uuCloudDeploy = true } = this.config.getAll();
    let { name, version, private: priv } = Package.getSingletonSync("package.json").get();

    if (!priv && npmDeploy === true) {
      let NpmDeploy = helpers.requireByTemplateType(__dirname + "/npm-deploy.js");
      await new NpmDeploy(this.config).process();
    }

    let templateType = helpers.getTemplateInfo().type;
    if (templateType === "uu5-lib" || templateType === "lib") {
      if (cdnDeploy) {
        const token = this._getNexusAuthToken();
        if (token) {
          console.log("Deploying CDN pack to Nexus.");
          const klawSync = require("klaw-sync");

          let cdnPack = this._getCdnPackPath(paths.buildDir, name, version);
          const cdnPackBasename = `${name}-${version}.zip`;
          let cdnName = name.replace(/_/g, "-");
          // deploy zip package to Nexus
          await this._uploadToNexus(cdnPack, token, `${cdnName}/${version}`, cdnPackBasename);
          if (cdnDeployMajor) {
            await this._uploadToNexus(cdnPack, token, `${cdnName}/${this._getMajorVersion(version)}`, cdnPackBasename);
          }
          // deploy individual dist files to Nexus
          const distPath = path.resolve(paths.buildLibWebDir);
          const files = klawSync(distPath, { nodir: true });
          for (let {path: file} of files) {
            const nexusPath = path.dirname(file.replace(distPath, "").replace("\\", "/"));
            const destination = `${cdnName}/${version}${nexusPath}`;
            await this._uploadToNexus(file, token, destination);
            if (cdnDeployMajor) {
              const destination = `${cdnName}/${this._getMajorVersion(version)}${nexusPath}`;
              await this._uploadToNexus(file, token, destination);
            }
          }
        }
      } else if (uuCloudDeploy) {
        console.log("Deploying CDN pack to uuCloud.");
        // create app box with CDN pack
        let UuAppBox = helpers.requireByTemplateType(__dirname + "/uu-app-box.js");
        await new UuAppBox(this.config).process();

        // deploy to CDN via C3
        let UuCloudDeploy = helpers.requireByTemplateType(__dirname + "/uu-cloud-deploy.js");
        await new UuCloudDeploy(this.config).process();
      }
    }
  }

  _getCdnPackPath(buildDir, name, version) {
    let baseVersion = version.replace(/([\.\-][a-zA-Z][a-zA-Z0-9]*)\.[0-9]+/, (match, g1) => {
      return g1;
    });
    if (!fs.existsSync(buildDir)) {
      throw new Error(`App package does not exist at location ${buildDir}. Run [package] task to create it.`);
    }
    let files = fs.readdirSync(buildDir).filter(fn => fn.match(new RegExp(`^${name}-${baseVersion}.*\.zip$`)));
    if (files.length == 0) {
      throw new Error(`App package does not exist at location ${buildDir}. Run [package] task to create it.`);
    }
    return path.resolve(buildDir, files.sort().pop());
  }

  _getMajorVersion(version) {
    return version.replace(/(\d+\.)\d+\.\d+/, "$1" + "x.x");
  }

  async _uploadToNexus(file, token, destination, basename) {
    let body = fs.createReadStream(file);
    basename = basename || path.basename(file);
    let identifier = `${destination.replace(/[\\\/]$/, "")}/${basename}`;
    let url = process.env.CDN_REPOSITORY
      ? `${process.env.CDN_REPOSITORY.replace(/\/$/, "")}/${identifier}`
      : `http://192.168.4.209:8081/nexus/content/sites/cdn-dev/${identifier}`;
    let mockToken = {get: function() {return token;}, refresh: function() {return token;}};
    let appClient = new AppClient(mockToken);
    await appClient.exchange(url, "put", body, {});
    console.log(`Successfully uploaded ${file} to ${destination}`);
  }

  _getNexusAuthToken() {
    let token;
    const path = process.env.CDN_AUTH;
    if (path) {
      console.log("Loading authentication token file from configured path.");
      token = readFile(path);
      if (token) return token.trim();
    }
    const defaultPath = `${os.homedir()}/.nexus_cdn`;
    console.log(`Custom path is not configured correctly. Using default path: ${defaultPath}`);
    token = readFile(defaultPath);
    if (token) return token.trim();

    function readFile(filePath) {
      try {
        return fs.readFileSync(filePath, "ascii");
      } catch (err) {
        if (err.code === "ENOENT") {
          console.error(`Cannot find authentication token file at location: ${filePath}`);
        } else {
          console.error(`Unexpected Error.\n`, err);
        }
      }
    }
  }
};
