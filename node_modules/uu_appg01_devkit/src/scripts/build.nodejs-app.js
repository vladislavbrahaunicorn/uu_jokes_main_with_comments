const fs = require("fs");
const os = require('os')
const path = require("path");
const shell = require("shelljs");
const helpers = require("../tools/helpers.js");

const paths = require("../config/paths.js");

module.exports = class Build {
  constructor(config) {
    this.config = config;
  }
  async process() {
    console.log("Building project.");
    shell.mkdir("-p", paths.buildDir);

    let UpdateFromUuappJson = require("./update-from-uuapp-json.js");
    await new UpdateFromUuappJson(this.config).process();

    const GenerateProfilesJson = helpers.requireByTemplateType(__dirname + "/generate-profiles-json.js");
    new GenerateProfilesJson(this.config).process();
    const GenerateMappingsJson = helpers.requireByTemplateType(__dirname + "/generate-mappings-json.js");
    new GenerateMappingsJson(this.config).process();
    let GeneratePersistenceJson = helpers.requireByTemplateType(__dirname + "/generate-persistence-json.js");
    new GeneratePersistenceJson(this.config).process();

    // build -client if it's present
    let { buildClient } = this.config.getAll();
    if (buildClient !== false) {
      let cwd = process.cwd();
      if (cwd.match(/-server$/)) {
        let clientDir = path.join("..", path.basename(cwd).replace(/-server$/, "-hi"));
        if (!fs.existsSync(clientDir)) {
          clientDir = path.join("..", path.basename(cwd).replace(/-server$/, "-client"));
        }
        if (fs.existsSync(clientDir) && fs.existsSync(path.join(clientDir, "package.json"))) {
          console.log(os.EOL + `Building client in ${clientDir} (use -- --no-build-client to skip)`);
          const child_process = require("child_process");
          let hasNodeModules = fs.existsSync(path.join(clientDir, "node_modules"));
          if (!hasNodeModules) {
            const PackageManager = require("uu_appg01_devkit-common/src/tools/package-manager.js");
            await PackageManager.install({ cwd: path.resolve(clientDir) });
          }
          child_process.spawnSync("npm run build", { shell: true, cwd: path.resolve(clientDir), stdio: "inherit" });
        }
      }
    }
  }
};
