const fs = require("fs");
const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");
const endOfLine = require("os").EOL;

const C3_DEPLOY_URI = "uu-c3/AppDeployment/deploy/exec";
const C3_DEPLOY_RESULT_URI = "uu-c3/AppDeployment/deploy/execAsyncStatus";

const HEADERS = {
  Accept: "application/json",
  "Content-type": "application/json"
};

class uuCloudDeployTask {
  constructor(cloudConfig) {
    this.cloudConfig = cloudConfig;
    this.config = null;
    this.appClient = null;
  }

  async process() {
    this.config = await this.cloudConfig.uuDeployConfig();
    this.appClient = new AppClient(this.config.oidcToken);
    let taskUri = await this._runC3Deploy();
    let deploymentUri = await this._waitForResult(taskUri);
    console.log("App successfully deployed.");
    console.log(" => Application Deployment URI: " + deploymentUri);

    if (this.config.applicationUrl) {
      console.log(" => Application URL: " + this.config.applicationUrl);
      if (this.config.targetSlot === "BETA") {
        console.log(
          " => Application was deployed to the BETA slot. To make it available in the PRODUCTION slot, either change the uuCloud configuration of the uuSubApp or run the uuCloudSwap task."
        );
      }
    }

    this.cloudConfig.storeAppDeploymentUri(deploymentUri);
  }

  async _runC3Deploy() {
    console.log(
      endOfLine +
        "uuAppBox " +
        this.config.appBoxUri +
        " is being deployed to " +
        this.config.resourcePoolUri +
        (this.config.targetSlot ? ` (target slot ${this.config.targetSlot})` : "")
    );

    let params = {
      appBoxUri: this.config.appBoxUri,
      config: this.config.deployParams,
      asid: this.config.asid
    };
    if (this.config.uuEeList) {
      params.uuEEs = this.config.uuEeList;
    }
    if (this.config.targetSlot) {
      params.targetSlot = this.config.targetSlot;
    }
    if (this.cloudConfig.commandLineArgs.forceBuild) {
      params.forceBuild = true;
    }
    fs.writeFileSync(this.config.deployCmdParamsPath, JSON.stringify(params, null, 2));
    let result = await this.appClient.exchange(
      CmdHelper.buildCmd2Url(this.appClient.c3BaseUri + "/" + C3_DEPLOY_URI, this.config.resourcePoolUri),
      "post",
      JSON.stringify(params),
      HEADERS
    );

    return JSON.parse(result.body).taskUri;
  }

  async _waitForResult(taskUri) {
    console.log("> Waiting for app deployment...");

    let params = {
      taskUri: taskUri
    };

    let deployCheck = () =>
      this.appClient.exchange(
        CmdHelper.buildCmd2Url(this.appClient.c3BaseUri + "/" + C3_DEPLOY_RESULT_URI, this.config.resourcePoolUri),
        "post",
        JSON.stringify(params),
        HEADERS
      );

    let result = await CmdHelper.waitForC3Result(deployCheck);

    return result;
  }
}

module.exports = uuCloudDeployTask;
