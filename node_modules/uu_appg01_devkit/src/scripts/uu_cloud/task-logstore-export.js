const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");

const DEFAULT_CMD_BASE_PATH = "uu-logstore/Log/getRecordList/exec";

const HEADERS = {
  Accept: "application/json",
  "Content-type": "application/json"
};

class uuLogStoreExportTask {
  constructor(cloudConfig) {
    this.config = cloudConfig.uuLogStoreConfig();
    this.appClient = new AppClient(this.config.oidcToken);
  }

  async process() {
    let logs = await this._getExport();
    const saveAndFormatLogs = require("uu_appg01_devkit-common/src/scripts/save-and-format-logs.js");
    saveAndFormatLogs(logs, this.config);
  }

  async _getExport() {
    console.log("Exporting logs for app deployment " + this.config.appDeploymentUri);

    let from = this.config.from;
    if (!from) {
      from = new Date();
      from.setHours(from.getHours() - 1);
      from = from.toISOString();
      this.config.from = from;
    }
    let to = this.config.to;
    if (!to) {
      to = new Date().toISOString();
      this.config.to = to;
    }

    const processedIds = new Set();
    let exportCmdUri = this._buildExportCmdUri(this.config.appDeploymentUri);
    let result;

    while (true) {
      let query = new Map();
      query.set("from", from);
      query.set("to", to);

      console.log("> Processing query: from=" + from + ", to=" + to);
      let partialResult = (await this.appClient.exchange(
        CmdHelper.buildCmd2Url(exportCmdUri, this.config.appDeploymentUri, query),
        "get",
        null,
        HEADERS
      )).body;
      partialResult = JSON.parse(partialResult);

      // remove duplicates
      partialResult.pageEntries = partialResult.pageEntries.filter(item => {
        return processedIds.has(item.id) ? false : processedIds.add(item.id);
      });
      partialResult.totalSize = partialResult.pageEntries.length;

      if (result) {
        result.totalSize += partialResult.totalSize;
        result.pageEntries = result.pageEntries.concat(partialResult.pageEntries);
      } else {
        result = partialResult;
      }

      if (partialResult.totalSize < 1000) {
        break;
      } else {
        to = partialResult.pageEntries[partialResult.pageEntries.length - 1].time;
        if (new Date(to) < new Date(from)) {
          break;
        }
      }
    }

    return result;
  }

  /**
   * Parses territory code or id from appDeploymentUri and creates uuLogStoreExport uri with it.
   */
  _buildExportCmdUri(appDeploymentUri) {
    let terrMatch = appDeploymentUri.match(/ues:([^:[]*)(\[([^:]+)\])?:/);
    if (terrMatch == null) {
      throw new Error("Wrong format of appDeploymentUri: " + appDeploymentUri);
    }

    let territory_part = terrMatch[3] != null ? terrMatch[3] : terrMatch[1];

    return `${this.appClient.logstoreBaseUri}/${territory_part}/${DEFAULT_CMD_BASE_PATH}`;
  }
}

module.exports = uuLogStoreExportTask;
