/* eslint-disable no-unused-vars */
/* eslint-disable no-empty */
const path = require("path");
const fs = require("fs");
const autoBind = require("auto-bind");
const OidcToken = require("uu_appg01_devkit-common/src/scripts/oidc-token.js");
const Package = require("uu_appg01_devkit-common/src/tools/package.js");
const ConfigLoader = require("../../tools/simple-config-loader.js");

const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");

const DEFAULT_SCHEMA_URI = "ues:SYSTEM:UU.OS/UUAPP-DEPLOY-SCHEMA-V2.3";
const DEFAULT_RUNTIME_STACK = "UU.OS9/UC_NODEJS_STACK-V1.1";
const DEFAULT_APP_BOX_MAR_CODE = "UU.OS/RUNTIME/APP_BOX";
const NORTH_GATEWAY_URI = "https://uuos9.plus4u.net";
const NORTH_GATEWAY_BETA_URI = "https://uuos9-beta.plus4u.net";
const WEST_GATEWAY_URI = "https://uuappg01-eu-w-1.plus4u.net";
const WEST_GATEWAY_BETA_URI = "https://uuappg01-beta-eu-w-1.plus4u.net/";
const CONFIG_FLD = "env";
const VALUE_PLACEHOLDER = "----- VALUE REQUIRED -----";

class UuCloudConfig {
  constructor(projectRoot, projectName, projectVersion, targetDir, buildConfig) {
    this.projectRoot = projectRoot;
    this.targetDir = targetDir;
    this.projectName = projectName;
    this.projectVersion = projectVersion;
    this.timestamp = buildConfig.getBuildTimestamp();
    this.environment = buildConfig.getMode() || "development";
    this.commandLineArgs = buildConfig.commandLineConfig;
    this.legacyCloudConfigPath = this._getLegacyCloudConfigPath(this.environment);
    if (this.legacyCloudConfigPath) {
      this.legacyCloudConfig = JSON.parse(fs.readFileSync(this.legacyCloudConfigPath));
    } else {
      this.legacyCloudConfig = null;
    }
    this.subAppDescriptorPath = this._getSubAppDescriptorPath(this.environment);
    if (this.subAppDescriptorPath) {
      let descriptor = JSON.parse(fs.readFileSync(this.subAppDescriptorPath));
      this.subAppConfig = descriptor.uuSubApp || {};
      this.subAppInstanceConfig = descriptor.uuSubAppInstance || {};
    } else {
      this.subAppConfig = {};
      this.subAppInstanceConfig = {};
    }
    this.devkitConfigPath = path.resolve(this.projectRoot, "..", "uuapp.json");
    this.devkitConfigPrefix = `$.${path.basename(this.projectRoot)}.devkit.${this.environment}`;
    if (fs.existsSync(this.devkitConfigPath)) {
      let config = JSON.parse(fs.readFileSync(this.devkitConfigPath));
      this.devkitConfig = ((config[path.basename(this.projectRoot)] || {}).devkit || {})[this.environment];
    } else {
      this.devkitConfig = null;
    }
    this.cloudDescriptorPath = this._getCloudDescriptorPath() || this._getLegacyCloudDescriptorPath(this.environment);
    this.cloudDescriptor = null;
    this.appPackagePath = null;
    this.readmePath = null;
    this.tokenFile = buildConfig.get("tokenFile");
    this.oidcToken = null;
    this.tid = null;
    autoBind(this);
  }

  uuAppBoxConfig() {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudAppBoxLocationUri && !this.legacyCloudConfig.uuCloudAppBoxUri) {
        throw new Error(
          `One of parameters $.uuCloudAppBoxLocationUri or $.uuCloudAppBoxUri must be set (in ${this.legacyCloudConfigPath}).`
        );
      }
      result.appBoxLocationUri = this.legacyCloudConfig.uuCloudAppBoxLocationUri;
      result.appBoxMarUri = this.legacyCloudConfig.uuCloudAppBoxMarUri;
      result.appBoxUri = this.legacyCloudConfig.uuCloudAppBoxUri;
    } else {
      if (
        !this.subAppConfig.appBoxUri &&
        (!this.devkitConfig ||
          !this.devkitConfig.appBoxLocationUri ||
          this.devkitConfig.appBoxLocationUri === VALUE_PLACEHOLDER)
      ) {
        throw new Error(
          `One of parameters $.uuSubApp.appBoxUri (in ${this.subAppDescriptorPath}) or ${this.devkitConfigPrefix}.appBoxLocationUri (in ${this.devkitConfigPath}) must be set.`
        );
      }
      result.appBoxLocationUri = this.devkitConfig ? this.devkitConfig.appBoxLocationUri : null;
      result.appBoxMarUri = this.devkitConfig ? this.devkitConfig.appBoxMarUri : null;
      result.appBoxUri = this.subAppConfig.appBoxUri;
    }
    let territoryCode = this._getTerritoryCode(result.appBoxLocationUri || result.appBoxUri);
    let baseVersion = this.projectVersion.replace(/([\.\-][a-zA-Z][a-zA-Z0-9]*)\.[0-9]+/, (match, g1) => {
      return g1;
    });
    let cloudDescriptor = this._getCloudDescriptor();
    let appBoxCode = `${cloudDescriptor.code}/APPBOX-${baseVersion}`;
    if (!result.appBoxMarUri) {
      result.appBoxMarUri = `ues:${territoryCode}:${DEFAULT_APP_BOX_MAR_CODE}`;
    }
    result.appBoxUriBuilt = `ues:${territoryCode}:${appBoxCode}`;
    result.appBoxName = `${cloudDescriptor.name} ${baseVersion} uuApp Box`;
    result.appBoxCode = appBoxCode;
    result.appPackageCode = this._getAppPackageCode(cloudDescriptor);
    result.appPackagePath = this._getAppPackagePath();
    result.cloudDescriptorCode = `${cloudDescriptor.code}/UUAPP-DEPLOY`;
    result.cloudDescriptorPath = this._getCloudDescriptorPath();
    result.readmeCode = `${cloudDescriptor.code}/README`;
    result.readmePath = this._getReadmePath();
    result.oidcToken = this._getOidcToken();
    result.version = this.projectVersion;
    result.asidDescriptors = this._getAsidDescriptors();
    return result;
  }

  async uuDeployConfig(includeAsid = true) {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudResourcePoolUri) {
        throw new Error(`Parameter $.uuCloudResourcePoolUri must be set (in ${this.legacyCloudConfigPath}).`);
      }
      if (
        includeAsid &&
        (!this.legacyCloudConfig.uuCloudDeploymentConfig || !this.legacyCloudConfig.uuCloudDeploymentConfig.asid)
      ) {
        throw new Error(`Parameter $.uuCloudDeploymentConfig.asid must be set (in ${this.legacyCloudConfigPath}).`);
      }
      if (
        includeAsid &&
        (!this.legacyCloudConfig.uuCloudDeploymentConfig.privilegedUserMap ||
          !this.legacyCloudConfig.uuCloudDeploymentConfig.privilegedUserMap.asidOwner)
      ) {
        throw new Error(
          `Parameter $.uuCloudDeploymentConfig.privilegedUserMap.asidOwner must be set (in ${this.legacyCloudConfigPath}).`
        );
      }
      result.resourcePoolUri = this.legacyCloudConfig.uuCloudResourcePoolUri;
      if (includeAsid) result.asid = this.legacyCloudConfig.uuCloudDeploymentConfig.asid;
      result.deployParams = this.legacyCloudConfig.uuCloudDeploymentConfig;
    } else {
      if (!this.subAppConfig.resourcePoolUri || this.subAppConfig.resourcePoolUri === VALUE_PLACEHOLDER) {
        throw new Error(`Parameter $.uuSubApp.resourcePoolUri must be set (in ${this.subAppDescriptorPath}).`);
      }
      if (includeAsid && !this.subAppInstanceConfig.asid) {
        throw new Error(`Parameter $.uuSubAppInstance.asid must be set (in ${this.subAppDescriptorPath}).`);
      }
      if (includeAsid && !this.subAppInstanceConfig.asidOwner) {
        throw new Error(`Parameter $.uuSubAppInstance.asidOwner must be set (in ${this.subAppDescriptorPath}).`);
      }
      result.resourcePoolUri = this.subAppConfig.resourcePoolUri;
      if (includeAsid) {
        result.asid = this.subAppInstanceConfig.asid;
      }
      if (this.commandLineArgs.forceBuild) {
        result.forceBuild = true;
      }
      // TODO add uuIds of asidOwner and awidOwners or not?
      // TODO add subAppConfig.uuEeMap?
      if (this.subAppInstanceConfig.uuEeMap) {
        result.uuEeList = Object.values(this.subAppInstanceConfig.uuEeMap);
      }
      let deployParams = Object.assign({}, this.subAppConfig.uuConfigMap);
      deployParams = Object.assign(deployParams, this.subAppInstanceConfig.uuConfigMap);
      if (!deployParams.asid) {
        deployParams.asid = this.subAppInstanceConfig.asid;
      }
      if (this.subAppInstanceConfig.asidOwner) {
        if (!deployParams.privilegedUserMap) {
          deployParams.privilegedUserMap = {};
        }
        if (!deployParams.privilegedUserMap.asidOwner) {
          deployParams.privilegedUserMap.asidOwner = this.subAppInstanceConfig.asidOwner;
        }
      }
      if (!deployParams.tid) {
        deployParams.tid = await this._getTid();
      }
      let objectStoreMap = this.subAppConfig.uuAppObjectStoreMap;
      if (objectStoreMap) {
        if (!deployParams.uuSubAppDataStoreMap) {
          deployParams.uuSubAppDataStoreMap = {};
        }
        Object.keys(objectStoreMap).forEach(
          function(storeId) {
            let storeCfg = objectStoreMap[storeId];
            if (!this.subAppInstanceConfig.uuAppObjectStoreMap) {
              throw new Error(
                `Missing configuration of object stores $.uuSubAppInstance.uuAppObjectStoreMap (in ${this.subAppDescriptorPath}).`
              );
            }
            let storeInstance = this.subAppInstanceConfig.uuAppObjectStoreMap[storeId];
            if (!storeInstance) {
              throw new Error(
                `Missing configuration of object store $.uuSubAppInstance.uuAppObjectStoreMap.${storeId} (in ${this.subAppDescriptorPath}).`
              );
            }
            let storeName = storeCfg.alias || storeId;
            let storeUri = `osid:${storeInstance.osid}`;
            deployParams.uuSubAppDataStoreMap[storeName] = storeUri;
          }.bind(this)
        );
      }
      let binaryStoreMap = this.subAppConfig.uuAppBinaryStoreMap;
      if (binaryStoreMap) {
        if (!deployParams.uuSubAppDataStoreMap) {
          deployParams.uuSubAppDataStoreMap = {};
        }
        Object.keys(binaryStoreMap).forEach(
          function(storeId) {
            let storeCfg = binaryStoreMap[storeId];
            if (!this.subAppInstanceConfig.uuAppBinaryStoreMap) {
              throw new Error(
                `Missing configuration of binary stores $.uuSubAppInstance.uuAppBinaryStoreMap (in ${this.subAppDescriptorPath}).`
              );
            }
            let storeInstance = this.subAppInstanceConfig.uuAppBinaryStoreMap[storeId];
            if (!storeInstance) {
              throw new Error(
                `Missing configuration of binary store $.uuSubAppInstance.uuAppBinaryStoreMap.${storeId} (in ${this.subAppDescriptorPath}).`
              );
            }
            let storeName = storeCfg.alias || storeId;
            let storeUri = `bsid:${storeInstance.bsid}`;
            deployParams.uuSubAppDataStoreMap[storeName] = storeUri;
          }.bind(this)
        );
      }
      result.deployParams = deployParams;
    }
    result.appBoxUri = this._getAppBoxUri();
    result.oidcToken = this._getOidcToken();
    result.applicationUrl = await this._resolveAppUrl();
    result.deployCmdParamsPath = path.join(this.targetDir, `c3-deploy-params-${this.getQualifiedVersion()}.json`);
    result.targetSlot = this.subAppConfig.targetSlot;
    return result;
  }

  async uuShareConfig(appDeploymentUriRequired = true) {
    let result = {};
    if (this.legacyCloudConfig) {
      if (appDeploymentUriRequired) {
        if (!this.legacyCloudConfig.uuCloudAppDeploymentUri) {
          throw new Error(`Parameter $.uuCloudAppDeploymentUri must be set (in ${this.legacyCloudConfigPath}).`);
        }
        result.appDeploymentUri = this.legacyCloudConfig.uuCloudAppDeploymentUri;
      }
      result.sharedUris = this.legacyCloudConfig.uuCloudShareAppWorkspaces || [];
      result.tid = null;
      result.sharedAwids = [];
      result.sharedUris.forEach(sharedUri => {
        let uriPart = sharedUri.split(":").pop();
        let tidAwid = uriPart.split("-");
        result.tid = tidAwid[0];
        result.sharedAwids.push(tidAwid[1]);
      });
    } else {
      if (appDeploymentUriRequired) {
        if (!this.devkitConfig || !this.devkitConfig.appDeploymentUri) {
          throw new Error(
            `Parameter ${this.devkitConfigPrefix}.appDeploymentUri must be set (in ${this.devkitConfigPath}).`
          );
        }
        result.appDeploymentUri = this.devkitConfig.appDeploymentUri;
      }
      result.tid = await this._getTid();
      result.sharedAwids = [];
      if (this.subAppInstanceConfig.asid) {
        result.sharedAwids.push(this.subAppInstanceConfig.asid);
      }
      if (this.subAppInstanceConfig.awidList) {
        this.subAppInstanceConfig.awidList.forEach(function(awid) {
          result.sharedAwids.push(awid.awid);
        });
      }
      result.sharedUris = [];
      result.sharedAwids.forEach(sharedAwid => {
        result.sharedUris.push(`ues:${result.tid}-${sharedAwid}:${result.tid}-${sharedAwid}`);
      });
    }
    result.oidcToken = this._getOidcToken();
    try {
      result.applicationUrl = await this._resolveAppUrl(result.sharedAwids[result.sharedAwids.length - 1]);
    } catch (e) {
      // appliacation url is obtained from uuCloud descriptor, which doen't have to be created if running uuCloudShare task
    }
    return result;
  }

  uuUndeployConfig() {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudAppDeploymentUri) {
        throw new Error(`Parameter $.uuCloudAppDeploymentUri must be set (in ${this.legacyCloudConfigPath}).`);
      }
      result.appDeploymentUri = this.legacyCloudConfig.uuCloudAppDeploymentUri;
    } else {
      if (!this.devkitConfig || !this.devkitConfig.appDeploymentUri) {
        throw new Error(
          `Parameter ${this.devkitConfigPrefix}.appDeploymentUri must be set (in ${this.devkitConfigPath}).`
        );
      }
      result.appDeploymentUri = this.devkitConfig.appDeploymentUri;
    }
    result.oidcToken = this._getOidcToken();
    result.targetSlot = this.subAppConfig.targetSlot;
    return result;
  }

  uuSwapConfig() {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudAppDeploymentUri) {
        throw new Error(`Parameter $.uuCloudAppDeploymentUri must be set (in ${this.legacyCloudConfigPath}).`);
      }
      result.appDeploymentUri = this.legacyCloudConfig.uuCloudAppDeploymentUri;
    } else {
      if (!this.devkitConfig || !this.devkitConfig.appDeploymentUri) {
        throw new Error(
          `Parameter ${this.devkitConfigPrefix}.appDeploymentUri must be set (in ${this.devkitConfigPath}).`
        );
      }
      result.appDeploymentUri = this.devkitConfig.appDeploymentUri;
    }
    result.oidcToken = this._getOidcToken();
    return result;
  }

  uuDeployListConfig() {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudResourcePoolUri) {
        throw new Error(`Parameter $.uuCloudResourcePoolUri must be set (in ${this.legacyCloudConfigPath}).`);
      }
      result.resourcePoolUri = this.legacyCloudConfig.uuCloudResourcePoolUri;
    } else {
      if (!this.subAppConfig.resourcePoolUri || this.subAppConfig.resourcePoolUri === VALUE_PLACEHOLDER) {
        throw new Error(`Parameter $.uuSubApp.resourcePoolUri must be set (in ${this.subAppDescriptorPath}).`);
      }
      result.resourcePoolUri = this.subAppConfig.resourcePoolUri;
    }
    result.deployListFilePath = path.join(this.targetDir, "uucloud-deployment-list.json");
    result.oidcToken = this._getOidcToken();
    return result;
  }

  uuLogStoreConfig() {
    let result = {};
    if (this.legacyCloudConfig) {
      if (!this.legacyCloudConfig.uuCloudAppDeploymentUri) {
        throw new Error(`Parameter $.uuCloudAppDeploymentUri must be set (in ${this.legacyCloudConfigPath}).`);
      }
      result.appDeploymentUri = this.legacyCloudConfig.uuCloudAppDeploymentUri;
      if (this.legacyCloudConfig.uuLogStoreExport) {
        result.from = this.legacyCloudConfig.from;
        result.to = this.legacyCloudConfig.to;
      }
    } else {
      if (!this.devkitConfig || !this.devkitConfig.appDeploymentUri) {
        throw new Error(
          `Parameter ${this.devkitConfigPrefix}.appDeploymentUri must be set (in ${this.devkitConfigPath}).`
        );
      }
      result.appDeploymentUri = this.devkitConfig.appDeploymentUri;
      result.from = this.devkitConfig ? this.devkitConfig.logStoreExportFrom : null;
      result.to = this.devkitConfig ? this.devkitConfig.logStoreExportTo : null;
    }
    result.logFilePath = path.join(this.targetDir, "logs");
    result.logDirPath = this.targetDir;
    result.oidcToken = this._getOidcToken();
    result.env = this.environment;
    return result;
  }

  getQualifiedVersion(version = null) {
    if (!version) {
      version = this.projectVersion;
    }
    let match = null;
    if ((match = version.match(/(\.|\-)([a-zA-Z][a-zA-Z0-9]*)$/))) {
      let separator = match[1];
      let suffix = match[2];
      version = version.replace(`${separator}${suffix}`, "");
      version = `${version}-${suffix}.${this.timestamp}`;
    }
    return version;
  }

  generateCloudDescriptor() {
    let qualifiedVersion = this.getQualifiedVersion();
    let legacyDescriptorPath = this._getLegacyCloudDescriptorPath(this.environment);

    let cloudDescriptor;
    if (legacyDescriptorPath) {
      cloudDescriptor = JSON.parse(fs.readFileSync(legacyDescriptorPath));
      cloudDescriptor.data.version = qualifiedVersion;
    } else {
      let nameParts = this.projectName.split("-");
      let projectBasename = nameParts.slice(0, nameParts.length - 1).join("-");
      let projectCode = this.subAppConfig.code || projectBasename.toUpperCase().replace(/[\-_]/g, ".");
      let projectName =
        this.subAppConfig.name ||
        projectBasename.replace(/([\-_]\w)/g, function(match) {
          return match[1].toUpperCase();
        });
      cloudDescriptor = {};
      cloudDescriptor.schemaUri = DEFAULT_SCHEMA_URI;
      cloudDescriptor.data = {};
      cloudDescriptor.data.code = projectCode;
      cloudDescriptor.data.name = projectName;
      cloudDescriptor.data.version = qualifiedVersion;
      cloudDescriptor.data.urlPath = this.subAppConfig.route || projectCode.toLowerCase().replace(/[\-_\.]/g, "-");
      cloudDescriptor.data.multitenant = true;
      cloudDescriptor.data.packs = [];
      cloudDescriptor.data.nodeSets = [];

      let packs = {};
      let nodeSetMap = this.subAppConfig.uuAppNodeSetMap || {};
      Object.keys(nodeSetMap).forEach(function(nodeSetId) {
        let nodeSetCfg = nodeSetMap[nodeSetId];
        let packCode = `${projectCode}/CMD-PACK`; // More than one pack per project is not supported
        let containerCode = `${projectCode}/${nodeSetId.toUpperCase()}-CONTAINER`;
        let pack = packs[packCode] || {};
        pack.code = packCode;
        pack.targetNodeSets = pack.targetNodeSets || [];
        pack.targetNodeSets.push(containerCode);
        packs[packCode] = pack;
        let nodeSet = {};
        nodeSet.code = containerCode;
        nodeSet.nodeSize = nodeSetCfg.nodeSize;
        nodeSet.runtimeStack = nodeSetCfg.runtimeStack || DEFAULT_RUNTIME_STACK;
        if (nodeSetCfg.sppRoute) {
          nodeSet.urlPath = `${cloudDescriptor.data.urlPath}-${nodeSetCfg.sppRoute}`;
        }
        if (nodeSetCfg.nodeCount) {
          nodeSet.nodeCount = nodeSetCfg.nodeCount.max || nodeSetCfg.nodeCount.min;
        }
        cloudDescriptor.data.nodeSets.push(nodeSet);
      });
      Object.values(packs).forEach(pack => {
        cloudDescriptor.data.packs.push(pack);
      });
    }

    let descriptorPath = path.resolve(this.targetDir, `${this.projectName}-${qualifiedVersion}.json`);
    fs.writeFileSync(descriptorPath, JSON.stringify(cloudDescriptor, null, 2));
    return descriptorPath;
  }

  updateUuSubAppDescriptor() {
    if (!this.subAppDescriptorPath) {
      return;
    }
    let descriptor = JSON.parse(fs.readFileSync(this.subAppDescriptorPath));
    let nodeSetMap = descriptor.uuSubApp ? descriptor.uuSubApp.uuAppNodeSetMap : null;
    let cdnMap = descriptor.uuSubApp ? descriptor.uuSubApp.uuAppCdnMap : null;
    if (!nodeSetMap && !cdnMap) {
      return;
    }
    // Descriptor is generated during process, we have to update path...
    this.cloudDescriptorPath = this._getCloudDescriptorPath() || this._getLegacyCloudDescriptorPath(this.environment);
    let cloudDescriptor = this._getCloudDescriptor();
    let appPackageCode = this._getAppPackageCode(cloudDescriptor);
    let appPackUri = `${this._getAppBoxUri()}:${appPackageCode}`;
    let update = false;
    if (nodeSetMap) {
      Object.keys(nodeSetMap).forEach(function(nodeSetId) {
        let nodeSetCfg = nodeSetMap[nodeSetId];
        if (nodeSetCfg.appPackUri !== appPackUri) {
          nodeSetCfg.appPackUri = appPackUri;
          update = true;
        }
      });
    }
    if (cdnMap) {
      Object.keys(cdnMap).forEach(function(cdnId) {
        let cdnCfg = cdnMap[cdnId];
        if (cdnCfg.appPackUri !== appPackUri) {
          cdnCfg.appPackUri = appPackUri;
          update = true;
        }
      });
    }
    if (update) {
      fs.writeFileSync(this.subAppDescriptorPath, JSON.stringify(descriptor, null, 2));
    }
    return descriptor;
  }

  updateAsidDescriptor(uuSubAppDescriptor) {
    const asidDescriptors = this._getAsidDescriptors();
    if (!asidDescriptors || asidDescriptors.length == 0) {
      return;
    }

    let filledNodeSetMap = uuSubAppDescriptor.uuSubApp ? uuSubAppDescriptor.uuSubApp.uuAppNodeSetMap : null;
    if (!filledNodeSetMap) {
      return;
    }

    asidDescriptors.forEach(asidDescriptor => {
      let asidDescriptorJson = JSON.parse(fs.readFileSync(asidDescriptor.filePath));

      let update = false;
      const nodeSetMap = asidDescriptorJson.uuSubApp.uuAppNodeSetMap;
      Object.keys(nodeSetMap).forEach(function(nodeSetId) {
        let nodeSetCfg = filledNodeSetMap[nodeSetId];
        if (nodeSetCfg && nodeSetCfg.appPackUri !== nodeSetMap[nodeSetId].appPackUri) {
          nodeSetMap[nodeSetId].appPackUri = nodeSetCfg.appPackUri;
          update = true
        }
      });

      if (update) {
        fs.writeFileSync(asidDescriptor.filePath, JSON.stringify(asidDescriptorJson, null, 2));
      }
    });
  }

  storeAppDeploymentUri(uri) {
    if (this.legacyCloudConfig) {
      // Store to environment
      this.legacyCloudConfig.uuCloudAppDeploymentUri = uri;
      // Store persistently to configuration
      let deployConfig = JSON.parse(fs.readFileSync(this.legacyCloudConfigPath));
      deployConfig.uuCloudAppDeploymentUri = uri;
      fs.writeFileSync(this.legacyCloudConfigPath, JSON.stringify(deployConfig, null, 2));
    } else {
      // Store to environment
      if (this.devkitConfig) {
        this.devkitConfig.appDeploymentUri = uri;
      }
      // Store persistently to devkit configuration
      if (fs.existsSync(this.devkitConfigPath)) {
        let config = JSON.parse(fs.readFileSync(this.devkitConfigPath));
        let parts = this.devkitConfigPrefix.split(".").splice(1);
        let projectConfig = config[parts[0]];
        if (!projectConfig) {
          projectConfig = config[parts[0]] = {};
        }
        let devkitConfig = projectConfig[parts[1]];
        if (!devkitConfig) {
          devkitConfig = projectConfig[parts[1]] = {};
        }
        let envConfig = devkitConfig[parts[2]];
        if (!envConfig) {
          envConfig = devkitConfig[parts[2]] = {};
        }
        envConfig.appDeploymentUri = uri;
        fs.writeFileSync(this.devkitConfigPath, JSON.stringify(config, null, 2));
      }
    }
  }

  _getOidcToken() {
    if (!this.oidcToken) {
      this.oidcToken = new OidcToken(this.projectRoot, this.tokenFile);
    }
    return this.oidcToken;
  }

  _getAppPackagePath() {
    if (!this.appPackagePath) {
      let baseVersion = this.projectVersion.replace(/([\.\-][a-zA-Z][a-zA-Z0-9]*)\.[0-9]+/, (match, g1) => {
        return g1;
      });
      if (!fs.existsSync(this.targetDir)) {
        throw new Error(`App package does not exist at location ${this.targetDir}. Run [package] task to create it.`);
      }
      let files = fs
        .readdirSync(this.targetDir)
        .filter(fn => fn.match(new RegExp(`^${this.projectName}-${baseVersion}.*\.zip$`)));
      if (files.length == 0) {
        throw new Error(`App package does not exist at location ${this.targetDir}. Run [package] task to create it.`);
      }
      this.appPackagePath = path.resolve(this.targetDir, files.sort().pop());
    }
    return this.appPackagePath;
  }

  _getSubAppDescriptorPath(environment = "development") {
    let cfgPath = null;
    if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud-${environment}.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud-${environment}.json`)))) {
    } else {
      cfgPath = null;
    }
    return cfgPath;
  }

  _getCloudDescriptorPath() {
    let baseVersion = this.projectVersion.replace(/([\.\-][a-zA-Z][a-zA-Z0-9]*)\.[0-9]+/, (match, g1) => {
      return g1;
    });
    if (!fs.existsSync(this.targetDir)) {
      return null;
    }
    let files = fs
      .readdirSync(this.targetDir)
      .filter(fn => fn.match(new RegExp(`^${this.projectName}-${baseVersion}.*\.json`)));
    if (files.length > 0) {
      return path.resolve(this.targetDir, files.sort().pop());
    } else {
      return null;
    }
  }

  _getCloudDescriptor() {
    if (!this.cloudDescriptor) {
      if (!this.cloudDescriptorPath) {
        throw new Error("Missing uuCloud descriptor. Run [package] task to create it.");
      }
      this.cloudDescriptor = JSON.parse(fs.readFileSync(this.cloudDescriptorPath)).data;
    }
    return this.cloudDescriptor;
  }

  _getAppBoxUri() {
    let locationUri = null;
    if (this.legacyCloudConfig) {
      if (this.legacyCloudConfig.uuCloudAppBoxUri) {
        return this.legacyCloudConfig.uuCloudAppBoxUri;
      }
      if (!this.legacyCloudConfig.uuCloudAppBoxLocationUri) {
        throw new Error(
          `One of parameters $.uuCloudAppBoxLocationUri or $.uuCloudAppBoxUri must be set (in ${this.legacyCloudConfigPath}).`
        );
      }
      locationUri = this.legacyCloudConfig.uuCloudAppBoxLocationUri;
    } else {
      if (this.subAppConfig.appBoxUri) {
        return this.subAppConfig.appBoxUri;
      }
      if (
        !this.devkitConfig ||
        !this.devkitConfig.appBoxLocationUri ||
        this.devkitConfig.appBoxLocationUri === VALUE_PLACEHOLDER
      ) {
        throw new Error(
          `One of parameters $.uuSubApp.appBoxUri (in ${this.subAppDescriptorPath}) or ${this.devkitConfigPrefix}.appBoxLocationUri (in ${this.devkitConfigPath}) must be set.`
        );
      }
      locationUri = this.devkitConfig.appBoxLocationUri;
    }
    let cloudDescriptor = this._getCloudDescriptor();
    let territoryCode = this._getTerritoryCode(locationUri);
    let baseVersion = this.projectVersion.replace(/([\.\-][a-zA-Z][a-zA-Z0-9]*)\.[0-9]+/, (match, g1) => {
      return g1;
    });
    let appBoxCode = `${cloudDescriptor.code}/APPBOX-${baseVersion}`;
    return `ues:${territoryCode}:${appBoxCode}`;
  }

  _getReadmePath() {
    if (!this.readmePath) {
      if (fs.existsSync((this.readmePath = path.resolve(this.projectRoot, "README.md")))) {
      } else if (fs.existsSync((this.readmePath = path.resolve(this.projectRoot, "..", "README.md")))) {
      } else {
        this.readmePath = null;
      }
    }
    return this.readmePath;
  }

  _getTerritoryCode(uri) {
    let parsedUri = /^ues:([^:\[]+)(:|\[).*/.exec(uri);
    if (parsedUri == null || parsedUri[1] == null) {
      throw new Error(`Wrong format of UESURI. Can't resolve territory code: ${uri}`);
    }
    return parsedUri[1];
  }

  async _resolveAppUrl(awid = null) {
    if (!this.cloudDescriptor) this._getCloudDescriptor(); // I'm not sure if this can happen, probably not, but just to be sure
    let product = this.cloudDescriptor.urlPath;
    if (!awid) {
      let shareConfig = await this.uuShareConfig(false);
      awid = shareConfig.sharedAwids[shareConfig.sharedAwids.length - 1];
    }
    let workspace = `${awid}`;

    let gatewayUri = this.subAppConfig.targetSlot === "BETA" ? NORTH_GATEWAY_BETA_URI : NORTH_GATEWAY_URI;
    if (this.cloudDescriptor.nodeSets.length > 0) {
      const runtimeStack = this.cloudDescriptor.nodeSets[0].runtimeStack;
      if (runtimeStack && runtimeStack.match(/^UU.APPG01\/APPSERVER.*/)) {
        gatewayUri = this.subAppConfig.targetSlot === "BETA" ? WEST_GATEWAY_BETA_URI : WEST_GATEWAY_URI;
      }
    }

    return `${gatewayUri}/${product}/${workspace}`;
  }

  async _getTid() {
    if (!this.tid) {
      let resourcePoolUri = null;
      if (this.legacyCloudConfig) {
        if (!this.legacyCloudConfig.uuCloudResourcePoolUri) {
          throw new Error(`Parameter $.uuCloudResourcePoolUri must be set (in ${this.legacyCloudConfigPath}).`);
        }
        resourcePoolUri = this.legacyCloudConfig.uuCloudResourcePoolUri;
      } else {
        if (!this.subAppConfig.resourcePoolUri || this.subAppConfig.resourcePoolUri === VALUE_PLACEHOLDER) {
          throw new Error(`Parameter $.uuSubApp.resourcePoolUri must be set (in ${this.subAppDescriptorPath}).`);
        }
        resourcePoolUri = this.subAppConfig.resourcePoolUri;
      }
      let response;
      try {
        let appClient = new AppClient(this._getOidcToken());
        response = await appClient.exchange(
          CmdHelper.buildCmd2Url(
            appClient.c3BaseUri + "/uu-c3/AppDeployment/getResourcePoolCapacity/exec",
            resourcePoolUri
          ),
          "get"
        );
        this.tid = JSON.parse(response.body)
          .uri.split("[")[1]
          .split("]")[0];
      } catch (e) {
        throw new Error(`Unable to resolve tid: ${e}`);
      }
    }
    return this.tid;
  }

  _getAsidDescriptors() {
    const envFolderPath = path.resolve(this.projectRoot, "env");
    const result = [];
    if (!fs.existsSync(envFolderPath)) {
      return result;
    }

    fs.readdirSync(envFolderPath).forEach(file => {
      if (file.startsWith("asid-descriptor")) {
        const code = file.toUpperCase().replace(/-/g, "_").split(".")[0];
        const filePath = path.resolve(envFolderPath, file);
        result.push({ code, filePath });
      }
    });
    return result;
  }

  _getAppPackageCode(cloudDescriptor) {
    if (cloudDescriptor.packs.length > 0) {
      return cloudDescriptor.packs[0].code;
    } else {
      return `${cloudDescriptor.code}/CMD-PACK`;
    }
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  _getLegacyCloudConfigPath(environment = "development") {
    let cfgPath = null;
    if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud-config-${environment}.json`)))) {
    } else if (
      fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud_config_${environment}.json`)))
    ) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud_config_${environment}.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud-config_${environment}.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud-config.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud_config.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud-config.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud_config.json`)))) {
    } else {
      cfgPath = null;
    }
    return cfgPath;
  }

  _getLegacyCloudDescriptorPath(environment = "development") {
    let cfgPath = null;
    if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud-descriptor-${environment}.json`)))) {
    } else if (
      fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud_descriptor_${environment}.json`)))
    ) {
    } else if (
      fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud-descriptor-${environment}.json`)))
    ) {
    } else if (
      fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud_descriptor_${environment}.json`)))
    ) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud-descriptor.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "config", `uucloud_descriptor.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud-descriptor.json`)))) {
    } else if (fs.existsSync((cfgPath = path.resolve(this.projectRoot, "env", `uucloud_descriptor.json`)))) {
    } else {
      cfgPath = null;
    }
    return cfgPath;
  }
}

module.exports = UuCloudConfig;
