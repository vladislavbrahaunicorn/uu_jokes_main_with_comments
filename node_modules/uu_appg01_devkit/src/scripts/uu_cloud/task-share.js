const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");
const endOfLine = require('os').EOL;

const HEADERS = {
  "Accept": "application/json",
  "Content-type": "application/json"
};

const C3_SHARE_URI = "uu-c3/AppDeployment/share/exec";
const C3_SHARE_RESULT_URI = "uu-c3/AppDeployment/share/execAsyncStatus";
const C3_SHARE_LIST_URI = "uu-c3/AppDeployment/getAppShareList/exec";

class uuCloudShareTask {

  constructor(cloudConfig) {
    this.cloudConfig = cloudConfig;
    this.config = null;
    this.appClient = null;
  }

  async process() {
    this.config = await this.cloudConfig.uuShareConfig();
    this.appClient = new AppClient(this.config.oidcToken);

    console.log(endOfLine + `App deployment ${this.config.appDeploymentUri} is being shared to: ${this.config.sharedAwids}`);

    if (await this.checkShare()) {
      console.log("> The app deployment has been already successfully shared. No need to share it again.");
    } else {
      let taskUri = await this._runC3Share();
      await this._waitForResult(taskUri);
      console.log("App successfully shared.");
    }

    if (this.config.applicationUrl) {
      console.log(" => Application URL: " + this.config.applicationUrl);
    }
  }

  async _runC3Share() {
    let params = {
      territories: this.config.sharedUris
    };

    let result = await this.appClient.exchange(
      CmdHelper.buildCmd2Url(this.appClient.c3BaseUri + '/' + C3_SHARE_URI, this.config.appDeploymentUri),
      "post",
      JSON.stringify(params),
      HEADERS
    );

    return JSON.parse(result.body).taskUri;
  }

  async _waitForResult(taskUri) {
    console.log("> Waiting for app share...");

    let params = {
      taskUri: taskUri
    };

    let deployCheck = () => this.appClient.exchange(
      CmdHelper.buildCmd2Url(this.appClient.c3BaseUri + '/' + C3_SHARE_RESULT_URI, this.config.appDeploymentUri),
      "post",
      JSON.stringify(params),
      HEADERS
    );

    await CmdHelper.waitForC3Result(deployCheck);
  }


  async checkShare() {
    let result = await this.appClient.exchange(CmdHelper.buildCmd2Url(this.appClient.c3BaseUri + '/' + C3_SHARE_LIST_URI, this.config.appDeploymentUri),
      "get",
      null,
      HEADERS
    );
    const sharedList = JSON.parse(result.body);
    return this._isEverythingShared(this.config.sharedAwids, sharedList);
  }

  _isEverythingShared(awidsToShare, sharedList) {
    if ( !awidsToShare ) return true;
    if ( !sharedList || !sharedList.pageEntries ) return false;
    let awid, sharedAwids = [];
    for ( let item of sharedList.pageEntries ) {
      awid = item.territoryUri.split(":")[2].split("[")[0].split("-")[1];
      sharedAwids.push(awid)
    }
    for ( let awid of awidsToShare ) {
      if ( !sharedAwids.includes(awid) ) return false;
    }
    return true;
  }
}

module.exports = uuCloudShareTask;
