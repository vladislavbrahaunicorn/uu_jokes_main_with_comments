const fs = require("fs");
const path = require("path");
const CmdHelper = require("uu_appg01_devkit-common/src/scripts/misc/cmd-helper.js");
const AppClient = require("uu_appg01_devkit-common/src/scripts/misc/app-client.js");
const FormData = require("form-data");
const endOfLine = require("os").EOL;

const ARTIFACT_CREATE_URI = "ues/core/artifact/UESArtifact/create";
const ATTACHMENT_CREATE_URI = "ues/core/attachment/UESAttachment/create";
const ATTACHMENT_CHECK_IN_URI = "ues/core/attachment/UESAttachment/checkIn";
const SEARCH_URI = "ues/core/search/UESSearch/exists";

let Validator = null;
let ValidationHelper = null;
let AsidDescriptorError = null;
let ErrorConverter = null;

try {
  Validator = require("uu_appg01_core-validation").Validator;
  ValidationHelper = require("uu_appg01_core-appserver").ValidationHelper;
  UseCaseError = require("uu_appg01_core-appserver").UseCaseError;
  ErrorConverter = require("uu_appg01_core-appserver").ErrorConverter;

  AsidDescriptorError = {
    InvalidAsidDescriptor: class extends UseCaseError {
      constructor(dtoOut, paramMap = {}, cause = null) {
        if (paramMap instanceof Error) {
          cause = paramMap;
          paramMap = {};
        }
        super({ dtoOut, paramMap, cause, status: 400 });

        this.code = `uu-app-devkit/uuAppBox/invalidAsidDescriptor`;
        this.message = "Asid descriptor is not valid.";
      }
    }
  };
} catch (e) {
  // If subApp does not use the uu_appg01_core-validation library,
  // asid-descriptor files are uploaded without any validation.
  // The businness logic is in the _validateAsidDescriptors function.
}

class uuAppBoxTask {

  constructor(cloudConfig) {
    this.config = cloudConfig.uuAppBoxConfig();
    this.appClient = new AppClient(this.config.oidcToken);
  }

  async process() {
    await this._validateAsidDescriptors();

    let appBoxUri = this.config.appBoxUri;
    if (appBoxUri == null) {
      let exists = await this._checkIfExists(this.config.appBoxUriBuilt);
      if (exists) {
        console.log("Using existing uuAppBox " + this.config.appBoxUriBuilt);
        appBoxUri = this.config.appBoxUriBuilt;
      } else {
        appBoxUri = await this._createAppBox();
      }
    } else {
      console.log("Using uuAppBox from configuration: " + appBoxUri);
    }

    await this._uploadAsidDescriptors(appBoxUri);
    await this._uploadDescriptor(appBoxUri);
    await this._uploadLibraryRegistryDescriptor(appBoxUri);
    await this._uploadAppPackage(appBoxUri);
    await this._uploadReadme(appBoxUri);
  }

  async _createAppBox() {
    console.log(endOfLine + "Creating uuAppBox to " + this.config.appBoxLocationUri);

    let form = new FormData();
    form.append("name", this.config.appBoxName);
    form.append("code", this.config.appBoxCode);
    form.append("metaArtifactUri", this.config.appBoxMarUri);

    let appBoxUri;
    try {
      let response = await this.appClient.exchange(
        CmdHelper.buildCmdUrl(this.appClient.os8BaseUri + "/" + ARTIFACT_CREATE_URI, this.config.appBoxLocationUri),
        "post",
        form
      );
      appBoxUri = response.body.replace(/"/g, "");
    } catch (e) {
      if (e.code === "UU.OS/E10102.M03") {
        appBoxUri = this.config.appBoxUriBuilt;
        console.log("> uuAppBox already exists: " + appBoxUri);
      } else {
        throw e;
      }
    }

    return appBoxUri;
  }

  async _checkIfExists(appBoxUri) {
    let response;
    try {
      response = await this.appClient.exchange(
        CmdHelper.buildCmdUrl(this.appClient.os8BaseUri + "/" + SEARCH_URI, appBoxUri),
        "get"
      );
    } catch (e) {
      // some error, will be handled later -> continue with creating uuAppBox
    }

    return response && response.body === '"true"';
  }

  async _uploadAttachment(appBoxUri, code, dataPath) {
    let form = new FormData();
    form.append("code", code);
    form.append("data", fs.createReadStream(dataPath));

    let attUri;
    try {
      let response = await this.appClient.exchange(
        CmdHelper.buildCmdUrl(this.appClient.os8BaseUri + "/" + ATTACHMENT_CREATE_URI, appBoxUri),
        "post",
        form
      );

      attUri = response.body;
      console.log("> Attachment uploaded: " + attUri);
    } catch (e) {
      if (e.code === "UU.OS/E10400.M05") {
        console.log("> Attachment with code " + code + " already exists, updating...");
        attUri = `${appBoxUri}:${code}`;

        let form = new FormData();
        form.append("data", fs.createReadStream(dataPath));

        await this.appClient.exchange(
          CmdHelper.buildCmdUrl(this.appClient.os8BaseUri + "/" + ATTACHMENT_CHECK_IN_URI, attUri),
          "post",
          form
        );
        console.log("> Attachment updated: " + attUri);
      } else {
        throw e;
      }
    }
  }

  async _uploadDescriptor(appBoxUri) {
    console.log(`Uploading deployment descriptor ${this.config.cloudDescriptorPath}.`);
    let code = this.config.cloudDescriptorCode;
    let dataPath = this.config.cloudDescriptorPath;
    await this._uploadAttachment(appBoxUri, code, dataPath);
  }

  async _validateAsidDescriptors() {
    console.log(`Validating asid descriptors.`);

    for (let { filePath } of this.config.asidDescriptors) {

      const asidDescriptorJSON = JSON.parse(fs.readFileSync(filePath));

      if (Validator !== null) {
        const customValidator = new Validator(path.join(__dirname, ".", "validation_types", "asid-descriptor-types.js"));

        const validationResult = customValidator.validate('uuSubAppInstanceDescriptor', asidDescriptorJSON);
        try {
          ValidationHelper.processValidationResult(
            asidDescriptorJSON,
            validationResult,
            "AsidDescriptorHasUnsupportedKeys",
            AsidDescriptorError.InvalidAsidDescriptor
          );
        } catch (e) {
          throw new Error(`Invalid asid descriptor ${filePath}${endOfLine}` + JSON.stringify(ErrorConverter.buildErrorDtoOut(e).dtoOut, null, 2));
        }
        console.log(`> Content of ${filePath} was successfully validated.`);
      } else {
        console.warn(`> Missing uu_appg01_core-validation library. Content of ${filePath} is NOT validated.`);
      }
    }
  }

  async _uploadAsidDescriptors(appBoxUri) {
    for (let { code, filePath } of this.config.asidDescriptors) {
      console.log(`Uploading asid descriptor ${filePath}.`);
      await this._uploadAttachment(appBoxUri, code, filePath);
    }
  }

  async _uploadLibraryRegistryDescriptor(appBoxUri) {
    if (this.config.libraryDescriptorPath) {
      console.log(`Uploading uu5 library registry descriptor ${this.config.libraryDescriptorPath}.`);
      let code = this.config.libraryDescriptorCode;
      let dataPath = this.config.libraryDescriptorPath;
      await this._uploadAttachment(appBoxUri, code, dataPath);
    }
  }

  async _uploadAppPackage(appBoxUri) {
    console.log(`Uploading uuApp package ${this.config.appPackagePath}.`);
    let code = this.config.appPackageCode;
    let dataPath = this.config.appPackagePath;
    await this._uploadAttachment(appBoxUri, code, dataPath);
  }

  async _uploadReadme(appBoxUri) {
    if (this.config.readmePath) {
      console.log(`Uploading readme ${this.config.readmePath}.`);
      let code = this.config.readmeCode;
      let dataPath = this.config.readmePath;
      await this._uploadAttachment(appBoxUri, code, dataPath);
    } else {
      console.log("Warning: Readme file is missing");
    }
  }

}

module.exports = uuAppBoxTask;
