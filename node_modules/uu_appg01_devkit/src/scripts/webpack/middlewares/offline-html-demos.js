const fs = require("fs-extra");
const path = require("path");

const DEVKIT_ROOT = path.resolve(__dirname, "../../../..");
const BROWSER_BUILD_DIRS = ["dist", "umd", "cjs", "target/dist", "."]; // "." must be last (it always exists)

class TransformHtmlDemoMiddleware {
  constructor(devServerConfig, webpackConfig) {
    this.devServerConfig = devServerConfig;
    this.webpackConfig = webpackConfig;

    this.localCdnUrl = "/__uu_appg01_devkit/cdn/";
    this.remoteCdnUrl = ((devServerConfig || {}).uu5Environment || {}).cdnBaseUri || "https://cdn.plus4u.net/";
    this.fallbackCdnUrl = this.remoteCdnUrl;
    let firstWebpackConfig = Array.isArray(this.webpackConfig) ? this.webpackConfig[0] : this.webpackConfig;
    this.outputAbsPath = firstWebpackConfig.output.path;
    this._oneTimeWarnings = {};
  }
  process(request, response, next) {
    if (request.url.match(/\/(?:demo|doc)\/.*\.html(\?.*)?$/)) {
      let file = path.join(this.outputAbsPath, request.url.substr(1).replace(/\?.*/, ""));
      if (fs.existsSync(file)) {
        let html = fs.readFileSync(file, "utf-8");
        let modHtml = html;
        // // comment out setting of <base>
        // modHtml = modHtml.replace(/<script>(((?!<\/script>)(\s|\S))*<base(\s|\S)*?)<\/script>/, (m, g) => {
        //   return (
        //     "<script>" +
        //     g
        //       .split("\n")
        //       .map(it => "// " + it)
        //       .join("\n") +
        //     "</script>"
        //   );
        // });

        // change paths in demo pages to be local (to be able to develop offline)
        modHtml = modHtml.replace(/(['"])([^'"]+)/g, (m, g1, g2) => {
          if (g2.startsWith(this.remoteCdnUrl)) return g1 + this.localCdnUrl + g2.substr(this.remoteCdnUrl.length);
          return m;
        });

        // make in-browser-transpilation.js use our cdn root
        modHtml = modHtml.replace(
          /<script\s[^>]*?in-browser-transpilation\.[^>]*/g,
          m => m + ' data-cdn-root="' + this.localCdnUrl + '"'
        );

        // configure UU5.Environment.cdnBaseUri (after script linking uu5-environment.js or after <body> opening tag)
        modHtml = modHtml.replace(
          /<(?:body\b[^>]*>|script\s+src=['"][^'"]*uu5-environment\.js['"][^>]*>\s*<\/script>)/i,
          m => {
            let result = `${m}
<script>
  if (!window.UU5) window.UU5 = {};
  if (!window.UU5.Environment) window.UU5.Environment = {};
  window.UU5.Environment.cdnBaseUri = ${JSON.stringify(this.localCdnUrl)};
</script>`;
            return result;
          }
        );

        // write the file to the output and change URL to let other middlewares process
        // it (e.g. doc-middleware in uu5g04)
        let outFile = path.dirname(file) + "/.~offline/" + path.basename(file);
        fs.ensureDirSync(path.dirname(outFile));
        fs.writeFileSync(outFile, modHtml, "utf-8");

        request.url = request.url.replace(/^([^?#]*)\/(.*)$/, "$1/.~offline/$2");
      }
    }

    // serve files from local CDN from our lib/ folder
    if (request.url.startsWith(this.localCdnUrl)) {
      let relCdnPath = request.url.substr(this.localCdnUrl.length);

      // try to serve libraries from node_modules/ folder
      let libRelPath = relCdnPath.startsWith("libs/") ? relCdnPath.substr("libs/".length) : relCdnPath;
      let [libName, libVersion, ...fileParts] = libRelPath.split("/");
      let inLibFilePath = fileParts.join("/");
      let fsFilePath = this._getLibFileFromNodeModules(libName, libVersion, inLibFilePath);
      if (fsFilePath) {
        return response.sendFile(fsFilePath);
      } else if (this.fallbackCdnUrl) {
        return response.redirect(this.fallbackCdnUrl + relCdnPath);
      }
    }
    next();
  }

  _getLibFileFromNodeModules(cdnLibName, version, relFilePath) {
    let libName = cdnLibName.replace(/^uu-uu5/, "uu5");
    let libDir;
    for (let libNamePath of libNamePathGenerator(cdnLibName.replace(/^uu-uu5/, "uu5"))) {
      try {
        // exception for uu-appg01-templates/1.0.0/in-browser-transpilation.js
        if (libNamePath === "uu-appg01-template" || libNamePath === "uu-app-templateg01") {
          libDir = DEVKIT_ROOT;
          version = null;
        } else {
          libDir = path.dirname(require.resolve(libNamePath + "/package.json", { paths: [".", __dirname] }));
        }
        break;
      } catch (e) {
        // ignore
      }
    }
    let result;
    if (libDir) {
      if (version && !this._oneTimeWarnings["versionMatch-" + libName]) {
        let libPkg = require(path.resolve(libDir, "package.json"));
        let isVersionMatch;
        if (version.match(/\.0\.0$/)) {
          isVersionMatch = libPkg.version.replace(/\..*/, "") === version.replace(/\..*/, "");
        } else {
          isVersionMatch = libPkg.version === version;
        }
        if (!isVersionMatch) {
          this._oneTimeWarnings["versionMatch-" + libName] = true;
          console.warn(
            `Request for ${cdnLibName}/${version}/.../${path.basename(relFilePath)} - serving version ${
              libPkg.version
            } as no better offline match was found`
          );
        }
      }
      BROWSER_BUILD_DIRS.find(browserBuildDir => {
        let dirCandidate = path.join(libDir, browserBuildDir);
        if (fs.existsSync(dirCandidate)) {
          result = path.resolve(dirCandidate, relFilePath);
          result = result.replace(/([/\\]react(-dom)?)\.js$/, "$1.development.js");
          result = result.replace(/([/\\]react(-dom)?)\.min\.js$/, "$1.production.min.js");
          return true;
        }
      });
    }
    return result;
  }
}

function* libNamePathGenerator(libName) {
  for (let name of libNameGenerator(libName)) yield name;
  for (let name of libNameGenerator(libName)) yield DEVKIT_ROOT + "/../" + name;
}
function* libNameGenerator(libName) {
  yield libName;
  let underscoreLibName = libName.replace(/-/g, "_");
  if (underscoreLibName !== libName) yield underscoreLibName;
  let underscoreLibNameSingle = libName.replace(/-/, "_");
  if (underscoreLibNameSingle !== underscoreLibName) yield underscoreLibNameSingle;
}

module.exports = TransformHtmlDemoMiddleware;
