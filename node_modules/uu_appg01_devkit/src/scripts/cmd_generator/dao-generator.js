const path = require("path");
const { fileExists } = require("../../tools/helpers");
const util = require("util");
const fs = require("fs-extra");
const fs_readFile = util.promisify(fs.readFile);
const fs_writeFile = util.promisify(fs.writeFile);
const os = require("os");
const { processFile } = require("uu_appg01_devkit-common/src/tools/template-helpers.js");

const SCHEMA_REALIZATION = "schema_realization.json";
const PERSISTENCE = "persistence.json";

class DaoGenerator {

  constructor(context, executionQueue) {
    this.context = JSON.parse(JSON.stringify(context));
    this.configFile = context.sourceCodePath.endsWith("app") ? PERSISTENCE : SCHEMA_REALIZATION;
    this.isLib = this.configFile === SCHEMA_REALIZATION;
    this.configPath = path.join(context.sourceCodePath, "config", this.configFile);
    this.daoPath = path.join(context.sourceCodePath, "dao", `${context.classFile}-mongo.js`);
    this.appDaoTemplate = path.join(__dirname, "templates", "dao-app.js");
    this.libDaotemplate = path.join(__dirname, "templates", "dao-lib.js");
    this.executionQueue = executionQueue;
  }

  async execute() {
    // check if the config file exists at all
    if (!await fileExists(this.configPath)) {
      console.log(`Could not find persistence.json in ${this.configFile}`);
      process.exit(1);
    }

    // check if the DAO is by chance already defined
    let config;
    try {
      config = JSON.parse(await fs_readFile(this.configPath, "utf-8"));
    } catch (e) {
      console.log(`${this.configFile} doesn't contain a valid JSON`);
      process.exit(1);
    }
    if (await this._isDaoDefined(config)) {
      console.log(`DAO for entity "${this.context.entity}" is already defined within ${this.configFile}`);
      return;
    }

    // prepare new config file
    let newConfig = this._defineDao(config);
    if (!config) {
      return;
    }

    this.executionQueue.addEvent(async () => {
      // overwrite the original config with the new one
      console.log(`Mofifying ${this.configPath}`);
      await fs_writeFile(this.configPath, JSON.stringify(newConfig, null, 2), "utf-8");
    });

    // dao should not exist, as it would mean inconsistency in the project, but better check
    if (await fileExists(this.daoPath)) {
      let message = `Inconsistency in project: DAO for entity ${this.context.entity} was not defined in ${this.configFile}`;
      message = `${message}, but corresponding file ${this.daoPath} already exists`;
      console.log(message);
      process.exit(1);
    }

    // create the dao
    this.executionQueue.addEvent(async () => {
      console.log(`Creating ${this.daoPath}`);
      if (this.isLib) {
        await processFile(this.libDaotemplate, this.daoPath, this.context);
      } else {
        await processFile(this.appDaoTemplate, this.daoPath, this.context);
      }
    });
  }

  _defineDao(config) {
    if (this.isLib) {
      let pathSplit = this.context.sourceCodePath.split(path.sep);
      let storeDef = `${pathSplit[pathSplit.length - 2]}:dao/${this.context.className}Mongo`;
      config[this.context.entity] = { realizationMap: { MongoDB: storeDef } };
    } else {
      // config.uuSubAppDataStore existence was already checked, so this can be done
      let primaryStore = config.uuSubAppDataStore.primary;
      if (!primaryStore) {
        console.log(`Could not find "primary" data store`);
        return;
      }
      let schemaMap = primaryStore.schemaMap;
      if (!schemaMap) {
        console.log(`"primary" data store does not have a "schemaMap"`);
        return;
      }
      schemaMap[this.context.entity] = { realization: `dao/${this.context.className}Mongo` };
    }
    return config;
  }

  async _isDaoDefined(config) {
    if (this.isLib) {
      return Object.keys(config).indexOf(this.context.entity) !== -1;
    } else {
      let uuSubAppDataStore = config.uuSubAppDataStore;
      if (!uuSubAppDataStore) {
        console.log(`${this.configFile} does not contain mandatory uuSubAppDataStore`);
        process.exit(1);
      }
      let stores = Object.keys(uuSubAppDataStore);
      for (let storeName of stores) {
        let storeConfig = uuSubAppDataStore[storeName];
        if (!storeConfig.schemaMap) {
          continue;
        }
        if (Object.keys(storeConfig.schemaMap).indexOf(this.context.entity) !== -1) {
          return true;
        }
      }
      return false;
    }
  }

}

module.exports = DaoGenerator;
