const util = require("util");
const { Parser } = require("acorn");
const path = require("path");
const fs = require("fs-extra");
const fs_readFile = util.promisify(fs.readFile);
const fs_writeFile = util.promisify(fs.writeFile);
const fs_appendFile = util.promisify(fs.appendFile);
const { fileExists } = require("../../tools/helpers");
const os = require("os");

class ValidationTypesGenerator {

  constructor(context, executionQueue) {
    let ctx = JSON.parse(JSON.stringify(context));
    this.validationType = ctx.validationType;
    this.validationContext = ctx.validations;
    this.validationTypesPath = path.normalize(`${context.sourceCodePath}/api/validation_types/${context.classFile}-types.js`);
    this.executionQueue = executionQueue;
  }

  async execute(onlyCreateFile = false) {

    if (onlyCreateFile) {
      if (!await fileExists(this.validationTypesPath)) {
        this.executionQueue.addEvent(async () => {
          console.log(`Creating ${this.validationTypesPath}`);
          await fs_writeFile(this.validationTypesPath, `/* eslint-disable */${os.EOL}`);
        });
      } else {
        console.log(`File ${this.validationTypesPath} already exists`);
      }
    } else {
      await this._executeOld();
    }

  }

  // backwards compatibility (i.e. no one will ever call this)
  async _executeOld() {
    if (!this.validationContext) {
      console.log("Skipping validations since there are none");
      return;
    }

    if (await fileExists(this.validationTypesPath)) {
      console.log(`Checking contents of ${this.validationTypesPath}`);
      let sourceCode = await fs_readFile(this.validationTypesPath, "utf-8");
      let parsedSourceCode = Parser.parse(sourceCode, { sourceType: "module" });
      for (let konst of parsedSourceCode.body) {
        try {
          let constName = konst.declarations[0].id.name;
          if (this.validationType === constName) {
            console.log(`File ${this.validationTypesPath} already contains constant ${constName}`);
            process.exit(1);
          }
        } catch (e) {
          // there was something else than only constants in the validation schema file
          console.log(`Corrupt file ${this.validationTypesPath} file with only constants is expected`, e);
          process.exit(1);
        }
      }

      // 2) append to file
      this.executionQueue.addEvent(async () => {
        console.log(`Modifying ${this.validationTypesPath}`);
        await fs_appendFile(this.validationTypesPath, `${os.EOL}${this.validationContext}`);
      });
    } else {
      // there could probably be a template for this, but it would be so bare it's not really worth (just like this
      // lengthy comment)
      let valTypes = `/* eslint-disable */${os.EOL}${os.EOL}${this.validationContext}`;
      this.executionQueue.addEvent(async () => {
        console.log(`Creating ${this.validationTypesPath}`);
        await fs_writeFile(this.validationTypesPath, valTypes);
      });
    }
  }

}

module.exports = ValidationTypesGenerator;
