const fs = require("fs");
const path = require("path");

const paths = require("../config/paths.js");

module.exports = class GeneratePersistenceJson {

  constructor(config) {
    this.config = config;
    this.debug = this.config.get("debug");
  }

  process() {
    let PersistenceConfig;
    try {
      PersistenceConfig = require("uu_appg01_datastore").PersistenceConfig;
    } catch (e) {
      if (this.debug) {
        console.log("Warning: Library uu_appg01_datastore not found. Persistence.json will not be merged.", e);
      }
      return;
    }

    if (!PersistenceConfig || !Object.getOwnPropertyDescriptor(Object.getPrototypeOf(PersistenceConfig), 'schemas')) {
      if (this.debug) {
        console.log("Warning: You are not using latest version of the uu_appg01_datastore. Persistence.json will not be merged.");
      }
      return;
    }

    console.log("Merging persistence.json of the application and libraries...");

    try {
      const { Config } = require("uu_appg01_core-utils");
      Config.set("server_root", process.cwd());
      PersistenceConfig.buildConnectionString = false;
      const { schemas, dataStores, maxNoa, primaryDataStore } = PersistenceConfig;
      const mergedPersistence = this._generatePersistenceJson(schemas, dataStores, maxNoa, primaryDataStore);
      if (!fs.existsSync(paths.buildDir)) {
        fs.mkdirSync(paths.buildDir);
      }
      let persistencePath = path.join(paths.buildDir, "persistence.json");
      fs.writeFileSync(persistencePath, JSON.stringify(mergedPersistence, null, 2), "utf-8");

      console.log("> Merged persistence.json saved to: " + persistencePath);
    } catch (e) {
      if (this.debug) {
        console.log("> Unable to merge persistence.json. ", e);
      } else {
        console.log("> Unable to merge persistence.json."
          + "Merged configuration is for informational purposes only and has no effect on the build process. For more information about the error run this task with -- --debug parameter.");
      }
    }
  }

  _generatePersistenceJson(schemas, dataStores, maxNoa, primary) {
    const uuSubAppDataStore = {};

    schemas.forEach((schemaConfig, schemaName) => {
      const dataStoreName = schemaConfig.dataStore
      if (!uuSubAppDataStore[dataStoreName]) {
        const dataStore = dataStores.get(dataStoreName);
        dataStore.schemaMap = {};
        uuSubAppDataStore[dataStoreName] = dataStore;
      }
      const schemaMap = uuSubAppDataStore[dataStoreName].schemaMap;
      const { realization, maxNoi, maxSoi, maxSob, extraAttrs } = schemaConfig;
      schemaMap[schemaName] = {
        realization, maxNoi, maxSoi, maxSob, ...extraAttrs
      };
    });

    return {
      maxNoa,
      primary,
      uuSubAppDataStore
    }
  }

};
