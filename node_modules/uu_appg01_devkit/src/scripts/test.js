const fs = require("fs");
const path = require("path");
const shell = require("shelljs");
const depcheck = require("depcheck");

const paths = require("../config/paths.js");
const helpers = require("../tools/helpers.js");
const depcheckOptions = require("../config/depcheck-options.js");
const ProjectConfig = require("uu_appg01_devkit-common/src/config/project-config.js");
const Package = require("uu_appg01_devkit-common/src/tools/package.js");

// TODO Optimization - try to use only transpilation of "import" statements instead of full ES5.

module.exports = class Test {
  constructor(config) {
    this.config = config;
  }
  async process() {
    console.log(`Running tests.`);
    this.config.setMode("test");
    let templateType = helpers.getTemplateInfo().type;

    // some libraries (uu5g04, plus4u5g01, those with -bricks, ...) needs to override
    // moduleNameMapper (path to self) => merge options with the ones in package.json
    let pkg = Package.getSingletonSync("package.json").get();
    let jestConfigArgs = [pkg];
    let jestRuntimeEnvironment = this.config.get("jestRuntimeEnvironment");
    let useBrowserSettings = jestRuntimeEnvironment
      ? jestRuntimeEnvironment === "browser"
      : templateType.startsWith("uu5-");
    if (useBrowserSettings) {
      let devConfig = new ProjectConfig({ ...this.config, mode: "development" });
      require("./webpack/runner.js").mergeBuildConfig(devConfig);
      jestConfigArgs.push(
        require("../config/webpack.config.js").getFromConfig(devConfig.getAll()),
        paths.buildDir,
        templateType !== "lib"
      );
    }
    let configFile = `${__dirname}/../config/${useBrowserSettings ? "jest.config.browser.js" : "jest.config.js"}`;
    let testConfig = require(configFile)(...jestConfigArgs);

    let jestUsedConfigFile = path.join(paths.buildDir, "jest.config.js");
    shell.mkdir("-p", path.dirname(jestUsedConfigFile));
    fs.writeFileSync(
      jestUsedConfigFile,
      String.raw`// workaround for pnpm which generates NODE_PATH into node_modules\.bin\*.cmd files
// - without it debugging wouldn't work because the resolving of files would behave differently when
// run via "npm test" (cmd line) vs. "node node_modules\...\jest-cli\bin\jest.js" (IDE debug)
require("${pkg.name === "uu_appg01_devkit" ? ".." : "uu_appg01_devkit"}/src/config/jest-pnpm-node-path-fix.js");

module.exports = ${JSON.stringify(testConfig, null, 2)}`,
    "utf-8"
    );

    let coverage =
      this.config.get("coverage") == null ? !templateType.startsWith("uu5") : !!this.config.get("coverage");

    // filter additional arguments
    const INVALID_FLAGS = /^(-c|--no-coverage|--coverage)$|^--config/;
    let extraArgs = this.config.toCommandLineArgs();
    extraArgs = extraArgs.filter(arg => !INVALID_FLAGS.test(arg));

    if (coverage) {
      if (path.resolve(".", helpers.npmScriptBinFile("nyc")).match(/[ ]/)) {
        // TODO How to make it work? It fails with:
        // Error: Cannot find module '/path/part/before/space'
        // at Function.Module._resolveFilename (module.js:548:15)
        // at Function.Module._load (module.js:475:25)
        // at Function.Module.runMain (module.js:694:10)
        // at runMain (/home/uni430/.node-spawn-wrap-16050-407d91d76847/node:68:10)
        // at Function.<anonymous> (/home/uni430/.node-spawn-wrap-16050-407d91d76847/node:171:5)
        // at Object.<anonymous> (/home/work/tmp/devkittest/spaced fld/uu_jokesg01_main-server/node_modules/nyc/bin/wrap.js:23:4)
        console.log("WARNING: Test coverage disabled (not supported for projects with spaces in path)");
        let jest = require("jest");
        let args = [`--config=${jestUsedConfigFile}`, "--passWithNoTests"].concat(extraArgs);
        await jest.run(args);
      } else {
        let coverageOutputDir = path.join(paths.buildDir, "coverage", ".nyc_output");
        let coverageReportDir = path.join(paths.buildDir, "coverage");
        console.log("With coverage enabled.");
        let nycExcludes = [
          // defaults
          "coverage/**",
          "test/**",
          "test{,-*}.js",
          "**/*.test.js",
          "**/__tests__/**",
          "**/node_modules/**",
          // our own - ignore target/ (filters out e.g. jest.config.js)
          paths.buildDir + "/**"
        ];
        const child_process = require("child_process");
        child_process.spawnSync(
          [
            // NOTE For some reason the path must be relative, otherwise the list of files
            // that are shown in index.html includes only target/jest.config.js...
            path.relative(".", helpers.npmScriptBinFile("nyc")),
            `--temp-dir=${coverageOutputDir}`,
            `--silent`,
            "--hook-run-in-context",
            `--clean`,
            ...nycExcludes.map(it => `"--exclude=${it}"`),
            // NOTE pnpm+jest has an issue with damaged jest.cmd on Windows (due to jest & jest-cli writing
            // to the same jest.cmd during install?); probably same as yarn's https://github.com/yarnpkg/yarn/issues/2356#issuecomment-277553871
            // helpers.npmScriptBinFile("jest"),
            `node`,
            require.resolve("jest-cli/bin/jest.js"),

            `--config=${jestUsedConfigFile}`,
            "--coverage",
            "--passWithNoTests"
          ].concat(extraArgs).join(" "),
          {shell: true, cwd: process.cwd(), stdio: "inherit"},
        );
        console.log(`Generating coverage report (file://${path.resolve(".", coverageReportDir)}${path.sep}index.html).`);
        child_process.spawnSync(
          [
            path.relative(".", helpers.npmScriptBinFile("nyc")),
            "report",
            "--reporter=html",
            `--report-dir=${coverageReportDir}`,
            `--temp-dir=${coverageOutputDir}`,
          ].join(" "),
          {shell: true, cwd: process.cwd(), stdio: "inherit"},
        );
      }
    } else {
      let jest = require("jest");
      let args = [`--config=${jestUsedConfigFile}`, "--passWithNoTests"].concat(extraArgs);
      await jest.run(args);
    }

    if (!useBrowserSettings) {
      let depResult = await depcheck(shell.pwd().toString(), depcheckOptions);
      if (Object.keys(depResult.missing).length) {
        console.log("\nWARNING Project is not pnpm compatible (relies on transitive dependencies)!");
        console.log(`\tMissing dependencies: ${Object.keys(depResult.missing)}\n`);
      }
    }
  }
};
