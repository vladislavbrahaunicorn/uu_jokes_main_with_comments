const path = require("path");
const semver = require("semver");

const helpers = require("../tools/helpers.js");
const Package = require("uu_appg01_devkit-common/src/tools/package.js");

module.exports = class ProjectUpdate {
  constructor(config) {
    this.config = config;
  }
  static checkDevkitVersion() {
    let isDependency = path.basename(path.resolve(__dirname, "..", "..", "..")) === "node_modules";
    let templateInfo = helpers.getTemplateInfo();
    let { specVersion } = templateInfo;
    let devkitPack = Package.getSingletonSync(path.join(__dirname, "..", "..", "package.json"));
    let { version: devkitVersion } = devkitPack.get();
    let result = semver.eq(specVersion, devkitVersion) ? 0 : semver.gt(specVersion, devkitVersion) ? 1 : -1;
    // TODO Compute "needsUpgrade" properly.
    let needsUpgrade =
      result < 0 &&
      (semver.major(specVersion) < semver.major(devkitVersion) ||
        semver.minor(specVersion) < semver.minor(devkitVersion));
    return {
      needsUpgrade,
      specToDevkitComparison: result, // -1 / 0 / 1 (-1 means spec < installed devkit, i.e. might need migration)
      devkitVersion,
      specVersion,
      isDependency
    };
  }
  static showWarnings() {
    let {
      needsUpgrade,
      specToDevkitComparison,
      specVersion,
      devkitVersion,
      isDependency
    } = ProjectUpdate.checkDevkitVersion();
    if (!isDependency) return false;
    let hasWarning = false;
    if (needsUpgrade) {
      console.warn(`Project needs upgrade because of newer version of devkit. Run:
  npm run projectUpdate`);
      hasWarning = true;
    } else if (specToDevkitComparison > 0) {
      console.warn(
        `Project is already using newer devkit (${specVersion}) than your locally installed one (${devkitVersion}). Delete your node_modules/ and run "pnpm install".`
      );
      hasWarning = true;
    }
    return hasWarning;
  }
  async process() {
    let { needsUpgrade, specToDevkitComparison, specVersion, devkitVersion } = ProjectUpdate.checkDevkitVersion();
    let templateInfo = helpers.getTemplateInfo();

    if (specToDevkitComparison === 0) {
      console.log("Project is already up to date.");
      return;
    }
    if (specToDevkitComparison > 0) {
      console.warn(
        `Project is already using newer devkit (${specVersion}) than your locally installed one (${devkitVersion}). Delete your node_modules/ and run "pnpm install".`
      );
      return;
    }

    // run upgrades
    if (needsUpgrade) {
      console.log("TODO Do the actual upgrades (no upgrades implemented yet)...");
    }

    // update spec
    let newSpec = helpers.getSpecString({ ...templateInfo, specVersion: devkitVersion });
    let pack = await Package.getSingleton("package.json");
    await pack.load(); // reload from disk because upgrades could have changed package.json
    pack.set({
      ...pack.get(),
      spec: newSpec
    });
    await pack.save();

    console.log(`Project updated successfully (${specVersion} => ${devkitVersion}), commit the changes.`);
  }
};
