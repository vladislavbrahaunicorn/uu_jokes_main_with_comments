function getMemberName(node) {
  if (!node) return null;
  if (node.type === "Identifier") {
    return node.name == null ? null : node.name + "";
  } else if (node.type === "StringLiteral" || node.type === "NumericLiteral") {
    return node.value == null ? null : node.value + "";
  }
}

/**
 * Recognizes MemberExpression-s, Identifier-s, StringLiteral-s and NumericLiteral-s
 * and returns them in an array.
 *
 * @param {*} node AST node
 * @return E.g. ["UU5", "Common", "Component", "create"] if node is "MemberExpression" with such values. Null if not recognized.
 */
function getMemberNames(node) {
  if (!node) return null;
  if (node.type === "MemberExpression") {
    let name = getMemberName(node.property);
    let names = getMemberNames(node.object);
    if (names == null || name == null) return null;
    names.push(name + "");
    return names;
  } else {
    let name = getMemberName(node);
    return name != null ? [name] : null;
  }
}

function objectToInterface(value, keepLiteralValues = false) {
  value.properties.forEach(it => {
    if (it) {
      if (!it.value) it.value = {};
      if (typeof it.value.optional !== "boolean") it.value.optional = true;
    }
  });
  if (!keepLiteralValues) renameLiteralValuesToInitialValues(value);
  value.type = "interface";
  return value;
}

function renameLiteralValuesToInitialValues(value) {
  if (!value) return value;
  if (value.type === "number" || value.type === "string" || value.type === "boolean") {
    if (value.value !== undefined) value.initialValue = value.value;
    delete value.value;
  } else if (value.type === "object") {
    if (Array.isArray(value.properties)) {
      value.properties.forEach(prop => renameLiteralValuesToInitialValues(prop));
    }
  }
  return value;
}

module.exports = {
  getMemberName,
  getMemberNames,
  objectToInterface,
  renameLiteralValuesToInitialValues
};
