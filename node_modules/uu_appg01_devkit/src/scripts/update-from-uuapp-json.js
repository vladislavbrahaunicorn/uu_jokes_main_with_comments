const path = require("path");
const fs = require("fs");

const Package = require("uu_appg01_devkit-common/src/tools/package.js");

module.exports = class UpdateFromUuappJson {

  constructor(config) {
    this.config = config;
  }

  async process() {
    let {version, description, license} = this.config.getAll();
    let updated = false;
    let pack;

    // update version
    if (version != null) {
      pack = Package.getSingletonSync("package.json");
      if (pack.get().version !== version) {
        pack.merge({version});
        updated = true;
      }
    }

    // update description
    if (description && typeof description === "object") description = description.en;
    if (description != null) {
      if (!pack) pack = Package.getSingletonSync("package.json");
      if (pack.get().description !== description) {
        pack.merge({description});
        updated = true;
      }
    }

    // update license
    if (license != null) {
      pack = Package.getSingletonSync("package.json");
      if (pack.get().license !== license) {
        pack.merge({license});
        updated = true;
      }
    }

    if (updated) {
      pack.saveSync();
      delete require.cache[require.resolve(path.resolve("package.json"))];
    }

    // Update uuSubApp descriptors
    let configDir = path.resolve(".", "env");
    if (!fs.existsSync(configDir)) {
      configDir = path.resolve(".", "config");
    }
    if (fs.existsSync(configDir)) {
      let descriptorCandidates = fs.readdirSync(configDir).filter(fn => fn.match(new RegExp("\\.json$")));
      descriptorCandidates.forEach(function (descriptorPath) {
        descriptorPath = path.resolve(configDir, descriptorPath);
        let descriptor = JSON.parse(fs.readFileSync(descriptorPath));
        if (!descriptor.uuSubApp) {
          // It is some other configuration file and not uuSubApp descriptor
          return;
        }
        updated = false;
        if (version && descriptor.uuSubApp.version !== version) {
          descriptor.uuSubApp.version = version;
          updated = true;
        }
        if (description && descriptor.uuSubApp.description !== description) {
          descriptor.uuSubApp.description = description;
          updated = true;
        }
        if (license && descriptor.uuSubApp.license !== license) {
          descriptor.uuSubApp.license = license;
          updated = true;
        }
        if (updated) {
          fs.writeFileSync(descriptorPath, JSON.stringify(descriptor, null, 2));
        }
      });
    }
  }

};
