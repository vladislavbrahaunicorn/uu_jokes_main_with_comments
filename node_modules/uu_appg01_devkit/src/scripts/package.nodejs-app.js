const fs = require("fs");
const path = require("path");
const shell = require("shelljs");

const paths = require("../config/paths.js");
const zip = require("../tools/zip.js");
const UuCloudConfig = require("./uu_cloud/uu-cloud-config");
const Pack = require("uu_appg01_devkit-common/src/tools/package.js");

module.exports = class Package {

  constructor(config) {
    this.config = config;
  }

  async process() {
    // Ensure project is built before packaging
    shell.exec("npm run --loglevel=error build -- " + this.config.toCommandLineArgs().join(" ")); // TODO Escaping.
    Pack.getSingletonSync("package.json").loadSync(); // reload as version might have changed

    let pkg = Pack.getSingletonSync("package.json").get();
    let uuCloudConfig = new UuCloudConfig(path.resolve("."), pkg.name, pkg.version, paths.buildDir, this.config);

    console.log("Creating uuCloud descriptor.");
    let descriptorPath = uuCloudConfig.generateCloudDescriptor();
    const uuSubAppDescriptor = uuCloudConfig.updateUuSubAppDescriptor();
    uuCloudConfig.updateAsidDescriptor(uuSubAppDescriptor);

    console.log("  " + descriptorPath);

    console.log("Creating App package.");
    let projectName = pkg.name;
    let projectVersion = uuCloudConfig.getQualifiedVersion();
    let qualifiedAppName = `${projectName}-${projectVersion}`;
    let appPackagePath = path.join(paths.buildDir, `${qualifiedAppName}.zip`);
    await zip(appPackagePath, appPackage => {
      // TODO Read files to be packed from package.json
      appPackage.file("app.js", {name: `${qualifiedAppName}/app.js`});
      appPackage.file("package.json", {name: `${qualifiedAppName}/package.json`});
      appPackage.directory("app/", `${qualifiedAppName}/app`);
      if (fs.existsSync("./config")) {
        appPackage.directory("config/", `${qualifiedAppName}/config`);
      }
      if (fs.existsSync("./env")) {
        appPackage.directory("env/", `${qualifiedAppName}/env`);
      }
      if (fs.existsSync("./public")) {
        appPackage.directory("public/", `${qualifiedAppName}/public`);
      }
      if (fs.existsSync(".npmrc")) {
        appPackage.file(".npmrc", {name: `${qualifiedAppName}/.npmrc`});
      }
    });
    console.log("  " + appPackagePath);
  }

};
