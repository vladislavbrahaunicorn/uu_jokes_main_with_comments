const fs = require("fs");
const path = require("path");

function loadConfiguration(environment, project = null) {
  // Find configuration file based on environment
  if (!project) {
    project = path.resolve(".");
  }
  let result = {};
  let environments = (environment || "development").split(",");
  for (let env of environments.reverse()) {
    env = env.trim();
    let configFile = path.join(project, 'env', `${env}.json`);
    if (!fs.existsSync(configFile)) {
      configFile = path.join(project, 'config', `${env}.json`);
      if (!fs.existsSync(configFile)) {
        configFile = path.join(project, 'env', `${env}.properties`);
        if (!fs.existsSync(configFile)) {
          configFile = path.join(project, 'config', `${env}.properties`);
        }
      }
    }
    if (!fs.existsSync(configFile)) {
      continue;
    }
    // Load configuration
    let partialResult = null;
    if (configFile.endsWith(".json")) {
      partialResult = JSON.parse(fs.readFileSync(configFile));
    } else {
      partialResult = {};
      sourceData = fs.readFileSync(configFile);
      sourceData = sourceData.replace(/\r\n?/g, "\n");
      let splitData = sourceData.split("\n");
      splitData.forEach(function (line) {
        line = line.trim();
        if (/^[#!]/.test(line)) {
          return;
        }
        let splitLine = line.split(/[=:](.*)/, 2);
        let name = splitLine[0];
        let value = splitLine[1];
        if (name === null) {
          return;
        }
        name = name.trim();
        if (name.length === 0) {
          return;
        }
        if (value === undefined) {
          value = null;
        } else {
          value = value.trimLeft();
          try {
            value = JSON.parse(value.trim());
          } catch (err) {
            // do nothing
          }
        }
        partialResult[name] = value;
      });
    }
    result = Object.assign(result, partialResult);
  }
  return result;
}

module.exports = {
  loadConfiguration
};
