const jestResolve = require("jest-resolve");
const fs = require("fs");
const path = require("path");

const paths = require("./paths.js");
const helpers = require("../tools/helpers.js");

let aliases = undefined;
let checkBrowserFiles = helpers.getTemplateInfo().type === "lib";

// https://facebook.github.io/jest/docs/en/configuration.html#resolver-string
module.exports = function(name, options) {
  if (aliases === undefined) {
    let aliasesStr = fs.readFileSync(path.join(paths.buildDir, "jest-webpack-aliases.json"), "utf-8");
    aliases = JSON.parse(aliasesStr);
  }

  // handle webpack aliases in source files of this library / app
  if (aliases[name] && !options.basedir.match(/node_modules/)) return aliases[name];

  // use identity-obj-proxy module for CSS & Less files (in case something is using CSS Modules)
  if (name.match(/\.(css|less)$/)) return require.resolve("identity-obj-proxy");

  // ignore image imports
  if (name.match(/\.(png|svg|gif|jpg|jpeg|ico)$/)) {
    return require.resolve("uu_appg01_devkit/src/config/jest-misc/empty-object");
  }

  // try standard then fallback to using resolved soft/hard links (jest resolver doesn't count
  // with them and they're used when using pnpm) and try jest resolver again
  let result = tryResolve(name, options);
  if (!result) {
    options.basedir = toRealPath(options.basedir);
    options.paths = options.paths && options.paths.map(it => toRealPath(it));
    result = tryResolve(name, options);
  }
  return result;
};

function toRealPath(pth) {
  if (fs.existsSync(pth)) return fs.realpathSync(pth);
  return pth;
}

function tryResolve(name, options) {
  let result;

  // use .browser.js file if available
  if (checkBrowserFiles && name.startsWith(".")) {
    let browserName = path.dirname(name) + "/" + name.replace(/(\.js)?$/, ".browser.js");
    result = jestResolve.findNodeModule(browserName, options);
  }

  // fallback to default jest resolver
  if (!result) {
    result = jestResolve.findNodeModule(name, options);

    // fallback to resolving against uu_appg01_devkit node_modules (required for enzyme)
    if (!result) {
      let uu5ScriptsBaseDir = path.resolve(__dirname, "..", "..");
      result = jestResolve.findNodeModule(name, Object.assign({}, options, { basedir: uu5ScriptsBaseDir }));

      // fallback to resolving against current directory - this is needed when project
      // uses relative FS path to uu_appg01_devkit (importing React in jest-setup.js would fail otherwise)
      if (!result) {
        let curDir = path.resolve(".");
        if (!options || options.basedir !== curDir) {
          result = jestResolve.findNodeModule(name, Object.assign({}, options, { basedir: curDir }));

          // in case of react & other basic ones fallback to resolving against uu5g04 module
          // ("react" is imported from "enzyme" which is in jest-setup.react.js here in devkit, even though
          // neither devkit nor enzyme has direct dependency on react)
          if (
            !result &&
            name.match(/^(react|react-dom|create-react-class|prop-types)(\/.*|)$/) &&
            fs.existsSync("node_modules/uu5g04/package.json")
          ) {
            result = jestResolve.findNodeModule(
              name,
              Object.assign({}, options, { basedir: path.resolve("node_modules/uu5g04") })
            );
          }
        }
      }
    }
  }

  return result;
}
