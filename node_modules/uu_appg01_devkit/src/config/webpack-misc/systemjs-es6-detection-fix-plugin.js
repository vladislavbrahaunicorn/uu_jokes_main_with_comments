// this plugin replaces ES6-like "import ..." and "export ..." statements from comments in a built .js file
// because SystemJS loader gets confused due to those when performing auto-detection of format of a loaded module
// (and as a result it tries to transpile the file in the browser which ends with JS error)

// const { ConcatSource, RawSource } = require("webpack-sources");

// taken from https://github.com/systemjs/systemjs/blob/0.19.47/dist/system.src.js  :3532
const esmRegExp = /(^\s*|[}\);\n]\s*)(import\s*(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s*from\s*['"]|\{)|export\s+\*\s+from\s+["']|export\s*(\{|default|function|class|var|const|let|async\s+function))/;
const esmRegExpG = /(^\s*|[}\);\n]\s*)(import\s*(['"]|(\*\s+as\s+)?[^"'\(\)\n;]+\s*from\s*['"]|\{)|export\s+\*\s+from\s+["']|export\s*(\{|default|function|class|var|const|let|async\s+function))/g;

class SystemjsEs6DetectionFixPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    compiler.hooks.compilation.tap("SystemjsEs6DetectionFixPlugin", compilation => {
      compilation.hooks.optimizeAssets.tap("SystemjsEs6DetectionFixPlugin", assets => {
        if (!assets || typeof assets !== "object") return;
        for (let name in assets) {
          if (name.match(/(^|[/\\])(lib|assets)[/\\]/) || !name.match(/\.js$/)) continue;

          let source = assets[name];
          if (!source || typeof source.source !== "function") continue;
          let content = source.source();
          let origContent = content;
          if (content.match(esmRegExp)) {
            // try to match it only in comments
            // NOTE The regexp is not entirely correct, e.g. it mismatches "comments" in regexps
            // ('var regexp= /\/* import /;' - it'll think that a comment started on this line)
            // regexp matches:                 /* comment */       | "string"                | 'string'                | // comment
            let modContent = content.replace(/\/\*((?:\s|\S)*?)\*\/|"(?:[^"\\]|\\(?:\s|\S))*"|'(?:[^'\\]|\\(?:\s|\S))*'|\/\/(.*)/g, (m, comment, commentSingle) => {
              // !!! Make result length be the same as original length so that source maps work !!!
              // !!! If changed then make sure not to use 'assets[name].source = ...' below !!!
              if (comment) return "/*" + comment.replace(esmRegExpG, m => m.replace(/import|export/, m1 => m1.toUpperCase())) + "*/";
              if (commentSingle) return "//" + commentSingle.replace(esmRegExpG, m => m.replace(/import|export/, m1 => m1.toUpperCase()));
              return m;
            });
            if (!modContent.match(esmRegExp)) {
              // using modified content seems fine (the 'import' / 'export' was indeed inside of a comment)
              content = modContent;
            } else {
              // there's something weird - looks like the SystemJS regexp matched outside a comment => keep the asset as-is
            }
          }
          if (content !== origContent) {
            assets[name].source = () => content; // override just a source() method so that source maps (listMap()) method returns the original source map
            // assets[name] = new RawSource(content);
          }
        }
      });
    });
  }
}

module.exports = SystemjsEs6DetectionFixPlugin;
  