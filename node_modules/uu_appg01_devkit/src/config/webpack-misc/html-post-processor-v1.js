// post-processes HTML files by inserting <script> which then inserts <base> element during page runtime
let StringUtil;

const PLUS4U_CDN = "https://cdn.plus4u.net/";

class HtmlPostProcessorV1 {
  constructor(config) {
    this._config = config;
  }

  processHead(template) {
    let { appBaseUrlPath, appAssetsRelativeUrlPath, externals, preserveSegments } = this._config;

    let base = "";
    if (typeof preserveSegments === "number") {
      // in this case, app base URL is not known during build - the HTML page containing client-side router
      // must figure out the root by checking current URL and preserve only first few
      // path segments (2 in case of uuOS9 - /vendor-app/tid-awid/...)
      template = template.replace(/(^|\n)(\t+)/g, "$1"); // (pretty-print) remove tabs at the beginning of lines
      template = this.replaceModulesInUrls(template, externals);
      template = this._addRuntimeCdnBaseUriSnippet(template);

      // 1. scripts & links with relative paths must be output using document.write, otherwise the browser (Chrome) will try
      //    to load them sooner (before <base> element is written) from wrong paths
      // 2. scripts & links using CDN URLs must be changeable in runtime based on deploy configuration (UU5.Environment)
      template = template
        .replace(/(<script[^>]*\bsrc\s*=\s*['"])([^'"]*)(['"][^>]*>\s*<\/script>)/gi, (m, g1, url, g3) => {
          let isCdnUrl = url.startsWith(PLUS4U_CDN);
          return isCdnUrl
            ? `<script>document.write(${JSON.stringify(g1)} + cdnBaseUri + ${JSON.stringify(
                url.substr(PLUS4U_CDN.length) + g3
              ).replace(/<\/script>/g, '<"+"/script>')});</script>`
            : url.match(/^\/|^[a-zA-Z0-9\\-_]*:/)
            ? m
            : `<script>document.write(${JSON.stringify(m).replace(/<\/script>/g, '<"+"/script>')});</script>`;
        })
        .replace(/(<link[^>]*\bhref=['"])([^'"]*)(['"][^>]*>)/gi, (m, g1, url, g3) => {
          let isCdnUrl = url.startsWith(PLUS4U_CDN);
          return isCdnUrl
            ? `<script>document.write(${JSON.stringify(g1)} + cdnBaseUri + ${JSON.stringify(
                url.substr(PLUS4U_CDN.length) + g3
              )});</script>`
            : url.match(/^\/|^[a-zA-Z0-9\\-_]*:/)
            ? m
            : g1.match(/\srel=['"](?:shortcut )?icon['"]/) // IE needs absolute URL for favicon (ignores document.baseURI)
            ? `<script>document.write(${JSON.stringify(
                g1
              )} + appBaseUrlPath + appAssetsRelativeUrlPath + ${JSON.stringify(url + g3)});</script>`
            : `<script>document.write(${JSON.stringify(m)});</script>`;
        })
        .replace(
          /(<meta\s+name=['"]msapplication-(?:config|TileImage|\w+logo)['"]\s+content=['"])([^'"]*)(['"][^>]*>)/gi,
          (m, g1, url, g3) => {
            // Edge needs absolute URL when specifying <meta name="msapplication-config" content="url/to/browserconfig.xml">,
            // resp. it treats relative URLs relative to current URL address which is unusable with client router;
            // additionally, even if we specified proper address to browserconfig.xml file, relative URLs in that
            // file are still relative to page URL (even though MSDN says it's relative to .xml file)
            // => fix URLs of those <meta> tags to use absolute paths
            let isCdnUrl = url.startsWith(PLUS4U_CDN);
            return isCdnUrl
              ? `<script>document.write(${JSON.stringify(g1)} + cdnBaseUri + ${JSON.stringify(
                  url.substr(PLUS4U_CDN.length) + g3
                )});</script>`
              : url.match(/^\/|^[a-zA-Z0-9\\-_]*:/)
              ? m
              : `<script>document.write(${JSON.stringify(
                  g1
                )} + appBaseUrlPath + appAssetsRelativeUrlPath + ${JSON.stringify(url + g3)});</script>`;
          }
        );

      base = `<script>
        if (!location.href.match(/^(about:|file:)/)) {
          var bplCookie = document.cookie.match(/(^|;\\s*)uu\\.app\\.bpl=([^;]+)/);
          var bplSegmentCount = (bplCookie ? Number(bplCookie[2]) : null);
          if (typeof bplSegmentCount !== "number" || isNaN(bplSegmentCount) || bplSegmentCount < 0) bplSegmentCount = ${preserveSegments};
          var appBaseUrlPath = (location.pathname.split(/\\//).slice(0,1+bplSegmentCount).join("/")+"/").replace(/\\/+/g,"/").replace(/"/g,"");
          var appAssetsRelativeUrlPath = ${JSON.stringify(appAssetsRelativeUrlPath || "")};
          document.write('<base href="' + appBaseUrlPath + appAssetsRelativeUrlPath + '" data-uu-app-base="' + appBaseUrlPath + '" data-uu-app-assets-base="' + appAssetsRelativeUrlPath + '">');
        }
      </script>`;
    } else {
      template = template.replace(/(^|\n)(\t+)/g, "$1"); // (pretty-print) remove tabs at the beginning of lines
      template = this.replaceModulesInUrls(template, externals);
      template = this._addRuntimeCdnBaseUriSnippet(template);
      if (appBaseUrlPath || appAssetsRelativeUrlPath) {
        base = `<base href="${(appBaseUrlPath || "") + (appAssetsRelativeUrlPath || "")}" data-uu-app-base="${
          appBaseUrlPath || ""
        }" data-uu-app-assets-base="${appAssetsRelativeUrlPath || ""}">`;
      }
    }

    // add SystemJS snippet
    let loaderSettings = this.getLoaderSettings(externals);
    let systemJsConfigSnippet = this._getSystemJSLoaderHtmlSnippet(loaderSettings);
    template = template.trim() + "\n\n    " + systemJsConfigSnippet.trim().replace(/\n/g, "\n    ");

    // add <base> snippet
    template = base + "\n\n    " + template;

    return template.trim();
  }

  /**
   * @param {*} externals Computed externals.
   * @return SystemJS loader settings.
   */
  getLoaderSettings(externals) {
    let settings = {
      map: {},
      paths: {},
      meta: {},
      packages: {},
    };

    // create mappings, such as "react" => ".../react/15.4.2/react.min.js"
    let deps = Object.keys(externals);
    let hasLibs, hasUu5Libs;
    deps.forEach((depName) => {
      let dep = externals[depName];
      if (typeof dep.baseUri !== "string") return; // skip special modules ("module", ...)

      let baseUri = dep.baseUri || "";
      baseUri = baseUri.replace(/\/*$/, "/"); // always end with slash
      let depPath = baseUri + dep.main;
      settings.paths[depName] = depPath;
      // settings.paths[depName + "/*"] = baseUri + "*";
      if (depPath.startsWith(PLUS4U_CDN + "libs/")) hasLibs = true;
      else if (depPath.startsWith(PLUS4U_CDN)) hasUu5Libs = true;

      let config = Object.assign({}, dep);
      delete config.baseUri;
      delete config.main;
      if (Object.keys(config).length > 0) settings.meta[depName] = config;
    });

    // optimize SystemJS loading of uu5 libraries by specifying their format
    // (skips regexp matching against JS source)
    // NOTE We can do this only if no extra "deps" config is present in meta configuration
    // because those would apply only if format is not explicitly set or is global
    // (loading of uu5paramqueryg01 stopped working if optimization was in place).
    if ((hasLibs || hasUu5Libs) && !Object.values(settings.meta).some((value) => value && value.deps)) {
      if (hasLibs) {
        settings.meta[PLUS4U_CDN + "libs/*"] = {
          ...settings.meta[PLUS4U_CDN + "libs/*"],
          format: "",
        };
      }
      if (hasUu5Libs) {
        settings.meta[PLUS4U_CDN + "*"] = {
          ...settings.meta[PLUS4U_CDN + "*"],
          format: "amd",
        };
      }
    }

    return settings;
  }

  /**
   * Replaces module URLs in the form of "~module/some/file" by URLs as configured in "externals"
   * variable, e.g. to "http://example.com/libs/module/1.0.0/some/file" where "http://example.com/libs/module/1.0.0/"
   * is base URI of the module "module".
   *
   * @param {*} htmlString HTML with <link> and <script> elements with URLs that are to be replaced.
   * @param {*} dependencies Dependency configuration (see config/config.js).
   * @return HTML with replaced URLs.
   */
  replaceModulesInUrls(htmlString, dependencies) {
    return htmlString.replace(/(\b(?:src|href)=['"])([^'"]+)/gi, function (m, g1, g2) {
      if (g2.charAt(0) != "~") return m;
      return (
        g1 +
        g2.replace(/^~([^/]+)\//, (m, module) => {
          let depConf = dependencies[module];
          if (!depConf || !depConf.baseUri)
            throw new Error(
              `Module '${module}' is referenced from a HTML file (via ${m}) but module's base URI is not configured in config/config.js.` +
                `Add configuration for the module by either specifying cdnBaseUri (if using CDN) or localBaseUri (if the module should be copied locally to the app public folder), or remove the reference from HTML file.`
            );
          return depConf.baseUri;
        })
      );
    });
  }

  _addRuntimeCdnBaseUriSnippet(template) {
    // remove script linking uu5-environment.js as we need it to be first in the "template" and
    // in older devkits it could have been preceded by styles / system.js (we'll add it at the start afterwards;
    // we need it so that runtime cdnBaseUri from UU5.Environment is defined ASAP)
    let result = template;
    result = result.replace(/\s*<script\s+src=['"]uu5-environment.js['"][^>]*>\s*<\/script>/, "");
    result = `    <script src="uu5-environment.js"></script>
    <script>
      var cdnBaseUri = ((window.UU5 || {}).Environment || {}).cdnBaseUri || ${JSON.stringify(PLUS4U_CDN)};
      if (cdnBaseUri.charAt(cdnBaseUri.length - 1) !== "/") cdnBaseUri += "/";
    </script>
${result}`;
    return result;
  }

  _getSystemJSLoaderHtmlSnippet(systemJsSettings) {
    // clean-up (remove empty keys / values)
    for (let k in systemJsSettings) {
      let v = systemJsSettings[k];
      if (v == null || (typeof v == "object" && Object.keys(v).length == 0)) delete systemJsSettings[k];
    }

    // create snippet and make CDN URLs changeable by deploy configuration (available in runtime from UU5.Environment)
    let snippetParts = [""];
    if (!StringUtil) StringUtil = require("uu_appg01_devkit-common/src/tools/string-util.js");

    // add configuration from "meta" object (keys in that object contain CDN prefix so we cannot
    // just string-replace it after JSON.stringify because IE doesn't support computed object keys)
    const META_PLACEHOLDER = "%%%%META%%%%";
    let { meta } = systemJsSettings;
    if (meta) {
      systemJsSettings.meta = META_PLACEHOLDER;
      let metaSnippet = `var systemJsMeta = {};\n${Object.keys(meta)
        .map((key) => {
          return `systemJsMeta[${JSON.stringify(key)}] = ${JSON.stringify(meta[key])};`;
        })
        .join("\n")}`;
      metaSnippet = metaSnippet.replace(new RegExp('"' + StringUtil.regexpQuote(PLUS4U_CDN), "g"), 'cdnBaseUri + "');
      snippetParts.push(metaSnippet);
    }

    let configSnippet = `window.SystemJS && SystemJS.config(${JSON.stringify(systemJsSettings, null, "  ")});`;
    configSnippet = configSnippet
      .replace(new RegExp(': "' + StringUtil.regexpQuote(PLUS4U_CDN), "g"), ': cdnBaseUri + "')
      .replace(JSON.stringify(META_PLACEHOLDER), "systemJsMeta");
    snippetParts.push(configSnippet);

    let loaderSnippet = `<script>${snippetParts.join("\n").replace(/\n/g, "\n  ")}\n</script>`;
    return loaderSnippet;
  }
}
HtmlPostProcessorV1.PLUS4U_CDN = PLUS4U_CDN;

module.exports = HtmlPostProcessorV1;
