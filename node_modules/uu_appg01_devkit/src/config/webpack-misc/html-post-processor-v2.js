// post-processes HTML files by inserting <base href="<%=appBaseUri%>"> etc. expressions which the server should
// replace during runtime before the page gets sent to the browser
const HtmlPostProcessorV1 = require("./html-post-processor-v1");
let StringUtil;

const { PLUS4U_CDN } = HtmlPostProcessorV1;

class HtmlPostProcessorV2 extends HtmlPostProcessorV1 {
  processHead(template) {
    let { appAssetsRelativeUrlPath, externals } = this._config;

    template = template.replace(/(^|\n)(\t+)/g, "$1").trim(); // (pretty-print) remove tabs at the beginning of lines
    template = this.replaceModulesInUrls(template, externals || {});
    template = template
      .replace(/(<link[^>]*\bhref=['"])([^'"]*)(['"][^>]*>)/gi, (m, g1, url, g3) => {
        return !url.match(/^\/|^[a-zA-Z0-9\\-_]*:/) && g1.match(/\srel=['"](?:shortcut )?icon['"]/) // IE needs absolute URL for favicon (ignores document.baseURI)
          ? `${g1}<%=appBasePath%>${appAssetsRelativeUrlPath || ""}${url}${g3}`
          : m;
      })
      .replace(
        /(<meta\s+name=['"]msapplication-(?:config|TileImage|\w+logo)['"]\s+content=['"])([^'"]*)(['"][^>]*>)/gi,
        (m, g1, url, g3) => {
          // Edge needs absolute URL when specifying <meta name="msapplication-config" content="url/to/browserconfig.xml">,
          // resp. it treats relative URLs relative to current URL address which is unusable with client router;
          // additionally, even if we specified proper address to browserconfig.xml file, relative URLs in that
          // file are still relative to page URL (even though MSDN says it's relative to .xml file)
          // => fix URLs of those <meta> tags to use absolute paths
          return !url.match(/^\/|^[a-zA-Z0-9\\-_]*:/)
            ? `${g1}<%=appBasePath%>${appAssetsRelativeUrlPath || ""}${url}${g3}`
            : m;
        }
      );

    // move & inline uu5-environment.js to the start of the head
    template = template.replace(/\s*<script\s+src=['"]uu5-environment.js['"][^>]*>\s*<\/script>/, "").trim();
    template = "<script><%=uu5Environment%></script>\n\n    " + template;

    // add SystemJS snippet
    let loaderSettings = this.getLoaderSettings(externals);
    let systemJsConfigSnippet = this._getSystemJSLoaderHtmlSnippet(loaderSettings);
    template = template + "\n\n    " + systemJsConfigSnippet.trim().replace(/\n/g, "\n    ");

    // replace all occurrences of CDN by expression as it is deploy-configurable
    if (!StringUtil) StringUtil = require("uu_appg01_devkit-common/src/tools/string-util.js");
    template = template.replace(new RegExp(StringUtil.regexpQuote(PLUS4U_CDN), "g"), (m) => "<%=cdnBaseUri%>");

    // add <base>
    let base = `<base href="<%=appBasePath%>${
      appAssetsRelativeUrlPath || ""
    }" data-uu-app-base="<%=appBasePath%>" data-uu-app-assets-base="${appAssetsRelativeUrlPath || ""}">`;
    template = base + "\n\n    " + template;

    return template.trim();
  }

  _getSystemJSLoaderHtmlSnippet(systemJsSettings) {
    // clean-up (remove empty keys / values)
    for (let k in systemJsSettings) {
      let v = systemJsSettings[k];
      if (v == null || (typeof v == "object" && Object.keys(v).length == 0)) delete systemJsSettings[k];
    }

    let loaderSnippet = `<script>
  window.SystemJS && SystemJS.config(${JSON.stringify(systemJsSettings, null, "  ").replace(/\n/g, "\n  ")});
</script>`;
    return loaderSnippet;
  }
}

module.exports = HtmlPostProcessorV2;
