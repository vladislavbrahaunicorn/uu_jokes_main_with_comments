class MergingStyleLoaderPlugin {
  constructor(options) {
    this.options = options;
    this.name = "MergingStyleLoaderPlugin";
  }

  apply(compiler) {
    // TODO Re-compilation not yet supported.
    // TODO Source maps not yet supported.
    this._compilations = new Map();
    let data = { requests: {}, cssListsToMerge: {} };
    compiler.hooks.compilation.tap("MergingStyleLoaderPlugin", (compilation, { normalModuleFactory }) => {
      this._compilations.set(compilation, data);
      // do the work before "optimizeChunkModules" hook (which is used by ModuleConcatenationPlugin);
      // additionally, we'll need async hook, that's why we're not using "optimizeChunkModulesBasic" which
      // is sync only (see node_modules/webpack/lib/Compilation.js:1244)
      compilation.hooks.optimizeTree.tapAsync("MergingStyleLoaderPlugin", (chunks, modules, callback) => {
        // let { chunks, modules } = compilation;
        if (!chunks) return callback();

        let isMerging = false;
        for (let chunk of chunks) {
          let chunkModules = chunk.getModules();
          let cssModules = chunkModules.filter(m => data.requests[m.request]);
          if (cssModules.length > 1) {
            // add new "module" with concatenation of all css modules in this chunk
            // (and clear other css modules in this chunk)
            let [cssToRebuild, ...remainingCssModules] = cssModules;

            // remove dependency sources
            let remainingRootCssModules = remainingCssModules.map(m => m.issuer); // we're using "issuer" due to how style-loader is implemented - there're 2 different modules for each source CSS/LESS file - style-loader root module (issuer) and the result of css-loader (the ones in our cssModules list)
            if (
              remainingRootCssModules.every(
                mod => typeof mod.request === "string" && mod.request.match(/\.(less|css)$/) // make sure "issuer" looks like from style-loader
              )
            ) {
              let allowMerge = true;
              let allTies = [];
              let removableCssModules = [...new Set(remainingCssModules.concat(remainingRootCssModules))];
              for (let cssModule of removableCssModules) {
                let reasons = cssModule.reasons;
                let ties = (reasons || []).filter(r => r && r.dependency && r.module);
                if (ties.length === 0) {
                  allowMerge = false;
                  break;
                }
                allTies.push(ties);
              }

              // rebuild the 1st imported CSS module which will now concatenate all CSS
              // results from a chunk
              if (allowMerge) {
                let list = cssModules.map(m => ({
                  ...data.requests[m.request],
                  module: m
                }));
                // do the merging only if no media imports are present (prevent specificity issues)
                if (list.every(it => !it.mediaJsonString || it.mediaJsonString === '""')) {
                  isMerging = true;
                  data.cssListsToMerge[cssToRebuild.request] = list;
                  compilation.rebuildModule(cssToRebuild, err => {
                    callback(err);
                  });

                  // remove ties from modules onto remaining CSS modules
                  for (let ties of allTies) {
                    for (let { module, dependency } of ties) module.removeDependency(dependency);
                  }
                  for (let cssModule of removableCssModules) {
                    chunk.removeModule(cssModule);
                  }
                }
              }
            }
          }
        }

        if (!isMerging) callback();
      });
    });
  }

  getCssToMerge(compilation, module) {
    let data = this._compilations.get(compilation);
    if (!data) return false; // shouldn't happen
    return data.cssListsToMerge[module.request];
  }

  collectCss(compilation, module, cssJsonString, mediaJsonString, sourceMapString, origContent) {
    let data = this._compilations.get(compilation);
    if (!data) return origContent; // shouldn't happen

    data.requests[module.request] = { module, cssJsonString, mediaJsonString, sourceMapString };
    return origContent;
  }
}

module.exports = MergingStyleLoaderPlugin;
