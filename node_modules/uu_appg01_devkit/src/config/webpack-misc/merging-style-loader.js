module.exports = function(content, map) {
  // do nothing if MergingStyleLoaderPlugin is not used
  if (!this.data || !this.data.mergingStyleLoaderPlugin) return this.callback(null, content, map);
  return normalFlow.apply(this, arguments);
};
module.exports.pitch = function(request) {
  let plugin = this._compilation.options.plugins.find(plugin => plugin && plugin.name === "MergingStyleLoaderPlugin");
  if (!plugin) return;

  this.data.mergingStyleLoaderPlugin = plugin;
  return pitchFlow.apply(this, arguments);
};

// "pitch" is preprocessing - if something is returned then no other loaders (css, postcss, less) are called
function pitchFlow(request) {
  let plugin = this.data.mergingStyleLoaderPlugin;
  let list = plugin.getCssToMerge(this._compilation, this._module);
  if (list) {
    // we're now in a merging phase
    const code = [`var exports = module.exports = [];\n`];
    let cssJsonString = list.map(it => it.cssJsonString).join(" +\n");
    code.push(`exports.push([module.id, ${cssJsonString}, ""])`);
    return code.join("\n");
  }
}

function normalFlow(content, map) {
  let plugin = this.data.mergingStyleLoaderPlugin;

  if (typeof content !== "string") {
    return this.callback(null, content, map);
  }
  if (content.match(/\/\/ (Imports|Exports)/)) {
    return this.callback(null, content, map);
  }

  // looks like mergable CSS => try to collect CSS string
  content.replace(
    /exports\.push\(\[module.id,\s*("(?:[^"\\]|\\.)*")(?:\s*,\s*("(?:[^"\\]|\\.)*")\s*,\s*(.*)\]\);)?/,
    (m, cssJsonString, mediaJsonString, sourceMapString) => {
      if (cssJsonString) {
        plugin.collectCss(this._compilation, this._module, cssJsonString, mediaJsonString, sourceMapString, content);
      }
    }
  );

  return this.callback(null, content, map);
}
