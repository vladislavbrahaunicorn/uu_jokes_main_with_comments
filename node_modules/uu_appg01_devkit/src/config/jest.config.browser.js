const fs = require("fs");
const path = require("path");

module.exports = function(pkg, webpackConfig, buildDir, useTranspilation = true) {
  // export aliases from webpack configuration so that our jest-resolver.js
  // have them available (this mustn't be done directly in jest-resolver.js
  // because Jest already runs in N processes at that time and preparing webpack
  // configuration creates some temporary modules which would need some sort of
  // synchronization so that fs operations don't fail)
  let webpackConfig0 = Array.isArray(webpackConfig) ? webpackConfig[0] : webpackConfig;
  let aliases = ((webpackConfig0 || {}).resolve || {}).alias || {};
  if (!fs.existsSync(buildDir)) fs.mkdirSync(buildDir);
  fs.writeFileSync(path.join(buildDir, "jest-webpack-aliases.json"), JSON.stringify(aliases, null, 2), "utf-8");

  let useUu5g05 =
    pkg.name === "uu5g05-test" ||
    (("uu5g05" in pkg.dependencies || pkg.name === "uu5g05") &&
      ("uu5g05-test" in (pkg.devDependencies || {}) || "uu5g05-test" in pkg.dependencies));
  let useUu5g04 = !useUu5g05 && "uu5g04" in pkg.dependencies;
  let setupFilesAfterEnv = [];
  if (useUu5g05) {
    // TODO Should add all <pkg>/test/setup/setup.js files of transitive dependencies...
    if (pkg.name !== "uu5g05-test") {
      setupFilesAfterEnv.push("uu5g05-test/test/setup/setup.js");
      if (pkg.name !== "uu5g05") {
        setupFilesAfterEnv.push("uu5g05/test/setup/setup.js");
        if (pkg.name !== "uu5g04" && "uu5g04" in pkg.dependencies) {
          setupFilesAfterEnv.push("uu5g04/test/setup/setup.js");
        }
      }
    }
    if (fs.existsSync("test/setup/setup.js")) setupFilesAfterEnv.push("<rootDir>/test/setup/setup.js");
  } else if (useUu5g04) {
    let uu5Dir = path.dirname(require.resolve("uu5g04/package.json", { paths: ["."] }));
    if (fs.existsSync(path.join(uu5Dir, "dist", "jest-setup.js"))) {
      setupFilesAfterEnv.push("uu5g04/dist/jest-setup.js");
    }
  }

  // configure moduleNameMapper to contain current project name + its submodules and standard uu5g04+plus4u5+oidc if necessary
  // TODO Should probably transitively walk through external dependencies and extract submodules from them (e.g. uu_plus4u5g01-app)
  // and define them into moduleNameMapper (because they're not NPM modules).
  const StringUtil = require("uu_appg01_devkit-common/src/tools/string-util.js");
  let moduleNameMapper = {
    ["^(" + StringUtil.regexpQuote(pkg.name) + ")$"]: "<rootDir>/src/index.js"
  };
  let packs = (pkg.uuBuildSettings || {}).packs;
  if (packs && packs.length) {
    let submodules = {};
    packs.forEach(pack => {
      let srcFile = pack && pack.entryPoints && pack.entryPoints.length === 1 ? pack.entryPoints[0] : null;
      let outputFile = pack && pack.outputFile;
      if (srcFile && typeof outputFile === "string" && outputFile.match(/\.js$/)) {
        let submodule = outputFile.split(/[/\\]/).pop().replace(/(\.min)?\.js$/, "");
        if (submodule.startsWith(pkg.name + "-") || pkg.name === submodule) submodules[submodule] = srcFile;
      }
    });
    for (let k in submodules) moduleNameMapper["^(" + StringUtil.regexpQuote(k) + ")$"] = "<rootDir>/src/" + submodules[k].replace(/\\/g, "/");
  }
  if (useUu5g04) {
    Object.assign(moduleNameMapper, {
      "^uu5g04[-/]([^/?!]+)": "uu5g04/dist-node/$1/$1-build.js",
    });
    if (pkg.name !== "uu_plus4u5g01") {
      moduleNameMapper["^uu_plus4u5g01[-/]([^/?!]+)"] = "uu_plus4u5g01/dist-node/$1/$1-build.js";
    }
  }
  if (useUu5g04 || useUu5g05) {
    Object.assign(moduleNameMapper, {
      "^(uu_appg01_oidc)$": "$1/dist/$1.js",
    });
  }

  let useReact = useUu5g04 || "react" in pkg.dependencies;
  let setupFiles = [];
  if (useUu5g05) {
    // TODO Should add all <pkg>/test/setup/setup-env.js files of transitive dependencies...
    if (pkg.name !== "uu5g05-test") {
      setupFiles.push("uu5g05-test/test/setup/setup-env.js");
    }
    if (fs.existsSync("test/setup/setup-env.js")) setupFiles.push("<rootDir>/test/setup/setup-env.js");
  } else {
    setupFiles = [path.join(__dirname, "jest-setup.js")];
    if (useReact) setupFiles.push(path.join(__dirname, "jest-setup-react.js"));
  }

  return {
    rootDir: path.resolve("."),
    setupFiles,
    setupFilesAfterEnv,
    // library targetted for both environments (Node & browser) is supposed to be written
    // using Node syntax so transpilation isn't necessary
    transform: useTranspilation
      ? {
          "^.+\\.(js|jsx|mjs)$": path.join(__dirname, "jest-babel-transform.js")
        }
      : {},
    transformIgnorePatterns: ["^(?!.*/node_modules/uu_appg01).*/node_modules/"],
    testPathIgnorePatterns: [
      "/node_modules/",
      "<rootDir>/dist.*",
      "<rootDir>/public/",
      "<rootDir>/target/",
      "/templates/",
      "/test\\.js$"
    ],
    resolver: path.join(__dirname, "jest-resolver.js"),
    moduleNameMapper,
    reporters: [
      path.join(__dirname, "jest-limited-default-reporter.js"),
      path.join(__dirname, "jest-limited-summary-reporter.js")
    ],
    testResultsProcessor: path.join(__dirname, "jest-html-test-results-processor.js"),
    coverageDirectory: path.resolve("target", "coverage"),
    coverageReporters: [],
    ...pkg["jest"]
  };
};
