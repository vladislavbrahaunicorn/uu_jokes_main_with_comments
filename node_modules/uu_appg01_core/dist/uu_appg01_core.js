/*!
 * Copyright (c) 2019 Unicorn a.s.
 * All rights reserved.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("module"));
	else if(typeof define === 'function' && define.amd)
		define("uu_appg01_core", ["module"], factory);
	else if(typeof exports === 'object')
		exports["uu_appg01_core"] = factory(require("module"));
	else
		root["UuApp"] = factory(root["undefined"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var mod = __webpack_require__(2);

var isDoc = typeof document !== "undefined";
var uri = ((mod ? mod.uri : isDoc && (document.currentScript || Array.prototype.slice.call(document.getElementsByTagName("script"), -1)[0] || {}).src) || "").toString();
uri = uri.split(/\//).slice(0, -1).join("/") + "/"; // runtime publicPath configuration required for proper linking of styles, background images, ...

var floatingVersion = "/4.0.0/";
if (uri.substr(-floatingVersion.length) === floatingVersion) uri = uri.substr(0, uri.length - floatingVersion.length) + "/4.7.2/";
__webpack_require__.p = uri;
module.exports = __webpack_require__(3);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // polyfills (pretty much only for IE11)

if (typeof Symbol === "undefined") {
  __webpack_require__(4);

  __webpack_require__(59);

  __webpack_require__(67);

  __webpack_require__(76);

  __webpack_require__(81);

  __webpack_require__(82);

  __webpack_require__(84);
}

if (!Object.assign) {
  __webpack_require__(88);
}

if (!Object.values) {
  __webpack_require__(91);
}

__webpack_require__(94);

module.exports = {
  get AppClient() {
    var AppClient = __webpack_require__(96); // support legacy API


    AppClient.Client = AppClient.AppClient;
    return AppClient;
  },

  get Uri() {
    return __webpack_require__(158);
  },

  get Logging() {
    return __webpack_require__(133);
  },

  get Util() {
    return __webpack_require__(98);
  },

  get Utils() {
    return __webpack_require__(98);
  },

  get Perflog() {
    return __webpack_require__(141);
  },

  get Authentication() {
    return __webpack_require__(163);
  },

  get Error() {
    var Utils = __webpack_require__(98);

    return {
      Error: Utils.BaseError
    };
  }

};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(5);

__webpack_require__(55);

__webpack_require__(57);

__webpack_require__(58);

module.exports = __webpack_require__(11).Symbol;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // ECMAScript 6 symbols shim

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var global = __webpack_require__(6);

var has = __webpack_require__(7);

var DESCRIPTORS = __webpack_require__(8);

var $export = __webpack_require__(10);

var redefine = __webpack_require__(20);

var META = __webpack_require__(27).KEY;

var $fails = __webpack_require__(9);

var shared = __webpack_require__(23);

var setToStringTag = __webpack_require__(28);

var uid = __webpack_require__(21);

var wks = __webpack_require__(29);

var wksExt = __webpack_require__(30);

var wksDefine = __webpack_require__(31);

var enumKeys = __webpack_require__(32);

var isArray = __webpack_require__(47);

var anObject = __webpack_require__(14);

var isObject = __webpack_require__(15);

var toObject = __webpack_require__(48);

var toIObject = __webpack_require__(35);

var toPrimitive = __webpack_require__(18);

var createDesc = __webpack_require__(19);

var _create = __webpack_require__(49);

var gOPNExt = __webpack_require__(52);

var $GOPD = __webpack_require__(54);

var $GOPS = __webpack_require__(45);

var $DP = __webpack_require__(13);

var $keys = __webpack_require__(33);

var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;

var _stringify = $JSON && $JSON.stringify;

var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function get() {
      return dP(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function wrap(tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);

  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && _typeof($Symbol.iterator) == 'symbol' ? function (it) {
  return _typeof(it) == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);

  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, {
        enumerable: createDesc(0, false)
      });
    }

    return setSymbolDesc(it, key, D);
  }

  return dP(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;

  while (l > i) {
    $defineProperty(it, key = keys[i++], P[key]);
  }

  return it;
};

var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  }

  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;

  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  }

  return result;
}; // 19.4.1.1 Symbol([description])


if (!USE_NATIVE) {
  $Symbol = function _Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);

    var $set = function $set(value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };

    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
      configurable: true,
      set: $set
    });
    return wrap(tag);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(53).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(46).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(24)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {
  Symbol: $Symbol
});

for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
  wks(es6Symbols[j++]);
}

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) {
  wksDefine(wellKnownSymbols[k++]);
}

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function _for(key) {
    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

    for (var key in SymbolRegistry) {
      if (SymbolRegistry[key] === sym) return key;
    }
  },
  useSetter: function useSetter() {
    setter = true;
  },
  useSimple: function useSimple() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443

var FAILS_ON_PRIMITIVES = $fails(function () {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
}); // 24.3.2 JSON.stringify(value [, replacer [, space]])

$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols

  return _stringify([S]) != '[null]' || _stringify({
    a: S
  }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;

    while (arguments.length > i) {
      args.push(arguments[i++]);
    }

    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

    if (!isArray(replacer)) replacer = function replacer(key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
}); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(12)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]

setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]

setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 6 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
: Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ }),
/* 7 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(9)(function () {
  return Object.defineProperty({}, 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);

var core = __webpack_require__(11);

var hide = __webpack_require__(12);

var redefine = __webpack_require__(20);

var ctx = __webpack_require__(25);

var PROTOTYPE = 'prototype';

var $export = function $export(type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;

  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

    out = (own ? target : source)[key]; // bind timers to global for call from export context

    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // extend global

    if (target) redefine(target, key, out, type & $export.U); // export

    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};

global.core = core; // type bitmap

$export.F = 1; // forced

$export.G = 2; // global

$export.S = 4; // static

$export.P = 8; // proto

$export.B = 16; // bind

$export.W = 32; // wrap

$export.U = 64; // safe

$export.R = 128; // real proto method for `library`

module.exports = $export;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

var core = module.exports = {
  version: '2.6.11'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(13);

var createDesc = __webpack_require__(19);

module.exports = __webpack_require__(8) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(14);

var IE8_DOM_DEFINE = __webpack_require__(16);

var toPrimitive = __webpack_require__(18);

var dP = Object.defineProperty;
exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) {
    /* empty */
  }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15);

module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 15 */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function (it) {
  return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(9)(function () {
  return Object.defineProperty(__webpack_require__(17)('div'), 'a', {
    get: function get() {
      return 7;
    }
  }).a != 7;
});

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15);

var document = __webpack_require__(6).document; // typeof document.createElement is 'object' in old IE


var is = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(15); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string


module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);

var hide = __webpack_require__(12);

var has = __webpack_require__(7);

var SRC = __webpack_require__(21)('src');

var $toString = __webpack_require__(22);

var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(11).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));

  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),
/* 21 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(23)('native-function-to-string', Function.toString);

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(11);

var global = __webpack_require__(6);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(24) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(26);

module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;

  switch (length) {
    case 1:
      return function (a) {
        return fn.call(that, a);
      };

    case 2:
      return function (a, b) {
        return fn.call(that, a, b);
      };

    case 3:
      return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
  }

  return function ()
  /* ...args */
  {
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var META = __webpack_require__(21)('meta');

var isObject = __webpack_require__(15);

var has = __webpack_require__(7);

var setDesc = __webpack_require__(13).f;

var id = 0;

var isExtensible = Object.isExtensible || function () {
  return true;
};

var FREEZE = !__webpack_require__(9)(function () {
  return isExtensible(Object.preventExtensions({}));
});

var setMeta = function setMeta(it) {
  setDesc(it, META, {
    value: {
      i: 'O' + ++id,
      // object ID
      w: {} // weak collections IDs

    }
  });
};

var fastKey = function fastKey(it, create) {
  // return primitive with prefix
  if (!isObject(it)) return _typeof(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F'; // not necessary to add metadata

    if (!create) return 'E'; // add missing metadata

    setMeta(it); // return object ID
  }

  return it[META].i;
};

var getWeak = function getWeak(it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true; // not necessary to add metadata

    if (!create) return false; // add missing metadata

    setMeta(it); // return hash weak collections IDs
  }

  return it[META].w;
}; // add metadata on freeze-family methods calling


var onFreeze = function onFreeze(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};

var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(13).f;

var has = __webpack_require__(7);

var TAG = __webpack_require__(29)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
    configurable: true,
    value: tag
  });
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(23)('wks');

var uid = __webpack_require__(21);

var _Symbol = __webpack_require__(6).Symbol;

var USE_SYMBOL = typeof _Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(29);

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(6);

var core = __webpack_require__(11);

var LIBRARY = __webpack_require__(24);

var wksExt = __webpack_require__(30);

var defineProperty = __webpack_require__(13).f;

module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
    value: wksExt.f(name)
  });
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(33);

var gOPS = __webpack_require__(45);

var pIE = __webpack_require__(46);

module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;

  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;

    while (symbols.length > i) {
      if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
  }

  return result;
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(34);

var enumBugKeys = __webpack_require__(44);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(7);

var toIObject = __webpack_require__(35);

var arrayIndexOf = __webpack_require__(39)(false);

var IE_PROTO = __webpack_require__(43)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;

  for (key in O) {
    if (key != IE_PROTO) has(O, key) && result.push(key);
  } // Don't enum bug & hidden keys


  while (names.length > i) {
    if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  }

  return result;
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(36);

var defined = __webpack_require__(38);

module.exports = function (it) {
  return IObject(defined(it));
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(37); // eslint-disable-next-line no-prototype-builtins


module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 38 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(35);

var toLength = __webpack_require__(40);

var toAbsoluteIndex = __webpack_require__(42);

module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value; // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare

    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++]; // eslint-disable-next-line no-self-compare

      if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
    } else for (; length > index; index++) {
      if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }
    }
    return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(41);

var min = Math.min;

module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;

module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(41);

var max = Math.max;
var min = Math.min;

module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(23)('keys');

var uid = __webpack_require__(21);

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ }),
/* 45 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 46 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(37);

module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(38);

module.exports = function (it) {
  return Object(defined(it));
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(14);

var dPs = __webpack_require__(50);

var enumBugKeys = __webpack_require__(44);

var IE_PROTO = __webpack_require__(43)('IE_PROTO');

var Empty = function Empty() {
  /* empty */
};

var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

var _createDict = function createDict() {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(17)('iframe');

  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';

  __webpack_require__(51).appendChild(iframe);

  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);

  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  _createDict = iframeDocument.F;

  while (i--) {
    delete _createDict[PROTOTYPE][enumBugKeys[i]];
  }

  return _createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;

  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

    result[IE_PROTO] = O;
  } else result = _createDict();

  return Properties === undefined ? result : dPs(result, Properties);
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(13);

var anObject = __webpack_require__(14);

var getKeys = __webpack_require__(33);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;

  while (length > i) {
    dP.f(O, P = keys[i++], Properties[P]);
  }

  return O;
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(6).document;

module.exports = document && document.documentElement;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(35);

var gOPN = __webpack_require__(53).f;

var toString = {}.toString;
var windowNames = (typeof window === "undefined" ? "undefined" : _typeof(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function getWindowNames(it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(34);

var hiddenKeys = __webpack_require__(44).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(46);

var createDesc = __webpack_require__(19);

var toIObject = __webpack_require__(35);

var toPrimitive = __webpack_require__(18);

var has = __webpack_require__(7);

var IE8_DOM_DEFINE = __webpack_require__(16);

var gOPD = Object.getOwnPropertyDescriptor;
exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) {
    /* empty */
  }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.3.6 Object.prototype.toString()

var classof = __webpack_require__(56);

var test = {};
test[__webpack_require__(29)('toStringTag')] = 'z';

if (test + '' != '[object z]') {
  __webpack_require__(20)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(37);

var TAG = __webpack_require__(29)('toStringTag'); // ES3 wrong here


var ARG = cof(function () {
  return arguments;
}()) == 'Arguments'; // fallback for IE11 Script Access Denied error

var tryGet = function tryGet(it, key) {
  try {
    return it[key];
  } catch (e) {
    /* empty */
  }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
  : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
  : ARG ? cof(O) // ES3 arguments fallback
  : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(31)('asyncIterator');

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(31)('observable');

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(60);

module.exports = __webpack_require__(11).Array.values;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var addToUnscopables = __webpack_require__(61);

var step = __webpack_require__(62);

var Iterators = __webpack_require__(63);

var toIObject = __webpack_require__(35); // 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()


module.exports = __webpack_require__(64)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target

  this._i = 0; // next index

  this._k = kind; // kind
  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;

  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }

  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(29)('unscopables');

var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(12)(ArrayProto, UNSCOPABLES, {});

module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return {
    value: value,
    done: !!done
  };
};

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LIBRARY = __webpack_require__(24);

var $export = __webpack_require__(10);

var redefine = __webpack_require__(20);

var hide = __webpack_require__(12);

var Iterators = __webpack_require__(63);

var $iterCreate = __webpack_require__(65);

var setToStringTag = __webpack_require__(28);

var getPrototypeOf = __webpack_require__(66);

var ITERATOR = __webpack_require__(29)('iterator');

var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function returnThis() {
  return this;
};

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);

  var getMethod = function getMethod(kind) {
    if (!BUGGY && kind in proto) return proto[kind];

    switch (kind) {
      case KEYS:
        return function keys() {
          return new Constructor(this, kind);
        };

      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }

    return function entries() {
      return new Constructor(this, kind);
    };
  };

  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype; // Fix native

  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;

    $default = function values() {
      return $native.call(this);
    };
  } // Define iterator


  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  } // Plug for library


  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;

  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }

  return methods;
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var create = __webpack_require__(49);

var descriptor = __webpack_require__(19);

var setToStringTag = __webpack_require__(28);

var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

__webpack_require__(12)(IteratorPrototype, __webpack_require__(29)('iterator'), function () {
  return this;
});

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, {
    next: descriptor(1, next)
  });
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(7);

var toObject = __webpack_require__(48);

var IE_PROTO = __webpack_require__(43)('IE_PROTO');

var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];

  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  }

  return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(68);

__webpack_require__(70);

module.exports = __webpack_require__(11).Array.from;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $at = __webpack_require__(69)(true); // 21.1.3.27 String.prototype[@@iterator]()


__webpack_require__(64)(String, 'String', function (iterated) {
  this._t = String(iterated); // target

  this._i = 0; // next index
  // 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return {
    value: undefined,
    done: true
  };
  point = $at(O, index);
  this._i += point.length;
  return {
    value: point,
    done: false
  };
});

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(41);

var defined = __webpack_require__(38); // true  -> String#at
// false -> String#codePointAt


module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ctx = __webpack_require__(25);

var $export = __webpack_require__(10);

var toObject = __webpack_require__(48);

var call = __webpack_require__(71);

var isArrayIter = __webpack_require__(72);

var toLength = __webpack_require__(40);

var createProperty = __webpack_require__(73);

var getIterFn = __webpack_require__(74);

$export($export.S + $export.F * !__webpack_require__(75)(function (iter) {
  Array.from(iter);
}), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike
  /* , mapfn = undefined, thisArg = undefined */
  ) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);

      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }

    result.length = index;
    return result;
  }
});

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(14);

module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(63);

var ITERATOR = __webpack_require__(29)('iterator');

var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $defineProperty = __webpack_require__(13);

var createDesc = __webpack_require__(19);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(56);

var ITERATOR = __webpack_require__(29)('iterator');

var Iterators = __webpack_require__(63);

module.exports = __webpack_require__(11).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(29)('iterator');

var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();

  riter['return'] = function () {
    SAFE_CLOSING = true;
  }; // eslint-disable-next-line no-throw-literal


  Array.from(riter, function () {
    throw 2;
  });
} catch (e) {
  /* empty */
}

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;

  try {
    var arr = [7];
    var iter = arr[ITERATOR]();

    iter.next = function () {
      return {
        done: safe = true
      };
    };

    arr[ITERATOR] = function () {
      return iter;
    };

    exec(arr);
  } catch (e) {
    /* empty */
  }

  return safe;
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(77);

module.exports = __webpack_require__(11).Array.find;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $export = __webpack_require__(10);

var $find = __webpack_require__(78)(5);

var KEY = 'find';
var forced = true; // Shouldn't skip holes

if (KEY in []) Array(1)[KEY](function () {
  forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn
  /* , that = undefined */
  ) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(61)(KEY);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(25);

var IObject = __webpack_require__(36);

var toObject = __webpack_require__(48);

var toLength = __webpack_require__(40);

var asc = __webpack_require__(79);

module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;

    for (; length > index; index++) {
      if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);

        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true;
              // some

              case 5:
                return val;
              // find

              case 6:
                return index;
              // findIndex

              case 2:
                result.push(val);
              // filter
            } else if (IS_EVERY) return false; // every
        }
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(80);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(15);

var isArray = __webpack_require__(47);

var SPECIES = __webpack_require__(29)('species');

module.exports = function (original) {
  var C;

  if (isArray(original)) {
    C = original.constructor; // cross-realm fallback

    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  }

  return C === undefined ? Array : C;
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(60);

module.exports = __webpack_require__(11).Array.values;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(83);

module.exports = __webpack_require__(11).Array.includes;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tc39/Array.prototype.includes

var $export = __webpack_require__(10);

var $includes = __webpack_require__(39)(true);

$export($export.P, 'Array', {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(61)('includes');

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(85);

module.exports = __webpack_require__(11).Reflect.construct;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(10);

var create = __webpack_require__(49);

var aFunction = __webpack_require__(26);

var anObject = __webpack_require__(14);

var isObject = __webpack_require__(15);

var fails = __webpack_require__(9);

var bind = __webpack_require__(86);

var rConstruct = (__webpack_require__(6).Reflect || {}).construct; // MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it

var NEW_TARGET_BUG = fails(function () {
  function F() {
    /* empty */
  }

  return !(rConstruct(function () {
    /* empty */
  }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () {
    /* empty */
  });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args
  /* , newTarget */
  ) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);

    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0:
          return new Target();

        case 1:
          return new Target(args[0]);

        case 2:
          return new Target(args[0], args[1]);

        case 3:
          return new Target(args[0], args[1], args[2]);

        case 4:
          return new Target(args[0], args[1], args[2], args[3]);
      } // w/o altered newTarget, lot of arguments case


      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    } // with altered newTarget, not support built-in constructors


    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var aFunction = __webpack_require__(26);

var isObject = __webpack_require__(15);

var invoke = __webpack_require__(87);

var arraySlice = [].slice;
var factories = {};

var construct = function construct(F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) {
      n[i] = 'a[' + i + ']';
    } // eslint-disable-next-line no-new-func


    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  }

  return factories[len](F, args);
};

module.exports = Function.bind || function bind(that
/* , ...args */
) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);

  var bound = function bound()
  /* args... */
  {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };

  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

/***/ }),
/* 87 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;

  switch (args.length) {
    case 0:
      return un ? fn() : fn.call(that);

    case 1:
      return un ? fn(args[0]) : fn.call(that, args[0]);

    case 2:
      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

    case 3:
      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

    case 4:
      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
  }

  return fn.apply(that, args);
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(89);

module.exports = __webpack_require__(11).Object.assign;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(10);

$export($export.S + $export.F, 'Object', {
  assign: __webpack_require__(90)
});

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // 19.1.2.1 Object.assign(target, source, ...)

var DESCRIPTORS = __webpack_require__(8);

var getKeys = __webpack_require__(33);

var gOPS = __webpack_require__(45);

var pIE = __webpack_require__(46);

var toObject = __webpack_require__(48);

var IObject = __webpack_require__(36);

var $assign = Object.assign; // should work with symbols and should have deterministic property order (V8 bug)

module.exports = !$assign || __webpack_require__(9)(function () {
  var A = {};
  var B = {}; // eslint-disable-next-line no-undef

  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) {
    B[k] = k;
  });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;

  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;

    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  }

  return T;
} : $assign;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(92);

module.exports = __webpack_require__(11).Object.values;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(10);

var $values = __webpack_require__(93)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(8);

var getKeys = __webpack_require__(33);

var toIObject = __webpack_require__(35);

var isEnum = __webpack_require__(46).f;

module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;

    while (length > i) {
      key = keys[i++];

      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }

    return result;
  };
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function (global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var inModule = ( false ? undefined : _typeof(module)) === "object";
  var runtime = global.regeneratorRuntime;

  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    } // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.


    return;
  } // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.


  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  runtime.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  runtime.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
}( // In sloppy mode, unbound `this` refers to the global object, fallback to
// Function constructor if we're in global strict mode. That is sadly a form
// of indirect eval which violates Content Security Policy.
function () {
  return this;
}() || Function("return this")());
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(95)(module)))

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  get AppClient() {
    return __webpack_require__(97);
  },

  get RemoteError() {
    return __webpack_require__(150);
  },

  get ApplicationError() {
    return __webpack_require__(149);
  },

  get SystemError() {
    return __webpack_require__(151);
  },

  get PerflogHandler() {
    return __webpack_require__(140);
  },

  get RemoteErrorHandler() {
    return __webpack_require__(148);
  },

  get SessionHandler() {
    return __webpack_require__(157);
  },

  get TransformParametersHandler() {
    return __webpack_require__(152);
  },

  get UriHandler() {
    return __webpack_require__(156);
  }

};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var Helpers = __webpack_require__(130);

var HttpClient = __webpack_require__(132);

var PerflogHandler = __webpack_require__(140);

var RemoteErrorHandler = __webpack_require__(148);

var TransformParametersHandler = __webpack_require__(152);

var UriHandler = __webpack_require__(156);

var DEFAULT_INTERCEPTORS = [PerflogHandler, UriHandler, RemoteErrorHandler, TransformParametersHandler];
/**
 * Creates an instance of command client which will use specified configuration when invoking commands.
 * Unspecified values are taken from global defaults ({@link UuApp.AppClient.Client.defaults Client.defaults}). Most
 * values can be further overridden when invoking the remote call - see {@link UuApp.AppClient.Client#post Client#post}.
 *
 * **Interceptors**
 *
 * It's possible to provide a list of interceptors which pre-/post-process HTTP requests. An interceptor
 * is a JavaScript function {Promise<Response>} interceptorFn({Object} request, {Object} options, {Function} nextInterceptorFn).
 * Request object contains fields uri, method, body and options object contains any remaining options passed down to
 * interceptors, e.g. transformParameters). Example:
 *
 *     function MyInterceptor(request, options, nextInterceptorFn) {
 *       // pre-process in any way
 *       request.headers["x-extra-header-computed-value"] = Math.random() + "";
 *       console.log("Launching Ajax request. Method:", request.method, "Uri:", request.uri, "Parameters:", request.body, "Other options:", options);
 *       let start = new Date().getTime();
 *       return nextInterceptorFn(request, options).then(function (response) {
 *         // post-process in any way, e.g. add extra field to the response object
 *         response.timeTaken = new Date().getTime() - start;
 *         return response;
 *       }, function error(response) {
 *         // ...
 *         return Promise.reject(response); // keep it rejected (i.e. in error state)
 *       });
 *     }
 *
 *     // usage of the interceptor
 *     let client = new UuApp.AppClient.Client({
 *       interceptors: [MyInterceptor].concat(UuApp.AppClient.Client.defaults.interceptors)
 *     });
 *
 * @class UuApp.AppClient.Client
 * @classdesc
 * The Client allows communication with remote uuOS9 endpoints which conform to uuUri format.
 * Besides communication, the client solves also other points of interest, such as authentication or
 * performance logging.
 *
 * Client uses standardized {@link https://developer.mozilla.org/cs/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise API}
 * to provide access to the result of the call.
 *
 *     UuApp.AppClient.Client.get("/cds-gb/UU-BT/guestbook/123/getAttributes").then(function (response) {
 *       console.log(response.data, response.status, response.headers());
 *     }, function (response) { // error
 *       console.log(response.error, response.status, response.headers());
 *     });
 *
 * When used as above, client uses global defaults (timeout, headers, ...). If the call needs to be parametrized, it can
 * be parametrized directly in {@link UuApp.AppClient.Client#post Client#post} ({@link UuApp.AppClient.Client#get Client#get})
 * call or, alternatively, a client instance can be created with defaults that override the global ones.
 *
 * For pre-/post-processing of HTTP requests use custom interceptors (see constructor).
 *
 * **Configuration**
 *
 * Some options are automatically configured from the environment during
 * {@link UuApp.Util.Config.init Config.init} call. These can be overridden when instantiating
 * the client or in method invocations. Supported environment options:
 *
 *     {
 *       "gatewayUri": "https://uuappg01.plus4u.net", // default gateway for command calls using uuUri that doesn't contain gateway
 *       "vendor-app-subapp-spp.gatewayUri": "https://elsewhere.plus4u.net"
 *     }
 *
 * @param {Object} options Default options for this instance of the command client.
 * @param {number} options.requestTimeout The default HTTP timeout for this instance of the command client, in seconds.
 * @param {Object} options.headers The default HTTP headers for command invocations using this instance of the command client.
 * @param {Object[]} options.interceptors List of interceptors to use. Interceptors can arbitrarily pre-/post-process
 *   HTTP requests.
 * @param {*} options.* Any other parameters are passed to the interceptors. These can include environmental options such
 *   as "gatewayUri" which then take precedence over those from global environment.
 *
 * @example
 *    let client = new UuApp.AppClient.Client({
 *      requestTimeout: 20,
 *      headers: {
 *        "x-my-extra-header": "abcd"
 *      },
 *      interceptors: [MyInterceptor].concat(UuApp.AppClient.Client.defaults.interceptors)
 *    });
 *
 *    // ... all calls using "client.get(...)" or "client.post()" will have timeout 20s (unless the timeout
 *    // is overridden in the invoke call directly) and will have an extra HTTP header.
 */

var Client = /*#__PURE__*/function () {
  _createClass(Client, null, [{
    key: "get",

    /**
     * Equivalent to {@link UuApp.AppClient.Client#get} using Client with default
     * configuration, i.e.:
     *
     *     new UuApp.AppClient.Client().get(uri, options)
     *
     * @see {@link UuApp.AppClient.Client#get Client#get}
     * @method UuApp.AppClient.Client.get
     */
    value: function () {
      var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(uri) {
        var dtoIn,
            options,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dtoIn = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;
                return _context.abrupt("return", new Client().get(uri, dtoIn, options));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
    /**
     * Equivalent to {@link UuApp.AppClient.Client#post} using Client with default
     * configuration, i.e.:
     *
     *     new UuApp.AppClient.Client().post(uri, dtoIn, options)
     *
     * @see {@link UuApp.AppClient.Client#post Client#post}
     * @method UuApp.AppClient.Client.post
     */

  }, {
    key: "post",
    value: function () {
      var _post = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(uri) {
        var dtoIn,
            options,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dtoIn = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;
                return _context2.abrupt("return", new Client().post(uri, dtoIn, options));

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function post(_x2) {
        return _post.apply(this, arguments);
      }

      return post;
    }()
  }]);

  function Client(options) {
    _classCallCheck(this, Client);

    this._options = options || {};
    this._options.headers = Helpers.keysToLowerCase(this._options.headers);
    this._aborted = false;
  }
  /**
   * Invokes remote call using HTTP GET request. See {@link UuApp.AppClient.Client#post Client#post}
   * for detailed options and behaviour.
   *
   * Keep in mind that the "dtoIn" parameter is sent via URL parameter(s)
   * and browsers impose limit to the maximal length of the URL. To be safe, limit the amount of data so that the URL
   * doesn't exceed 2048 bytes.
   *
   * @param {(string|UuApp.Uri.Uri)} uri Uri of the uuOS9 endpoint.
   * @param {*} dtoIn The parameters to send in the request URL.
   * @param {Object} options Optional options for the remote call.
   * @return Promise resolving to a response object (or rejecting to a response object with error field).
   * @method UuApp.AppClient.Client#get
   * @see {@link UuApp.AppClient.Client#post Client#post}
   *
   * @example
   *    // simple call
   *    let baseUri = Uri.parse(location.protocol + "//" + location.host + location.pathname).baseUri; // "http://example.com/vendor-app/tid-awid"
   *    Client.get(baseUri.join("+/getAttributes"), { param1: "v1" }).then(function success(response) {
   *      let data = response.data; // contains parsed response entity
   *      console.log(response.status, response.headers(), response.data);
   *    }, function error(response) {
   *      let error = response.error; // contains parsed response error
   *      console.log(response.status, response.headers(), response.error);
   *    });
   *
   * @example
   *    // parameterizing uuUri and the call
   *    let uri = new UuApp.Uri.UriBuilder("/cds-gb-main/0-0/getAttributes", {
   *      workspace: "15634-34e5684da3435",
   *      useCase: "getConfig",
   *      parameters: { p1: "v1" }
   *    }).toUri();
   *    client.get(uri, null, {
   *      requestTimeout: 5,
   *      headers: {
   *        "x-my-header": "abc"
   *      }
   *    }).then(console.log.bind(console), console.log.bind(console));
   *
   * @example
   *    // accept any response and don't parse it
   *    let workspace = "...";
   *    let guestbookId = "...";
   *    client.get(`/cds-gb/${workspace}/guestbook/${guestbookId}/downloadData`, null, {
   *      transformResponse: false,
   *      headers: {
   *        "accept": "*\/*"
   *      }
   *    }).then(console.log.bind(console), console.log.bind(console));
   */


  _createClass(Client, [{
    key: "get",
    value: function () {
      var _get2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(uri, dtoIn, options) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this._invoke("get", uri, dtoIn, options));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function get(_x3, _x4, _x5) {
        return _get2.apply(this, arguments);
      }

      return get;
    }()
    /**
     * Invokes remote call using HTTP POST request. Default values for settings will
     * be filled in from Client instance configuration and then from global defaults.
     *
     * The client serializes data to and from server using {@link UuApp.AppClient.Client.contentTransformers} according
     * to the specified "content-type" HTTP request/response header.
     * Default value for "content-type" request header for requests with body entity is "application/json; charset=utf-8",
     * except for case when sending {@link https://developer.mozilla.org/en-US/docs/Web/API/FormData FormData} object or
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} (or
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Blob Blob}) object for which the default value is
     * "multipart/form-data". Default accepted response ("accept" request header) is "application/json".
     * Note that default accepted response can be extended in the future to support formats such as MessagePack and others.
     *
     * **Return value**
     *
     * Return value is a {@link https://developer.mozilla.org/cs/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise}
     * resolving / rejecting to a response object which contains following fields:
     *
     * * {Object} data - response data. Data is parsed with content handler according to "content-type" response header
     *     unless option transformResponse is false (in which case it's left as received from browser).
     * * {Error} error - the error instance (see Error handling below). This field is set if and only if the Promise is rejected.
     * * {number} status - the HTTP status code.
     * * {function(string)} headers - function which returns value of the specified (case-insenstive) response header.
     *   If called with no arguments, an array with all response headers is returned.
     * * {Object} config - final configuration options that were used for launching AJAX request.
     *
     * The returned Promise instance additionally contains method {function()} abort for aborting ongoing remote call.
     *
     * **File upload**
     *
     * Use "content-type" header with "multipart/form-data" value when uploading binary data (File, Blob). Alternatively, it's
     * possible to use standard {@link https://developer.mozilla.org/en-US/docs/Web/API/FormData FormData} object - see examples
     * below. Note that when using FormData object, the order of appending the form fields matters - append simple values first
     * and only in the end append file objects. The reason is that in this order, the server might decide not to allow the upload
     * based on the other already-available fields thus allowing to end the connection without full upload of the file(s).
     * _(Client will fix the order of values in FormData object, however not all browsers support this operation.)_
     *
     * Don't forget to **disable timeout when performing the upload** so that it doesn't get cancelled.
     *
     * **Error handling**
     *
     * If an error happens during the call invocation (determined by HTTP response status code), the resulting Promise is
     * rejected with response object which will contain "error" field set to an instance of one of these error types
     * (when using default interceptors):
     *
     *   * null - if server sent response with error HTTP status code but it contained no recognizable error data.
     *   * {@link UuApp.Error.RemoteError} - error as sent from remote server. Note that the response can contain
     *     several errors - in such case only first error is extracted into "error" field.
     *   * {@link UuApp.Error.NetworkError} - in case of problems with connecting to remote server.
     *   * {@link UuApp.Error.TimeoutError} - when the request didn't end within specified timeout.
     *   * {@link UuApp.Error.AbortError} - when invocation is aborted by invoking promise.abort() method.
     *
     * The resulting response object contains also HTTP status code and will contain "data"
     * field set to the response entity (usually containing parsed error list).
     *
     * **Timeout**
     *
     * The timeout applies to the remote call duration only. If an interceptor is used which performs lengthy or asynchronous
     * operation prior to executing the remote call, it's not counted towards the timeout.
     *
     * @param {(string|UuApp.Uri.Uri)} uri Uri of the uuOS9 endpoint.
     * @param {(FormData|*)} dtoIn The DTO to send in the request body.
     * @param {Object} options Optional options for the remote call.
     * @param {number} options.requestTimeout The timeout for the command invocation. Default is 300.
     * @param {Object} options.headers The HTTP headers to send. Header names are case-insensitive, but it's advised
     *   to use lowercased names to prevent duplicities within the map. Headers are merged with default headers from
     *   Client / global configuration. If a header is in defaults and it's required to prevent it from being
     *   sent during this invocation, specify the header and use null as its value.
     * @param {boolean} options.transformParameters If false, processing of the command parameters (DTO) will be skipped so they'll be
     *   sent exactly as-is (the browser must support sending the value as-is in XmlHttpRequest). Default value is true.
     * @param {boolean} options.transformResponse If false, processing of the response (such as parsing the response as JSON) will be skipped. Default is true.
     * @param {*} options.* Any other parameters are passed to the interceptors. These can include environmental options such
     *   as "gatewayUri" which then take precedence over those from global environment.
     * @return Promise resolving to a response object (or rejecting to a response object with error field).
     * @method UuApp.AppClient.Client#post
     *
     * @example
     *    // command call sending data
     *    let tenant = "UU-BT";
     *    let guestbookId = "123";
     *    client.post(`/cds-gb/${tenant}/guestbook/${guestbookId}/setAttributes`, {
     *      name: "Modified guestbook",
     *      invitesLimit: 10,
     *      public: true
     *    }).then(console.log.bind(console), console.log.bind(console));
     *
     * @example
     *     // uploading file(s) - let iant 1 (explicit Content-Type header)
     *     let file = inputElement.files[0];
     *     let params = {
     *       file: file,
     *       anotherValue: "abc"
     *     }
     *     client.post("/cds-gb/UU-BT/guestbook/123/uploadData", params, {
     *       requestTimeout: 0,
     *       headers: {
     *         "content-type": "multipart/form-data"
     *       }
     *     });
     *
     *     // uploading file(s) - let iant 2 (usage of FormData)
     *     // !!! append files as the last values
     *     let formData = new FormData();
     *     formData.append("anotherValue", "abc");
     *     formData.append("file", file);
     *     let promise = client.post("/cds-gb/UU-BT/guestbook/123/uploadData", formData, {
     *       requestTimeout: 0
     *     });
     *     promise.then(...); // process response / error
     *
     *     // aborting ongoing call
     *     elementForUploadCancel.onclick = function (e) {
     *       promise.abort(); // promise will be rejected with UuApp.Error.AbortError instance
     *     };
     *
     * @example
     *    // error distinguishing
     *    client.get("/cds-gb/UU-BT/guestbook/123/getAttributes").then(function success(response) {
     *      console.log(response.status, response.headers(), response.data);
     *    }, function error(response) {
     *      console.log(response.status, response.headers(), response.data);
     *      let error = response.error;
     *      if (error instanceof UuApp.Error.TimeoutError) console.log("Timed out.");
     *      else if (error instanceof UuApp.Error.AbortError) console.log("Aborted.");
     *      else if (error instanceof UuApp.Error.NetworkError) console.log("Communication / network error.");
     *      else if (response.status == 401) console.log("Not authenticated.");
     *      else if (response.status < 500) {
     *        console.log("User or client problem - invalid data / unfulfilled business rules / invalid call / ...", response.data);
     *      } else if (response.status >= 500) console.log("Server-side problem.", response.data);
     *      else console.log("Unrecognized problem.", error);
     *    });
     *
     * @example
     *    // send data in custom format
     *    client.post("/cds-gb/UU-BT/guestbook/123/setSomething", convertToMySuperFormat(dto), {
     *      transformParameters: false,
     *      headers: {
     *        "content-type": "text/x-my-super-format"
     *      }
     *    }).then(console.log.bind(console), console.log.bind(console));
     */

  }, {
    key: "post",
    value: function () {
      var _post2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(uri, dtoIn, options) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this._invoke("post", uri, dtoIn, options));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function post(_x6, _x7, _x8) {
        return _post2.apply(this, arguments);
      }

      return post;
    }()
  }, {
    key: "_invoke",
    value: function () {
      var _invoke2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(method, uri, dtoIn, options) {
        var _this = this;

        var request, invocationChain;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                // prepare request
                request = {
                  method: (method || "post").toLowerCase(),
                  uri: uri,
                  body: dtoIn,
                  headers: _objectSpread({}, this._options.headers, Helpers.keysToLowerCase((options || {}).headers))
                }; // build invocation chain

                invocationChain = ((options || {}).interceptors || (this._options || {}).interceptors || this.constructor.getDefaultInterceptors() || []).reduceRight(function (result, interceptorClass) {
                  return new interceptorClass(result, _this._options);
                }, new HttpClient(this._options)); // invoke request

                return _context5.abrupt("return", invocationChain.invoke(request, options));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _invoke(_x9, _x10, _x11, _x12) {
        return _invoke2.apply(this, arguments);
      }

      return _invoke;
    }()
  }], [{
    key: "getDefaultInterceptors",
    value: function getDefaultInterceptors() {
      return DEFAULT_INTERCEPTORS;
    }
  }]);

  return Client;
}();

module.exports = Client;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  get BaseError() {
    return __webpack_require__(99);
  },

  get Config() {
    return __webpack_require__(100);
  },

  get NameConverter() {
    return __webpack_require__(110);
  },

  get Loader() {
    return __webpack_require__(106);
  },

  get ValueConverter() {
    return __webpack_require__(105);
  },

  get OptsReader() {
    return __webpack_require__(111);
  },

  get ContextStore() {
    return __webpack_require__(112);
  },

  get GlobalStore() {
    return __webpack_require__(114);
  },

  get Histogram() {
    return __webpack_require__(116);
  },

  get DuplicateLibraryValidator() {
    return __webpack_require__(117);
  },

  get Finder() {
    return __webpack_require__(118);
  },

  get Digest() {
    return __webpack_require__(119);
  },

  get Mutex() {
    return __webpack_require__(122);
  },

  get LruCache() {
    return __webpack_require__(124);
  },

  get Base64() {
    return __webpack_require__(125);
  }

};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Ancestor of all errors raised by UAF. Extends standard
 * JavaScript error by unique error id, timestamp and also
 * option to provide error cause.
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BaseError = /*#__PURE__*/function (_Error) {
  _inherits(BaseError, _Error);

  var _super = _createSuper(BaseError);

  /**
   * Creates new instance of error
   * @param message Error message
   * @param cause Error cause
   */
  function BaseError(message) {
    var _this;

    var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, BaseError);

    if (message instanceof Error) {
      cause = message;
      message = null;
    }

    _this = _super.call(this, message ? message.toString() : "");
    _this._id = "00000000000000000000000000000000".replace(/0/g, function () {
      return (~~(Math.random() * 16)).toString(16);
    });
    _this._timestamp = new Date();
    _this._cause = cause;
    _this._name = _this.constructor.name;
    return _this;
  }
  /**
   * Returns unique error ID (helps with lookup of error in logs).
   * @returns {string} Unique error ID
   */


  _createClass(BaseError, [{
    key: "id",
    get: function get() {
      return this._id;
    }
    /**
     * Sets error id.
     * @param {string} id error ID
     */
    ,
    set: function set(id) {
      this._id = id;
    }
    /**
     * Returns timestamp of error instantiation (may differ from error log time).
     * @returns {Date} Timestamp of error instantiation
     */

  }, {
    key: "timestamp",
    get: function get() {
      return this._timestamp;
    }
    /**
     * Returns error cause
     * @returns {Error|null} Error cause
     */

  }, {
    key: "cause",
    get: function get() {
      return this._cause;
    }
    /**
     * Sets error cause.
     * @param {Error|null} error Error cause
     */
    ,
    set: function set(error) {
      this._cause = error;
    }
    /**
     * Returns error name
     * @return {string} Error name
     */

  }, {
    key: "name",
    get: function get() {
      return this._name;
    }
  }]);

  return BaseError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

module.exports = BaseError;

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, process) {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConfigSource = __webpack_require__(102);

var ConfigChain = __webpack_require__(104);

if (typeof window == "undefined") {
  var DupValidator = __webpack_require__(107);

  DupValidator.ensureSingleVersion(module);

  var path = __webpack_require__(108);

  var fs = __webpack_require__(103);

  var os = __webpack_require__(109);
}
/**
 * Main class for working with configuration (reading, updating, source registration)
 */


var Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }

  _createClass(Config, null, [{
    key: "registerImplicitSource",

    /**
     * Allows to provide default configuration of library or application.
     * @param {string|RegExp|Object} source
     */
    value: function registerImplicitSource(source) {
      Config.implicitSources.push(new ConfigSource(source));
      var profiles = Config.activeProfiles;

      if (profiles && profiles.length > 0) {
        Config.activateProfiles(profiles);
      }
    }
    /**
     * Allows registration of additional configuration source
     * @param {String} profile
     * @param {string|RegExp|Object} source
     * @param {Number} ttl
     */

  }, {
    key: "registerSource",
    value: function registerSource(profile, source, ttl) {
      var profileSources = Config.sources[profile];

      if (profileSources) {
        profileSources.push(new ConfigSource(source, ttl));
      } else {
        Config.sources[profile] = [new ConfigSource(source, ttl)];
      }

      var profiles = Config.activeProfiles;

      if (profiles.includes(profile)) {
        Config.activateProfiles(profiles);
      }
    }
  }, {
    key: "atProfileActivation",
    value: function atProfileActivation(funktion) {
      for (var _len = arguments.length, profiles = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        profiles[_key - 1] = arguments[_key];
      }

      Config.callbacks.push([funktion, profiles]);
    }
    /**
     * Activates given set of configuration profiles
     * @param {...profiles} profiles
     */

  }, {
    key: "activateProfiles",
    value: function activateProfiles() {
      for (var _len2 = arguments.length, profiles = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        profiles[_key2] = arguments[_key2];
      }

      var sources = [];

      if (typeof window == "undefined") {
        // 1) registered sources
        profiles.forEach(function (profile) {
          var profileSources = Config.sources[profile] || [];
          profileSources.reverse();
          sources.push.apply(sources, _toConsumableArray(profileSources));
          profileSources.reverse();
        }); // 2) "legacy" source for backward compatibility with C3

        sources.push(new ConfigSource("env://SERVER_CFG")); // 3) configuration from environment

        sources.push(new ConfigSource(/.*/)); // 4) configuration files

        var cfgDir = Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["CONFIG_DIR"] || Config._getDefaultConfigDir();

        var sysCfgDir = Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["SYS_CONFIG_DIR"] || Config._getDefaultSysConfigDir();

        profiles.forEach(function (profile) {
          var profileCfgPropertiesFile = path.join(cfgDir, profile.toLowerCase() + ".properties");
          var profileCfgJsonFile = path.join(cfgDir, profile.toLowerCase() + ".json");
          var sysProfileCfgPropertiesFile = path.join(sysCfgDir, profile.toLowerCase() + ".properties");
          var sysProfileCfgJsonFile = path.join(sysCfgDir, profile.toLowerCase() + ".json");
          if (fs.existsSync(sysProfileCfgJsonFile)) sources.push(new ConfigSource("file://" + sysProfileCfgJsonFile, 0));
          if (fs.existsSync(profileCfgJsonFile)) sources.push(new ConfigSource("file://" + profileCfgJsonFile, 0));
          if (fs.existsSync(sysProfileCfgPropertiesFile)) sources.push(new ConfigSource("file://" + sysProfileCfgPropertiesFile, 0));
          if (fs.existsSync(profileCfgPropertiesFile)) sources.push(new ConfigSource("file://" + profileCfgPropertiesFile, 0));
        }); // 5) default configuration

        sources.push.apply(sources, _toConsumableArray(Config.implicitSources));
      } else {
        var uu5 = window["UU5"];
        var env = (uu5 ? uu5["Environment"] : null) || {};
        sources.push(new ConfigSource(env));
      } // create the chain


      var chain = new ConfigChain(sources, profiles); // Copy custom configuration added to config from previously
      // activated profiles (so runtime configuration is not lost)

      if (Config.chain) chain._custom = JSON.parse(JSON.stringify(Config.chain._custom));
      Config.chain = chain; // Force load of all configs, fail on errors (Configuration must be
      // complete at least on profile activation which is expected during
      // environment initialization)

      chain.load(true); // Invoke profile activation callbacks

      Config.callbacks.forEach(function (entry) {
        var cb = entry[0];
        var cbProfiles = entry[1];
        if (!Config._doArraysIntersect(profiles, cbProfiles)) cb.call();
      });
      Config.activeProfiles = Array.from(new Set([].concat(_toConsumableArray(Config.activeProfiles), profiles))); // TODO log it (when logging gets standardised)
      // console.log('\nProfile(s) ' + chain.activeProfiles() +  ' activated. Effective configuration:\n', chain.toJSON(),'\n')
    }
    /**
     * Checks if given profile(s) is(are) active.
     * @param {...profiles} profiles
     * @returns {boolean}
     */

  }, {
    key: "isProfileActive",
    value: function isProfileActive() {
      var activeProfiles = Config.activeProfiles;
      if (!activeProfiles) return false;

      for (var _len3 = arguments.length, profiles = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        profiles[_key3] = arguments[_key3];
      }

      return Config._doArraysIntersect(activeProfiles, profiles);
    }
    /**
     * Returns value of the given configuration parameter
     * @param {string} name
     * @param {Boolean} recursive
     * @returns {*}
     */

  }, {
    key: "get",
    value: function get(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().get(name, recursive);
    }
    /**
     * Returns parameter value transformed to string using .toString().
     * @param {String} name
     * @param {boolean} recursive
     * @returns {String}
     */

  }, {
    key: "getString",
    value: function getString(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getString(name, recursive);
    }
    /**
     * Returns parameter value transformed to number (if possible, else raises error).
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Number}
     */

  }, {
    key: "getNumber",
    value: function getNumber(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getNumber(name, recursive);
    }
    /**
     * Returns parameter value transformed to boolean (if possible, else raises error).
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Boolean}
     */

  }, {
    key: "getBoolean",
    value: function getBoolean(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getBoolean(name, recursive);
    }
    /**
     * Returns parameter value transformed to a Date object using its constructor or raises error.
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Date}
     */

  }, {
    key: "getTime",
    value: function getTime(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getTime(name, recursive);
    }
    /**
     * Returns parameter value transformed to a class if possible, else raises error.
     * Source path needs to be provided, which is the path to the module that exports the requested class.
     * @param {String} name
     * @param {String} sourcePath
     * @param {boolean} recursive
     * @returns {Function}
     */

  }, {
    key: "getClass",
    value: function getClass(name, sourcePath) {
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return Config._getChain().getClass(name, sourcePath, recursive);
    }
    /**
     * Returns parameter value transformed to array of given types
     * @param {String} name
     * @param {String} type
     * @param {Boolean} recursive
     * @returns {Array}
     */

  }, {
    key: "getArray",
    value: function getArray(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return Config._getChain().getArray(name, type, recursive, sourcePath);
    }
    /**
     * Sets configuration parameter with highest priority (overrides value of any existing source).
     * @param {String} name
     * @param {*} value
     */

  }, {
    key: "set",
    value: function set(name, value) {
      Config._getChain().set(name, value);
    }
    /**
     * Deletes explicitly set configuration parameter.
     * @param {String} name
     */

  }, {
    key: "delete",
    value: function _delete(name) {
      Config._getChain().delete(name);
    }
    /**
     * Checks if configuration provides parameter of given name.
     * Returns false for undefined values and true for null values.
     * @param {String} name
     * @param {Boolean} recursive
     * @returns {*|Boolean|boolean}
     */

  }, {
    key: "hasKey",
    value: function hasKey(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().hasKey(name, recursive);
    }
    /**
     * Returns Object containing effective configuration.
     * @param {boolean} failOnError
     * @returns {*}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return Config._getChain().toJSON(failOnError);
    }
    /**
     * Forces reload of all configuration sources related to activated profiles.
     * @param {boolean} failOnError
     */

  }, {
    key: "reload",
    value: function reload() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      Config._getChain().load(failOnError);
    }
    /**
     * Clears all configuration.
     */

  }, {
    key: "clear",
    value: function clear() {
      Config.activeProfiles = [];
      Config.callbacks = [];
      Config.implicitSources = [];
      Config.sources = {};
      Config.chain = null;
    }
  }, {
    key: "_getChain",
    value: function _getChain() {
      var chain = Config.chain;

      if (!chain) {
        var actProf = Config.activeProfiles;

        if (actProf.length === 0) {
          var envProfiles = Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["CONFIG_PROFILE"] || "development";

          if (envProfiles) {
            var arr = envProfiles.split(",");
            actProf = [];
            arr.forEach(function (profile) {
              actProf.push(profile.trim());
            });
            Config.activateProfiles.apply(Config, _toConsumableArray(actProf));
          } else {
            actProf = "production";
            Config.activateProfiles(actProf);
          }
        }

        chain = Config.chain;
      }

      return chain;
    } // TODO move this function to some more appropriate place?

  }, {
    key: "_doArraysIntersect",
    value: function _doArraysIntersect(arr1, arr2) {
      var doTheyIntersect = false;
      arr1.forEach(function (el1) {
        if (arr2.includes(el1)) doTheyIntersect = true;
      });
      return doTheyIntersect;
    }
  }, {
    key: "_getDefaultConfigDir",
    value: function _getDefaultConfigDir() {
      var configPath = path.join(process.cwd(), "env");

      if (!fs.existsSync(configPath)) {
        configPath = path.join(process.cwd(), "config");
      }

      return configPath;
    }
  }, {
    key: "_getDefaultSysConfigDir",
    value: function _getDefaultSysConfigDir() {
      var configPath = path.join(os.homedir(), ".uu", "env");

      if (!fs.existsSync(configPath)) {
        configPath = path.join(os.homedir(), ".uu", "config");
      }

      return configPath;
    }
  }]);

  return Config;
}();

Config.activeProfiles = [];
Config.callbacks = [];
Config.implicitSources = [];
Config.sources = {};
Config.chain = null;
module.exports = Config;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(95)(module), __webpack_require__(101)))

/***/ }),
/* 101 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

if (typeof window == "undefined") {
  var fs = __webpack_require__(103);
}

var ConfigSource = /*#__PURE__*/function () {
  function ConfigSource(source) {
    var ttl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    _classCallCheck(this, ConfigSource);

    this._ttl = ttl;

    if (typeof source === "string" || source instanceof String) {
      var match = /^file:\/\/(.*)/i.exec(source);

      if (match !== null) {
        if (typeof window != "undefined") throw new TypeError("Unable to use " + source + " as configuration source in browser environment.");
        this._fileSrc = match[1];
      } else {
        match = /^env:\/\/([a-z_][a-z0-9_]*)/i.exec(source);

        if (match !== null) {
          this._senvSrc = match[1];
        } else {
          throw new TypeError("unable to use " + source + " as configuration source");
        }
      }
    } else if (source instanceof RegExp) {
      this._menvSrc = source;
    } else if (source && _typeof(source) === "object") {
      this._data = source;
    } else {
      throw new TypeError("unable to use " + _typeof(source.constructor) + " as configuration source");
    }
  }

  _createClass(ConfigSource, [{
    key: "load",
    value: function load() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var loadedSrc;

      try {
        if (this._fileSrc !== undefined && this._fileSrc) {
          loadedSrc = this._fileSrc;
          var data = fs.readFileSync(this._fileSrc, "utf8");
          this._data = this._parse(data);
        } else if (this._senvSrc !== undefined && this._senvSrc) {
          loadedSrc = this._senvSrc;

          var _data = Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})[this._senvSrc] || "";

          this._data = this._parse(_data);
        } else if (this._menvSrc !== undefined && this._menvSrc) {
          loadedSrc = this._menvSrc;
          var regex = this._menvSrc;
          var envKeys = Object.keys(Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"}));
          var result = {};
          envKeys.forEach(function (key) {
            if (regex.test(key)) {
              result[key.toLowerCase()] = Object({"NAME":"uu_appg01_core","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})[key];
            }
          });
          this._data = result;
        }

        this._loaded = new Date();
      } catch (err) {
        var errMsg = "Loading of configuration from source [".concat(loadedSrc, "] failed: ").concat(err.toString());

        if (failOnError) {
          throw new Error(errMsg);
        } else {
          console.log(errMsg);
        }
      }
    }
  }, {
    key: "get",
    value: function get(name) {
      if (this._reload()) this.load();
      return this._data[name];
    }
  }, {
    key: "setTtl",
    value: function setTtl(ttl) {
      this._ttl = ttl;
    }
  }, {
    key: "hasKey",
    value: function hasKey(name) {
      if (this._reload()) this.load();
      return this._data[name] !== undefined;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (this._reload()) this.load(failOnError);
      return JSON.parse(JSON.stringify(this._data));
    }
  }, {
    key: "_parse",
    value: function _parse(sourceData) {
      if (/^[\r\n\t ]*{[\s\S]*}[\r\n\t ]*$/.test(sourceData)) {
        return JSON.parse(sourceData);
      } else {
        var result = {};
        sourceData = sourceData.replace(/\r\n?/g, "\n");
        var splitData = sourceData.split("\n");
        splitData.forEach(function (line) {
          line = line.trim();
          if (/^[#!]/.test(line)) return;
          var splitLine = line.split(/[=:](.*)/, 2);
          var name = splitLine[0];
          var value = splitLine[1];
          if (name === null) return;
          name = name.trim();
          if (name.length === 0) return;

          if (value === undefined) {
            value = null;
          } else {
            value = value.trimLeft();

            try {
              value = JSON.parse(value.trim());
            } catch (err) {// do nothing
            }
          }

          result[name] = value;
        });
        return result;
      }
    }
  }, {
    key: "_reload",
    value: function _reload() {
      if (!this._loaded) return true;
      if (this._ttl < 0) return false;
      var t = new Date();
      var reload = t.getTime() > this._loaded.getTime() + this._ttl * 1000;

      if (this._fileSrc) {
        var stats = fs.statSync(this._fileSrc);

        if (stats.isFile()) {
          var mTime = new Date(stats["mtime"]);
          return reload && mTime.getTime() > this._loaded.getTime();
        } else {
          return reload;
        }
      } else {
        return reload;
      }
    }
  }]);

  return ConfigSource;
}();

module.exports = ConfigSource;

/***/ }),
/* 103 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BaseError = __webpack_require__(99);

var ValueConverter = __webpack_require__(105);

var expression = /(?:^|[^\\])(\${([\w_.]+)(?::([^}]*))?}|#{([^}]+)})/;

var ConfigChain = /*#__PURE__*/function () {
  function ConfigChain(sources, profiles) {
    _classCallCheck(this, ConfigChain);

    this._sources = sources;
    this._profiles = profiles;
    this._custom = {};
  }

  _createClass(ConfigChain, [{
    key: "activeProfiles",
    value: function activeProfiles() {
      return JSON.parse(JSON.stringify(this._profiles));
    }
  }, {
    key: "get",
    value: function get(name) {
      var _this = this;

      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var loopCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var result;
      var self = this;

      if (recursive) {
        var parts = name.split(".");

        var _loop = function _loop() {
          var name = parts.join(".");
          if (_this._custom[name] !== undefined) return {
            v: _this._custom[name]
          };

          _this._sources.forEach(function (source) {
            var value = source.get(name);
            if (value !== undefined && result === undefined) result = self._resolve(value, loopCheck);
          });

          if (result !== undefined) return {
            v: result
          };
          var length = parts.length;
          var idx = length === 1 ? 0 : length - 2;
          parts.splice(idx, 1);
        };

        while (parts.length > 0) {
          var _ret = _loop();

          if (_typeof(_ret) === "object") return _ret.v;
        }
      } else {
        if (this._custom[name] !== undefined) return this._custom[name];

        this._sources.forEach(function (source) {
          var value = source.get(name);
          if (value !== undefined && result === undefined) result = self._resolve(value, loopCheck);
        });

        if (result !== undefined) return result;
      }

      return result;
    }
  }, {
    key: "getString",
    value: function getString(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toString(value);
    }
  }, {
    key: "getNumber",
    value: function getNumber(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toNumber(value);
    }
  }, {
    key: "getBoolean",
    value: function getBoolean(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toBoolean(value);
    }
  }, {
    key: "getTime",
    value: function getTime(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toTime(value);
    }
  }, {
    key: "getClass",
    value: function getClass(name, sourcePath) {
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var value = this.get(name, recursive);
      sourcePath = !sourcePath ? this._serverSourcePath() : sourcePath;
      return ValueConverter.toClass(value, sourcePath);
    }
  }, {
    key: "getArray",
    value: function getArray(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var value = this.get(name, recursive);
      sourcePath = !sourcePath ? this._serverSourcePath() : sourcePath;
      return ValueConverter.toArray(value, type, sourcePath);
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this._custom[name] = value;
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      delete this._custom[name];
    }
  }, {
    key: "hasKey",
    value: function hasKey(name) {
      var _this2 = this;

      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var hasKey = false;

      if (recursive) {
        var parts = name.split(".");

        var _loop2 = function _loop2() {
          var name = parts.join(".");
          if (_this2._custom[name] !== undefined) return {
            v: true
          };

          _this2._sources.forEach(function (source) {
            if (!hasKey && source.hasKey(name)) hasKey = true;
          });

          if (hasKey) {
            return {
              v: hasKey
            };
          }

          var length = parts.length;
          var idx = length === 1 ? 0 : length - 2;
          parts.splice(idx, 1);
        };

        while (parts.length > 0) {
          var _ret2 = _loop2();

          if (_typeof(_ret2) === "object") return _ret2.v;
        }
      } else {
        if (this._custom[name] !== undefined) return true;

        this._sources.forEach(function (source) {
          if (source.hasKey(name)) {
            hasKey = true;
          }
        });
      }

      return hasKey;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var result = {};

      var resolver = this._resolve.bind(this);

      this._sources.reverse();

      this._sources.forEach(function (source) {
        var sourceJson = source.toJSON();
        var keys = Object.keys(sourceJson);
        keys.forEach(function (key) {
          result[key] = resolver(sourceJson[key]);
        });
      });

      this._sources.reverse();

      var keys = Object.keys(this._custom);
      var custom = this._custom;
      keys.forEach(function (key) {
        result[key] = resolver(custom[key]);
      });
      return result;
    }
  }, {
    key: "load",
    value: function load() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this._sources.reverse();

      this._sources.forEach(function (source) {
        source.load(failOnError);
      });

      this._sources.reverse();
    }
  }, {
    key: "_resolve",
    value: function _resolve(value) {
      var loopCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!!value && value.constructor === Object) {
        var newObject = {};

        for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          newObject[key] = this._resolve(value[key]);
        }

        return newObject;
      }

      if (!(typeof value === "string") && !(value instanceof String)) return value;
      var matchResult = value.match(expression);

      if (!matchResult) {
        return value;
      } else {
        var _expression = matchResult[1];
        var _key = matchResult[2];
        var defolt = matchResult[3];
        var prog = matchResult[4];

        if (prog) {
          value = eval(prog);
          return this._resolve(value);
        } else {
          if (loopCheck.includes(_key)) throw new BaseError("endless configuration loop caused by [" + loopCheck + "]");
          loopCheck.push(_key);
          var resolved = this.get(_key, true, loopCheck);
          if (!resolved) resolved = defolt;
          value = value.replace(new RegExp(_expression.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&"), "g"), resolved);
          return this._resolve(value);
        }
      }
    }
  }, {
    key: "_serverSourcePath",
    value: function _serverSourcePath() {
      return this.get("server_root");
    }
  }]);

  return ConfigChain;
}();

module.exports = ConfigChain;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BaseError = __webpack_require__(99);

var Loader = __webpack_require__(106);

var INVALID_DATE = new Date("foo");
/**
 * Helper for converting values to different basic types.
 */

var ValueConverter = /*#__PURE__*/function () {
  function ValueConverter() {
    _classCallCheck(this, ValueConverter);
  }

  _createClass(ValueConverter, null, [{
    key: "toString",

    /**
     * Converts value to string.
     * @param value Value to be converted.
     * @returns {String} Converted value.
     */
    value: function toString(value) {
      if (value === null || value === undefined) {
        return null;
      } else {
        return value.toString();
      }
    }
    /**
     * Converts value to number.
     * @param value Value to be converted.
     * @returns {Number} Converted value.
     */

  }, {
    key: "toNumber",
    value: function toNumber(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "number") {
        return value;
      } else if (typeof value === "string") {
        if (/^[+-]?[\d]+(\.[\d]+)?([eE][+-]?[\d]+)?$/.test(value)) {
          return Number(value);
        } else {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to number"));
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to number"));
      }
    }
    /**
     * Converts value to boolean.
     * @param value Value to be converted.
     * @returns {Boolean} Converted value.
     */

  }, {
    key: "toBoolean",
    value: function toBoolean(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "boolean") {
        return value;
      } else if (typeof value === "number") {
        return value !== 0;
      } else if (typeof value === "string") {
        if (/^(false|0)$/i.test(value)) {
          return false;
        } else if (/^(true|1)$/i.test(value)) {
          return true;
        } else {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to boolean"));
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to boolean"));
      }
    }
    /**
     * Converts value to time.
     * @param value Value to be converted.
     * @returns {Date} Converted value.
     */

  }, {
    key: "toTime",
    value: function toTime(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (value instanceof Date) {
        return value;
      } else if (typeof value === "number") {
        return new Date(value);
      } else if (typeof value === "string") {
        var date = new Date(value);

        if (date.toString() === INVALID_DATE.toString()) {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to time"));
        } else {
          return date;
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to time"));
      }
    }
    /**
     * Converts value to class.
     * @param value Value to be converted.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class.
     * @returns {Function} Converted value.
     */

  }, {
    key: "toClass",
    value: function toClass(value, sourcePath) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "function") {
        // TODO Check that function is constructor
        return value;
      } else if (typeof value === "string") {
        if (sourcePath === null || sourcePath === undefined) {
          throw new BaseError("Parameter sourcePath is required to resolve class from string");
        }

        return Loader.loadRealization(sourcePath, value, false);
      } else {
        return value.constructor;
      }
    }
    /**
     * Converts value to array of given types.
     * @param value Value to be converted.
     * @param type If set, all array items will be converted to
     *   given type (one of "string", "number", "boolean", "time", "class")
     * @param sourcePath Path to app/library source folder (app|src) from where to load class
     *   Required for "class" conversion.
     * @returns {Array} Converted value.
     */

  }, {
    key: "toArray",
    value: function toArray(value) {
      var _this = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var sourcePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var arr = null;

      if (value === null || value === undefined) {
        return null;
      } else if (value instanceof Array) {
        arr = value;
      } else if (typeof value === "string") {
        arr = value.split(/[ ]*,[ ]*/);
      } else {
        arr = [value];
      }

      switch (type) {
        case null:
        case undefined:
          // No conversion
          break;

        case "string":
          arr = arr.map(function (item) {
            return _this.toString(item);
          });
          break;

        case "number":
          arr = arr.map(function (item) {
            return _this.toNumber(item);
          });
          break;

        case "boolean":
          arr = arr.map(function (item) {
            return _this.toBoolean(item);
          });
          break;

        case "time":
          arr = arr.map(function (item) {
            return _this.toTime(item);
          });
          break;

        case "class":
          arr = arr.map(function (item) {
            return _this.toClass(item, sourcePath);
          });
          break;

        default:
          throw new BaseError("Unknown conversion type \"".concat(type, "\""));
      }

      return arr;
    }
  }]);

  return ValueConverter;
}();

module.exports = ValueConverter;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 107 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 108 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 109 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 110 */
/***/ (function(module, exports) {

/**
 * Convert nameSpace to file path
 * @param str
 * @returns {string|string}
 * @constructor
 */
function NameConverter(str) {
  var REGEX = /^([_]*[$@#]?)?(?:[a-zA-Z0-9]+(?:[_]+[a-zA-Z0-9]+)?)*([_]+)?$/;

  function _scan(s, re) {
    if (!re.global) throw "Name Converter Error";
    var m = re.exec(s),
        r = [];

    while (m) {
      m.shift();
      r.push(m);
      m = re.exec(s);
    }

    return r;
  }

  var strings = [];
  var result = "";
  str.match(REGEX);
  var prefix = str.match(/^[_]*/)[0];
  str = str.substring(prefix.length, str.length);
  var postfix = str.match(/[_]*$/)[0];
  str = str.substring(0, str.length - postfix.length);
  var befIndex = 0;

  _scan(str, /[a-z]+|[A-Z]+|[0-9]+/g).forEach(function (val) {
    var index = val["index"];
    strings.push(str.substring(befIndex, index));
    befIndex = index;
  });

  strings.push(str.substring(befIndex));
  if (strings[0] === "/" || strings[0] === "\\") strings.shift();

  for (var i = 0; i < strings.length; i += 1) {
    var act = strings[i];
    var nxt = strings[i + 1];

    if (act.match(/^[a-z]+|[0-9]+$/)) {
      result += act;
      result += nxt !== undefined ? "-" : "";
    } else if (act.match(/^[A-Z]$/)) {
      result += act.toLowerCase();
    } else if (act.match(/^[A-Z]+$/)) {
      if (nxt === undefined || nxt.match(/^[0-9]+$/)) {
        result += act.toLowerCase();
        result += nxt !== undefined ? "-" : "";
      } else {
        result += act.substring(0, act.length - 1).toLowerCase();
        result += "-";
        result += act[act.length - 1].toLowerCase();
      }
    }
  }

  result = prefix + result + postfix;
  return result;
}

module.exports = NameConverter;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Config = __webpack_require__(100);

var ValueConverter = __webpack_require__(105);
/**
 * Component for reading option from multiple option
 * sources with support for providing default values
 * and basic type conversions.
 * Example:
 *   reader = new OptsReader(opts1, opts2, Config);
 *   anyType = reader.get("opt_key")
 *   number = reader.getNumber("opt_key", 42)
 */


var OptsReader = /*#__PURE__*/function () {
  /**
   * Creates new instance of options reader.
   * @param opts List of option sources to be read
   *   (ordered by priority from highest to lowest).
   */
  function OptsReader() {
    _classCallCheck(this, OptsReader);

    for (var _len = arguments.length, opts = new Array(_len), _key = 0; _key < _len; _key++) {
      opts[_key] = arguments[_key];
    }

    this._optList = opts;
  }
  /**
   * Returns option with given name or default value
   * if none of option sources provide required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {*}
   */


  _createClass(OptsReader, [{
    key: "get",
    value: function get(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = null;

      var _iterator = _createForOfIteratorHelper(this._optList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var opts = _step.value;

          if (opts === Config) {
            if (opts.hasKey(key, false)) {
              value = opts.get(key, false);
            }
          } else if (opts) {
            if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
              value = opts[key];
            }
          }

          if (value != null) {
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (value == null) {
        value = defaultValue;
      }

      return value;
    }
    /**
     * Checks if any of option sources provide
     * option with given name.
     * @param key Option name.
     * @returns {Boolean} True if option exists.
     */

  }, {
    key: "hasKey",
    value: function hasKey(key) {
      var _iterator2 = _createForOfIteratorHelper(this._optList),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var opts = _step2.value;

          if (opts === Config) {
            if (opts.hasKey(key)) {
              return true;
            }
          } else if (opts) {
            if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
              return true;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return false;
    }
    /**
     * Returns string value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {String}
     */

  }, {
    key: "getString",
    value: function getString(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toString(value);
    }
    /**
     * Returns number value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Number}
     */

  }, {
    key: "getNumber",
    value: function getNumber(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toNumber(value);
    }
    /**
     * Returns boolean value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Boolean}
     */

  }, {
    key: "getBoolean",
    value: function getBoolean(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toBoolean(value);
    }
    /**
     * Returns time value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Date}
     */

  }, {
    key: "getTime",
    value: function getTime(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toTime(value);
    }
    /**
     * Returns class value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class.
     * @param defaultValue Default options value.
     * @returns {Function}
     */

  }, {
    key: "getClass",
    value: function getClass(key, sourcePath) {
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toClass(value, sourcePath);
    }
    /**
     * Returns array value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param type If set, all array items will be converted to
     *   given type (one of "string", "number", "boolean", "time", "class")
     * @param defaultValue Default options value.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class
     *   Required for "class" conversion.
     * @returns {Array}
     */

  }, {
    key: "getArray",
    value: function getArray(key) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toArray(value, type, sourcePath);
    }
  }]);

  return OptsReader;
}();

module.exports = OptsReader;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CLS = __webpack_require__(113);

var BaseError = __webpack_require__(99);
/**
 * ThreadLocal alike context store.
 */


var ContextStore = /*#__PURE__*/function () {
  _createClass(ContextStore, [{
    key: "set",

    /**
     * Stores context attribute.
     * @param key Context attribute name.
     * @param value Context attribute value.
     */
    value: function set(key, value) {
      this._namespace.set(key, value);
    }
    /**
     * Returns context attribute.
     * @param key Context attribute name.
     * @returns {*} Context attribute value.
     */

  }, {
    key: "get",
    value: function get(key) {
      return this._namespace.get(key);
    }
    /**
     * Forks context and runs given function.
     * @param fn Function to be invoked.
     * @returns {*} Return value of invoked function.
     */

  }, {
    key: "fork",
    value: function fork(fn) {
      var result;

      this._namespace.run(function () {
        result = fn();
      });

      return result;
    }
  }], [{
    key: "create",

    /**
     * Creates new context store
     * @param ctxName Context store name.
     * @param fn Function to which should context store be bound.
     * @returns {*} Return value of invoked function.
     */
    value: function create(ctxName, fn) {
      var namespace = CLS.getNamespace(ctxName);

      if (namespace) {
        if (namespace.active) {
          throw new BaseError("Context \"".concat(ctxName, "\" is already created."));
        }
      } else {
        namespace = CLS.createNamespace(ctxName);
      }

      var result;
      namespace.run(function () {
        result = fn();
      });
      return result;
    }
    /**
     * Returns context store bound to current context.
     * @param ctxName Context store name.
     * @returns {ContextStore} Instance of context store or null.
     */

  }, {
    key: "get",
    value: function get(ctxName) {
      var namespace = CLS.getNamespace(ctxName);

      if (namespace && namespace.active) {
        return new ContextStore(namespace);
      } else {
        return null;
      }
    }
  }]);

  function ContextStore(namespace) {
    _classCallCheck(this, ContextStore);

    this._namespace = namespace;
  }

  _createClass(ContextStore, [{
    key: "bindEmitter",
    value: function bindEmitter(emitter) {
      this._namespace.bindEmitter(emitter);
    }
  }]);

  return ContextStore;
}();

module.exports = ContextStore;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NAMESPACES = {};

var ClsHooked = /*#__PURE__*/function () {
  function ClsHooked() {
    _classCallCheck(this, ClsHooked);
  }

  _createClass(ClsHooked, null, [{
    key: "getNamespace",
    value: function getNamespace(name) {
      return NAMESPACES[name];
    }
  }, {
    key: "createNamespace",
    value: function createNamespace(name) {
      var namespace = new Namespace();
      NAMESPACES[name] = namespace;
      return namespace;
    }
  }]);

  return ClsHooked;
}();

var Namespace = /*#__PURE__*/function () {
  function Namespace() {
    _classCallCheck(this, Namespace);

    this.active = {};
  }

  _createClass(Namespace, [{
    key: "set",
    value: function set(name, value) {
      this.active[name] = value;
    }
  }, {
    key: "get",
    value: function get(name) {
      return this.active[name];
    }
  }, {
    key: "run",
    value: function run(fn) {
      fn();
      return this;
    }
  }, {
    key: "bindEmitter",
    value: function bindEmitter(emitter) {// Empty mock method.
    }
  }]);

  return Namespace;
}();

module.exports = ClsHooked;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

if (!global._uuAppGlobals) {
  global._uuAppGlobals = {};
}
/**
 * Global storage allowing to share objects accross multiple modules in various versions.
 */


var GlobalStore = /*#__PURE__*/function () {
  _createClass(GlobalStore, [{
    key: "set",

    /**
     * Stores global attribute.
     * @param key Global attribute name.
     * @param value Global attribute value.
     */
    value: function set(key, value) {
      this._attributes[key] = value;
    }
    /**
     * Returns global attribute.
     * @param key Global attribute name.
     * @returns {*} Global attribute value.
     */

  }, {
    key: "get",
    value: function get(key) {
      return this._attributes[key];
    }
    /**
     * Creates new instance of global store.
     * @private
     */

  }], [{
    key: "get",

    /**
     * Returns global store with given name.
     * @param storeName Global store name.
     * @returns {GlobalStore} Instance of global store.
     */
    value: function get(storeName) {
      var store = global._uuAppGlobals[storeName];

      if (!store) {
        store = global._uuAppGlobals[storeName] = new GlobalStore();
      }

      return store;
    }
  }]);

  function GlobalStore() {
    _classCallCheck(this, GlobalStore);

    this._attributes = {};
  }

  return GlobalStore;
}();

module.exports = GlobalStore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(115)))

/***/ }),
/* 115 */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 116 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 117 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 118 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _sha = __webpack_require__(120);

var Digest = /*#__PURE__*/function () {
  function Digest() {
    _classCallCheck(this, Digest);
  }

  _createClass(Digest, null, [{
    key: "sha1",
    value: function sha1(value) {
      return _sha(value);
    }
  }]);

  return Digest;
}();

module.exports = Digest;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * [js-sha1]{@link https://github.com/emn178/js-sha1}
 *
 * @version 0.6.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */

/*jslint bitwise: true */
(function () {
  'use strict';

  var root = (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' ? window : {};
  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && (typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && process.versions && process.versions.node;

  if (NODE_JS) {
    root = global;
  }

  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && ( false ? undefined : _typeof(module)) === 'object' && module.exports;
  var AMD =  true && __webpack_require__(121);
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];
  var blocks = [];

  var createOutputMethod = function createOutputMethod(outputType) {
    return function (message) {
      return new Sha1(true).update(message)[outputType]();
    };
  };

  var createMethod = function createMethod() {
    var method = createOutputMethod('hex');

    if (NODE_JS) {
      method = nodeWrap(method);
    }

    method.create = function () {
      return new Sha1();
    };

    method.update = function (message) {
      return method.create().update(message);
    };

    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type);
    }

    return method;
  };

  var nodeWrap = function nodeWrap(method) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");

    var nodeMethod = function nodeMethod(message) {
      if (typeof message === 'string') {
        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');
      } else if (message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      } else if (message.length === undefined) {
        return method(message);
      }

      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');
    };

    return nodeMethod;
  };

  function Sha1(sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    this.h0 = 0x67452301;
    this.h1 = 0xEFCDAB89;
    this.h2 = 0x98BADCFE;
    this.h3 = 0x10325476;
    this.h4 = 0xC3D2E1F0;
    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
  }

  Sha1.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }

    var notString = typeof message !== 'string';

    if (notString && message.constructor === root.ArrayBuffer) {
      message = new Uint8Array(message);
    }

    var code,
        index = 0,
        i,
        length = message.length || 0,
        blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);

          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;

      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }

    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }

    return this;
  };

  Sha1.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }

    this.finalized = true;
    var blocks = this.blocks,
        i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];

    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }

      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }

    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha1.prototype.hash = function () {
    var a = this.h0,
        b = this.h1,
        c = this.h2,
        d = this.h3,
        e = this.h4;
    var f,
        j,
        t,
        blocks = this.blocks;

    for (j = 16; j < 80; ++j) {
      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];
      blocks[j] = t << 1 | t >>> 31;
    }

    for (j = 0; j < 20; j += 5) {
      f = b & c | ~b & d;
      t = a << 5 | a >>> 27;
      e = t + f + e + 1518500249 + blocks[j] << 0;
      b = b << 30 | b >>> 2;
      f = a & b | ~a & c;
      t = e << 5 | e >>> 27;
      d = t + f + d + 1518500249 + blocks[j + 1] << 0;
      a = a << 30 | a >>> 2;
      f = e & a | ~e & b;
      t = d << 5 | d >>> 27;
      c = t + f + c + 1518500249 + blocks[j + 2] << 0;
      e = e << 30 | e >>> 2;
      f = d & e | ~d & a;
      t = c << 5 | c >>> 27;
      b = t + f + b + 1518500249 + blocks[j + 3] << 0;
      d = d << 30 | d >>> 2;
      f = c & d | ~c & e;
      t = b << 5 | b >>> 27;
      a = t + f + a + 1518500249 + blocks[j + 4] << 0;
      c = c << 30 | c >>> 2;
    }

    for (; j < 40; j += 5) {
      f = b ^ c ^ d;
      t = a << 5 | a >>> 27;
      e = t + f + e + 1859775393 + blocks[j] << 0;
      b = b << 30 | b >>> 2;
      f = a ^ b ^ c;
      t = e << 5 | e >>> 27;
      d = t + f + d + 1859775393 + blocks[j + 1] << 0;
      a = a << 30 | a >>> 2;
      f = e ^ a ^ b;
      t = d << 5 | d >>> 27;
      c = t + f + c + 1859775393 + blocks[j + 2] << 0;
      e = e << 30 | e >>> 2;
      f = d ^ e ^ a;
      t = c << 5 | c >>> 27;
      b = t + f + b + 1859775393 + blocks[j + 3] << 0;
      d = d << 30 | d >>> 2;
      f = c ^ d ^ e;
      t = b << 5 | b >>> 27;
      a = t + f + a + 1859775393 + blocks[j + 4] << 0;
      c = c << 30 | c >>> 2;
    }

    for (; j < 60; j += 5) {
      f = b & c | b & d | c & d;
      t = a << 5 | a >>> 27;
      e = t + f + e - 1894007588 + blocks[j] << 0;
      b = b << 30 | b >>> 2;
      f = a & b | a & c | b & c;
      t = e << 5 | e >>> 27;
      d = t + f + d - 1894007588 + blocks[j + 1] << 0;
      a = a << 30 | a >>> 2;
      f = e & a | e & b | a & b;
      t = d << 5 | d >>> 27;
      c = t + f + c - 1894007588 + blocks[j + 2] << 0;
      e = e << 30 | e >>> 2;
      f = d & e | d & a | e & a;
      t = c << 5 | c >>> 27;
      b = t + f + b - 1894007588 + blocks[j + 3] << 0;
      d = d << 30 | d >>> 2;
      f = c & d | c & e | d & e;
      t = b << 5 | b >>> 27;
      a = t + f + a - 1894007588 + blocks[j + 4] << 0;
      c = c << 30 | c >>> 2;
    }

    for (; j < 80; j += 5) {
      f = b ^ c ^ d;
      t = a << 5 | a >>> 27;
      e = t + f + e - 899497514 + blocks[j] << 0;
      b = b << 30 | b >>> 2;
      f = a ^ b ^ c;
      t = e << 5 | e >>> 27;
      d = t + f + d - 899497514 + blocks[j + 1] << 0;
      a = a << 30 | a >>> 2;
      f = e ^ a ^ b;
      t = d << 5 | d >>> 27;
      c = t + f + c - 899497514 + blocks[j + 2] << 0;
      e = e << 30 | e >>> 2;
      f = d ^ e ^ a;
      t = c << 5 | c >>> 27;
      b = t + f + b - 899497514 + blocks[j + 3] << 0;
      d = d << 30 | d >>> 2;
      f = c ^ d ^ e;
      t = b << 5 | b >>> 27;
      a = t + f + a - 899497514 + blocks[j + 4] << 0;
      c = c << 30 | c >>> 2;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
  };

  Sha1.prototype.hex = function () {
    this.finalize();
    var h0 = this.h0,
        h1 = this.h1,
        h2 = this.h2,
        h3 = this.h3,
        h4 = this.h4;
    return HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h4 >> 28 & 0x0F] + HEX_CHARS[h4 >> 24 & 0x0F] + HEX_CHARS[h4 >> 20 & 0x0F] + HEX_CHARS[h4 >> 16 & 0x0F] + HEX_CHARS[h4 >> 12 & 0x0F] + HEX_CHARS[h4 >> 8 & 0x0F] + HEX_CHARS[h4 >> 4 & 0x0F] + HEX_CHARS[h4 & 0x0F];
  };

  Sha1.prototype.toString = Sha1.prototype.hex;

  Sha1.prototype.digest = function () {
    this.finalize();
    var h0 = this.h0,
        h1 = this.h1,
        h2 = this.h2,
        h3 = this.h3,
        h4 = this.h4;
    return [h0 >> 24 & 0xFF, h0 >> 16 & 0xFF, h0 >> 8 & 0xFF, h0 & 0xFF, h1 >> 24 & 0xFF, h1 >> 16 & 0xFF, h1 >> 8 & 0xFF, h1 & 0xFF, h2 >> 24 & 0xFF, h2 >> 16 & 0xFF, h2 >> 8 & 0xFF, h2 & 0xFF, h3 >> 24 & 0xFF, h3 >> 16 & 0xFF, h3 >> 8 & 0xFF, h3 & 0xFF, h4 >> 24 & 0xFF, h4 >> 16 & 0xFF, h4 >> 8 & 0xFF, h4 & 0xFF];
  };

  Sha1.prototype.array = Sha1.prototype.digest;

  Sha1.prototype.arrayBuffer = function () {
    this.finalize();
    var buffer = new ArrayBuffer(20);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    return buffer;
  };

  var exports = createMethod();

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha1 = exports;

    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(101), __webpack_require__(115), __webpack_require__(95)(module)))

/***/ }),
/* 121 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Digest = __webpack_require__(119);

var toPrunedJson = __webpack_require__(123);
/**
 * Component providing synchronization methods
 * for running asynchronous functions.
 */


var Mutex = /*#__PURE__*/function () {
  _createClass(Mutex, null, [{
    key: "sleep",

    /**
     * Allows to suspend processing of method for given time. Returns the actual
     * number of milliseconds the processing was suspended, which is typically
     * slightly higher than given time (due to delay of callback invocation).
     * @param ms Number of milliseconds to sleep
     * @returns {Promise<number>} Number of milliseconds actually slept
     */
    value: function () {
      var _sleep = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ms) {
        var initiated;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                initiated = Date.now();
                return _context.abrupt("return", new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve(Date.now() - initiated);
                  }, ms);
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function sleep(_x) {
        return _sleep.apply(this, arguments);
      }

      return sleep;
    }()
  }, {
    key: "yield",

    /**
     * Allows to split long running functions to multiple segments in order to prevent
     * blocking of thread by long running operations (e.g. it can be called in each loop).
     * @returns {Promise<number>} Number of milliseconds how long function was interrupted
     */
    value: function () {
      var _yield2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var initiated, interrupt;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                initiated = Date.now();
                interrupt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))();
                return _context3.abrupt("return", interrupt.then(function () {
                  return Date.now() - initiated;
                }));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function _yield() {
        return _yield2.apply(this, arguments);
      }

      return _yield;
    }()
    /**
     * Creates new instance of Mutex.
     */

  }]);

  function Mutex() {
    _classCallCheck(this, Mutex);

    this._promises = {};
  }
  /**
   * Ensures given functionality is invoked only once at a time. Method internally
   * computes functionality invocation signature (or used given one) and in case
   * functionality with same signature as already running one is requested, it does
   * not perform new invocation but returns result of previous one.
   * @param sig Invocation signature which should be unique for given function
   *   and/or function argument values. If not given, default signature is
   *   computed as "${fn.name}:${sha1(JSON.stringify(args))}"
   * @param fn Function to be invoked
   * @param args Function arguments
   * @returns {Promise<*>} Result of invoked function
   */


  _createClass(Mutex, [{
    key: "runOneAtTime",
    value: function runOneAtTime() {
      var _this = this;

      var sig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fn = arguments.length > 1 ? arguments[1] : undefined;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (typeof sig === "function") {
        args.unshift(fn);
        fn = sig;
        sig = null;
      }

      var signature = sig || this._getSignature.apply(this, [fn].concat(args));

      var promise = this._promises[signature];

      if (!promise || promise._finished) {
        promise = this._invokeFn.apply(this, [fn].concat(args));
        promise._finished = false;
        this._promises[signature] = promise;

        var finalize = function finalize() {
          promise._finished = true;
          delete _this._promises[signature];
        };

        promise.then(finalize, finalize);
      }

      return promise;
    }
    /**
     * Ensures given functionality is invoked after previously given one is finished.
     * @param fn Function to be invoked
     * @param args Function arguments
     * @returns {PromiseLike<*>} Result of invoked function
     */

  }, {
    key: "runInBand",
    value: function runInBand(fn) {
      var _this2 = this;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var prevPromise = this._promises["runInBand"];
      var nextPromise;

      if (!prevPromise || prevPromise._finished) {
        nextPromise = this._invokeFn.apply(this, [fn].concat(args));
      } else {
        var runNext = function runNext() {
          return _this2._invokeFn.apply(_this2, [fn].concat(args));
        };

        nextPromise = prevPromise.then(runNext, runNext);
      }

      nextPromise._finished = false;
      this._promises["runInBand"] = nextPromise;

      var finalize = function finalize() {
        nextPromise._finished = true;
      };

      nextPromise.then(finalize, finalize);
      return nextPromise;
    }
  }, {
    key: "_getSignature",
    value: function _getSignature(fn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var argsString = toPrunedJson(args, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      var argsHash = Digest.sha1(argsString);
      return "".concat(fn.name, ":").concat(argsHash);
    }
  }, {
    key: "_invokeFn",
    value: function _invokeFn(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }

      if (fn.constructor.name === 'AsyncFunction') {
        return fn.apply(void 0, args);
      } else {
        var asyncWrapper = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    return _context4.abrupt("return", fn.apply(void 0, args));

                  case 1:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          return function asyncWrapper() {
            return _ref2.apply(this, arguments);
          };
        }();

        return asyncWrapper();
      }
    }
  }]);

  return Mutex;
}();

module.exports = Mutex;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// JSON.prune : a function to stringify any object without overflow
// two additional optional parameters :
//   - the maximal depth (default : 6)
//   - the maximal length of arrays (default : 50)
// You can also pass an "options" object.
// examples :
//   var json = JSON.prune(window)
//   var arr = Array.apply(0,Array(1000)); var json = JSON.prune(arr, 4, 20)
//   var json = JSON.prune(window.location, {inheritedProperties:true})
// Web site : http://dystroy.org/JSON.prune/
// JSON.prune on github : https://github.com/Canop/JSON.prune
// This was discussed here : http://stackoverflow.com/q/13861254/263525
// The code is based on Douglas Crockford's code : https://github.com/douglascrockford/JSON-js/blob/master/json2.js
// No effort was done to support old browsers. JSON.prune will fail on IE8.
(function () {
  'use strict';

  var DEFAULT_MAX_DEPTH = 6;
  var DEFAULT_ARRAY_MAX_LENGTH = 50;
  var DEFAULT_PRUNED_VALUE = '"-pruned-"';
  var seen; // Same variable used for all stringifications

  var iterator; // either forEachEnumerableOwnProperty, forEachEnumerableProperty or forEachProperty
  // iterates on enumerable own properties (default behavior)

  var forEachEnumerableOwnProperty = function forEachEnumerableOwnProperty(obj, callback) {
    for (var k in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, k)) callback(k);
    }
  }; // iterates on enumerable properties


  var forEachEnumerableProperty = function forEachEnumerableProperty(obj, callback) {
    for (var k in obj) {
      callback(k);
    }
  }; // iterates on properties, even non enumerable and inherited ones
  // This is dangerous


  var forEachProperty = function forEachProperty(obj, callback, excluded) {
    if (obj == null) return;
    excluded = excluded || {};
    Object.getOwnPropertyNames(obj).forEach(function (k) {
      if (!excluded[k]) {
        callback(k);
        excluded[k] = true;
      }
    });
    forEachProperty(Object.getPrototypeOf(obj), callback, excluded);
  };

  Object.defineProperty(Date.prototype, "toPrunedJSON", {
    value: Date.prototype.toJSON
  });
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      meta = {
    // table of character substitutions
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"': '\\"',
    '\\': '\\\\'
  };

  function quote(string) {
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
      var c = meta[a];
      return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
  }

  var prune = function prune(value, depthDecr, arrayMaxLength) {
    var prunedString = DEFAULT_PRUNED_VALUE;
    var replacer;

    if (_typeof(depthDecr) == "object") {
      var options = depthDecr;
      depthDecr = options.depthDecr;
      arrayMaxLength = options.arrayMaxLength;
      iterator = options.iterator || forEachEnumerableOwnProperty;
      if (options.allProperties) iterator = forEachProperty;else if (options.inheritedProperties) iterator = forEachEnumerableProperty;

      if ("prunedString" in options) {
        prunedString = options.prunedString;
      }

      if (options.replacer) {
        replacer = options.replacer;
      }
    } else {
      iterator = forEachEnumerableOwnProperty;
    }

    seen = [];
    depthDecr = depthDecr || DEFAULT_MAX_DEPTH;
    arrayMaxLength = arrayMaxLength || DEFAULT_ARRAY_MAX_LENGTH;

    function str(key, holder, depthDecr) {
      var i,
          k,
          v,
          length,
          partial,
          value = holder[key];

      if (value && _typeof(value) === 'object' && typeof value.toPrunedJSON === 'function') {
        value = value.toPrunedJSON(key);
      }

      if (value && typeof value.toJSON === 'function') {
        value = value.toJSON();
      }

      switch (_typeof(value)) {
        case 'string':
          return quote(value);

        case 'number':
          return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':
          return String(value);

        case 'object':
          if (!value) {
            return 'null';
          }

          if (depthDecr <= 0 || seen.indexOf(value) !== -1) {
            if (replacer) {
              var replacement = replacer(value, prunedString, true);
              return replacement === undefined ? undefined : '' + replacement;
            }

            return prunedString;
          }

          seen.push(value);
          partial = [];

          if (Object.prototype.toString.apply(value) === '[object Array]') {
            length = Math.min(value.length, arrayMaxLength);

            for (i = 0; i < length; i += 1) {
              partial[i] = str(i, value, depthDecr - 1) || 'null';
            }

            v = '[' + partial.join(',') + ']';
            if (replacer && value.length > arrayMaxLength) return replacer(value, v, false);
            return v;
          }

          iterator(value, function (k) {
            try {
              v = str(k, value, depthDecr - 1);
              if (v) partial.push(quote(k) + ':' + v);
            } catch (e) {// this try/catch due to forbidden accessors on some objects
            }
          });
          return '{' + partial.join(',') + '}';

        case 'function':
        case 'undefined':
          return replacer ? replacer(value, undefined, false) : undefined;
      }
    }

    return str('', {
      '': value
    }, depthDecr);
  };

  prune.log = function () {
    console.log.apply(console, Array.prototype.map.call(arguments, function (v) {
      return JSON.parse(JSON.prune(v));
    }));
  };

  prune.forEachProperty = forEachProperty; // you might want to also assign it to Object.forEachProperty

  if (true) module.exports = prune;else {}
})();

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var localStorageAvailable;

try {
  var check = localStorage;
  localStorageAvailable = !!check;
} catch (e) {
  localStorageAvailable = false;
}
/**
 * Cache item.
 * @private
 */


var Item = /*#__PURE__*/function () {
  /**
   * Creates new instance of cache item.
   * @param key Item name
   * @param value Item value
   * @param exp Item expiration
   */
  function Item(key, value, exp) {
    _classCallCheck(this, Item);

    this.key = key;
    this.value = value;
    this.exp = exp;
    this.next = null;
    this.prev = null;
  }
  /**
   * Checks if item is expired.
   * @returns {boolean} True if item is expired
   */


  _createClass(Item, [{
    key: "isExpired",
    value: function isExpired() {
      return this.exp > -1 && this.exp <= Date.now();
    }
    /**
     * Returns object representation of cache item.
     * @returns {*[]} Array containing key, value end expiration (in this order)
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return [this.key, this.value, this.exp];
    }
  }]);

  return Item;
}();
/**
 * Browser friendly implementation of LRU cache with support of persisting
 * cache to browser local storage.
 */


var LruCache = /*#__PURE__*/function () {
  /**
   * Creates new instance of cache.
   * @param {Object|null} opts Cache options
   * @param {number} opts.maxSize Maximal number of items to be stored
   * @param {number} opts.maxAge How long (in milliseconds) should items be stored
   * @param {String} opts.localStorageKey If set, cache will be persisted to browser
   *   local storage. Local storage key should contain product identification to
   *   avoid conflicting names between various components.
   */
  function LruCache() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LruCache);

    if (typeof opts.maxSize === 'number') {
      this._maxSize = opts.maxSize;
    } else {
      this._maxSize = -1;
    }

    if (typeof opts.maxAge === 'number') {
      this._maxAge = opts.maxAge;
    } else {
      this._maxAge = -1;
    }

    this._name = opts.localStorageKey;
    this._size = 0;
    this._items = {};
    this._first = null;
    this._last = null;

    this._loadFromStorage();

    this._storeToStorage();
  }
  /**
   * Stores value into cache.
   * @param key Key to access cached value
   * @param value Value to be cached
   * @param maxAge How long (in milliseconds) should this value be stored (overrides global maxAge)
   * @returns {*} Value previously stored under this key (or null if none)
   */


  _createClass(LruCache, [{
    key: "set",
    value: function set(key, value) {
      var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._loadFromStorage();

      var origValue = null;
      maxAge = typeof maxAge === "number" ? maxAge : this._maxAge;
      var exp = maxAge > -1 ? maxAge + Date.now() : -1;
      var newItem = new Item(key, value, exp);

      if (this._items[key]) {
        origValue = this.delete(key);
      } else {
        // If cache is full we have to prune it
        if (this._maxSize > -1 && this._size >= this._maxSize) {
          this._prune(1);
        }
      } // Set new item to front of list


      this._push(newItem);

      this._storeToStorage(); // Return original value (if any)


      return origValue;
    }
    /**
     * Check if a key is in the cache, without updating the recent-ness or deleting it for being stale.
     * @param {Check} key Key of cached value
     * @returns {boolean} True if key is in cache, else false
     */

  }, {
    key: "has",
    value: function has(key) {
      this._loadFromStorage();

      var item = this._items[key];
      return item && !item.isExpired();
    }
    /**
     * Returns value from cache.
     * @param key Key of cached value
     * @returns {*} Cached value (or null)
     */

  }, {
    key: "get",
    value: function get(key) {
      this._loadFromStorage();

      var item = this._items[key];
      var value = null;

      if (item) {
        if (item.isExpired()) {
          // It item is expired, just delete it
          this._remove(item);
        } else {
          value = item.value;

          this._touch(item);
        }
      }

      this._storeToStorage();

      return value;
    }
    /**
     * Deletes value from cache.
     * @param key Key of cached value
     * @returns {*} Cached value (or null)
     */

  }, {
    key: "delete",
    value: function _delete(key) {
      this._loadFromStorage();

      var value = null;

      if (this._items[key]) {
        var item = this._items[key];

        if (!item.isExpired()) {
          // In case item is not expired, return value of deleted item
          value = item.value;
        }

        this._remove(item);
      }

      this._storeToStorage();

      return value;
    }
    /**
     * Clears cache.
     */

  }, {
    key: "clear",
    value: function clear() {
      this._size = 0;
      this._items = {};
      this._first = null;
      this._last = null;

      this._storeToStorage();
    }
    /**
     * Returns actual cache size.
     * @returns {number}
     */

  }, {
    key: "getSize",
    value: function getSize() {
      return this._size;
    }
    /**
     * Returns object representation of cache item.
     * @returns {Array} List of cached items
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var items = []; // Serialize from last to ensure correct order on restore

      var item = this._last;

      while (item) {
        items.push(item.toJSON());
        item = item.prev;
      }

      return [this._maxSize, this._maxAge, items];
    }
    /**
     * Initializes cache from serialized value (clears any existing data).
     * @param json Serialized cache
     */

  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      this.clear();

      if (typeof json === "string") {
        json = JSON.parse(json);
      }

      var _json = json,
          _json2 = _slicedToArray(_json, 3),
          maxSize = _json2[0],
          maxAge = _json2[1],
          items = _json2[2];

      this._maxSize = maxSize;
      this._maxAge = maxAge;

      var _iterator = _createForOfIteratorHelper(items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 3),
              key = _step$value[0],
              value = _step$value[1],
              exp = _step$value[2];

          this._push(new Item(key, value, exp));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Return an array of the keys in the cache.
     * @return {Array} List of the keys in the cache.
     */

  }, {
    key: "keys",
    value: function keys() {
      this._loadFromStorage();

      var result = [];
      var item = this._first;

      while (item) {
        if (!item.isExpired()) {
          result.push(item.key);
        }

        item = item.next;
      }
    }
    /**
     * Return an array of the values in the cache.
     * @return {Array} List of the values in the cache.
     */

  }, {
    key: "values",
    value: function values() {
      this._loadFromStorage();

      var result = [];
      var item = this._first;

      while (item) {
        if (!item.isExpired()) {
          result.push(item.value);
        }

        item = item.next;
      }
    }
    /**
     * Iterates through cached items (from newest to oldest)
     * @param callback Function receiving two parameters - item key and value.
     *    Function may return false to stop the loop.
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      if (typeof callback !== 'function') {
        throw new BaseError("Parameter must be function");
      }

      this._loadFromStorage();

      var item = this._first;

      while (item) {
        var doNext = null;

        if (!item.isExpired()) {
          doNext = callback(item.key, item.value);
        }

        if (typeof doNext === 'boolean' && !doNext) {
          break;
        } else {
          item = item.next;
        }
      }
    }
    /**
     * Pushes new item to cache.
     * @param item Cached item
     * @private
     */

  }, {
    key: "_push",
    value: function _push(item) {
      // Set previous first item after new item
      item.next = this._first;
      item.prev = null;

      if (this._first) {
        this._first.prev = item;
      } // Set new item to first place


      this._first = item;

      if (!this._last) {
        // If case was emtpy, first item is also last
        this._last = item;
      } // Store the item


      this._items[item.key] = item;
      this._size++;
    }
    /**
     * Moves item to fist position.
     * @param item Touched item
     * @private
     */

  }, {
    key: "_touch",
    value: function _touch(item) {
      // If item is already first do nothing
      if (item.prev) {
        // Link previous item with next of moved item
        item.prev.next = item.next;

        if (item.next) {
          // Link next item with prev of moded item
          item.next.prev = item.prev;
        } else {
          // In case we are moving last item, update tail
          this._last = item.prev;
        } // Set previous first item after moved item


        item.next = this._first;
        item.prev = null;

        if (this._first) {
          this._first.prev = item;
        } // Set moved item to first place


        this._first = item;
      }
    }
    /**
     * Removes item from cache.
     * @param item Item to be removed
     * @private
     */

  }, {
    key: "_remove",
    value: function _remove(item) {
      if (item.prev) {
        // Link previous item with next of deleted item
        item.prev.next = item.next;
      } else {
        // In case we are deleting first item, update head
        this._first = item.next;
      }

      if (item.next) {
        // Link next item with prev of deleted item
        item.next.prev = item.prev;
      } else {
        // In case we are deleting last item, update tail
        this._last = item.prev;
      } // Delete the item


      delete this._items[item.key];
      this._size--;
    }
    /**
     * Prune at least specified number of items, first delete
     * expired ones, then delete from last item until given
     * number of items to be deleted is reached.
     * @param atLeast Number of items to be removed
     * @private
     */

  }, {
    key: "_prune",
    value: function _prune() {
      var atLeast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var deleted = 0; // Delete all expired items first

      var item = this._last;

      while (item) {
        if (item.isExpired()) {
          this._remove(item);

          deleted++;
        }

        item = item.prev;
      } // Delete remaining number of items


      if (deleted < atLeast) {
        var _item = this._last;

        for (var i = 0; i < atLeast - deleted; i++) {
          this._remove(_item);

          _item = _item.prev; // Break in case all items are gone

          if (!_item) {
            break;
          }
        }
      }
    }
    /**
     * If available, deserializes cache content from browser local storage.
     * @private
     */

  }, {
    key: "_loadFromStorage",
    value: function _loadFromStorage() {
      if (localStorageAvailable && this._name) {
        var persistedCache = localStorage.getItem(this._name);

        if (persistedCache) {
          this.fromJSON(persistedCache);
        }
      }
    }
    /**
     * If available, serilalizes cache content to browser local storage.
     * @private
     */

  }, {
    key: "_storeToStorage",
    value: function _storeToStorage() {
      if (localStorageAvailable && this._name) {
        localStorage.setItem(this._name, JSON.stringify(this));
      }
    }
  }]);

  return LruCache;
}();

module.exports = LruCache;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Base64 = /*#__PURE__*/function () {
  function Base64() {
    _classCallCheck(this, Base64);
  }

  _createClass(Base64, null, [{
    key: "encode",
    value: function encode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      return Buffer.from(value, encoding).toString('base64');
    }
  }, {
    key: "decode",
    value: function decode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var rawData = Buffer.from(value, 'base64');

      if (encoding === "binary") {
        return rawData;
      } else {
        return rawData.toString(encoding);
      }
    }
  }, {
    key: "urlSafeEncode",
    value: function urlSafeEncode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var noPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (typeof encoding === "boolean") {
        noPadding = encoding;
        encoding = "utf8";
      }

      var base64 = this.encode(value, encoding);
      base64 = base64.replace(/\+/g, '-').replace(/\//g, '_');

      if (noPadding) {
        base64 = base64.replace(/=/g, '');
      }

      return base64;
    }
  }, {
    key: "urlSafeDecode",
    value: function urlSafeDecode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var base64 = value.replace(/-/g, '+').replace(/_/g, '/');
      return this.decode(base64, encoding);
    }
  }]);

  return Base64;
}();

module.exports = Base64;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(126).Buffer))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(127);

var ieee754 = __webpack_require__(128);

var isArray = __webpack_require__(129);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(115)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),
/* 128 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 129 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var makeResponse = __webpack_require__(131);

var Helpers = /*#__PURE__*/function () {
  function Helpers() {
    _classCallCheck(this, Helpers);
  }

  _createClass(Helpers, null, [{
    key: "keysToLowerCase",
    value: function keysToLowerCase(map) {
      if (!map || _typeof(map) !== "object") return null;
      var result = {};

      for (var k in map) {
        result[k.toLowerCase()] = map[k];
      }

      return result;
    }
  }, {
    key: "interceptorMakeResponse",
    value: function interceptorMakeResponse(response, request, extraArgs) {
      var rawResponse = makeResponse(response, request, extraArgs);

      if (typeof window == "undefined") {
        // Allow "flat" access to attributes of dtoOut. See test "response-wrapper.test.js" for details.
        // Downside is that it is not possible to flatly access dtoOut attributes in case they are named
        // "status" or "headers".
        // TODO This is only temporary solution for backward compatibility. In can be dropped once proxy
        // is supported by all browsers (so that new API can be used on backend and frontend for some
        // time before old response object is removed).
        return new Proxy(rawResponse, {
          get: function get(target, prop) {
            var result;

            if (prop === "unwrap") {
              result = function result() {
                return {
                  status: target.status,
                  headers: target.headers,
                  body: target.data
                };
              };
            } else if (prop === "status" || prop === "headers") {
              // TODO Do not print deprecation warning until same API is available on frontend
              // console.warn(`Using deprecated property ${prop} on AppClient result. Use unwrap() to access raw response data.`);
              result = target[prop];
            } else if (prop === "data") {
              var body = target.data;

              if (typeof body == "undefined" || body === null) {
                result = body;
              } else if (body.hasOwnProperty("data")) {
                result = new Proxy(body, {
                  get: function get(target, prop) {
                    var bodyData = target.data;

                    if (prop == "toJSON") {
                      return function () {
                        return target;
                      };
                    } else if (typeof bodyData == "undefined" || bodyData === null) {
                      return target[prop];
                    } else {
                      var _result = bodyData[prop];

                      if (typeof _result === "undefined") {
                        return target[prop];
                      }

                      if (typeof _result === "function") {
                        _result = _result.bind(bodyData);
                      }

                      return _result;
                    }
                  }
                });
              } else {
                // TODO Do not print deprecation warning until same API is available on frontend
                // console.warn(`Using deprecated property ${prop} on AppClient result. Use unwrap() to access raw response data.`);
                result = body;
              }
            } else if (prop == "toJSON") {
              result = function result() {
                return target.data;
              };
            } else {
              var _body = target.data;

              if (typeof _body != "undefined" && _body != null && typeof _body[prop] != "undefined") {
                result = _body[prop];

                if (typeof result === "function") {
                  result = result.bind(_body);
                }
              } else {
                result = target[prop];
              }
            }

            return result;
          },
          ownKeys: function ownKeys(target) {
            var body = target.data;

            if (typeof body == "undefined" || body === null) {
              return null;
            } else {
              return Object.keys(body);
            }
          },
          getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, prop) {
            var body = target.data;

            if (typeof body == "undefined" || body === null) {
              return null;
            } else {
              var descriptor = Object.getOwnPropertyDescriptor(body, prop);

              if (descriptor) {
                descriptor.configurable = true;
              }

              return descriptor;
            }
          },
          has: function has(target, key) {
            var body = target.data;

            if (typeof body == "undefined" || body === null) {
              return false;
            } else {
              return key in body;
            }
          }
        });
      } else {
        // TODO Proxy is not supported by IE
        return rawResponse;
      }
    }
  }]);

  return Helpers;
}();

module.exports = Helpers;

/***/ }),
/* 131 */
/***/ (function(module, exports) {

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function makeResponse(xhr, error) {
  var res = {
    status: xhr ? xhr.status : 0,
    headers: function headers(aHeader) {
      if (!aHeader) return xhr ? xhr.getAllResponseHeaders() : [];
      return xhr ? xhr.getResponseHeader(aHeader) : null;
    },
    data: xhr.body != null ? xhr.body : xhr
  };
  if (xhr.filename) res.filename = xhr.filename;
  if (xhr.contentType) res.contentType = xhr.contentType;
  if (xhr.encoding) res.encoding = xhr.encoding;
  return error ? _objectSpread({}, res, error) : res;
}

module.exports = makeResponse;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(133),
    LoggerFactory = _require.LoggerFactory;

var _require2 = __webpack_require__(98),
    Config = _require2.Config,
    OptsReader = _require2.OptsReader,
    BaseError = _require2.BaseError;

var Helpers = __webpack_require__(130);

var HttpClient = /*#__PURE__*/function () {
  function HttpClient() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, HttpClient);

    this._options = options;
    this._logger = LoggerFactory.get("UuApp.AppClient.Client");
  } // function InvokeClient (cmdClient, httpClientOpts, finalRequest, finalOpts) {


  _createClass(HttpClient, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var _this = this;

        var options,
            opts,
            xhr,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                opts = new OptsReader(options, this._options, Config); // TODO Implement abortion support
                // if (cmdClient.aborted) return Promise.reject(Helpers.interceptorMakeResponse(null, finalRequest, { error: new AbortError("The Client call has been aborted.") }));

                xhr = request.xhr = new XMLHttpRequest();
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  var canHaveBody = request.method.match(/^(put|post)$/i);
                  var url = request.uri.toString();
                  var body;

                  if (!canHaveBody) {
                    if (request.body) url += (url.indexOf("?") === -1 ? "?" : "&") + request.body;
                  } else {
                    body = request.body;
                  }

                  var headers = request.headers;
                  var timeout = opts.getNumber("requestTimeout", 300);
                  if (_this._logger.isDebugLoggable()) _this._logger.debug("Invoking Ajax request: " + JSON.stringify({
                    method: request.method,
                    url: url,
                    body: body,
                    requestTimeout: timeout,
                    headers: headers
                  }));
                  xhr.open(request.method, url, true);
                  if (timeout > 0) xhr.timeout = timeout * 1000;
                  xhr.withCredentials = true;

                  for (var k in headers) {
                    var v = headers[k];

                    if (k && v != null) {
                      // omit "Content-Type" header if it's multipart/form-data, otherwise the browser doesn't update
                      // it with proper boundary and server won't be able to parse the body
                      if (k === "content-type" && body instanceof FormData && v === "multipart/form-data") continue;
                      xhr.setRequestHeader(k.replace(/(^|-)./g, function (m) {
                        return m.toUpperCase();
                      }), v + "");
                    }
                  }

                  xhr.ontimeout = function (e) {
                    // TimeoutError
                    _this._logger.error("Request timed out: " + JSON.stringify({
                      url: url
                    }), e);

                    reject(Helpers.interceptorMakeResponse(xhr, {
                      error: new BaseError("Request timed out - " + url, e)
                    }));
                  };

                  xhr.onload = function (e) {
                    // status 200 - 5xx
                    var formatted = _this._formatResponse(xhr);

                    if (_this._logger.isDebugLoggable()) _this._logger.debug("Received response: " + JSON.stringify({
                      url: url,
                      status: xhr.status,
                      data: formatted.response
                    }));
                    resolve(Helpers.interceptorMakeResponse(formatted));
                  };

                  xhr.onabort = function (e) {
                    // user / developer abort; AbortError
                    _this._logger.warn("Request has been aborted: " + JSON.stringify({
                      url: url
                    }), e);

                    reject(Helpers.interceptorMakeResponse(xhr, {
                      error: new BaseError("Request has been aborted - " + url, e)
                    }));
                  };

                  xhr.onerror = function (e) {
                    // network error; NetworkError
                    var responseData = opts.getBoolean("transformResponse") === false ? new Uint8Array(xhr.response) : xhr.response;

                    _this._logger.error("Request ended with network error: " + JSON.stringify({
                      url: url
                    }), e);

                    reject(Helpers.interceptorMakeResponse(xhr, {
                      error: new BaseError("Network error - " + url, e),
                      data: responseData
                    }));
                  };

                  xhr.onreadystatechange = function () {
                    if (!(xhr.readyState === 2)) return;
                    var transformResponse = opts.getBoolean("transformResponse", true) === true;

                    if (!transformResponse) {
                      xhr.responseType = "arraybuffer";
                      return;
                    }

                    _this._autodetectBinaryData(xhr);
                  };

                  xhr.send(body);
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }, {
    key: "_formatResponse",
    value: function _formatResponse(xhr) {
      if (xhr.responseType === "arraybuffer") {
        xhr.body = new Uint8Array(xhr.response);
      } else {
        xhr.body = xhr.response;
      }

      return xhr;
    }
  }, {
    key: "_autodetectBinaryData",
    value: function _autodetectBinaryData(xhr) {
      var cDisp;

      try {
        cDisp = xhr.getResponseHeader("Content-Disposition");
      } catch (e) {// do nothing
      }

      if (!cDisp) return;
      xhr.responseType = "arraybuffer";
      xhr.filename = _findMatch(cDisp);
      var cType = xhr.getResponseHeader("Content-Type");

      if (cType) {
        var cTypeItems = cType.trim().match(/^([^;\s]+)(?:\s*;\s*charset\s*=\s*([^;]+))?/i) || [];
        xhr.contentType = cTypeItems[1] || null;
        xhr.encoding = cTypeItems[2] || null;
      }

      function _findMatch(cDisp) {
        var regex = /filename[^;=\n]*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g;
        var match;
        var results = [];

        while ((match = regex.exec(cDisp)) != null) {
          results = results.concat(match.slice(1).filter(function (m) {
            return m;
          }));
        }

        var last = results[results.length - 1];
        return last ? decodeURIComponent(last) : null;
      }
    }
  }]);

  return HttpClient;
}();

module.exports = HttpClient;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Logger = __webpack_require__(134);

var LoggerFactory = __webpack_require__(139);

var LogLevel = __webpack_require__(135);

var MessageFormatter = __webpack_require__(136);

var LoggerMDC = __webpack_require__(137);

module.exports = {
  Logger: Logger,
  LoggerFactory: LoggerFactory,
  LogLevel: LogLevel,
  MessageFormatter: MessageFormatter,
  LoggerMDC: LoggerMDC
};

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LogLevel = __webpack_require__(135);

var MessageFormatter = __webpack_require__(136);

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;
/**
 * @class UuApp.Logging.Logger
 * @classdesc
 * Component for logging. Each logged message has a severity level and each logger can be
 * configured to process only messages with sufficient severity level. Loggers are hierarchical,
 * i.e. when configuration is processed they inherit severity level from parent modules/packages.
 *
 * Contrary to usual <code>console.log</code>, <code>console.error</code>, ... statements (which
 * are typically removed from production code), statements using Logger-s are intended to be
 * preserved in the production environment and turned on/off via {@link UuApp.Util.Config Config}
 * configuration.
 *
 * **Configuration**
 *
 * Default severity level for loggers is Logger.LEVEL_WARN. Logging is automatically configured from the
 * global configuration (initialized via {@link UuApp.Util.Config Config.init} call).
 * Supported environment options:
 *
 *     {
 *       "log_level": "ERROR",
 *       "My.Namespace.log_level": "WARN"
 *     }
 *
 * As already said, loggers are hierarchical - with configuration above, logger "My.Namespace.Component"
 * would have logLevel "WARN" whereas logger "My" would have logLevel "ERROR". Hierarchical logging can
 * be turned off when initializing a logger - see {@link UuApp.Logging.LoggerFactory.get LoggerFactory.get}.
 *
 * **Typical usage**
 *
 *     // get logger instance and log a message
 *     var logger = UuApp.Logging.LoggerFactory.get("My.Namespace.Component");
 *     logger.warn("Universe expansion is accelerating.", {speedBefore: 68, speedAfter: 68.01});
 *
 *     // if logging requires lenghty computation, it can be made conditional so that it
 *     // doesn't slow down the rest of page if the message wouldn't get logged in the end
 *     if (logger.isDebugLoggable()) {
 *       var computedValue = ...; // some lenghty computation
 *       logger.debug("Value computed to", computedValue);
 *     }
 *
 */


var Logger = /*#__PURE__*/function () {
  function Logger(name) {
    _classCallCheck(this, Logger);

    this._name = name;
    this._level = LogLevel.WARN;
    this._formatter = new MessageFormatter();
    this._outputter = console;
  }

  _createClass(Logger, [{
    key: "getName",
    value: function getName() {
      return this._name;
    }
    /**
     * Sets severity level of this Logger to given value. Messages with lower (less important)
     * severity will be ignored when attempted to be logged via this logger. Order of importance:
     * DEBUG < INFO < WARN < ERROR < FATAL < UNKNOWN < OFF.
     *
     * **It's strongly advised not to configure loggers directly using this method** because
     * if such code gets deployed to production, it'll effectively override settings from
     * environment and therefore could prevent logging of necessary information.
     * **Use environment configuration instead - see Configuration chapter in {@link UuApp.Logging.Logger Logger}.
     *
     * @param {(number|string)} level Severity level to set. See Logger.LEVEL_* constants. If null
     *   is given, default is used (LEVEL_WARN).
     * @method UuApp.Logging.Logger#setLevel
     */

  }, {
    key: "setLevel",
    value: function setLevel(level) {
      if (typeof level === "number") {
        this._level = level;
      } else if (typeof level === "string") {
        var lvl = LogLevel[level.toUpperCase()] !== undefined ? LogLevel[level.toUpperCase()] : Number(level);

        if (lvl !== undefined && !isNaN(lvl)) {
          this._level = lvl;
        }
      } else if (!level) {
        this._level = LogLevel.WARN;
      } else {
        throw new BaseError("Invalid logger level \"".concat(level, "\""));
      }
    }
    /**
     * @return {number} Level of this logger.
     * @method UuApp.Logging.Logger#getLevel
     */

  }, {
    key: "getLevel",
    value: function getLevel() {
      return this._level;
    }
  }, {
    key: "setSeverityLabels",
    value: function setSeverityLabels(severityLabels) {
      this._formatter.setSeverityLabels(severityLabels);
    }
  }, {
    key: "getSeverityLabels",
    value: function getSeverityLabels() {
      return this._formatter.getSeverityLabels();
    }
  }, {
    key: "setMessageFormat",
    value: function setMessageFormat(messageFormat) {
      this._formatter.setMessageFormat(messageFormat);
    }
  }, {
    key: "getMessageFormat",
    value: function getMessageFormat() {
      return this._formatter.getMessageFormat();
    }
  }, {
    key: "setErrorFormat",
    value: function setErrorFormat(errorFormat) {
      this._formatter.setErrorFormat(errorFormat);
    }
  }, {
    key: "getErrorFormat",
    value: function getErrorFormat() {
      return this._formatter.getErrorFormat();
    }
  }, {
    key: "setCauseFormat",
    value: function setCauseFormat(causeFormat) {
      this._formatter.setCauseFormat(causeFormat);
    }
  }, {
    key: "getCauseFormat",
    value: function getCauseFormat() {
      return this._formatter.getCauseFormat();
    }
    /**
     * @return {boolean} Whether this logger logs message with severity level "DEBUG".
     * @method UuApp.Logging.Logger#isDebugLoggable
     */

  }, {
    key: "isDebugLoggable",
    value: function isDebugLoggable() {
      return this._level <= LogLevel.DEBUG;
    }
    /**
     * Logs message with severity level "DEBUG".
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#debug
     */

  }, {
    key: "debug",
    value: function debug(message) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.DEBUG, message, error);
    }
    /**
     * @return {boolean} Whether this logger logs message with severity level "INFO".
     * @method UuApp.Logging.Logger#isInfoLoggable
     */

  }, {
    key: "isInfoLoggable",
    value: function isInfoLoggable() {
      return this._level <= LogLevel.INFO;
    }
    /**
     * Logs message with severity level "INFO".
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#info
     */

  }, {
    key: "info",
    value: function info(message) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.INFO, message, error);
    }
    /**
     * @return {boolean} Whether this logger logs message with severity level "WARN".
     * @method UuApp.Logging.Logger#isWarnLoggable
     */

  }, {
    key: "isWarnLoggable",
    value: function isWarnLoggable() {
      return this._level <= LogLevel.WARN;
    }
    /**
     * Logs message with severity level "WARN".
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#warn
     */

  }, {
    key: "warn",
    value: function warn(message) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.WARN, message, error);
    }
    /**
     * @return {boolean} Whether this logger logs message with severity level "ERROR".
     * @method UuApp.Logging.Logger#isErrorLoggable
     */

  }, {
    key: "isErrorLoggable",
    value: function isErrorLoggable() {
      return this._level <= LogLevel.ERROR;
    }
    /**
     * Logs message with severity level "ERROR".
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#error
     */

  }, {
    key: "error",
    value: function error(message) {
      var _error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.ERROR, message, _error);
    }
    /**
     * @return {boolean} Whether this logger logs message with severity level "FATAL".
     * @method UuApp.Logging.Logger#isFatalLoggable
     */

  }, {
    key: "isFatalLoggable",
    value: function isFatalLoggable() {
      return this._level <= LogLevel.FATAL;
    }
    /**
     * Logs message with severity level "FATAL".
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#error
     */

  }, {
    key: "fatal",
    value: function fatal(message) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.FATAL, message, error);
    }
    /**
     * Logs message with "UNKNOWN" severity.
     *
     * @param {string} message The message to log.
     * @param {Error} error Error to be logged with message.
     * @method UuApp.Logging.Logger#error
     */

  }, {
    key: "log",
    value: function log(message) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      this._add(LogLevel.UNKNOWN, message, error);
    } // ======================== Private methods ================================

  }, {
    key: "_add",
    value: function _add(level, message, error) {
      if (this._level <= level) {
        this._write(new Date(), level, message, error);
      }
    }
  }, {
    key: "_write",
    value: function () {
      var _write2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(datetime, level, message, error) {
        var formattedMessage;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                formattedMessage = this._formatter.formatMessage(datetime, this._name, level, message, error); // TODO Add support for outputters. Currently we'll log only to the console.

                if (!(typeof window !== "undefined")) {
                  _context.next = 16;
                  break;
                }

                _context.t0 = level;
                _context.next = _context.t0 === LogLevel.FATAL ? 5 : _context.t0 === LogLevel.ERROR ? 5 : _context.t0 === LogLevel.WARN ? 7 : _context.t0 === LogLevel.INFO ? 9 : _context.t0 === LogLevel.UNKNOWN ? 9 : _context.t0 === LogLevel.DEBUG ? 11 : 13;
                break;

              case 5:
                this._outputter.error(formattedMessage);

                return _context.abrupt("break", 14);

              case 7:
                this._outputter.warn(formattedMessage);

                return _context.abrupt("break", 14);

              case 9:
                this._outputter.info(formattedMessage);

                return _context.abrupt("break", 14);

              case 11:
                this._outputter.debug(formattedMessage);

                return _context.abrupt("break", 14);

              case 13:
                this._outputter.log(formattedMessage);

              case 14:
                _context.next = 17;
                break;

              case 16:
                this._outputter.log(formattedMessage);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _write(_x, _x2, _x3, _x4) {
        return _write2.apply(this, arguments);
      }

      return _write;
    }()
  }]);

  return Logger;
}();

module.exports = Logger;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var LogLevel = {
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  FATAL: 4,
  UNKNOWN: 5,
  OFF: 6
};
module.exports = LogLevel;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LogLevel = __webpack_require__(135);

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var LoggerMDC = __webpack_require__(137); // Regexp to match formatting tags.
// @private


var FORMAT_TAGS = /(%(?:{([^}]*)})?([a-zA-Z%]))/g; // Default set of severity labels (matching standard ruby
//    {http://ruby-doc.org/stdlib/libdoc/logger/rdoc/Logger/Severity.html
// Logger::Severity} with addition of level +OFF+).

var DEFAULT_SEVERITY_LABELS = "DEBUG INFO WARN ERROR FATAL ANY OFF"; //  Format of message to be used. Following tags are supported:
// <b>%%</b> - Escaped percent tag.
// * <b>%C</b> - Full {UuApp::Logging::LoggerMdc logger MDC} in JSON format.
// * <b>%d</b> - Date and time in format matching {#datetime_format}.
// * <b>%e</b> - Error formatted using {#error_format} or empty string if there is no error.
// * <b>%m</b> - Actual log message provided by application.
// * <b>%n</b> - Logger name.
// * <b>%p</b> - System process ID.
// * <b>%s</b> - Logging event severity.
// * <b>%t</b> - ID of thread where message was captured.
// * <b>%T</b> - Name of thread where message was captured.
// * <b>%{ KEY }C</b> - Custom attribute from logger {UuApp::Logging::LoggerMdc logger MDC} with name KEY.
//      Time values are printed in format matching {#datetime_format}.
// * <b>%{ FMT }d</b> - Date and time in format matching FMT.
// * <b>%{ FMT }m</b> - Log message provided by application with additional escaping based on FMT value. There are
//      two escaping variants. First is keyword +JSON+ resulting in message with escaped quotes and line separators.
//      In case of any other value, this value will be used to replace new line separators (CR(LF)).
//  * <b>%{ NUM }s</b> - Logging event severity with NUM representing total length of severity with padding.*/
// Default message format (see {#message_format} for tag description).

var DEFAULT_MESSAGE_FORMAT = "[%d] %{5}s %n: %m%e"; // Format of error. In case there is instance of error to be logged (given as explicit logger parameter or implicit
// error reference available inside rescue block), error message is injected into message replacing +%e+ tag. That
// means error format should start with some separator (e.g. new line) to be able to distinguish text of log message
// from printed error. Following tags are supported:
// * <b>%%</b> - Escaped percent tag.
// * <b>%b</b> - Invocation stack (backtrace), lines are joined with new line.
// * <b>%c</b> - Error class name.
// * <b>%C</b> - Error cause formatted using {#cause_format} or {#error_format}, or empty string if there is no cause.
// * <b>%i</b> - Unique error ID.
// * <b>%m</b> - Actual error message.
// * <b>%t</b> - Timestamp of error instantiation in format matching {#datetime_format}.
// * <b>%{ SEP }b</b> - Invocation stack (backtrace), lines are joined with SEP.
// * <b>%{ PFX }C</b> - Error cause with prefix PFX to be used before printing error cause).
// * <b>%{ FMT }m</b> - Error message with additional escaping based on FMT value. There are two escaping variants.
//   First is keyword +JSON+ resulting in message with escaped quotes and line separators. In case of any other value,
//   this value will be used to replace new line separators (CR(LF)).
// * <b>%{ FMT }t</b> - Timestamp of error instantiation in format matching FMT.
// # Default message format (see {#error_format} for tag description).

var DEFAULT_ERROR_FORMAT = "\n  %i [%t] %c: %m\n    %{\n    }b%{\n  Caused by:}C"; //# Default log messages separator.
//# @private

var ENTRY_SEPARATOR = "\n";

var MessageFormatter = /*#__PURE__*/function () {
  function MessageFormatter() {
    var messageFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var errorFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var severityLabels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, MessageFormatter);

    this.setSeverityLabels(severityLabels || DEFAULT_SEVERITY_LABELS);
    this.setMessageFormat(messageFormat || DEFAULT_MESSAGE_FORMAT);
    this.setErrorFormat(errorFormat || DEFAULT_ERROR_FORMAT);
  }

  _createClass(MessageFormatter, [{
    key: "setSeverityLabels",
    value: function setSeverityLabels(severityLabels) {
      if (severityLabels) {
        this._severityLabels = severityLabels.split(" ");
      }
    }
  }, {
    key: "getSeverityLabels",
    value: function getSeverityLabels() {
      return this._severityLabels.join(" ");
    }
  }, {
    key: "setMessageFormat",
    value: function setMessageFormat(messageFormat) {
      if (messageFormat) {
        this._messageFormat = messageFormat;
        var formatterSrc = "(function (datetime, name, severity, message, error) {\n        return ".concat(this._transformFormat(messageFormat, this._processMessageFormatTag), ";\n      }).bind(this);");
        this._messageFormatter = eval(formatterSrc);
      }
    }
  }, {
    key: "getMessageFormat",
    value: function getMessageFormat() {
      return this._messageFormat;
    }
  }, {
    key: "setErrorFormat",
    value: function setErrorFormat(errorFormat) {
      if (errorFormat) {
        this._errorFormat = errorFormat;
        var formatterSrc = "(function (error) {\n        return ".concat(this._transformFormat(errorFormat, this._processErrorFormatTag), ";\n      }).bind(this);");
        this._errorFormatter = eval(formatterSrc);
      }
    }
  }, {
    key: "getErrorFormat",
    value: function getErrorFormat() {
      return this._errorFormat;
    }
  }, {
    key: "setCauseFormat",
    value: function setCauseFormat(causeFormat) {
      if (causeFormat) {
        this._causeFormat = causeFormat;
        var formatterSrc = "(function (error) {\n        return ".concat(this._transformFormat(causeFormat, this._processErrorFormatTag), ";\n      }).bind(this);");
        this._causeFormatter = eval(formatterSrc);
      } else {
        this._causeFormat = null;
        this._causeFormatter = null;
      }
    }
  }, {
    key: "getCauseFormat",
    value: function getCauseFormat() {
      return this._causeFormat;
    }
  }, {
    key: "formatMessage",
    value: function formatMessage(datetime, name, severity, message) {
      var error = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

      if (!datetime) {
        datetime = new Date();
      }

      if (!name) {
        name = "";
      }

      if (severity == null) {
        severity = LogLevel.UNKNOWN;
      }

      if (!message) {
        message = "";
      }

      return this._messageFormatter(datetime, name, severity, message, error);
    } // ======================== Private methods ================================

  }, {
    key: "_formatError",
    value: function _formatError(error) {
      return this._errorFormatter(error);
    }
  }, {
    key: "_formatCause",
    value: function _formatCause(error) {
      return (this._causeFormatter || this._errorFormatter)(error);
    }
  }, {
    key: "_processStack",
    value: function _processStack(error) {
      var result = [];
      var stack = error.stack;

      if (typeof stack === "string") {
        result = stack.split("\n");
      } else if (stack instanceof Array) {
        result = stack;
      } else if (stack) {
        result = stack.toString().split("\n");
      }

      return result;
    }
  }, {
    key: "_processMessageFormatTag",
    value: function _processMessageFormatTag(tag, opts) {
      var result;

      switch (tag) {
        case "C":
          if (opts) {
            result = "LoggerMDC.get(\"".concat(opts, "\")");
          } else {
            result = "LoggerMDC.toJson()";
          }

          break;

        case "d":
          // TODO Format date
          result = "datetime.toISOString()";
          break;

        case "e":
          result = 'error ? this._formatError(error): ""';
          break;

        case "m":
          switch (opts) {
            case null:
            case undefined:
              result = "message";
              break;

            case "JSON":
              result = 'message ? JSON.stringify(message).slice(1,-1) : ""';
              break;

            default:
              result = "message ? message.replace(/\\r\\n|\\r|\\n/g, \"".concat(opts, "\"): \"\"");
          }

          break;

        case "n":
          result = "name";
          break;

        case "p":
          // TODO Process ID
          result = '"-"';
          break;

        case "s":
          if (opts) {
            result = "(Array(".concat(opts, " + 1).join(\" \") + (this._severityLabels[severity] || \"ANY\")).slice(-").concat(opts, ")");
          } else {
            result = 'this._severityLabels[severity] || "ANY"';
          }

          break;

        case "t":
          // TODO Thread ID
          result = '"-"';
          break;

        case "T":
          // TODO Thread name
          result = '"-"';
          break;
      }

      return result;
    }
  }, {
    key: "_processErrorFormatTag",
    value: function _processErrorFormatTag(tag, opts) {
      var result;

      switch (tag) {
        case "b":
          result = "this._processStack(error).join(\"".concat(opts || ENTRY_SEPARATOR, "\")");
          break;

        case "c":
          result = 'error.name || "Error"';
          break;

        case "C":
          result = "error.cause ? (\"".concat(opts || "", "\" + this._formatCause(error.cause)) : \"\"");
          break;

        case "i":
          result = 'error.id ? error.id : "-"';
          break;

        case "m":
          var errorMessage = 'error.message ? (error.message + ((error.paramMap && Object.keys(error.paramMap).length > 0) ? " (paramMap: " + JSON.stringify(error.paramMap) + ")" : "")) : (typeof error === "string" ? error : "")';

          switch (opts) {
            case null:
            case undefined:
              result = errorMessage;
              break;

            case "JSON":
              result = "JSON.stringify(".concat(errorMessage, ").slice(1,-1)");
              break;

            default:
              result = "(".concat(errorMessage, ").replace(/\\r\\n|\\r|\\n/g, \"").concat(opts, "\")");
          }

          break;

        case "t":
          result = 'error.timestamp ? error.timestamp.toISOString() : "-"';
          break;
      }

      return result;
    }
  }, {
    key: "_transformFormat",
    value: function _transformFormat(format, callback) {
      var _this = this;

      var tags = [];
      format.replace(FORMAT_TAGS, function () {
        tags.push(Array.prototype.slice.call(arguments, 1, -2));
      });
      var result = "(\"".concat(format.replace(/"/gm, '\\"'), "\")");
      tags.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            full_tag = _ref2[0],
            opts = _ref2[1],
            tag = _ref2[2];

        var replacement;

        if (tag === "%" && !opts) {
          replacement = "%";
        } else {
          replacement = callback(tag, opts);
        }

        if (replacement === null || replacement === undefined) {
          throw new BaseError("unsupported format tag \"".concat(full_tag, "\" for ").concat(_this.constructor.name));
        }

        replacement = "\" + (".concat(replacement, ") + \"");
        result = result.replace(full_tag, replacement);
      });
      return result.replace(/\n/gm, "\\n").replace();
    }
  }]);

  return MessageFormatter;
}();

module.exports = MessageFormatter;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    ContextStore = _require.ContextStore; // environment specific implementations


var _require2 = __webpack_require__(138),
    getFactory = _require2.getFactory,
    setFactory = _require2.setFactory;

var CTX_STORE_NAME = "uuapp.logging";
var MDC_KEY = "mdc";
/**
 * Mapped diagnostic context.
 */

var LoggerMDC = /*#__PURE__*/function () {
  function LoggerMDC() {
    _classCallCheck(this, LoggerMDC);
  }

  _createClass(LoggerMDC, null, [{
    key: "create",

    /**
     * Initializes MDC
     * @param emitters Context emitters.
     * @param fn Function within which should be MDC available
     * @returns {*} Return value of invoked function.
     */
    value: function create() {
      var emitters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fn = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof emitters === "function") {
        fn = emitters;
        emitters = null;
      }

      return ContextStore.create(CTX_STORE_NAME, function () {
        var ctxStore = ContextStore.get(CTX_STORE_NAME);

        if (emitters) {
          emitters.forEach(function (e) {
            return ctxStore.bindEmitter(e);
          });
        }

        return fn();
      });
    }
    /**
     * Stores context attribute.
     * @param key Context attribute name.
     * @param value Context attribute value.
     */

  }, {
    key: "set",
    value: function set(key, value) {} // implementation available in get-set.js
    // due to environment differences

    /**
     * Reads value of context attribute.
     * @param key Context attribute name.
     * @returns {*} Context attribute value.
     */

  }, {
    key: "get",
    value: function get(key) {} // implementation available in get-set.js
    // due to environment differences

    /**
     * Clears MDC in current context.
     */

  }, {
    key: "clear",
    value: function clear() {
      var store = ContextStore.get(CTX_STORE_NAME);

      if (store) {
        store.set(MDC_KEY, {});
      }
    }
    /**
     * Serializes current state of MDC to JSON.
     * @returns {string} Serialized MDC
     */

  }, {
    key: "toJson",
    value: function toJson() {
      var store = ContextStore.get(CTX_STORE_NAME);

      if (store) {
        var mdc = store.get(MDC_KEY);

        if (mdc) {
          return JSON.stringify(mdc);
        }
      }

      return "{}";
    }
  }]);

  return LoggerMDC;
}(); // remapping environment specific methods


LoggerMDC.set = setFactory(ContextStore, CTX_STORE_NAME, MDC_KEY);
LoggerMDC.get = getFactory(ContextStore, CTX_STORE_NAME, MDC_KEY);
module.exports = LoggerMDC;

/***/ }),
/* 138 */
/***/ (function(module, exports) {

/**
 * LoggerMDC implementation of get and set
 * for Browser environment.
 */
module.exports = {
  setFactory: function setFactory(ContextStore, CTX_STORE_NAME, MDC_KEY) {
    return function set(key, value) {
      var store = ContextStore.get(CTX_STORE_NAME);

      if (!store) {
        ContextStore.create(CTX_STORE_NAME, noop);
        store = ContextStore.get(CTX_STORE_NAME);
      }

      var mdc = store.get(MDC_KEY);

      if (!mdc) {
        mdc = {};
        store.set(MDC_KEY, mdc);
      }

      mdc[key] = value;
    };
  },
  getFactory: function getFactory(ContextStore, CTX_STORE_NAME, MDC_KEY) {
    return function get(key) {
      var store = ContextStore.get(CTX_STORE_NAME);

      if (!store) {
        ContextStore.create(CTX_STORE_NAME, noop);
        store = ContextStore.get(CTX_STORE_NAME);
      }

      var mdc = store.get(MDC_KEY);

      if (mdc) {
        return mdc[key];
      }
    };
  }
};

function noop() {}

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Logger = __webpack_require__(134);

var _require = __webpack_require__(98),
    BaseError = _require.BaseError,
    Config = _require.Config;

var loggers = {};
/**
 * @class UuApp.Logging.LoggerFactory
 * @classdesc
 * Factory class for getting access to loggers. See {@link UuApp.Logging.Logger Logger} for more information.
 */

/**
 * Returns an instance of the logger with given name. Settings of the logger are
 * taken from global configuration (see {@link UuApp.Util.Config.init Config.init}).
 * Default global logLevel is Logger.{@link UuApp.Logging.Logger.LEVEL_WARN LEVEL_WARN}.
 *
 * Successive calls with the same logger name return the same logger instance.
 *
 * @param {string} name The name of the logger. Typically, it's a fully-qualified name of
 *   the component that uses the logger, e.g. "My.Namespace.Component".
 * @param {boolean} hierarchical Whether the logger shall inherit settings from its parent
 *   package names, e.g. whether logger with name "My.Namespace" should inherit logLevel from "My"
 *   or from root (hierarchical = true, default) or only settings directly for "My.Namespace" apply
 *   (hierarchical = false). The parameter is used only during 1st invocation for given logger name,
 *   in successive calls it's ignored.
 * @return {UuApp.Logging.Logger} An instance of the logger with given name.
 * @method UuApp.Logging.LoggerFactory.get
 */

var LoggerFactory = /*#__PURE__*/function () {
  function LoggerFactory() {
    _classCallCheck(this, LoggerFactory);
  }

  _createClass(LoggerFactory, null, [{
    key: "get",
    value: function get(name) {
      var hierarchical = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (typeof name != "string") {
        throw new BaseError("LoggerFactory.get() must be called with a string argument (logger name).");
      }

      var cname = name.toLowerCase();

      if (loggers[cname]) {
        return loggers[cname].logger;
      } else {
        var logger = new Logger(name);
        LoggerFactory.configure(logger, hierarchical);
        loggers[cname] = {
          logger: logger,
          hierarchical: hierarchical
        };
        return logger;
      }
    }
  }, {
    key: "configure",
    value: function configure(logger, hierarchical) {
      var cname = logger.getName().toString().toLowerCase();
      var logSeverityLabels = Config.get(cname + ".log_severity_labels", hierarchical !== false);
      var logMessageFormat = Config.get(cname + ".log_message_format", hierarchical !== false);
      var logErrorFormat = Config.get(cname + ".log_error_format", hierarchical !== false);
      var logCauseFormat = Config.get(cname + ".log_cause_format", hierarchical !== false);
      var logLevel = Config.get(cname + ".log_level", hierarchical !== false);
      logger.setSeverityLabels(logSeverityLabels);
      logger.setMessageFormat(logMessageFormat);
      logger.setErrorFormat(logErrorFormat);
      logger.setCauseFormat(logCauseFormat);
      logger.setLevel(logLevel);
    }
  }, {
    key: "configureAll",
    value: function configureAll() {
      Object.keys(loggers).map(function (name) {
        var reg = loggers[name];
        LoggerFactory.configure(reg.logger, reg.hirearchical);
      });
    }
  }]);

  return LoggerFactory;
}();

module.exports = LoggerFactory;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(141),
    Perflog = _require.Perflog;
/**
 * Interceptor for performance logging.
 */


var PerfLogHandler = /*#__PURE__*/function () {
  function PerfLogHandler(next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, PerfLogHandler);

    this._next = next;
  }

  _createClass(PerfLogHandler, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var options,
            next,
            promise,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                next = this._next;
                Perflog.measureSection("UU_APP_CLIENT_REQUEST", function (section) {
                  request.headers["x-request-id"] = section.getId().toString();
                  var uri = request.uri.toString().replace(/access_token=[^&]+/, "access_token=hidden");
                  section.setAttribute("uri", uri);
                  promise = next.invoke(request, options);
                });
                return _context.abrupt("return", promise);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return PerfLogHandler;
}();

module.exports = PerfLogHandler;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  Perflog: __webpack_require__(142),
  Section: __webpack_require__(144),
  SectionId: __webpack_require__(147),
  Logger: __webpack_require__(145),
  MessageFormatter: __webpack_require__(146)
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Fingerprint = __webpack_require__(143);

var _require = __webpack_require__(98),
    ContextStore = _require.ContextStore,
    Config = _require.Config;

var Section = __webpack_require__(144);

var SectionId = __webpack_require__(147);

var Logger = __webpack_require__(145);

var CTX_STORE_NAME = "uuapp.perflog";
var SECTION_FILTER_PARAM = "uuapp.perflog.section_filter"; // Browser trace id is based on fingerprint (to identify all
// requests from same client).

var TRACE_ID = Number(new Fingerprint({
  canvas: true
}).get()).toString(16);

var Perflog = /*#__PURE__*/function () {
  function Perflog() {
    _classCallCheck(this, Perflog);
  }

  _createClass(Perflog, null, [{
    key: "initialize",
    // In browser, section nesting is not supported
    value: function initialize() {
      var parentId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fn = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof parentId === "function") {
        fn = parentId;
        parentId = null;
      }

      return ContextStore.create(CTX_STORE_NAME, function () {
        var ctxStore = ContextStore.get(CTX_STORE_NAME);

        if (parentId) {
          parentId = SectionId.create(parentId);
        } else {
          parentId = parentId = SectionId.create(TRACE_ID, TRACE_ID);
        }

        ctxStore.set("parentId", parentId);
        return fn();
      });
    }
  }, {
    key: "measureSection",
    value: function measureSection() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var fn = arguments.length > 2 ? arguments[2] : undefined;

      if (typeof name === "function") {
        fn = name;
        name = null;
        attributes = {};
      }

      if (_typeof(name) === "object") {
        fn = attributes;
        attributes = name;
        name = null;
      }

      if (typeof attributes === "function") {
        fn = attributes;
        attributes = {};
      }

      var sectionWrapper = /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var ctxStore, parentId, isTraceable, sectionId, section, result;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  ctxStore = ContextStore.get(CTX_STORE_NAME);
                  parentId = ctxStore.get("parentId"); // Section is logged in case verbose logging is enabled or
                  // if section matches filter regular expression.

                  isTraceable = Perflog._isTraceable(name); // In browser all sections have level 0 (they are not nested).

                  sectionId = isTraceable ? new SectionId(parentId.getTraceId(), parentId.getId(), -1) : parentId;
                  section = new Section(sectionId, name, attributes, isTraceable);
                  _context.prev = 5;
                  _context.next = 8;
                  return fn(section);

                case 8:
                  result = _context.sent;
                  section.close();
                  return _context.abrupt("return", result);

                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](5);
                  section.close();
                  throw _context.t0;

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[5, 13]]);
        }));

        return function sectionWrapper() {
          return _ref.apply(this, arguments);
        };
      }();

      var ctxStore = ContextStore.get(CTX_STORE_NAME);

      if (ctxStore) {
        return ctxStore.fork(sectionWrapper);
      } else {
        return Perflog.initialize(sectionWrapper);
      }
    }
  }, {
    key: "setSectionFilter",
    value: function setSectionFilter(filter) {
      Config.set(SECTION_FILTER_PARAM, filter || ".*");
    }
  }, {
    key: "_isTraceable",
    value: function _isTraceable(name) {
      if (Logger.isVerbose()) {
        return true;
      } else {
        var secFilter = Config.get(SECTION_FILTER_PARAM);

        if (secFilter) {
          return new RegExp(secFilter).test(name);
        } else {
          return false;
        }
      }
    }
  }]);

  return Perflog;
}();

module.exports = Perflog;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
* fingerprintJS 0.5.3 - Fast browser fingerprint library
* https://github.com/Valve/fingerprintjs
* Copyright (c) 2013 Valentin Vasilyev (valentin.vasilyev@outlook.com)
* Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
*/
;

(function (name, context, definition) {
  if ( true && module.exports) {
    module.exports = definition();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})('Fingerprint', this, function () {
  'use strict';

  var Fingerprint = function Fingerprint(options) {
    var nativeForEach, nativeMap;
    nativeForEach = Array.prototype.forEach;
    nativeMap = Array.prototype.map;

    this.each = function (obj, iterator, context) {
      if (obj === null) {
        return;
      }

      if (nativeForEach && obj.forEach === nativeForEach) {
        obj.forEach(iterator, context);
      } else if (obj.length === +obj.length) {
        for (var i = 0, l = obj.length; i < l; i++) {
          if (iterator.call(context, obj[i], i, obj) === {}) return;
        }
      } else {
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (iterator.call(context, obj[key], key, obj) === {}) return;
          }
        }
      }
    };

    this.map = function (obj, iterator, context) {
      var results = []; // Not using strict equality so that this acts as a
      // shortcut to checking for `null` and `undefined`.

      if (obj == null) return results;
      if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
      this.each(obj, function (value, index, list) {
        results[results.length] = iterator.call(context, value, index, list);
      });
      return results;
    };

    if (_typeof(options) == 'object') {
      this.hasher = options.hasher;
      this.screen_resolution = options.screen_resolution;
      this.canvas = options.canvas;
      this.ie_activex = options.ie_activex;
    } else if (typeof options == 'function') {
      this.hasher = options;
    }
  };

  Fingerprint.prototype = {
    get: function get() {
      var keys = [];
      keys.push(navigator.userAgent);
      keys.push(navigator.language);
      keys.push(screen.colorDepth);

      if (this.screen_resolution) {
        var resolution = this.getScreenResolution();

        if (typeof resolution !== 'undefined') {
          // headless browsers, such as phantomjs
          keys.push(this.getScreenResolution().join('x'));
        }
      }

      keys.push(new Date().getTimezoneOffset());
      keys.push(this.hasSessionStorage());
      keys.push(this.hasLocalStorage());
      keys.push(!!window.indexedDB); //body might not be defined at this point or removed programmatically

      if (document.body) {
        keys.push(_typeof(document.body.addBehavior));
      } else {
        keys.push( true ? "undefined" : undefined);
      }

      keys.push(_typeof(window.openDatabase));
      keys.push(navigator.cpuClass);
      keys.push(navigator.platform);
      keys.push(navigator.doNotTrack);
      keys.push(this.getPluginsString());

      if (this.canvas && this.isCanvasSupported()) {
        keys.push(this.getCanvasFingerprint());
      }

      if (this.hasher) {
        return this.hasher(keys.join('###'), 31);
      } else {
        return this.murmurhash3_32_gc(keys.join('###'), 31);
      }
    },

    /**
     * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
     * 
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     * 
     * @param {string} key ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash 
     */
    murmurhash3_32_gc: function murmurhash3_32_gc(key, seed) {
      var remainder, bytes, h1, h1b, c1, c2, k1, i;
      remainder = key.length & 3; // key.length % 4

      bytes = key.length - remainder;
      h1 = seed;
      c1 = 0xcc9e2d51;
      c2 = 0x1b873593;
      i = 0;

      while (i < bytes) {
        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;
        ++i;
        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
        h1 ^= k1;
        h1 = h1 << 13 | h1 >>> 19;
        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;
        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);
      }

      k1 = 0;

      switch (remainder) {
        case 3:
          k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;

        case 2:
          k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;

        case 1:
          k1 ^= key.charCodeAt(i) & 0xff;
          k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;
          k1 = k1 << 15 | k1 >>> 17;
          k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;
          h1 ^= k1;
      }

      h1 ^= key.length;
      h1 ^= h1 >>> 16;
      h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;
      h1 ^= h1 >>> 13;
      h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;
      h1 ^= h1 >>> 16;
      return h1 >>> 0;
    },
    // https://bugzilla.mozilla.org/show_bug.cgi?id=781447
    hasLocalStorage: function hasLocalStorage() {
      try {
        return !!window.localStorage;
      } catch (e) {
        return true; // SecurityError when referencing it means it exists
      }
    },
    hasSessionStorage: function hasSessionStorage() {
      try {
        return !!window.sessionStorage;
      } catch (e) {
        return true; // SecurityError when referencing it means it exists
      }
    },
    isCanvasSupported: function isCanvasSupported() {
      var elem = document.createElement('canvas');
      return !!(elem.getContext && elem.getContext('2d'));
    },
    isIE: function isIE() {
      if (navigator.appName === 'Microsoft Internet Explorer') {
        return true;
      } else if (navigator.appName === 'Netscape' && /Trident/.test(navigator.userAgent)) {
        // IE 11
        return true;
      }

      return false;
    },
    getPluginsString: function getPluginsString() {
      if (this.isIE() && this.ie_activex) {
        return this.getIEPluginsString();
      } else {
        return this.getRegularPluginsString();
      }
    },
    getRegularPluginsString: function getRegularPluginsString() {
      return this.map(navigator.plugins, function (p) {
        var mimeTypes = this.map(p, function (mt) {
          return [mt.type, mt.suffixes].join('~');
        }).join(',');
        return [p.name, p.description, mimeTypes].join('::');
      }, this).join(';');
    },
    getIEPluginsString: function getIEPluginsString() {
      if (window.ActiveXObject) {
        var names = ['ShockwaveFlash.ShockwaveFlash', //flash plugin
        'AcroPDF.PDF', // Adobe PDF reader 7+
        'PDF.PdfCtrl', // Adobe PDF reader 6 and earlier, brrr
        'QuickTime.QuickTime', // QuickTime
        // 5 versions of real players
        'rmocx.RealPlayer G2 Control', 'rmocx.RealPlayer G2 Control.1', 'RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)', 'RealVideo.RealVideo(tm) ActiveX Control (32-bit)', 'RealPlayer', 'SWCtl.SWCtl', // ShockWave player
        'WMPlayer.OCX', // Windows media player
        'AgControl.AgControl', // Silverlight
        'Skype.Detection']; // starting to detect plugins in IE

        return this.map(names, function (name) {
          try {
            new ActiveXObject(name);
            return name;
          } catch (e) {
            return null;
          }
        }).join(';');
      } else {
        return ""; // behavior prior version 0.5.0, not breaking backwards compat.
      }
    },
    getScreenResolution: function getScreenResolution() {
      return [screen.height, screen.width];
    },
    getCanvasFingerprint: function getCanvasFingerprint() {
      var canvas = document.createElement('canvas');
      var ctx = canvas.getContext('2d'); // https://www.browserleaks.com/canvas#how-does-it-work

      var txt = 'http://valve.github.io';
      ctx.textBaseline = "top";
      ctx.font = "14px 'Arial'";
      ctx.textBaseline = "alphabetic";
      ctx.fillStyle = "#f60";
      ctx.fillRect(125, 1, 62, 20);
      ctx.fillStyle = "#069";
      ctx.fillText(txt, 2, 15);
      ctx.fillStyle = "rgba(102, 204, 0, 0.7)";
      ctx.fillText(txt, 4, 17);
      return canvas.toDataURL();
    }
  };
  return Fingerprint;
});

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Logger = __webpack_require__(145);
/**
 * Object provided by {UuApp::Perflog} representing
 * measured section.
 */


var Section = /*#__PURE__*/function () {
  /**
   * Creates new instance of section.
   * @param id Section ID.
   * @param name Section name.
   * @param attributes Section attributes.
   * @param traceable Flag if section is traceable
   *   and thus should be visible in performance log.
   */
  function Section(id, name, attributes, traceable) {
    _classCallCheck(this, Section);

    this._id = id;
    this._name = name || "";
    this._attributes = attributes || {};
    this._traceable = traceable;
    this._checkpoints = {};
    this._start = new Date();
    this._startRaw = window.performance.now();
  }
  /**
   * Section ID.
   * @returns {*} Section ID.
   */


  _createClass(Section, [{
    key: "getId",
    value: function getId() {
      return this._id;
    }
    /**
     * User defined section name.
     * @returns {*} User defined section name.
     */

  }, {
    key: "getName",
    value: function getName() {
      return this._name;
    }
    /**
     * Sets user defined section attribute.
     * @param name Attribute name.
     * @param value Attribute value.
     */

  }, {
    key: "setAttribute",
    value: function setAttribute(name, value) {
      this.getAttributes()[name] = value;
    }
    /**
     * User defined section attributes.
     * @returns {*|{}} User defined section attributes.
     */

  }, {
    key: "getAttributes",
    value: function getAttributes() {
      return this._attributes;
    }
    /**
     * Returns user defined section attribute.
     * @param name Attribute name.
     * @returns {*} Attribute value.
     */

  }, {
    key: "getAttribute",
    value: function getAttribute(name) {
      return this.getAttributes()[name];
    }
    /**
     * Sets section checkpoint (important milestone of section processing
     * which is not important enough to create nested measured section).
     * Name of checkpoint must be unique in scope of section.
     * @param name Checkpoint name.
     */

  }, {
    key: "setCheckpoint",
    value: function setCheckpoint(name) {
      this._checkpoints[name] = Math.round((window.performance.now() - this._startRaw) * 1000000);
    }
    /**
     * Set of currently processed checkpoints. Returned as
     * object where key is checkpont name, value is duration
     * (in nanoseconds) elapsed from section start.
     * @returns {{}|*} Processed checkpoints.
     */

  }, {
    key: "getCheckpoints",
    value: function getCheckpoints() {
      return this._checkpoints;
    }
    /**
     * Returns duration of particular checkpoint (in nanoseconds).
     * @param name Checkpoint name
     * @returns {number|*} Checkpoint duration.
     */

  }, {
    key: "getCheckpoint",
    value: function getCheckpoint(name) {
      return this.getCheckpoints()[name];
    }
    /**
     * Section start time.
     * @returns {Date} Section start time.
     */

  }, {
    key: "getStart",
    value: function getStart() {
      return this._start;
    }
    /**
     * Section finish time. Returns null until section is closed.
     * @returns {Date} Section finish time.
     */

  }, {
    key: "getFinish",
    value: function getFinish() {
      return this._finish;
    }
    /**
     * Section duration (in nanoseconds). Returns null until
     * section is closed.
     * @returns {number|*} Section duration.
     */

  }, {
    key: "getDuration",
    value: function getDuration() {
      return this._duration;
    }
    /**
     * Closes section and publishes section data via Perflog logger
     * (based on Perflog logger verbosity configuration).
     */

  }, {
    key: "close",
    value: function close() {
      if (this._finish) {
        return;
      }

      this._finish = new Date();
      this._duration = Math.round((window.performance.now() - this._startRaw) * 1000000);

      if (this._traceable) {
        Logger.log(this);
      }
    }
  }]);

  return Section;
}();

module.exports = Section;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    Config = _require.Config;

var LoggerFactory = __webpack_require__(133).LoggerFactory;

var BaseLogger = __webpack_require__(133).Logger;

var LogLevel = __webpack_require__(133).LogLevel;

var MessageFormatter = __webpack_require__(146);

var LOGGER_NAME = "UuApp.Perflog.Logger";
/**
 * Logger component internally used by Perflog for providing gathered performance
 * statistics data. Logger is transparently managed via LoggerFactory and
 * therefore supports external configuration via following configuration parameters:
 *
 * * <b>uuapp.perflog.logger.log_level</b><br>
 *   Defines log level. Level can be defined either via name, or its numeric representation. Defaults to +INFO+.
 *
 * * <b>uuapp.perflog.logger.log_message_format</b><br>
 *   Allows to define custom message format. See {UuApp::Perflog::MessageFormatter#message_format} for details.
 */

var Logger = /*#__PURE__*/function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }

  _createClass(Logger, null, [{
    key: "setMessageFormat",

    /**
     * Overrides default message format.
     * @param messageFormat Format string.
     */
    value: function setMessageFormat(messageFormat) {
      Logger._getLogger().setMessageFormat(messageFormat);
    }
    /**
     * Logging severity threshold. Possible values are:
     # * OFF - Logger is disabled.
     # * INFO - Logger logs data of first level measured sections only.
     # * DEBUG - Logger logs data of all measured sections.
     * @param level Log level.
     */

  }, {
    key: "setLevel",
    value: function setLevel(level) {
      Logger._getLogger().setLevel(level);
    }
    /**
     * Checks if performance log is enabled (log level is set to anything other than "OFF").
     * @returns {boolean} True if log is enabled, else false.
     */

  }, {
    key: "isEnabled",
    value: function isEnabled() {
      return Logger._getLogger().getLevel() < LogLevel.OFF;
    }
    /**
     * Checks verbosity of performance log. If log is in verbose mode (log
     * level is set to "DEBUG") it prints data of all measured sections. Else
     * it logs only first level sections.
     * @returns {boolean} True if perfomance log is in verbose mode, else false.
     */

  }, {
    key: "isVerbose",
    value: function isVerbose() {
      return Logger._getLogger().getLevel() < LogLevel.INFO;
    }
    /**
     * Transforms given section to log message and prints it.
     * @param section Section to be logged.
     */

  }, {
    key: "log",
    value: function log(section) {
      if (!section) {
        return;
      }

      Logger._getLogger().log(section);
    }
  }, {
    key: "_getLogger",
    value: function _getLogger() {
      if (!this._logger) {
        var logger = new BaseLogger(LOGGER_NAME);

        if (!Config.get("".concat(LOGGER_NAME.toLowerCase(), ".log_level"), false)) {
          Config.set("".concat(LOGGER_NAME.toLowerCase(), ".log_level"), "INFO");
        } // TODO Should be settable via Logger API


        logger._formatter = new MessageFormatter();
        LoggerFactory.configure(logger, false);
        this._logger = logger;
      }

      return this._logger;
    }
  }]);

  return Logger;
}();

module.exports = Logger;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BaseMessageFormatter = __webpack_require__(133).MessageFormatter;

var DEFAULT_MESSAGE_FORMAT = '[%d] PRFLG {"id":"%i","name":"%n","attributes":%a,"checkpoints":%c,"start":"%t","duration":"%D"}';
/**
 * Default log message formatter used by Perflog logger.
 */

var MessageFormatter = /*#__PURE__*/function (_BaseMessageFormatter) {
  _inherits(MessageFormatter, _BaseMessageFormatter);

  var _super = _createSuper(MessageFormatter);

  function MessageFormatter() {
    _classCallCheck(this, MessageFormatter);

    return _super.call(this, DEFAULT_MESSAGE_FORMAT, null, null);
  }
  /**
   * Sets format of performance log message. Following tags are supported:
   * * <b>%%</b> - Escaped percent tag.
   * * <b>%a</b> - Section attributes in JSON format.
   * * <b>%c</b> - Section checkpoints in JSON format.
   * * <b>%C</b> - Full logger MDC in JSON format.
   * * <b>%d</b> - Date and time.
   * * <b>%D</b> - Section duration in nanos.
   * * <b>%f</b> - Section finish date and time.
   * * <b>%i</b> - Section ID.
   * * <b>%n</b> - Section name.
   * * <b>%t</b> - Section start date and time.
   * * <b>%{ KEY }a</b> - Section attribute with name KEY.
   * * <b>%{ KEY }c</b> - Duration of particular checkpoint with name KEY.
   * * <b>%{ KEY }C</b> - Custom attribute from logger MDC with name KEY.
   * * <b>%{ FMT }d</b> - Date and time in format matching FMT.
   * * <b>%{ FMT }f</b> - Section finish date and time in format matching FMT.
   * * <b>%{ ELM }i</b> - Section ID part, ELM = trace|parent|child|level.
   * * <b>%{ FMT }t</b> - Section start date and time in format matching FMT.
   * @param messageFormat Message format.
   */


  _createClass(MessageFormatter, [{
    key: "setMessageFormat",
    value: function setMessageFormat(messageFormat) {
      _get(_getPrototypeOf(MessageFormatter.prototype), "setMessageFormat", this).call(this, messageFormat);
    }
  }, {
    key: "_processMessageFormatTag",
    value: function _processMessageFormatTag(tag, opts) {
      var result;

      switch (tag) {
        case "a":
          if (opts) {
            // TODO Format date if needed
            result = "message.getAttribute(\"".concat(opts, "\")");
          } else {
            result = "JSON.stringify(message.getAttributes())";
          }

          break;

        case "c":
          if (opts) {
            result = "message.getCheckpoint(\"".concat(opts, "\")");
          } else {
            result = "JSON.stringify(message.getCheckpoints())";
          }

          break;

        case "C":
          if (opts) {
            // TODO Format date if needed
            result = "LoggerMDC.get(\"".concat(opts, "\")");
          } else {
            result = "LoggerMDC.toJson()";
          }

          break;

        case "d":
          // TODO Format date
          result = "datetime.toISOString()";
          break;

        case "D":
          result = "message.getDuration()";
          break;

        case "f":
          // TODO Format date
          result = "message.getFinish() ? message.getFinish().toISOString() : null";
          break;

        case "i":
          switch (opts) {
            case /trace/i:
              result = "message.getId().getTraceId()";
              break;

            case /parent/i:
              result = "message.getId().getParentId()";
              break;

            case /child/i:
              result = "message.getId().getId()";
              break;

            case /level/i:
              result = "message.getLevel()";
              break;

            default:
              result = "message.getId().toString()";
          }

          break;

        case "I":
          // TODO Thread ID
          result = '"-"';
          break;

        case "n":
          result = "message.getName()";
          break;

        case "t":
          // TODO Format date
          result = "message.getStart().toISOString()";
          break;
      }

      return result;
    }
  }]);

  return MessageFormatter;
}(BaseMessageFormatter);

module.exports = MessageFormatter;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // TODO Generate trace ID based on fingerprint

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TRACE_ID_PREFIX = ("0000" + Math.floor(Math.random() * 65535).toString(16)).slice(-4);
/**
 * Object representation of Perflog mesured section ID.
 */

var SectionId = /*#__PURE__*/function () {
  _createClass(SectionId, null, [{
    key: "create",

    /**
     * Creates new section ID from qualified section ID.
     * @param qualifiedId Qualified section ID.
     * @returns {SectionId} Section ID.
     */
    value: function create(qualifiedId) {
      var match;

      if (!qualifiedId) {
        return new SectionId(null, null);
      } else if (match = /^([^-]+)-([^-]+)-([^-]+)-([^-]+)$/.exec(qualifiedId.toString())) {
        return new SectionId(match[1], match[2], match[3], Number(match[4] || 0));
      } else {
        var traceId = qualifiedId.toString().replace(/-/g, "");
        return new SectionId(traceId, traceId);
      }
    }
    /**
     * Creates new section ID instance.
     * @param traceId Trace ID.
     * @param parentId Parent section ID.
     * @param childId Child section ID.
     * @param level Nesting level. In case childId
     *   is given, level is considered as "child level". In case
     *   childId is not set, level is considered as "parent
     *   level" and thus will be increased in new section ID.
     */

  }]);

  function SectionId(traceId, parentId) {
    var childId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, SectionId);

    if (typeof childId === "number") {
      level = childId;
      childId = null;
    }

    this._traceId = traceId || TRACE_ID_PREFIX + ("0000" + Math.floor(Math.random() * 65535).toString(16)).slice(-4);
    this._parentId = parentId || this._traceId;
    this._id = childId || ("00000000" + Math.floor(Math.random() * 4294967295).toString(16)).slice(-8);

    if (typeof level === "number") {
      this._level = childId ? level : level + 1;
    } else {
      this._level = 0;
    }

    this._qualifiedId = "".concat(this._traceId, "-").concat(this._parentId, "-").concat(this._id, "-").concat(("0000" + this._level.toString()).slice(-4));
  }
  /**
   * Trace ID shared by all sections within request scope (spanned
   * across clients and servers). For root section this ID is same
   * as parent ID.
   * @returns {*|string} Trace ID.
   */


  _createClass(SectionId, [{
    key: "getTraceId",
    value: function getTraceId() {
      return this._traceId;
    }
    /**
     * ID of parent section. For root section this ID is same as
     * trace ID.
     * @returns {*|string} Parent ID.
     */

  }, {
    key: "getParentId",
    value: function getParentId() {
      return this._parentId;
    }
    /**
     * ID of current section. This ID will be used as parent ID for
     * all nested sections.
     * @returns {*|string} Child/section ID.
     */

  }, {
    key: "getId",
    value: function getId() {
      return this._id;
    }
    /**
     * Section nesting level. For root section level is 0.
     * @returns {*|number} Nesting level.
     */

  }, {
    key: "getLevel",
    value: function getLevel() {
      return this._level;
    }
    /**
     * Returns formatted qualified section ID.
     * @returns {string} Formatted qualified section ID.
     */

  }, {
    key: "toString",
    value: function toString() {
      return this._qualifiedId;
    }
  }]);

  return SectionId;
}();

module.exports = SectionId;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ApplicationError = __webpack_require__(149);

var SystemError = __webpack_require__(151);
/**
 * Interceptor for extracting error information from response.
 */


var RemoteErrorHandler = /*#__PURE__*/function () {
  function RemoteErrorHandler(next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, RemoteErrorHandler);

    this._next = next;
  }

  _createClass(RemoteErrorHandler, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var options,
            response,
            errorData,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                _context.next = 3;
                return this._next.invoke(request, options);

              case 3:
                response = _context.sent;

                if (!(response.status >= 400)) {
                  _context.next = 11;
                  break;
                }

                errorData = response.data || {};

                if (!(response.status < 500)) {
                  _context.next = 10;
                  break;
                }

                throw new ApplicationError(errorData, response);

              case 10:
                throw new SystemError(errorData, response);

              case 11:
                return _context.abrupt("return", response);

              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return RemoteErrorHandler;
}();

module.exports = RemoteErrorHandler;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RemoteError = __webpack_require__(150);

var ApplicationError = /*#__PURE__*/function (_RemoteError) {
  _inherits(ApplicationError, _RemoteError);

  var _super = _createSuper(ApplicationError);

  function ApplicationError() {
    var _this;

    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var response = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, ApplicationError);

    _this = _super.call(this, message, response);

    if (!_this.status) {
      _this.status = 400;
    }

    return _this;
  }

  return ApplicationError;
}(RemoteError);

module.exports = ApplicationError;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var RemoteError = /*#__PURE__*/function (_BaseError) {
  _inherits(RemoteError, _BaseError);

  var _super = _createSuper(RemoteError);

  function RemoteError() {
    var _this;

    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var response = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, RemoteError);

    if (typeof message === "string") {
      _this = _super.call(this, message);
      _this.paramMap = {};
      _this.dtoOut = {};
    } else if (message.uuAppErrorMap) {
      var keys = Object.keys(message.uuAppErrorMap);

      if (keys.length === 0) {
        // Error in response format (serialized error is missing)
        _this = _super.call(this, JSON.stringify(message));
        _this.paramMap = {};
        _this.dtoOut = {};
      } else {
        var _iterator = _createForOfIteratorHelper(keys),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var key = _step.value;
            var error = message.uuAppErrorMap[key];

            if (error.type === "error") {
              _this = _super.call(this, error.message);
              _this.code = key;

              if (error.id) {
                _this.id = error.id;
              }

              _this.paramMap = error.paramMap;
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        _this.dtoOut = message;
      }
    } else {
      _this = _super.call(this, JSON.stringify(message));
      _this.paramMap = {};
      _this.dtoOut = {};
    }

    if (response) {
      _this.response = response;
      _this.status = response.status;
    }

    return _possibleConstructorReturn(_this);
  }

  return RemoteError;
}(BaseError);

module.exports = RemoteError;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RemoteError = __webpack_require__(150);

var SystemError = /*#__PURE__*/function (_RemoteError) {
  _inherits(SystemError, _RemoteError);

  var _super = _createSuper(SystemError);

  function SystemError() {
    var _this;

    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var response = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, SystemError);

    _this = _super.call(this, message, response);

    if (!_this.status) {
      _this.status = 500;
    }

    return _this;
  }

  return SystemError;
}(RemoteError);

module.exports = SystemError;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ContentTransformers = __webpack_require__(153);

var _require = __webpack_require__(98),
    Config = _require.Config,
    OptsReader = _require.OptsReader,
    BaseError = _require.BaseError;
/**
 * Interceptor for transforming request parameters / response entity according to the Content Type.
 * Recognized options:
 *
 * - transformParameters {boolean} - whether to transform (serialize by Content-Type) request body
 * - transformResponse {boolean} - whether to transform (deserialize by Content-Type) response body
 * - wrapQuery {boolean} - whether to wrap request body with { dto: ... }
 */


var TransformParametersHandler = /*#__PURE__*/function () {
  function TransformParametersHandler(next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, TransformParametersHandler);

    this._next = next;
    this._options = options;
  }

  _createClass(TransformParametersHandler, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var options,
            opts,
            paramsInBody,
            contentTransformers,
            contentType,
            isMultipartPreferred,
            contentHandler,
            response,
            respContentDisposition,
            respContentType,
            _contentHandler,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                opts = new OptsReader(options, this._options, Config); // add default Content-Type & Accept headers

                paramsInBody = request.method.match(/^(put|post)$/i);
                contentTransformers = ContentTransformers.contentTransformers || {};
                contentType = paramsInBody ? request.headers["content-type"] : null;

                if (!("content-type" in request.headers)) {
                  if (paramsInBody) {
                    isMultipartPreferred = request.body != null && (request.body instanceof FormData || request.body instanceof Blob || _typeof(request.body) == "object" && Object.keys(request.body).some(function (it) {
                      return request.body[it] instanceof Blob;
                    }));
                    contentType = isMultipartPreferred ? "multipart/form-data" : "application/json; charset=utf-8";
                    request.headers["content-type"] = contentType;
                  } else {
                    contentType = "application/x-www-form-urlencoded";
                  }
                }

                if (!("accept" in request.headers)) request.headers["accept"] = "application/json"; // wrap request data into "dto" parameter if requested to do so

                if (opts.getBoolean("transformParameters") !== false && !paramsInBody && request.body != null && opts.getBoolean("wrapQuery") && contentType === "application/x-www-form-urlencoded") {
                  request.body = {
                    dto: JSON.stringify(request.body)
                  };
                } // transform request data


                if (!(opts.getBoolean("transformParameters") !== false && request.body != null)) {
                  _context.next = 17;
                  break;
                }

                contentHandler = contentTransformers[this._getMimeMainType(contentType)];
                _context.prev = 10;
                if (contentHandler) request.body = contentHandler.serialize(request.body);
                _context.next = 17;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](10);
                throw new BaseError("Error while serializing data.", _context.t0);

              case 17:
                _context.next = 19;
                return this._next.invoke(request, options);

              case 19:
                response = _context.sent;
                respContentDisposition = response.headers("content-disposition");

                if (!(opts.getBoolean("transformResponse") !== false && !respContentDisposition)) {
                  _context.next = 31;
                  break;
                }

                respContentType = response.headers("content-type");
                _contentHandler = contentTransformers[this._getMimeMainType(respContentType)];
                _context.prev = 24;
                if (response.status === 204) response.data = null;else if (_contentHandler) response.data = _contentHandler.deserialize(response.data);
                _context.next = 31;
                break;

              case 28:
                _context.prev = 28;
                _context.t1 = _context["catch"](24);
                throw new BaseError("Error while deserializing response data.", _context.t1);

              case 31:
                return _context.abrupt("return", response);

              case 32:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[10, 14], [24, 28]]);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }, {
    key: "_getMimeMainType",
    value: function _getMimeMainType(mimeType) {
      return (mimeType || "").replace(/[+;].*/, "").trim();
    }
  }]);

  return TransformParametersHandler;
}();

module.exports = TransformParametersHandler;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(133),
    LoggerFactory = _require.LoggerFactory;

var MultiPart = __webpack_require__(154);

var dotNotate = __webpack_require__(155);

var logger;

var ContentTransformers = /*#__PURE__*/function () {
  function ContentTransformers() {
    _classCallCheck(this, ContentTransformers);
  }

  _createClass(ContentTransformers, null, [{
    key: "_getLogger",
    value: function _getLogger() {
      if (!logger) {
        logger = LoggerFactory.get("UuApp.AppClient.Client");
      }

      return logger;
    }
  }, {
    key: "_stringify",
    value: function _stringify(key, value, result, topLevel) {
      if (Array.isArray(value)) {
        value.forEach(function (item, i) {
          return ContentTransformers._stringify("".concat(key, "[").concat(i, "]"), item, result, false);
        });
      } else if (value && _typeof(value) === "object") {
        for (var k in value) {
          ContentTransformers._stringify("".concat(key).concat(topLevel ? "" : ".").concat(k), value[k], result, false);
        }
      } else {
        result.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
      }
    }
  }, {
    key: "contentTransformers",

    /**
     * Transformers which serialize / deserialize content that is sent to / received from
     * server using specific MIME type.
     */
    get: function get() {
      return Object.freeze({
        "application/json": ContentTransformers.Json,
        // "application/json+extended": Json,
        //"application/x-msgpack": MessagePack,
        //"application/msgpack": MessagePack,
        "application/x-www-form-urlencoded": ContentTransformers.Form,
        "multipart/form-data": ContentTransformers.MultiPart
      });
    }
  }, {
    key: "Json",
    get: function get() {
      return {
        serialize: function serialize(value) {
          return JSON.stringify(value);
        },
        deserialize: function deserialize(value) {
          return value ? JSON.parse(value) : null;
        }
      };
    }
  }, {
    key: "Form",
    get: function get() {
      return {
        serialize: function serialize(value) {
          if (value == null) return value;

          if (_typeof(value) !== "object") {
            ContentTransformers._getLogger().warn("Unrecognized value when serializing as application/x-www-form-urlencoded - passing as-is. Value:", {
              value: value
            });

            return value;
          }

          var result = dotNotate(value);
          return result.map(function (_ref) {
            var key = _ref.key,
                value = _ref.value;
            return value == null ? "" : "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value));
          }).join("&");
        },
        deserialize: function deserialize(value) {
          if (value == null) return value;

          if (typeof value !== "string") {
            ContentTransformers._getLogger.warn("Unrecognized value when deserializing as application/x-www-form-urlencoded - passing as-is. Value:", {
              value: value
            });

            return value;
          }

          var pairs = value.replace(/\+/g, " ").split("&");
          var result = {};

          for (var i = 0; i < pairs.length; ++i) {
            var pair = pairs[i];
            pair.replace(/^([^=]*)=?(.*)$/, function (m, g1, g2) {
              var dg1 = decodeURIComponent(g1);
              var dg2 = decodeURIComponent(g2);

              if (result.hasOwnProperty(dg1)) {
                if (!Array.isArray(result[dg1])) {
                  result[dg1] = [result[dg1]];
                }

                result[dg1].push(dg2);
              } else {
                result[dg1] = dg2;
              }
            });
          }

          return result;
        }
      };
    }
  }, {
    key: "MultiPart",
    get: function get() {
      return MultiPart;
    }
  }]);

  return ContentTransformers;
}();

module.exports = ContentTransformers;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var _require2 = __webpack_require__(133),
    LoggerFactory = _require2.LoggerFactory;

var dotNotate = __webpack_require__(155);

var logger;
var MultiPart = {
  serialize: function serialize(value) {
    if (!value) return value;

    if (_typeof(value) !== "object") {
      this._getLogger().warn("Unrecognized value when serializing as multipart/form-data - passing as-is. Value:", {
        value: value
      });

      return value;
    }

    if (value instanceof FormData && typeof value.entries !== "function") return value; // FormData without support for iterating over its entries

    if (value instanceof Blob) value = {
      file: value
    }; // make a list and reorder values so that the file instances are at the end of the list

    var data = {};

    if (value instanceof FormData) {
      var _iterator = _createForOfIteratorHelper(value.entries()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var pair = _step.value;
          data[pair[0]] = pair[1];
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      data = value;
    }

    var list = [];
    var hasBinary;

    for (var k in data) {
      var item = data[k];

      if (item instanceof Blob) {
        if (hasBinary) {
          this._getLogger().warn("Too many binary fields. Only single binary field per multipart request is supported.");
        }

        hasBinary = true;
      } else if (_typeof(item) === "object") {
        try {
          list = list.concat(dotNotate(item, k));
          continue;
        } catch (e) {
          throw new BaseError("Serialization of key: ".concat(k, " into FormData failed.") + "Try serializing the nested object beforehand.", e);
        }
      }

      list.push({
        key: k,
        value: item
      });
    }

    var max = list.length;
    var idx = 0;
    list.sort(function (a, b) {
      // stable sort
      var result = (a.value instanceof Blob ? idx + max : idx) - (b.value instanceof Blob ? idx + max : idx);
      idx++;
      return result;
    }); // fill values into FormData

    var formData = new FormData();
    list.forEach(function (it) {
      if (it.value instanceof Blob) {
        formData.append(it.key, it.value, it.value.name || "".concat(Date.now(), ".bin"));
      } else {
        formData.append(it.key, it.value);
      }
    });
    return formData;
  },
  deserialize: function deserialize(value) {
    throw new BaseError("Deserializing multipart/form-data is not supported. Value: " + value);
  },
  _getLogger: function _getLogger() {
    if (!logger) {
      logger = LoggerFactory.get("UuApp.AppClient.Client");
    }

    return logger;
  }
};
module.exports = MultiPart;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

module.exports = function dotNotate(object) {
  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var result = [];
  recurse(parent, object, result, parent ? 1 : 0);
  return result;
};

function recurse(key, value, result, level) {
  if (level > 5) throw new BaseError("Nesting level too deep. Possible circular reference.");

  if (Array.isArray(value)) {
    value.forEach(function (item, i) {
      return recurse("".concat(key, "[").concat(i, "]"), item, result, level + 1);
    });
  } else if (value instanceof Date) {
    result.push({
      key: key,
      value: value.toISOString()
    });
  } else if (value && _typeof(value) === "object") {
    for (var k in value) {
      recurse("".concat(key).concat(level ? "." : "").concat(k), value[k], result, level + 1);
    }
  } else {
    result.push({
      key: key,
      value: value
    });
  }
}

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    Config = _require.Config,
    OptsReader = _require.OptsReader;
/**
 * Interceptor for finalizing uuUri URL in case it's incomplete (missing gateway).
 */


var UriHandler = /*#__PURE__*/function () {
  function UriHandler(next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, UriHandler);

    this._next = next;
    this._options = options;
  }

  _createClass(UriHandler, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var options,
            uri,
            ucUri,
            opts,
            baseUri,
            gatewayUri,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                uri = "";
                ucUri = (request.uri || "").toString();

                if (!ucUri.match(/^https?:/i)) {
                  opts = new OptsReader(options, this._options);
                  baseUri = opts.getString("baseUri");

                  if (!baseUri || !baseUri.match(/^https?:/i)) {
                    opts = new OptsReader(options, this._options, Config);
                    gatewayUri = opts.getString("gatewayUri", "https://uuappg01.plus4u.net");
                    uri += "".concat(gatewayUri.replace(/\/$/, ""), "/");
                  }

                  if (baseUri) {
                    uri += "".concat(baseUri.replace(/^\/|\/$/g, ""), "/");
                  }

                  uri += ucUri.replace(/^\//, "");
                } else {
                  uri += ucUri;
                }

                request.uri = uri;
                return _context.abrupt("return", this._next.invoke(request, options));

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return UriHandler;
}();

module.exports = UriHandler;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Interceptor for Client which authenticates command calls by using token from session object.
 *
 * Interceptor is skipped if there's request header "authorization" set for the command call, even
 * if the header value is null.
 */

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var SessionHandler = /*#__PURE__*/function () {
  function SessionHandler(next) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, SessionHandler);

    this._next = next;
    this._options = options || {};
  }

  _createClass(SessionHandler, [{
    key: "invoke",
    value: function () {
      var _invoke = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(request) {
        var options,
            hasCustomAuthn,
            opts,
            session,
            scope,
            callToken,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                hasCustomAuthn = "authorization" in request.headers;

                if (!hasCustomAuthn) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", this._next.invoke(request, options));

              case 4:
                opts = Object.assign(this._options, options);
                session = opts.session;

                if (!session) {
                  _context.next = 19;
                  break;
                }

                scope = null;

                if (!(typeof session.getCallTokenScope === "function")) {
                  _context.next = 14;
                  break;
                }

                _context.next = 11;
                return session.getCallTokenScope(request.uri, opts);

              case 11:
                scope = _context.sent;
                _context.next = 15;
                break;

              case 14:
                scope = request.uri.toString().split("?")[0];

              case 15:
                _context.next = 17;
                return session.getCallToken(scope, opts);

              case 17:
                callToken = _context.sent;

                if (callToken) {
                  request.headers["authorization"] = callToken;
                }

              case 19:
                return _context.abrupt("return", this._next.invoke(request, options));

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function invoke(_x) {
        return _invoke.apply(this, arguments);
      }

      return invoke;
    }()
  }]);

  return SessionHandler;
}();

module.exports = SessionHandler;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Uri = __webpack_require__(159);

var UriBuilder = __webpack_require__(160);

var InvalidUriPartError = __webpack_require__(162);

module.exports = {
  Uri: Uri,
  UriBuilder: UriBuilder,
  InvalidUriPartError: InvalidUriPartError
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var EMPTY = {};
/**
 * @class UuApp.Uri.Uri
 * @classdesc
 * Immutable representation of uuUri. An instance of the Uri can be obtained either by
 * {@link UuApp.Uri.Uri.parse Uri.parse} or by using {@link UuApp.Uri.UriBuilder UriBuilder} class.
 * Note that minimal Uri consists of at least "app" and "tid".
 *
 * Examples of usage:
 *
 *     // uri from parsing current location
 *     let locationUri = Uri.parse(location.protocol + "//" + location.host + location.pathname); // "http://example.com/vendor-app/0-0/some/uc"
 *     let baseUri = locationUri.baseUri; // "http://example.com/vendor-app/0-0"
 *     let callUri = baseUri.join("+/getConfig"); // "http://example.com/vendor-app/0-0/getConfig"
 *
 *     // uri from parsing
 *     let uri = UuApp.Uri.Uri.parse("https://uuos9.plus4u.net/vendor-app-subapp-spp/tid-awid/useCase?p1=v1");
 *     console.log(uri.gateway, uri.product, uri.workspace, uri.useCase);
 *     let params = uri.parameters; // always returns new copy of parameter map
 *     for (let k in params) console.log(k, "=", params[k]); // p1 = v1
 *
 *     // uri from UriBuilder
 *     let uri2 = UuApp.Uri.UriBuilder.parse(uri).setWorkspace("0-0").setUseCase("sys/init").toUri();
 *     console.log(uri2.toString()); // https://uuos9.plus4u.net/vendor-app-subapp-spp/0-0/sys/init?p1=v1
 *
 *     // uri from parsing (with ECMAScript6 template string, e.g. when using transpilers like Babel)
 *     // Note that query parameter values shouldn't be injected via template string as they might need
 *     // to be encoded first.
 *     let product = "vendor-app";
 *     let workspace = "tid-awid";
 *     let uri3 = UuApp.Uri.Uri.parse(`https://uuos9.plus4u.net/${product}/${workspace}`);
 *
 * @see UuApp.Uri.UriBuilder
 */

var Uri = /*#__PURE__*/function () {
  /**
   * New instance of URI should be created using {@link UuApp.Uri.Uri.parse}.
   * @private
   */
  function Uri(scheme, hostname, port, vendor, app, subApp, spp, tid, awid, useCase, parameters) {
    _classCallCheck(this, Uri);

    this._scheme = scheme;
    this._hostname = hostname;
    this._port = port;
    this._vendor = vendor;
    this._app = app;
    this._subApp = subApp;
    this._spp = spp;
    this._tid = tid;
    this._awid = awid;
    this._useCase = useCase;
    this._memory = {};
    this._useCase = useCase ? useCase.replace(/^\//, "") : useCase;

    if (this._port && typeof this._port !== "number") {
      this._port = parseInt(this._port + "", 10);
    }

    this._memory.gatewayValue = EMPTY;
    this._memory.productValue = EMPTY;
    this._memory.workspaceValue = EMPTY;
    this._memory.baseUriValue = undefined;
    this._memory.relativeUriValue = undefined;
    this._memory.strValue = undefined;
    this._paramsValue = Object.assign({}, parameters);
    Object.freeze(this);
  }
  /**
   * Returns string representation of URI.
   * @return {string}
   * @method UuApp.Uri.Uri#toString
   */


  _createClass(Uri, [{
    key: "toString",
    value: function toString() {
      if (this._memory.strValue !== undefined) {
        return this._memory.strValue;
      } else {
        this._memory.strValue = this.Builder.format(this);
        return this._memory.strValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#toString} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString();
    }
    /**
     * Returns URI containing only mandatory routing data
     * (including only {#gateway}, {#product} and {#workspace}).
     * @throws {BaseError} In case URI does not contain all required parts.
     * @returns {UuApp.Uri.Uri}
     * @method UuApp.Uri.Uri#getBaseUri
     */

  }, {
    key: "getBaseUri",
    value: function getBaseUri() {
      if (this._memory.baseUriValue !== undefined) {
        return this._memory.baseUriValue;
      }

      if (this.getGateway() == null || this.getProduct() == null || this.getWorkspace() == null) {
        throw new BaseError("Insufficient URI - at least one of gateway, product and workspace is not set. Uri: " + this.toString());
      }

      this._memory.baseUri = this.Builder.parse(this).set({
        useCase: null
      }).clearParameters().toUri();
      return this._memory.baseUri;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getBaseUri} for further information.
     * @private
     */

  }, {
    key: "getRelativeUri",

    /**
     * Returns URI without gateway part.
     * @returns {UuApp.Uri.Uri}
     * @method UuApp.Uri.Uri#getRelativeUri
     */
    value: function getRelativeUri() {
      if (this._memory.relativeUriValue !== undefined) {
        return this._memory.relativeUriValue;
      }

      this._memory.relativeUriValue = this.Builder.parse(this).set({
        gateway: null
      }).toUri();
      return this._memory.relativeUriValue;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getRelativeUri} for further information.
     * @private
     */

  }, {
    key: "getGateway",

    /**
     * Returns Gateway (formatted {#scheme}, {#hostname} and {#port})
     * @returns {string}
     * @method UuApp.Uri.Uri#getGateway
     */
    value: function getGateway() {
      if (this._memory.gatewayValue !== EMPTY) {
        return this._memory.gatewayValue;
      } else {
        this._memory.gatewayValue = this.Builder.formatGateway(this._scheme, this._hostname, this._port);
        return this._memory.gatewayValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getGateway} for further information.
     * @private
     */

  }, {
    key: "getProduct",

    /**
     * Returns Product (formatted {#vendor}, {#app}, {#sub_app} and {#spp})
     * @returns {string}
     * @method UuApp.Uri.Uri#getProduct
     */
    value: function getProduct() {
      if (this._memory.productValue !== EMPTY) {
        return this._memory.productValue;
      } else {
        this._memory.productValue = this.Builder.formatProduct(this._vendor, this._app, this._subApp, this._spp);
        return this._memory.productValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getProduct} for further information.
     * @private
     */

  }, {
    key: "getWorkspace",

    /**
     * Returns Workspace (formatted {#tid} and {#awid})
     * @returns {string}
     * @method UuApp.Uri.Uri#getWorkspace
     */
    value: function getWorkspace() {
      if (this._memory.workspaceValue !== EMPTY) {
        return this._memory.workspaceValue;
      } else {
        this._memory.workspaceValue = this.Builder.formatWorkspace(this._tid, this._awid);
        return this._memory.workspaceValue;
      }
    }
    /**
     * @see {@link UuApp.Uri.Uri#getWorkspace} for further information.
     * @private
     */

  }, {
    key: "getScheme",

    /**
     * Returns Scheme
     * @returns {string}
     * @method UuApp.Uri.Uri#getScheme
     */
    value: function getScheme() {
      return this._scheme;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getScheme} for further information.
     * @private
     */

  }, {
    key: "getHostname",

    /**
     * Returns Hostname
     * @returns {string}
     * @method UuApp.Uri.Uri#getHostname
     */
    value: function getHostname() {
      return this._hostname;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getHostname} for further information.
     * @private
     */

  }, {
    key: "getPort",

    /**
     * Returns Port
     * @returns {number}
     * @method UuApp.Uri.Uri#getPort
     */
    value: function getPort() {
      if (this._port) {
        return this._port;
      }

      if (this._scheme) {
        return this._scheme.match(/^https$/) ? 443 : 80;
      }

      return null;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getPort} for further information.
     * @private
     */

  }, {
    key: "getVendor",

    /**
     * Returns Vendor
     * @returns {string}
     * @method UuApp.Uri.Uri#getVendor
     */
    value: function getVendor() {
      return this._vendor;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getVendor} for further information.
     * @private
     */

  }, {
    key: "getApp",

    /**
     * Returns Application
     * @returns {string}
     * @method UuApp.Uri.Uri#getApp
     */
    value: function getApp() {
      return this._app;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getApp} for further information.
     * @private
     */

  }, {
    key: "getSubApp",

    /**
     * Returns Sub-application
     * @returns {string}
     * @method UuApp.Uri.Uri#getSubApp
     */
    value: function getSubApp() {
      return this._subApp;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getSubApp} for further information.
     * @private
     */

  }, {
    key: "getSpp",

    /**
     * Returns SPP
     * @returns {string}
     * @method UuApp.Uri.Uri#getSpp
     */
    value: function getSpp() {
      return this._spp;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getSpp} for further information.
     * @private
     */

  }, {
    key: "getTid",

    /**
     * Returns Tenant ID
     * @returns {string}
     * @method UuApp.Uri.Uri#getTid
     */
    value: function getTid() {
      return this._tid;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getTid} for further information.
     * @private
     */

  }, {
    key: "getAwid",

    /**
     * Returns Application workspace ID
     * @returns {string}
     * @method UuApp.Uri.Uri#getAwid
     */
    value: function getAwid() {
      return this._awid;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getAwid} for further information.
     * @private
     */

  }, {
    key: "getUseCase",

    /**
     * Returns Use Case
     * @returns {string}
     * @method UuApp.Uri.Uri#getUseCase
     */
    value: function getUseCase() {
      return this._useCase;
    }
    /**
     * @see {@link UuApp.Uri.Uri#getUseCase} for further information.
     * @private
     */

  }, {
    key: "getParameters",

    /**
     * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
     * Note that each access returns new copy of the map (to achieve immutability of the Uri class),
     * therefore usage should look like this:
     *
     *     // OPTIMAL (single read of "parameters" field on uri)
     *     let params = uri.parameters;
     *     for (let k in params) console.log(params[k]);
     *
     *     // SUB-OPTIMAL (multiple reads and therefore multiple copying of parameter map)
     *     // for (let k in uri.parameters) console.log(uri.parameters[k]);
     *
     * @method UuApp.Uri.Uri#getParameters
     */
    value: function getParameters() {
      return Object.assign({}, this._paramsValue);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getParameters} for further information.
     * @private
     */

  }, {
    key: "join",

    /**
     * Replaces current path with specified absolute path (or adds a relative path to the current path) returning new Uri.
     * Query parameters are preserved only on last path. Resolving relative path and usage of "./" and "../" works as in standard
     * URLs (see {@link https://tools.ietf.org/html/rfc2396#appendix-C RFC 2396, examples}).
     *
     * Additionally, it's possible to use "+/" at the beginning of paths - paths starting
     * with "+/" are joined as if current path (to which new path is being joined) denoted a "folder", i.e. current path
     * is appended with slash (unless it already ends with slash) and new path is appended afterwards (see examples).
     *
     * @param {...string} path Absolute or relative paths to replace / add.
     * @return New Uri whose path is the result of the join.
     * @method UuApp.Uri.Uri#join
     * @example
     *  // replace path with an absolute path (effectively removing also query parameters)
     *  let uri = Uri.parse("https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1?a=b");
     *  let uri2 = uri.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
     *
     *  // add relative paths
     *  let uri = Uri.parse("https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1");
     *  let uri2 = uri.join("sys/init?p=v");             // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init?p=v
     *  let uri3 = uri.join("+/sys/init?p=v");           // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init?p=v
     *  let uri4 = uri.join("+/sys/?a=b", "init?c=d");   // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init?c=d
     */
    value: function join()
    /* ... */
    {
      if (arguments.length <= 0) {
        return this;
      }

      var root = this.getGateway() || "";
      var path = this.toString().substr(root.length);

      for (var i = 0; i < arguments.length; ++i) {
        var pathPart = arguments[i];

        if (!pathPart) {
          continue;
        }

        path = path.replace(/[?#].*/, ""); // remove query part because we're going to add / replace path

        pathPart = pathPart.replace(/((^|\/)\.\.?)$/, "$1/"); // if new path part ends with two dots / one dot, treat it as a "folder", i.e. append "/"

        if (pathPart.charAt(0) === "/") {
          path = pathPart;
        } // new path part is absolute => replace whole path
        else if (pathPart.match(/^\+(\/|$)/)) {
            path = path.replace(/\/?$/, "/") + pathPart;
          } // new path part is relative with "+/" => append "/" and then new path
          else if (path.charAt(path.length - 1) === "/") {
              path += pathPart;
            } // new path part is relative and current path is a "folder" => append new path
            else {
                path = path.replace(/(^|\/)[^/]*$/, "$1") + pathPart;
              } // new path part is relative and current path is not a "folder" => replace last segment of current path

      } // normalize (modify segments to eliminate "../" and "./" from the path)


      var segments = [];
      path.split("/").forEach(function (part) {
        if (part === "..") {
          segments.pop();
        } else if (part !== "." && part !== "+") {
          segments.push(part);
        }
      });

      if (segments[0] !== "") {
        segments.unshift("");
      } // make sure that after "join" operation the path starts with "/"


      var resultPath = segments.join("/");
      return Uri.parse(root + resultPath);
    }
  }, {
    key: "throwOnSet",
    value: function throwOnSet(attr) {
      throw new BaseError("Cannot set " + attr + "on Uri because instances of Uri are immutable. Use UriBuilder instead.");
    }
    /**
     * Checks whether the other URI is equal to this one and returns true iff it is.
     *
     * @param {UuApp.Uri.Uri} uri Uri to check equality against.
     * @return True iff the specified uri is equal to this one.
     * @method UuApp.Uri.Uri#equals
     */

  }, {
    key: "equals",
    value: function equals(Uri) {
      return this.toString() === (Uri || "").toString();
    }
    /**
     * @param {(string|UuApp.Uri.Uri)} uriStr The string to parse as URI. If an instance of Uri class is given, it's returned as-is.
     * @return {UuApp.Uri.Uri} Parsed URI.
     * @method UuApp.Uri.Uri.parse
     * @example
     *    let uri = UuApp.Uri.Uri.parse("https://uuos9.plus4u.net/vendor-app/tid-awid/useCase?p1=v1");
     */

  }, {
    key: "href",
    get: function get() {
      return this.toString();
    }
  }, {
    key: "baseUri",
    get: function get() {
      return this.getBaseUri();
    }
  }, {
    key: "relativeUri",
    get: function get() {
      return this.getRelativeUri();
    }
    /**
     * Returns Pathname (String representation of URI without gateway and parameters).
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "pathname",
    get: function get() {
      return this.Builder.parse(this).set({
        gateway: null
      }).clearParameters().toString();
    }
  }, {
    key: "gateway",
    get: function get() {
      return this.getGateway();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getGateway} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "origin",
    get: function get() {
      return this.getGateway();
    }
  }, {
    key: "product",
    get: function get() {
      return this.getProduct();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "workspace",
    get: function get() {
      return this.getWorkspace();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "scheme",
    get: function get() {
      return this.getScheme();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * Returns Scheme with colon (:) on the end.
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "protocol",
    get: function get() {
      return this.getScheme() + ":";
    }
  }, {
    key: "hostname",
    get: function get() {
      return this.getHostname();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * Returns Host (formatted {#hostname} and {#port})
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "host",
    get: function get() {
      return this.getHostname() + ":" + this.getPort();
    }
  }, {
    key: "port",
    get: function get() {
      return this.getPort();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "vendor",
    get: function get() {
      return this.getVendor();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "app",
    get: function get() {
      return this.getApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "subApp",
    get: function get() {
      return this.getSubApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "spp",
    get: function get() {
      return this.getSpp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "tid",
    get: function get() {
      return this.getTid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "awid",
    get: function get() {
      return this.getAwid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "useCase",
    get: function get() {
      return this.getUseCase();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
  }, {
    key: "parameters",
    get: function get() {
      return this.getParameters();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet(attr);
    }
    /**
     * @see {@link UuApp.Uri.Uri#getParameters} for further information.
     * Getter to ensure consistency with Node.js URL.
     * @private
     */

  }, {
    key: "searchParams",
    get: function get() {
      return this.getParameters();
    }
    /**
     * Returns string representation of all URI parameters
     * Getter to ensure consistency with Node.js URL.
     * @private
     * @returns {string}
     */

  }, {
    key: "search",
    get: function get() {
      return this.Builder.formatParameters(this.getParameters());
    }
  }], [{
    key: "parse",
    value: function parse(uriStr) {
      if (uriStr instanceof Uri) {
        return uriStr;
      }

      return this.prototype.Builder.parse(uriStr).toUri();
    }
  }, {
    key: "createBuilder",
    value: function createBuilder() {
      return new this.prototype.Builder();
    }
  }]);

  return Uri;
}();

module.exports = Uri;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var Uri = __webpack_require__(159);

var UriParser = __webpack_require__(161);
/**
 * Creates an instance of UriBuilder.
 *
 * @class UuApp.Uri.UriBuilder
 * @classdesc
 * Class for building uuUri. Typical usage:
 *
 *     // starting from current location
 *     let uriBuilder = UriBuilder.parse(location.protocol + "//" + location.host + location.pathname);
 *     let uri1 = uriBuilder.setUseCase("/sys/init").setParameters({ p1: "v1" }).toUri();
 *     console.log(uri1.toString()); // <gateway>/<product>/<workspace>/sys/init?p1=v1
 *
 *     // starting anew, using gateway from main HTML page location
 *     let gateway = location.origin || (location.protocol + "//" + location.host);
 *     let uri2 = UriBuilder.set({
 *       gateway: gateway,
 *       product: "uu-demoapp-main",
 *       workspace: "tid123-awid456",
 *       parameters: { p1: "v1", p2: "v2" }
 *     }).toUri(); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p1=v1&p2=v2
 *
 *     // parameters example
 *     let uriBuilder = UriBuilder.parse(uri2);
 *     let uri3 = uriBuilder.deleteParameter("p1").mergeParameters({ p3: "v3" }).toUri();
 *     console.log(uri3.toString()); // <gatewayFromMainPage>/uu-demoapp-main/tid123-awid456?p2=v2&p3=v3
 *
 * @see {@link UuApp.Uri.UriBuilder.parse UriBuilder.parse}
 * @see {@link UuApp.Uri.UriBuilder.set UriBuilder.set}
 * @see {@link UuApp.Uri.UriBuilder#toUri UriBuilder#toUri}
 */


var UriBuilder = /*#__PURE__*/function () {
  function UriBuilder() {
    _classCallCheck(this, UriBuilder);

    this._parameters = {};
  }
  /**
   * Sets query parameter with given name to given value.
   *
   * @param {string} name The parameter name.
   * @param {string} value The parameter value.
   * @return This UriBuilder instance for chaining operations.
   * @method UuApp.Uri.UriBuilder#setParameter
   */


  _createClass(UriBuilder, [{
    key: "setParameter",
    value: function setParameter(name, value) {
      UriParser.validateParameterName(name);
      UriParser.validateParameterValue(value);

      if (this._parameters.hasOwnProperty(name)) {
        if (Array.isArray(this._parameters[name])) {
          this._parameters[name].push(value);
        } else {
          this._parameters[name] = [this._parameters[name], value];
        }
      } else {
        this._parameters[name] = value;
      }

      return this;
    }
    /**
     * Removes query parameter with given name.
     *
     * @param {string} name The parameter name.
     * @return This UriBuilder instance for chaining operations.
     * @method UuApp.Uri.UriBuilder#deleteParameter
     */

  }, {
    key: "deleteParameter",
    value: function deleteParameter(name) {
      UriParser.validateParameterName(name);
      delete this._parameters[name];
      return this;
    }
    /**
     * Removes all query parameters.
     *
     * @return This UriBuilder instance for chaining operations.
     * @method UuApp.Uri.UriBuilder#clearParameters
     */

  }, {
    key: "clearParameters",
    value: function clearParameters() {
      this._parameters = {};
      return this;
    }
    /**
     * Parses URI string (or Uri instance) and resets all fields of this UriBuilder
     * to parsed values.
     *
     * @param {(string|UuApp.Uri.Uri)} uriObj URI to parse.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#parse
     */

  }, {
    key: "parse",
    value: function parse(uriObj) {
      var uri = typeof uriObj === "string" ? UriParser.parse(uriObj, this).toUri() : uriObj;
      this.setGateway(uri.getGateway());
      this.setProduct(uri.getProduct());
      this.setWorkspace(uri.getWorkspace());
      this.setUseCase(uri.getUseCase());
      this.setParameters(uri.getParameters());
      return this;
    }
    /**
     * Equivalent to <code>new UriBuilder().parse(uri)</code>.
     *
     * @param {(string|UuApp.Uri.Uri)} uri URI to parse.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.parse
     * @see UuApp.Uri.UriBuilder#parse
     */

  }, {
    key: "format",
    value: function format() {
      return UriBuilder.format(this.toUri());
    }
  }, {
    key: "toString",
    value: function toString() {
      return UriBuilder.format(this.toUri());
    }
    /**
     * Returns Uri instance from current values of this UriBuilder.
     *
     * @return {UuApp.Uri.Uri} Uri instance from current values of this UriBuilder.
     * @method UuApp.Uri.UriBuilder#toUri
     */

  }, {
    key: "toUri",
    value: function toUri() {
      var missing = [];
      if (this.getScheme() == null && (this.getHostname() != null || this.getPort() != null)) missing.push("scheme");
      if (this.getHostname() == null && (this.getScheme() != null || this.getPort() != null)) missing.push("hostname");
      if (this.getVendor() == null && (this.getSubApp() != null || this.getSpp() != null)) missing.push("vendor");
      if (this.getApp() == null) missing.push("app");
      if (this.getSubApp() == null && this.getSpp() != null) missing.push("subApp");
      if (this.getAwid() == null) missing.push("awid");
      if (missing.length) throw new BaseError("Missing Uri parts: " + missing.join(", "));
      return new Uri(this.getScheme(), this.getHostname(), this.getPort(), this.getVendor(), this.getApp(), this.getSubApp(), this.getSpp(), this.getTid(), this.getAwid(), this.getUseCase(), this.getParameters());
    }
    /**
     * Replaces current path with specified absolute path (or adds a relative path to the current path) for this UriBuilder.
     * Works exactly the same way as {@link UuApp.Uri.Uri#join Uri#join} but returns UriBuilder instead of Uri.
     *
     * @param {...string} path Absolute or relative paths to replace / add.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#join
     * @see UuApp.Uri.Uri#join
     * @example
     *  // replace path with an absolute path
     *  let srcUri = "https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1";
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("/vendor2-app2/tid2-awid2"); // https://uuos9.plus4u.net/vendor2-app2/tid2-awid2
     *
     *  // add relative paths
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("./sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/sys/init
     *  let uriBuilder = UriBuilder.parse(srcUri);
     *  uriBuilder.join("+/sys/init?p=v");         // https://uuos9.plus4u.net/vendor-app-subApp/tid-awid/uc1/sys/init
     */

  }, {
    key: "join",
    value: function join()
    /* ... */
    {
      var uri = this.toUri();
      return this.parse(uri.join.apply(uri, arguments));
    }
    /**
     * Sets fields of this UriBuilder to given values.
     *
     * @param {...Object} fieldMap Object(s) containing fields to set to this UriBuilder. If more objects are given,
     *   fields in latter ones override fields in former ones.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#set
     * @example
     *   // replace spp, awid & remove useCase
     *   let resUri = UriBuilder.parse(someUri).set({
     *     spp: "async",
     *     awid: "12345",
     *     useCase: null
     *   }).toUri();
     *
     *   // multiple settings
     *   let defaults = { gateway: "...", product: "uu-demoapp-main", tid: "0", awid: "0" };
     *   let resUri = UriBuilder.set(defaults, {
     *     tid: "12f34", // overrides the one from "defaults" variable
     *     useCase: "/getData"
     *   }).toUri();
     */

  }, {
    key: "set",
    value: function set()
    /* ... */
    {
      for (var i = 0; i < arguments.length; ++i) {
        var hash = arguments[i];
        if (!hash) continue;
        if (_typeof(hash) !== "object") continue;

        for (var k in hash) {
          this["set" + k.replace(/^./, function (m) {
            return m.toUpperCase();
          })](hash[k]);
        } // this[k] = hash[k];

      }

      return this;
    }
    /**
     * Equivalent to <code>new UriBuilder().set(...)</code>.
     *
     * @param {...Object} fieldMap Object(s) containing fields to set to the UriBuilder. If more objects are given,
     *   fields in latter ones override fields in former ones.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.set
     * @see UuApp.Uri.UriBuilder#set
     */

  }, {
    key: "mergeParameters",

    /**
     * Merges (replaces / adds) provided parameters into the ones already present
     * in this UriBuilder.
     *
     * @param {Object} map Map with parameters to merge.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#mergeParameters
     */
    value: function mergeParameters(value) {
      if (value) for (var k in value) {
        this.setParameter(k, value[k]);
      }
      return this;
    } //---------------------------------------------

  }, {
    key: "getScheme",
    value: function getScheme() {
      return this._scheme;
    }
  }, {
    key: "getHostname",
    value: function getHostname() {
      return this._hostname;
    }
  }, {
    key: "getVendor",
    value: function getVendor() {
      return this._vendor;
    }
  }, {
    key: "getApp",
    value: function getApp() {
      return this._app;
    }
  }, {
    key: "getSubApp",
    value: function getSubApp() {
      return this._subApp;
    }
  }, {
    key: "getSpp",
    value: function getSpp() {
      return this._spp;
    }
  }, {
    key: "getTid",
    value: function getTid() {
      return this._tid;
    }
  }, {
    key: "getAwid",
    value: function getAwid() {
      return this._awid;
    }
  }, {
    key: "getParameters",

    /**
     * Map containing query parameters. If there're no parameters, empty map is returned (not a null).
     * Note that each access returns new copy of the map (to prevent modification of the map without
     * validating the values / keys).
     *
     *     // GOOD
     *     uriBuilder.setParameter("myParam", "value");
     *
     * @name UuApp.Uri.UriBuilder#parameters
     */
    value: function getParameters() {
      return Object.assign({}, this._parameters);
    }
  }, {
    key: "setScheme",

    /**
     * Equivalent to <code>new UriBuilder().setScheme(value)</code>.
     *
     * @param {string} value Scheme to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setScheme
     * @see UuApp.Uri.UriBuilder#setScheme
     */
    value: function setScheme(value) {
      // "instance" method
      if (value != null) UriParser.validateScheme(value);
      this._scheme = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for scheme.
     *
     * @param {string} value Scheme to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setScheme
     */

  }, {
    key: "setHostname",

    /**
     * Equivalent to <code>new UriBuilder().setHostname(value)</code>.
     *
     * @param {string} value Hostname to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setHostname
     * @see UuApp.Uri.UriBuilder#setHostname
     */
    value: function setHostname(value) {
      // "instance" method
      if (value != null) UriParser.validateHostname(value);
      this._hostname = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for hostname.
     *
     * @param {string} value Hostname to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setHostname
     */

  }, {
    key: "setVendor",

    /**
     * Equivalent to <code>new UriBuilder().setVendor(value)</code>.
     *
     * @param {string} value Vendor to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setVendor
     * @see UuApp.Uri.UriBuilder#setVendor
     */
    value: function setVendor(value) {
      // "instance" method
      if (value != null) UriParser.validateVendor(value);
      this._vendor = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for vendor.
     *
     * @param {string} value Vendor to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setVendor
     */

  }, {
    key: "setApp",

    /**
     * Equivalent to <code>new UriBuilder().setApp(value)</code>.
     *
     * @param {string} value Application to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setApp
     * @see UuApp.Uri.UriBuilder#setApp
     */
    value: function setApp(value) {
      // "instance" method
      if (value != null) UriParser.validateApp(value);
      this._app = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for application.
     *
     * @param {string} value Application to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setApp
     */

  }, {
    key: "setSubApp",

    /**
     * Equivalent to <code>new UriBuilder().setSubApp(value)</code>.
     *
     * @param {string} value Sub-application to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setSubApp
     * @see UuApp.Uri.UriBuilder#setSubApp
     */
    value: function setSubApp(value) {
      // "instance" method
      if (value != null) UriParser.validateSubApp(value);
      this._subApp = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for sub-application.
     *
     * @param {string} value Sub-application to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setSubApp
     */

  }, {
    key: "setSpp",

    /**
     * Equivalent to <code>new UriBuilder().setSpp(value)</code>.
     *
     * @param {string} value SPP to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setSpp
     * @see UuApp.Uri.UriBuilder#setSpp
     */
    value: function setSpp(value) {
      // "instance" method
      if (value != null) UriParser.validateSpp(value);
      this._spp = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for SPP.
     *
     * @param {string} value SPP to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setSpp
     */

  }, {
    key: "setTid",

    /**
     * Equivalent to <code>new UriBuilder().setTid(value)</code>.
     *
     * @param {string} value Tenant ID to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setTid
     * @see UuApp.Uri.UriBuilder#setTid
     */
    value: function setTid(value) {
      // "instance" method
      if (value != null) UriParser.validateTid(value);
      this._tid = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for tenant ID.
     *
     * @param {string} value Tenant ID to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setTid
     */

  }, {
    key: "setAwid",

    /**
     * Equivalent to <code>new UriBuilder().setAwid(value)</code>.
     *
     * @param {string} value awid to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setAwid
     * @see UuApp.Uri.UriBuilder#setAwid
     */
    value: function setAwid(value) {
      // "instance" method
      if (value != null) UriParser.validateAwid(value);
      this._awid = value != null ? value : null;
      return this;
    }
    /**
     * Chainable setter for awid.
     *
     * @param {string} value awid to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setAwid
     */

  }, {
    key: "setParameters",

    /**
     * Equivalent to <code>new UriBuilder().setParameters(value)</code>.
     *
     * @param {string} value Parameters to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setParameters
     * @see UuApp.Uri.UriBuilder#setParameters
     */
    value: function setParameters(value) {
      // "instance" method
      this._parameters = {};
      if (value) for (var k in value) {
        this.setParameter(k, value[k]);
      }
      return this;
    }
    /**
     * Chainable setter for parameters (replaces all parameters).
     *
     * @param {string} value Parameters to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setParameters
     */

  }, {
    key: "getPort",
    value: function getPort() {
      return this._port != null ? Number(this._port) : this._port;
    }
  }, {
    key: "setPort",

    /**
     * Equivalent to <code>new UriBuilder().setPort(value)</code>.
     *
     * @param {(string|number)} value Port to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setPort
     * @see UuApp.Uri.UriBuilder#setPort
     */
    value: function setPort(value) {
      if (value != null) UriParser.validatePort(value);
      this._port = value != null ? value : null;
      return this;
    }
  }, {
    key: "getGateway",
    value: function getGateway() {
      return UriBuilder.formatGateway(this._scheme, this._hostname, this._port);
    }
  }, {
    key: "setGateway",

    /**
     * Equivalent to <code>new UriBuilder().setGateway(value)</code>.
     *
     * @param {string} value Gateway to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setGateway
     * @see UuApp.Uri.UriBuilder#setGateway
     */
    value: function setGateway(value) {
      var obj = value != null ? UriParser.parseGateway(value) : null;
      this._scheme = obj && obj.scheme || null;
      this._hostname = obj && obj.hostname || null;
      this._port = obj && obj.port != null ? obj.port : null;
      return this;
    }
  }, {
    key: "getProduct",
    value: function getProduct() {
      return UriBuilder.formatProduct(this._vendor, this._app, this._subApp, this._spp);
    }
  }, {
    key: "setProduct",

    /**
     * Equivalent to <code>new UriBuilder().setProduct(value)</code>.
     *
     * @param {string} value Product to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setProduct
     * @see UuApp.Uri.UriBuilder#setProduct
     */
    value: function setProduct(value) {
      var obj = value ? UriParser.parseProduct(value) : {};
      this._vendor = obj.vendor || null;
      this._app = obj.app || null;
      this._subApp = obj.subApp || null;
      this._spp = obj.spp || null;
      return this;
    }
  }, {
    key: "getWorkspace",
    value: function getWorkspace() {
      return UriBuilder.formatWorkspace(this._tid, this._awid);
    }
  }, {
    key: "setWorkspace",

    /**
     * Chainable setter for workspace ID.
     *
     * @param {string} value Workspace ID to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setWorkspace
     */
    value: function setWorkspace(value) {
      var obj = value ? UriParser.parseWorkspace(value) : {};
      this._tid = obj.tid || null;
      this._awid = obj.awid || null;
      return this;
    }
  }, {
    key: "getUseCase",
    value: function getUseCase() {
      return this._useCase;
    }
  }, {
    key: "setUseCase",

    /**
     * Equivalent to <code>new UriBuilder().setUseCase(value)</code>.
     *
     * @param {string} value Use case to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setUseCase
     * @see UuApp.Uri.UriBuilder#setUseCase
     */
    value: function setUseCase(value) {
      if (value != null) {
        value = value.replace(/(^\/+|\/+$)/g, "");

        if (value) {
          UriParser.validateUseCase(encodeURIComponent(value));
        } else {
          value = null;
        }
      }

      this._useCase = value;
      return this;
    }
  }, {
    key: "throwOnSet",
    value: function throwOnSet(attr) {
      throw new BaseError("\nSetting of \"".concat(attr, "\" and other properties via property access \nis prohibited with UriBuilder to prevent typos. \nUse get").concat(attr[0].toUpperCase()).concat(attr.substr(1), "() and \nset").concat(attr[0].toUpperCase()).concat(attr.substr(1), "(value) instead.\n"));
    }
  }, {
    key: "scheme",
    get: function get() {
      return this.getScheme();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("scheme");
    }
  }, {
    key: "hostname",
    get: function get() {
      return this.getHostname();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("hostname");
    }
  }, {
    key: "vendor",
    get: function get() {
      return this.getVendor();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("vendor");
    }
  }, {
    key: "app",
    get: function get() {
      return this.getApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("app");
    }
  }, {
    key: "subApp",
    get: function get() {
      return this.getSubApp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("subApp");
    }
  }, {
    key: "spp",
    get: function get() {
      return this.getSpp();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("spp");
    }
  }, {
    key: "tid",
    get: function get() {
      return this.getTid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("tid");
    }
  }, {
    key: "awid",
    get: function get() {
      return this.getAwid();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("awid");
    }
  }, {
    key: "parameters",
    get: function get() {
      return this.getParameters();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("parameters");
    }
  }, {
    key: "port",
    get: function get() {
      return this.getPort();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("port");
    }
  }, {
    key: "gateway",
    get: function get() {
      return this.getGateway();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("gateway");
    }
  }, {
    key: "product",
    get: function get() {
      return this.getProduct();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("product");
    }
  }, {
    key: "workspace",
    get: function get() {
      return this.getWorkspace();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("workspace");
    }
  }, {
    key: "useCase",
    get: function get() {
      return this.getUseCase();
    }
    /**
     * throws error to prevent from using setter
     * @param attr
     */
    ,
    set: function set(attr) {
      this.throwOnSet("useCase");
    }
  }], [{
    key: "parse",
    value: function parse(uri) {
      return new UriBuilder().parse(uri);
    }
  }, {
    key: "format",
    value: function format(uri) {
      return UriParser.format(uri);
    }
  }, {
    key: "formatGateway",
    value: function formatGateway(scheme, hostname, port) {
      return UriParser.formatGateway(scheme, hostname, port);
    }
  }, {
    key: "formatProduct",
    value: function formatProduct(vendor, app, subApp, spp) {
      return UriParser.formatProduct(vendor, app, subApp, spp);
    }
  }, {
    key: "formatWorkspace",
    value: function formatWorkspace(tid, awid) {
      return UriParser.formatWorkspace(tid, awid);
    }
  }, {
    key: "formatParameters",
    value: function formatParameters(params) {
      return UriParser.formatParameters(params);
    }
  }, {
    key: "set",
    value: function set()
    /* ... */
    {
      var builder = new UriBuilder();
      return builder.set.apply(builder, arguments);
    }
    /**
     * Equivalent to <code>new UriBuilder().setParameter(name, value)</code>.
     *
     * @param {string} name The parameter name.
     * @param {string} value The parameter value.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setParameter
     * @see UuApp.Uri.UriBuilder#setParameter
     */

  }, {
    key: "setParameter",
    value: function setParameter(name, value) {
      return new UriBuilder().setParameter(name, value);
    }
  }, {
    key: "setScheme",
    value: function setScheme(value) {
      // "static" method
      return new UriBuilder().setScheme(value);
    }
  }, {
    key: "setHostname",
    value: function setHostname(value) {
      // "static" method
      return new UriBuilder().setHostname(value);
    }
    /**
     * Chainable setter for port.
     *
     * @param {string} value Port to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setPort
     */

  }, {
    key: "setPort",
    value: function setPort(value) {
      // "static" method
      return new UriBuilder().setPort(value);
    }
    /**
     * Chainable setter for gateway.
     *
     * @param {string} value Gateway to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setGateway
     */

  }, {
    key: "setGateway",
    value: function setGateway(value) {
      // "static" method
      return new UriBuilder().setGateway(value);
    }
  }, {
    key: "setVendor",
    value: function setVendor(value) {
      // "static" method
      return new UriBuilder().setVendor(value);
    }
  }, {
    key: "setApp",
    value: function setApp(value) {
      // "static" method
      return new UriBuilder().setApp(value);
    }
  }, {
    key: "setSubApp",
    value: function setSubApp(value) {
      // "static" method
      return new UriBuilder().setSubApp(value);
    }
  }, {
    key: "setSpp",
    value: function setSpp(value) {
      // "static" method
      return new UriBuilder().setSpp(value);
    }
    /**
     * Chainable setter for product.
     *
     * @param {string} value Product to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setProduct
     */

  }, {
    key: "setProduct",
    value: function setProduct(value) {
      // "static" method
      return new UriBuilder().setProduct(value);
    }
  }, {
    key: "setTid",
    value: function setTid(value) {
      // "static" method
      return new UriBuilder().setTid(value);
    }
  }, {
    key: "setAwid",
    value: function setAwid(value) {
      // "static" method
      return new UriBuilder().setAwid(value);
    }
    /**
     * Equivalent to <code>new UriBuilder().setWorkspace(value)</code>.
     *
     * @param {string} value Workspace to set.
     * @return New UriBuilder instance.
     * @method UuApp.Uri.UriBuilder.setWorkspace
     * @see UuApp.Uri.UriBuilder#setWorkspace
     */

  }, {
    key: "setWorkspace",
    value: function setWorkspace(value) {
      // "static" method
      return new UriBuilder().setWorkspace(value);
    }
    /**
     * Chainable setter for use case.
     *
     * @param {string} value Use case to set.
     * @return This UriBuilder instance.
     * @method UuApp.Uri.UriBuilder#setUseCase
     */

  }, {
    key: "setUseCase",
    value: function setUseCase(value) {
      // "static" method
      return new UriBuilder().setUseCase(value);
    }
  }, {
    key: "setParameters",
    value: function setParameters(value) {
      // "static" method
      return new UriBuilder().setParameters(value);
    }
  }]);

  return UriBuilder;
}();

Uri.prototype.Builder = UriBuilder;
module.exports = UriBuilder;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var InvalidUriPartError = __webpack_require__(162);

var UNRESERVED = "[\\w\\.\\-~]";
var UNRESERVED_ENCODED = "[\\w\\.\\-~%]";
var IDENTIFIER = "[a-zA-Z0-9_]";
var SCHEME = "(".concat(UNRESERVED, "+)"); // No reason to match IPv4 (invalid IP address is always
// matched as generic hostname - we cannot distinguish them)
// IPV4_PART = "(25[0-5]|2[0-5][0-9]|1[0-9][0-9]|[0-9][0-9]?)"
// IPV4 = "(#{IPV4_PART}(\\.#{IPV4_PART}){3})"
// Only rough validation
// see http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses

var IPV6_PART = "([0-9a-fA-F]{1,4})";
var IPV6 = "(\\[".concat(IPV6_PART, "(:(").concat(IPV6_PART, ")?){1,7}\\])");
var HOSTNAME = "(".concat(IPV6, "|").concat(UNRESERVED, "+)");
var PORT = "(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[0-5][0-9]{4}|[1-9][0-9]{0,3})";
var GATEWAY = "(".concat(SCHEME, "://").concat(HOSTNAME, "(:").concat(PORT, ")?)");
var VENDOR = "(".concat(IDENTIFIER, "{1,32})");
var APP = "(".concat(IDENTIFIER, "{1,32})");
var SUB_APP = "(".concat(IDENTIFIER, "{1,32})");
var SPP = "(".concat(IDENTIFIER, "{1,32})");
var PRODUCT = "(?=[^/]{1,131}(?:/|$))((?:".concat(VENDOR, "\\-)?").concat(APP, "(?:\\-").concat(SUB_APP, "(?:\\-").concat(SPP, ")?)?)");
var TID = "(".concat(IDENTIFIER, "{1,32})");
var AWID = "(".concat(IDENTIFIER, "{1,32})");
var WORKSPACE = "(?=[^/\\?]{1,65}(?:/|\\?|$))((?:".concat(TID, "\\-)?").concat(AWID, ")");
var USE_CASE = "(".concat(UNRESERVED_ENCODED, "+(?:/").concat(UNRESERVED_ENCODED, "+)*)");
var PARAMETER_NAME = "(?:".concat(UNRESERVED_ENCODED, "+)");
var PARAMETER_NAME_DECODED = "(?:[\\w\\.\\-~\\[\\]]+)";
var PARAMETER_VALUE = "(?:[^=&#]*)";
var PARAMETER = "(?:(?:".concat(PARAMETER_NAME, "(?:=").concat(PARAMETER_VALUE, ")?)?)");
var PARAMETERS = "(".concat(PARAMETER, "(?:&").concat(PARAMETER, ")*)");
var URI_REGEXP = new RegExp("^(?:".concat(GATEWAY, ")?\\/").concat(PRODUCT, "\\/").concat(WORKSPACE, "(?:/").concat(USE_CASE, ")?\\/?(?:\\?").concat(PARAMETERS, "?)?$"));

var UriParser = /*#__PURE__*/function () {
  function UriParser() {
    _classCallCheck(this, UriParser);
  }

  _createClass(UriParser, [{
    key: "parse",
    value: function parse(str, UriBuilder) {
      if (!UriBuilder) throw new BaseError("UriBuilder must be provided.");
      var result = (str || "").match(URI_REGEXP); //      console.log(result);

      if (!result) throw new BaseError("Parse error - invalid uri: " + (str || ""));
      UriBuilder.setScheme(result[2]);
      UriBuilder.setHostname(result[3]);
      UriBuilder.setPort(result[10]);
      UriBuilder.setVendor(result[12]);
      UriBuilder.setApp(result[13]);
      UriBuilder.setSubApp(result[14]);
      UriBuilder.setSpp(result[15]);
      UriBuilder.setTid(result[17]);
      UriBuilder.setAwid(result[18]);
      UriBuilder.setUseCase(result[19] ? decodeURIComponent(result[19]) : null);
      var uriBuilder = UriBuilder;
      var params = result[20];

      if (params) {
        params.split("&").forEach(function (pair) {
          if (!pair) return;
          var eqlSignIdx = pair.indexOf("=");
          var k = eqlSignIdx !== -1 ? pair.substr(0, eqlSignIdx) : pair;
          var v = eqlSignIdx !== -1 ? pair.substr(eqlSignIdx + 1) : "";
          uriBuilder.setParameter(decodeURIComponent(k), decodeURIComponent(v));
        });
      }

      return uriBuilder;
    }
  }, {
    key: "format",
    value: function format(uri) {
      var parts = [];
      parts.push("".concat(uri.getGateway() || "", "/").concat(uri.getProduct() || "", "/").concat(uri.getWorkspace() || ""));
      var uc = uri.getUseCase();

      if (uc) {
        if (uc.charAt(0) !== "/") parts.push("/");
        parts.push(encodeURI(uc));
      }

      parts = [parts.join("").replace(/\/+$/, "")]; // remove all trailing slashes

      var params = uri.getParameters();

      var paramParts = this._createParamParts(params);

      parts = parts.concat(paramParts);
      return parts.join("");
    }
  }, {
    key: "parseGateway",
    value: function parseGateway(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("gateway", value, GATEWAY);
      var result = value.match(new RegExp("^" + GATEWAY + "$"));
      if (!result) throw new InvalidUriPartError("gateway", value, GATEWAY); //  console.log(result);
      //      ["http://example.com:123", "http://example.com:123", "http",
      //       "example.com", undefined, undefined,
      //       undefined, undefined, undefined,
      //       ":123", "123"]

      return {
        scheme: result[2],
        hostname: result[3],
        port: result[10]
      };
    }
  }, {
    key: "formatGateway",
    value: function formatGateway(scheme, hostname, port) {
      if (!scheme && !hostname && !port) return null;
      this.validateScheme(scheme);
      this.validateHostname(hostname);
      if (port != null) this.validatePort(port);
      return "".concat(scheme, "://").concat(hostname).concat(port != null ? ":" + port : "");
    }
  }, {
    key: "parseProduct",
    value: function parseProduct(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("product", value, PRODUCT);
      var result = value.match(new RegExp("^" + PRODUCT + "$"));
      if (!result) throw new InvalidUriPartError("product", value, PRODUCT);
      return {
        vendor: result[2],
        app: result[3],
        subApp: result[4],
        spp: result[5]
      };
    }
  }, {
    key: "formatProduct",
    value: function formatProduct(vendor, app, subApp, spp) {
      if (!vendor && !app && !subApp && !spp) return null;
      if (vendor) this.validateVendor(vendor);
      this.validateApp(app);
      if (subApp) this.validateSubApp(subApp);
      if (spp) this.validateSpp(spp);
      var result = [];
      if (vendor) result.push(vendor + "-");
      result.push(app);
      if (subApp) result.push("-" + subApp);
      if (spp) result.push("-" + spp);
      return result.join("");
    }
  }, {
    key: "parseWorkspace",
    value: function parseWorkspace(value) {
      if (typeof value !== "string") throw new InvalidUriPartError("workspace", value, WORKSPACE);
      var result = value.match(new RegExp("^" + WORKSPACE + "$"));
      if (!result) throw new InvalidUriPartError("workspace", value, WORKSPACE);
      return {
        tid: result[2],
        awid: result[3]
      };
    }
  }, {
    key: "formatWorkspace",
    value: function formatWorkspace(tid, awid) {
      if (!tid && !awid) return null;
      if (tid) this.validateTid(tid);
      this.validateAwid(awid);
      var result = [];
      if (tid) result.push(tid + "-");
      result.push(awid);
      return result.join("");
    }
  }, {
    key: "formatParameters",
    value: function formatParameters(params) {
      var parts = this._createParamParts(params);

      return parts.join("");
    }
  }, {
    key: "_createParamParts",
    value: function _createParamParts(params) {
      var _this = this;

      var parts = [];
      var paramKeys = Object.keys(params);
      paramKeys.sort();
      var first = true;

      var _loop = function _loop(i) {
        var k = paramKeys[i];
        var value = params[k];

        if (Array.isArray(value)) {
          value.forEach(function (v) {
            _this._encodeParams(first, k, v, parts);

            first = false;
          });
        } else {
          _this._encodeParams(first, k, value, parts);

          first = false;
        }
      };

      for (var i = 0; i < paramKeys.length; i++) {
        _loop(i);
      }

      return parts;
    }
  }, {
    key: "_encodeParams",
    value: function _encodeParams(first, k, v, parts) {
      parts.push(first ? "?" : "&");
      parts.push(encodeURIComponent(k));
      if (v == null || v === "") return parts;
      parts.push("=");
      parts.push(encodeURIComponent(v));
      return parts;
    }
  }, {
    key: "validate",
    value: function validate(value, regExp, name) {
      if (typeof value !== "string" || !value.match(new RegExp("^" + regExp + "$"))) throw new InvalidUriPartError(name, value, regExp);
    }
  }, {
    key: "validateScheme",
    value: function validateScheme(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SCHEME;
      this.validate(value, regExp, "scheme");
    }
  }, {
    key: "validateHostname",
    value: function validateHostname(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HOSTNAME;
      this.validate(value, regExp, "hostname");
    }
  }, {
    key: "validatePort",
    value: function validatePort(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PORT;
      value = typeof value === "number" ? value + "" : value;
      this.validate(value, regExp, "port");
    }
  }, {
    key: "validateGateway",
    value: function validateGateway(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : GATEWAY;
      this.validate(value, regExp, "gateway");
    }
  }, {
    key: "validateVendor",
    value: function validateVendor(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VENDOR;
      this.validate(value, regExp, "vendor");
    }
  }, {
    key: "validateApp",
    value: function validateApp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APP;
      this.validate(value, regExp, "app");
    }
  }, {
    key: "validateSubApp",
    value: function validateSubApp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SUB_APP;
      this.validate(value, regExp, "subApp");
    }
  }, {
    key: "validateSpp",
    value: function validateSpp(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SPP;
      this.validate(value, regExp, "spp");
    }
  }, {
    key: "validateProduct",
    value: function validateProduct(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PRODUCT;
      this.validate(value, regExp, "product");
    }
  }, {
    key: "validateTid",
    value: function validateTid(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TID;
      this.validate(value, regExp, "tid");
    }
  }, {
    key: "validateAwid",
    value: function validateAwid(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : AWID;
      this.validate(value, regExp, "awid");
    }
  }, {
    key: "validateWorkspace",
    value: function validateWorkspace(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WORKSPACE;
      this.validate(value, regExp, "workspace");
    }
  }, {
    key: "validateUseCase",
    value: function validateUseCase(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : USE_CASE;
      this.validate(value, regExp, "useCase");
    }
  }, {
    key: "validateParameterName",
    value: function validateParameterName(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PARAMETER_NAME_DECODED;
      this.validate(value, regExp, "parameterName");
    }
  }, {
    key: "validateParameterValue",
    value: function validateParameterValue(value) {
      var regExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (value != null && !(typeof value === "string" || Array.isArray(value))) throw new InvalidUriPartError("parameterValue", value, String); // for our generic uuUri following check is always true; will skip for optimization
      //      if (value != null && !encodeURIComponent(value).match(new RegExp("^" + PARAMETER_VALUE + "$"))) throw new InvalidUriPartError("parameterValue", value, PARAMETER_VALUE);
    }
  }]);

  return UriParser;
}();

module.exports = new UriParser();

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;

var InvalidUriPartError = /*#__PURE__*/function (_BaseError) {
  _inherits(InvalidUriPartError, _BaseError);

  var _super = _createSuper(InvalidUriPartError);

  function InvalidUriPartError(partName, value, expected) {
    var _this;

    _classCallCheck(this, InvalidUriPartError);

    var message = "";

    if (typeof expected !== "string") {
      expected = expected === String ? "string" : expected;
      message = "Value \"".concat(value, "\" of URI part [").concat(partName, "] must be ").concat(expected, " but its typeof is ").concat(_typeof(value), ".");
    } else {
      message = "Value \"".concat(value, "\" of URI part [").concat(partName, "] does not match regular expression /").concat(expected.replace(/\//g, "\\/"), "/.");
    }

    _this = _super.call(this, message || "Unexpected error occurred during operation execution.", null);
    _this.code = "uu-app-uri/InvalidUriPartError";
    return _this;
  }

  return InvalidUriPartError;
}(BaseError);

module.exports = InvalidUriPartError;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  get AuthenticationService() {
    return __webpack_require__(164);
  },

  get Session() {
    return __webpack_require__(165);
  },

  get Identity() {
    return __webpack_require__(168);
  },

  get ClientIdentity() {
    return __webpack_require__(169);
  },

  get ApplicationIdentity() {
    return __webpack_require__(170);
  },

  get AuthenticationError() {
    return __webpack_require__(167);
  },

  get InvalidCredentials() {
    return __webpack_require__(171);
  },

  get UntrustedCredentials() {
    return __webpack_require__(166);
  }

};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError,
    Config = _require.Config;

var DEFAULT_PROVIDER_PARAM = "uu_app_default_authn_provider";
/**
 * Component encapsulating authentication process.
 */

var AuthenticationService = /*#__PURE__*/function () {
  function AuthenticationService() {
    _classCallCheck(this, AuthenticationService);
  }

  _createClass(AuthenticationService, null, [{
    key: "authenticate",

    /**
     * Authenticates user.
     * @param {*} credentials User credentials to be verified
     * @param {String|null} scope Scope (single value or array) representing functionality to be invoked within session.
     * @returns {Promise<Session>} User session for passed user credentials.
     * @throws {InvalidCredentials} In case credentials are not valid.
     * @throws {AuthenticationError} In case authentication fails.
     */
    value: function () {
      var _authenticate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(credentials) {
        var scope,
            realization,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                scope = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                realization = AuthenticationService.get();

                if (!scope) {
                  _context.next = 8;
                  break;
                }

                _context.next = 5;
                return realization.authenticate(credentials, scope);

              case 5:
                return _context.abrupt("return", _context.sent);

              case 8:
                _context.next = 10;
                return realization.authenticate(credentials);

              case 10:
                return _context.abrupt("return", _context.sent);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function authenticate(_x) {
        return _authenticate.apply(this, arguments);
      }

      return authenticate;
    }()
    /**
     * Returns particular realization of authentication service.
     * @param {String} realizationName Name of required authentication service realization
     * @returns {*} Object responding to "authenticate" method
     * @throws {BaseError} In case realization with given name does not exist
     */

  }, {
    key: "get",
    value: function get() {
      var realizationName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var name = realizationName || Config.get(DEFAULT_PROVIDER_PARAM);

      if (!name) {
        throw new BaseError("Unable to get default authentication provider. Configuration parameter ".concat(DEFAULT_PROVIDER_PARAM, " is not set."));
      }

      var realization = AuthenticationService._realizations[name];

      if (realization) {
        return realization;
      } else {
        throw new BaseError("There is no authentication provider with name \"".concat(name, "\"."));
      }
    }
    /**
     * Registers custom realization of authentication service.
     * @param {String} realizationName Custom authentication service realization name
     * @param {*} realization Object responding to "authenticate" method
     * @private
     */

  }, {
    key: "_register",
    value: function _register(realizationName, realization) {
      AuthenticationService._realizations[realizationName] = realization;
    }
  }, {
    key: "DEFAULT_PROVIDER_PARAM",

    /**
     * @returns {string} Name of configuration parameter for accessing default realization of authentication service.
     */
    get: function get() {
      return DEFAULT_PROVIDER_PARAM;
    }
  }]);

  return AuthenticationService;
}();

AuthenticationService._realizations = {};
module.exports = AuthenticationService;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var UntrustedCredentials = __webpack_require__(166);
/**
 * Object providing result of authentication process. It holds information about the user's identity, the information
 * about the application and also attributes related to authentication process itself.
 */


var Session = /*#__PURE__*/function () {
  /**
   * Creates new instance of session.
   * @param {Object} data Authentication data.
   * @param {String} data.id Unique session instance ID.
   * @param {String} data.authenticationId Unique ID of authentication process (in whose scope was this session instance created).
   * @param {Date} data.authenticationTime Time of authentication process invocation (in whose scope was this session instance created).
   * @param {number} data.authenticationLevelOfAssurance Numeric representation of the means of authentication
   * @param {Identity} data.identity User identity
   * @param {ApplicationIdentity} data.applicationIdentity Application identity (deprecated, use clientIdentity)
   * @param {ClientIdentity} data.clientIdentity Client Application identity
   * @param {Object} data.attributes Implementation specific session attributes
   * @private
   */
  function Session() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Session);

    this._id = data.id || null;
    this._authenticationId = data.authenticationId || null;
    this._authenticationTime = data.authenticationTime || new Date();
    this._authenticationLevelOfAssurance = data.authenticationLevelOfAssurance ? parseInt(data.authenticationLevelOfAssurance) : 0;
    this._identity = data.identity;
    this._clientIdentity = data.clientIdentity;
    this._applicationIdentity = data.applicationIdentity;
    this._attributes = data.attributes || {};
    this._authenticated = !!(this._authenticationLevelOfAssurance && (this._identity || this._applicationIdentity || this._clientIdentity));
  }
  /**
   * Returns unique session instance ID.
   * @returns {String|null} Session ID.
   */


  _createClass(Session, [{
    key: "getId",
    value: function getId() {
      return this._id;
    }
    /**
     * Returns unique ID of authentication process (in whose scope was this session instance created).
     * @returns {String|null} Unique ID of global session
     */

  }, {
    key: "getAuthenticationId",
    value: function getAuthenticationId() {
      return this._authenticationId;
    }
    /**
     * Returns the time of authentication process invocation (in whose scope was this session instance created).
     * @returns {Date|null} Time of authentication
     */

  }, {
    key: "getAuthenticationTime",
    value: function getAuthenticationTime() {
      return this._authenticationTime;
    }
    /**
     * Returns the means of authentication (type of credentials) for current user.
     * @returns {number} Numeric representation of the means of authentication
     */

  }, {
    key: "getAuthenticationLevelOfAssurance",
    value: function getAuthenticationLevelOfAssurance() {
      return this._authenticationLevelOfAssurance;
    }
    /**
     * Returns user identity.
     * @returns {Identity} User identity
     */

  }, {
    key: "getIdentity",
    value: function getIdentity() {
      return this._identity;
    }
    /**
     * Returns client application identity.
     * @returns {ClientIdentity|null} Client application identity
     */

  }, {
    key: "getClientIdentity",
    value: function getClientIdentity() {
      return this._clientIdentity;
    }
    /**
     * Returns application identity.
     * @returns {ApplicationIdentity|null} Application identity
     * @deprecated Use getClientIdentity.
     */

  }, {
    key: "getApplicationIdentity",
    value: function getApplicationIdentity() {
      return this._applicationIdentity;
    }
    /**
     * Returns true if the user is not anonymous.
     * @returns {boolean} True if user is not anonymous
     */

  }, {
    key: "isAuthenticated",
    value: function isAuthenticated() {
      return !!this._authenticated;
    }
    /**
     * Returns call token scope based on URI of invoked command. This value may be then used for obtaining of
     * actual call token provided by method getCallToken.
     * @param {String|URI} uri URI of command to be invoked (for which to obtain call token scope).
     * @param {Object} opts Call token options.
     * @param {String|null} otps.scopeMode Scope mode (one of [useCase, allUseCases, none]).
     * @returns {Promise<String>} Call token scope
     */

  }, {
    key: "getCallTokenScope",
    value: function () {
      var _getCallTokenScope = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(uri) {
        var opts,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                return _context.abrupt("return", uri ? uri.toString().split("?")[0] : uri);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getCallTokenScope(_x) {
        return _getCallTokenScope.apply(this, arguments);
      }

      return getCallTokenScope;
    }()
    /**
     * Returns token to be used by client to call functionality provided by other application server.
     * @param {String|URI} scope Scope (single value or array) representing functionality to be invoked with token.
     * @param {Object} opts Call token options.
     * @param {boolean|null} otps.useTokenExchange Flag if call should use new token (derived from existing) or directly reuse existing one.
     * @param {boolean|null} opts.excludeAuthenticationType Flag if call token should be returned without authentication type prefix.
     * @param {boolean|null} opts.callTokenType Variant of call token (possible values depends on actual authentication implementation).
     * @returns {Promise<String>} Call token
     */

  }, {
    key: "getCallToken",
    value: function () {
      var _getCallToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(scope) {
        var opts,
            _args2 = arguments;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                opts = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                throw new Error("Method not implemented.");

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getCallToken(_x2) {
        return _getCallToken.apply(this, arguments);
      }

      return getCallToken;
    }()
    /**
     * Checks if processed authentication conforms to required constraints.
     * @param {Object} constraints Session constraint object
     * @param {number|null} constraints.maxAuthenticationAge Maximum age of authentication in seconds
     * @param {number|null} constraints.minAuthenticationLevelOfAssurance Minimum required level of assurance
     * @throws {UntrustedCredentials} In case processed authentication does not conform to required constraints.
     */

  }, {
    key: "assertTrustiness",
    value: function assertTrustiness() {
      var constraints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var mla = constraints.minAuthenticationLevelOfAssurance;

      if (mla != undefined && mla != null && mla > this.getAuthenticationLevelOfAssurance()) {
        throw new UntrustedCredentials(this, "Minimum login level of assurance not met.");
      }

      var maxAge = constraints.maxAuthenticationAge;

      if (maxAge != undefined && maxAge != null) {
        var epochAuthTime = this.getAuthenticationTime().getTime() / 1000;
        var epochCurTime = Date.now / 1000;

        if (epochAuthTime + maxAge < epochCurTime) {
          throw new UntrustedCredentials(this, "User re-authentication required.");
        }
      }
    }
    /**
     * Returns custom session attribute (actual attributes are dependant on particular session instance based on
     * technology used for authentication process)
     * @param {String} name Name of session attribute
     * @returns {*} Attribute value
     */

  }, {
    key: "getAttribute",
    value: function getAttribute(name) {
      return this._attributes[name];
    }
    /**
     * Performs the log out of the user.
     */

  }, {
    key: "close",
    value: function close() {
      this._authenticated = false;
    }
    /**
     * Serializes user and client data. Does not contain ids so that result can
     * be used for comparison between multiple instances of session.
     * @returns {String}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        identity: this._identity,
        clientIdentity: this._clientIdentity,
        applicationIdentity: this._applicationIdentity
      };
    }
  }]);

  return Session;
}();

module.exports = Session;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AuthenticationError = __webpack_require__(167);
/**
 * Error raised in case session does not meet required criteria
 * (e.g. login too old or authentication level of assurance not met )
 */


var UntrustedCredentials = /*#__PURE__*/function (_AuthenticationError) {
  _inherits(UntrustedCredentials, _AuthenticationError);

  var _super = _createSuper(UntrustedCredentials);

  /**
   * Creates new instance of error.
   * @param {Session} session Instance of session not matching requried criteria
   * @param {string} message Error message
   * @param {Error} cause Error cause
   */
  function UntrustedCredentials(session, message) {
    var _this;

    var cause = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, UntrustedCredentials);

    if (typeof session === "string") {
      cause = message;
      message = session;
      session = null;
    }

    _this = _super.call(this, message, cause);
    _this._session = session;
    return _this;
  }
  /**
   * Returns instance of untrusted session.
   * @returns {Session} Instance of untrusted session
   */


  _createClass(UntrustedCredentials, [{
    key: "getSession",
    value: function getSession() {
      return this._session;
    }
  }]);

  return UntrustedCredentials;
}(AuthenticationError);

module.exports = UntrustedCredentials;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _require = __webpack_require__(98),
    BaseError = _require.BaseError;
/**
 * Base error of all authentication errors.
 */


var AuthenticationError = /*#__PURE__*/function (_BaseError) {
  _inherits(AuthenticationError, _BaseError);

  var _super = _createSuper(AuthenticationError);

  function AuthenticationError() {
    _classCallCheck(this, AuthenticationError);

    return _super.apply(this, arguments);
  }

  return AuthenticationError;
}(BaseError);

module.exports = AuthenticationError;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * The identity of a user.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Identity = /*#__PURE__*/function () {
  /**
   * Creates new instance of user identity.
   * @param {String} uuIdentity Unique identifier of the user
   * @param {Object} data Additional identity data.
   * @param {String} data.name Name of the user
   * @param {String} data.type Type of the identity
   * @param {number} data.levelOfAssurance Numeric representation of identity verification level
   * @private
   */
  function Identity(uuIdentity, data) {
    _classCallCheck(this, Identity);

    this._uuIdentity = uuIdentity;

    if (typeof data === "string") {
      this._name = data;
    } else if (data) {
      this._name = data.name;
      this._type = data.type;
      this._levelOfAssurance = data.levelOfAssurance;
    }
  }
  /**
   * Returns a unique identifier of the user.
   * @returns {String} String representation of the unique identifier of the user
   */


  _createClass(Identity, [{
    key: "getUuIdentity",
    value: function getUuIdentity() {
      return this._uuIdentity;
    }
    /**
     * Returns the name of the user.
     * @returns {String|null} User's name
     */

  }, {
    key: "getName",
    value: function getName() {
      return this._name;
    }
    /**
     * Type of the identity.
     * @returns {String|null} Type of the identity
     */

  }, {
    key: "getType",
    value: function getType() {
      return this._type;
    }
    /**
     * Numeric representation of identity verification level.
     * @returns {number|null} Numeric representation of identity verification level
     */

  }, {
    key: "getLevelOfAssurance",
    value: function getLevelOfAssurance() {
      return this._levelOfAssurance;
    } // TODO Only for backward compatibility, drop for "1.0.0" release

    /**
     * Only for backward compatibility.
     * @private
     */

  }, {
    key: "getUUIdentity",
    value: function getUUIdentity() {
      return this.getUuIdentity();
    }
  }]);

  return Identity;
}();

module.exports = Identity;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * The identity of a client application.
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ClientIdentity = /*#__PURE__*/function () {
  /**
   * Creates new instance of client application identity.
   * @param {String} uuIdentity Unique identifier of the client application
   * @param {Object} data Additional identity data.
   * @param {String} data.uri Registered URI of client application
   * @param {String} data.product Client application product
   * @param {String} data.vendor Client application vendor
   * @param {String} data.app Client application name
   * @param {String} data.subApp Client application subapp
   * @param {String} data.asid Client application asid
   * @param {String} data.awid Client application awid
   * @private
   */
  function ClientIdentity(uuIdentity) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ClientIdentity);

    this._uuIdentity = uuIdentity;

    if (data) {
      this._uri = data.uri;
      this._product = data.product;
      this._vendor = data.vendor;
      this._app = data.app;
      this._subApp = data.subApp;
      this._asid = data.asid;
      this._awid = data.awid;
    }
  }
  /**
   * Returns unique identifier of the client application.
   * @returns {String|null} Unique identifier of the client application
   */


  _createClass(ClientIdentity, [{
    key: "getUuIdentity",
    value: function getUuIdentity() {
      return this._uuIdentity;
    }
    /**
     * Returns registered URI of client application.
     * @returns {String|null} Registered URI of client application
     */

  }, {
    key: "getUri",
    value: function getUri() {
      return this._uri;
    }
    /**
     * Returns client application product.
     * @returns {String|null} Client application product
     */

  }, {
    key: "getProduct",
    value: function getProduct() {
      return this._product;
    }
    /**
     * Returns client application vendor.
     * @returns {String|null} Client application vendor
     */

  }, {
    key: "getVendor",
    value: function getVendor() {
      return this._vendor;
    }
    /**
     * Returns client application name.
     * @returns {String|null} Client application name
     */

  }, {
    key: "getApp",
    value: function getApp() {
      return this._app;
    }
    /**
     * Returns client application subapp.
     * @returns {String|null} Client application subapp
     */

  }, {
    key: "getSubApp",
    value: function getSubApp() {
      return this._subApp;
    }
    /**
     * Returns client application asid.
     * @returns {String|null} Client application asid
     */

  }, {
    key: "getAsid",
    value: function getAsid() {
      return this._asid;
    }
    /**
     * Returns client application awid.
     * @returns {String|null} Client application awid
     */

  }, {
    key: "getAwid",
    value: function getAwid() {
      return this._awid;
    }
  }]);

  return ClientIdentity;
}();

module.exports = ClientIdentity;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * The identity of an application.
 * @deprecated Use ClientIdentity
 */

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ApplicationIdentity = /*#__PURE__*/function () {
  /**
   * Creates new instance of application identity.
   * @param {String} uuIdentity Unique identifier of the client application
   * @param {Object} data Additional identity data.
   * @param {String} data.name Name of the application
   * @param {String} data.code Code of the application
   * @private
   */
  function ApplicationIdentity(uuIdentity) {
    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ApplicationIdentity);

    if (typeof data === "string") {
      this._code = uuIdentity;
      this._name = data;
    } else if (data) {
      this._uuIdentity = uuIdentity;
      this._code = data.code;
      this._name = data.name;
    }
  }
  /**
   * Returns unique identifier of the client application.
   * @returns {String|null} Unique identifier of the client application
   */


  _createClass(ApplicationIdentity, [{
    key: "getUuIdentity",
    value: function getUuIdentity() {
      return this._uuIdentity;
    }
    /**
     * Returns unique identifier of the application.
     * @returns {String} String representation of the unique identifier
     */

  }, {
    key: "getCode",
    value: function getCode() {
      return this._code;
    }
    /**
     * Returns name of the application.
     * @returns {String|null} Name of the application
     */

  }, {
    key: "getName",
    value: function getName() {
      return this._name;
    }
  }]);

  return ApplicationIdentity;
}();

module.exports = ApplicationIdentity;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AuthenticationError = __webpack_require__(167);
/**
 * Error raised by AuthenticationService in case provided
 * credentials are not valid.
 */


var InvalidCredentials = /*#__PURE__*/function (_AuthenticationError) {
  _inherits(InvalidCredentials, _AuthenticationError);

  var _super = _createSuper(InvalidCredentials);

  function InvalidCredentials() {
    _classCallCheck(this, InvalidCredentials);

    return _super.apply(this, arguments);
  }

  return InvalidCredentials;
}(AuthenticationError);

module.exports = InvalidCredentials;

/***/ })
/******/ ]);
});