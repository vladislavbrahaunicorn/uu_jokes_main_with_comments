var Err = require("../error/Error.js");

var ASSET_CLASSIFIER = `static|assets|public`;
var UNRESERVED = `[\\w\\.\\-~]`;
var IDENTIFIER = `[a-zA-Z0-9_]`;
var SCHEME = `(${UNRESERVED}+)`;

// No reason to match IPv4 (invalid IP address is always
// matched as generic hostname - we cannot distinguish them)
// IPV4_PART = "(25[0-5]|2[0-5][0-9]|1[0-9][0-9]|[0-9][0-9]?)"
// IPV4 = "(#{IPV4_PART}(\\.#{IPV4_PART}){3})"

// Only rough validation
// see http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
var IPV6_PART = `([0-9a-fA-F]{1,4})`;
var IPV6 = `(\\[${IPV6_PART}(:(${IPV6_PART})?){1,7}\\])`;

var HOSTNAME = `(${IPV6}|${UNRESERVED}+)`;
var PORT = `(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[0-5][0-9]{4}|[1-9][0-9]{0,3})`;
var GATEWAY = `(${SCHEME}://${HOSTNAME}(:${PORT})?)`;
var VENDOR = `(${IDENTIFIER}{1,32})`;
var APP = `(${IDENTIFIER}{1,32})`;
var SUB_APP = `(${IDENTIFIER}{1,32})`;
var SPP = `(${IDENTIFIER}{1,32})`;
var PRODUCT = `(?=[^/]{1,131}(?:/|$))((?:${VENDOR}\\-)?${APP}(?:\\-${SUB_APP}(?:\\-${SPP})?)?)`;
var TID = `(${IDENTIFIER}{1,32})`;
var AWID = `(${IDENTIFIER}{1,32})`;
var WORKSPACE = `(?=[^/\\?]{1,65}(?:/|\\?|$))((?:${TID}\\-)?${AWID})`;
var USE_CASE = `(${UNRESERVED}+(?:/${UNRESERVED}+)*)`;
var PARAMETER_NAME = `(?:${UNRESERVED}+)`;
var PARAMETER_VALUE = `(?:[^=&#]*)`;
var PARAMETER = `(?:(?:${PARAMETER_NAME}(?:=${PARAMETER_VALUE})?)?)`;
var PARAMETERS = `(${PARAMETER}(?:&${PARAMETER})*)`;
var URI_REGEXP = new RegExp(`^(?:${GATEWAY})?\\/${PRODUCT}\\/${WORKSPACE}(?:/${USE_CASE})?\\/?(?:\\?${PARAMETERS}?)?$`);


// console.log("https://uuos9.plus4u.net:80/vnd-app-subapp-spp/tid-awid/some/long/uc?p1=v1&p2=v2&p3=%25".match(URI_REGEXP));                // non-opaque
//
// ["https://uuos9.plus4u.net:80/vnd-app-subapp-spp/tid-awid/some/long/uc?p1=v1&p2=v2&p3=%25", "https://uuos9.plus4u.net:80", "https", "uuos9.plus4u.net", undefined,
//  undefined, undefined, undefined, undefined, ":80",
//  "80", "vnd-app-subapp-spp", "vnd", "app", "subapp",
//  "spp", "tid-awid", "tid", "awid", "/some/long/uc",
//  "p1=v1&p2=v2&p3=%25", index: 0, input: "https://uuos9.plus4u.net:80/vnd-app-subapp-spp/tid-awid/some/long/uc?p1=v1&p2=v2&p3=%25"]

var UriParser = {
  ASSET_CLASSIFIER, UNRESERVED, IDENTIFIER, SCHEME, IPV6_PART, IPV6, HOSTNAME, PORT, GATEWAY, VENDOR, APP, SUB_APP,
  SPP, PRODUCT, TID, AWID, WORKSPACE, USE_CASE, PARAMETER_NAME, PARAMETER_VALUE, PARAMETER, PARAMETERS, URI_REGEXP,

  parse(str, UriBuilder) {
    if (!UriBuilder) throw new Err("UriBuilder must be provided.");
    var result = (str || "").match(URI_REGEXP);
//      console.log(result);
    if (!result) throw new Err("Parse error - invalid uri: " + (str || ""));
    var uriBuilder = new UriBuilder().set({
      scheme: result[2],
      hostname: result[3],
      port: result[10],
      vendor: result[12],
      app: result[13],
      subApp: result[14],
      spp: result[15],
      tid: result[17],
      awid: result[18],
      useCase: result[19]
    });
    var params = result[20];
    if (params) {
      params.split("&").forEach(function (pair) {
        if (!pair) return;
        var eqlSignIdx = pair.indexOf("=");
        var k = (eqlSignIdx != -1 ? pair.substr(0, eqlSignIdx) : pair);
        var v = (eqlSignIdx != -1 ? pair.substr(eqlSignIdx + 1) : "");
        uriBuilder.setParameter(k, decodeURIComponent(v)); // key contains only URL-safe characters
      });
    }
    return uriBuilder;
  },

  format(uri) {
    var parts = [];
    parts.push(`${uri.gateway||""}/${uri.product||""}/${uri.workspace||""}`);
    var uc = uri.useCase;
    if (uc) {
      if (uc.charAt(0) != "/") parts.push("/");
      parts.push(uc);
    }
    parts = [parts.join("").replace(/\/+$/, "")]; // remove all trailing slashes
    var params = uri.parameters;
    var paramKeys = Object.keys(params);
    paramKeys.sort();
    for (var i = 0; i < paramKeys.length; ++i) {
      var k = paramKeys[i];
      parts.push(i ? "&" : "?");
      parts.push(k);
      var value = params[k];
      if (value == null || value === "") continue;
      parts.push("=");
      parts.push(encodeURIComponent(value));
    }
    return parts.join("");
  },


  parseGateway(value) {
    if (typeof value != "string") throw new InvalidUriPartError("gateway", value, GATEWAY);
    var result = value.match(new RegExp("^" + GATEWAY + "$"));
    if (!result) throw new InvalidUriPartError("gateway", value, GATEWAY);
    //  console.log(result);
//      ["http://example.com:123", "http://example.com:123", "http",
//       "example.com", undefined, undefined,
//       undefined, undefined, undefined,
//       ":123", "123"]
    return {scheme: result[2], hostname: result[3], port: result[10]};
  },
  formatGateway(scheme, hostname, port) {
    if (!scheme && !hostname && !port) return null;
    UriParser.validateScheme(scheme);
    UriParser.validateHostname(hostname);
    if (port != null) UriParser.validatePort(port);
    return `${scheme}://${hostname}${port != null ? ":"+port : ""}`;
  },

  parseProduct(value) {
    if (typeof value != "string") throw new InvalidUriPartError("product", value, PRODUCT);
    var result = value.match(new RegExp("^" + PRODUCT + "$"));
    if (!result) throw new InvalidUriPartError("product", value, PRODUCT);
    return {vendor: result[2], app: result[3], subApp: result[4], spp: result[5]};
  },
  formatProduct(vendor, app, subApp, spp) {
    if (!vendor && !app && !subApp && !spp) return null;
    if (vendor) UriParser.validateVendor(vendor);
    UriParser.validateApp(app);
    if (subApp) UriParser.validateSubApp(subApp);
    if (spp) UriParser.validateSpp(spp);

    var result = [];
    if (vendor) result.push(vendor + "-");
    result.push(app);
    if (subApp) result.push("-" + subApp);
    if (spp) result.push("-" + spp);
    return result.join("");
  },

  parseWorkspace(value) {
    if (typeof value != "string") throw new InvalidUriPartError("workspace", value, WORKSPACE);
    var result = value.match(new RegExp("^" + WORKSPACE + "$"));
    if (!result) throw new InvalidUriPartError("workspace", value, WORKSPACE);
    return {tid: result[2], awid: result[3]};
  },
  formatWorkspace(tid, awid) {
    if (!tid && !awid) return null;
    if (tid) UriParser.validateTid(tid);
    UriParser.validateAwid(awid);

    var result = [];
    if (tid) result.push(tid + "-");
    result.push(awid);
    return result.join("");
  },

  validateScheme(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + SCHEME + "$"))) throw new InvalidUriPartError("scheme", value, SCHEME);
  },
  validateHostname(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + HOSTNAME + "$"))) throw new InvalidUriPartError("hostname", value, HOSTNAME);
  },
  validatePort(value) {
    value = (typeof value == "number" ? value + "" : value);
    if (typeof value != "string" || !value.match(new RegExp("^" + PORT + "$"))) throw new InvalidUriPartError("port", value, PORT);
  },
  validateGateway(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + GATEWAY + "$"))) throw new InvalidUriPartError("gateway", value, GATEWAY);
  },
  validateVendor(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + VENDOR + "$"))) throw new InvalidUriPartError("vendor", value, VENDOR);
  },
  validateApp(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + APP + "$"))) throw new InvalidUriPartError("app", value, APP);
  },
  validateSubApp(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + SUB_APP + "$"))) throw new InvalidUriPartError("subApp", value, SUB_APP);
  },
  validateSpp(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + SPP + "$"))) throw new InvalidUriPartError("spp", value, SPP);
  },
  validateProduct(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + PRODUCT + "$"))) throw new InvalidUriPartError("product", value, PRODUCT);
  },
  validateTid(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + TID + "$"))) throw new InvalidUriPartError("tid", value, TID);
  },
  validateAwid(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + AWID + "$"))) throw new InvalidUriPartError("awid", value, AWID);
  },
  validateWorkspace(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + WORKSPACE + "$"))) throw new InvalidUriPartError("workspace", value, WORKSPACE);
  },
  validateUseCase(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + USE_CASE + "$"))) throw new InvalidUriPartError("useCase", value, USE_CASE);
  },
  validateParameterName(value) {
    if (typeof value != "string" || !value.match(new RegExp("^" + PARAMETER_NAME + "$"))) throw new InvalidUriPartError("parameterName", value, PARAMETER_NAME);
  },
  validateParameterValue(value) {
    if (value != null && typeof value != "string") throw new InvalidUriPartError("parameterValue", value, String);
    // for our generic uuUri following check is always true; will skip for optimization
//      if (value != null && !encodeURIComponent(value).match(new RegExp("^" + PARAMETER_VALUE + "$"))) throw new InvalidUriPartError("parameterValue", value, PARAMETER_VALUE);
  }
};

function InvalidUriPartError(partName, value, expected) {
  var message;
  if (typeof expected != "string") message = `Value "${value}" of URI part [${partName}] must be ${expected} but is typeof ${typeof value}`;
  else message = `Value "${value}" of URI part [${partName}] does not match regular expression /${expected.replace(/\//g, "\\/")}/`;
  Err.call(this, message);
}
InvalidUriPartError.prototype = Object.create(Err.prototype);
InvalidUriPartError.prototype.constructor = InvalidUriPartError;

module.exports = UriParser;
