export = UuP;
declare namespace UuP {
    namespace Context {
        interface Provider$data {
        }
        interface Provider$Props {
            data?: Provider$data;
        }
        function Provider(props: Provider$Props): any;
        const Consumer: any;
    }
    namespace Bricks {
        interface RouteSection$desc {
        }
        interface RouteSection$Props {
            header?: any;
            desc?: RouteSection$desc | string;
            descHidden?: boolean;
            content?: any;
            actionList?: any[];
        }
        function RouteSection(props: RouteSection$Props): any;
        interface RouteContent$desc {
        }
        interface RouteContent$Props {
            header?: any;
            desc?: RouteContent$desc | string;
            descHidden?: boolean;
            content?: any;
            actionList?: any[];
            maxWidth?: string;
            margin?: string;
        }
        function RouteContent(props: RouteContent$Props): any;
        interface ComponentCard$desc {
        }
        interface ComponentCard$Props {
            descHidden?: boolean;
            desc?: ComponentCard$desc | string;
            content?: any;
            header?: any;
        }
        function ComponentCard(props: ComponentCard$Props): any;
        interface FormContent$desc {
        }
        interface FormContent$Props {
            desc?: FormContent$desc | string;
        }
        function FormContent(props: FormContent$Props): any;
        interface State$color {
        }
        interface State$Props {
            icon?: any;
            size?: number;
            type?: "circle" | "button" | "basic";
            stateName?: any;
            stateType?: string;
            hideIcon?: boolean;
            circle?: boolean;
            style?: any;
            color?: State$color;
        }
        function State(props: State$Props): any;
        interface InfoIcon$desc {
        }
        interface InfoIcon$Props {
            desc?: InfoIcon$desc | string;
            header?: any;
            descHidden?: boolean;
            padding?: string;
            ignoreParentPadding?: boolean;
        }
        function InfoIcon(props: InfoIcon$Props): any;
        interface ContextBar$header {
        }
        interface ContextBar$desc {
        }
        interface ContextBar$Props {
            header?: ContextBar$header | string;
            navigation?: any[];
            desc?: ContextBar$desc | string;
            additionalInfo?: any[];
            actionList?: any[];
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string | number;
            colorSchema?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            defaultView?: "showDesc" | "hideDesc";
            copyTagFunc?(...args: any): any;
            padding?: boolean;
            enableHidingNavigation?: boolean;
        }
        function ContextBar(props: ContextBar$Props): any;
        interface ComponentWrapper$header {
        }
        interface ComponentWrapper$help {
        }
        interface ComponentWrapper$contextBarProps$header {
        }
        interface ComponentWrapper$contextBarProps$desc {
        }
        interface ComponentWrapper$contextBarProps {
            header?: ComponentWrapper$contextBarProps$header | string;
            navigation?: any[];
            desc?: ComponentWrapper$contextBarProps$desc | string;
            additionalInfo?: any[];
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string | number;
            colorSchema?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            defaultView?: "showDesc" | "hideDesc";
        }
        interface ComponentWrapper$Props {
            header?: ComponentWrapper$header | string;
            help?: ComponentWrapper$help | string;
            headerContent?: any;
            content?: any;
            footer?: any;
            actionList?: any[];
            copyTagFunc?(...args: any): any;
            cardView?: boolean;
            paddingContent?: string;
            padding?: string;
            contextBarProps?: ComponentWrapper$contextBarProps;
            maxHeightContent?: string | number;
            helpHidden?: boolean;
        }
        function ComponentWrapper(props: ComponentWrapper$Props): any;
        interface PriorityBadge$content {
        }
        interface PriorityBadge$Props {
            priority: "mustHave" | "shouldHave" | "couldHave" | "wontHave" | "problem" | "objective";
            content?: PriorityBadge$content | string;
        }
        function PriorityBadge(props: PriorityBadge$Props): any;
        interface BasicInfo$Props {
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: number | string;
        }
        function BasicInfo(props: BasicInfo$Props): any;
        interface BasicInfoSection$Props {
            actionList?: any[];
            rows?: any[];
            showSeparator?: boolean;
        }
        function BasicInfoSection(props: BasicInfoSection$Props): any;
        interface SeverityBadge$content {
        }
        interface SeverityBadge$Props {
            severity: "critical" | "medium" | "low" | "notSet";
            content?: SeverityBadge$content | string;
        }
        function SeverityBadge(props: SeverityBadge$Props): any;
        const Severity: {
            critical: {
                color: {
                    bgColor: "#F44336";
                    fontColor: "#FFFFFF";
                };
                lsi: {
                    en: "Critical";
                    cs: "Kritická";
                };
            };
            medium: {
                color: {
                    bgColor: "#FDD835";
                    fontColor: "#000000";
                };
                lsi: {
                    en: "Medium";
                    cs: "Střední";
                };
            };
            low: {
                color: {
                    bgColor: "#9CCC65";
                    fontColor: "#000000";
                };
                lsi: {
                    en: "Low";
                    cs: "Malá";
                };
            };
            notSet: {
                color: {
                    bgColor: "#E0E0E0";
                    fontColor: "#000000";
                };
                lsi: {
                    en: "Not set";
                    cs: "Nezadáno";
                };
            };
        };
    }
    namespace Forms {
        const FormConsumer: any;
        function FormProvider(props: any): any;
        interface Header$Props {
            content?: any;
            info?: any;
            icon?: string;
        }
        function Header(props: Header$Props): any;
        interface Info$Props {
            content?: any;
            icon?: string;
        }
        function Info(props: Info$Props): any;
        interface Controls$0 {
            align?: any;
            className?: any;
        }
        function Controls(props: Controls$0): any;
        namespace Controls {
            const tagName: any;
        }
        interface Form$0 {
            className?: any;
        }
        function Form(props: Form$0): any;
        namespace Form {
            const tagName: any;
        }
        function PortalModal(props: any): any;
        interface Modal$0 {
            className?: any;
        }
        function Modal(props: Modal$0): any;
        namespace Modal {
            const tagName: any;
        }
        interface Section$0 {
            className?: any;
        }
        function Section(props: Section$0): any;
        namespace Section {
            const tagName: any;
        }
    }
    namespace Tiles {
        interface ActionTile$content {
        }
        interface ActionTile$Props {
            header?: any;
            content?: ActionTile$content | string;
            footer?: any;
            actionList?: any[];
            maxWidth?: string;
            maxHeight?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: number | string;
            colorSchema?: string;
            elevation?: number | string;
            elevationHover?: number | string;
            handleMeasure?(...args: any): any;
            selected?: boolean;
            selectable?: boolean;
            onSelect?(...args: any): any;
            columnStyle?: boolean;
            level?: number;
            dropDownPopoverLocation?: "local" | "portal";
        }
        function ActionTile(props: ActionTile$Props): any;
    }
}