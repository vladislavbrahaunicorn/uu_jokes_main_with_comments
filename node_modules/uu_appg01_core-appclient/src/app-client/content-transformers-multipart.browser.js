"use strict";

const { BaseError } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const dotNotate = require("./dot-notate.js");

let logger;

const MultiPart = {
  serialize: function(value) {
    if (!value) return value;
    if (typeof value !== "object") {
      this._getLogger().warn("Unrecognized value when serializing as multipart/form-data - passing as-is. Value:", {
        value: value
      });
      return value;
    }
    if (value instanceof FormData && typeof value.entries !== "function") return value; // FormData without support for iterating over its entries
    if (value instanceof Blob) value = { file: value };

    // make a list and reorder values so that the file instances are at the end of the list
    let data = {};
    if (value instanceof FormData) {
      for (const pair of value.entries()) data[pair[0]] = pair[1];
    } else {
      data = value;
    }
    let list = [];
    let hasBinary;
    for (const k in data) {
      let item = data[k];
      if (item instanceof Blob) {
        if (hasBinary) {
          this._getLogger().warn(
            "Too many binary fields. Only single binary field per multipart request is supported."
          );
        }
        hasBinary = true;
      } else if (typeof item === "object") {
        try {
          list = list.concat(dotNotate(item, k));
          continue;
        } catch (e) {
          throw new BaseError(
            `Serialization of key: ${k} into FormData failed.` + `Try serializing the nested object beforehand.`,
            e
          );
        }
      }
      list.push({ key: k, value: item });
    }

    const max = list.length;
    let idx = 0;
    list.sort((a, b) => {
      // stable sort
      const result = (a.value instanceof Blob ? idx + max : idx) - (b.value instanceof Blob ? idx + max : idx);
      idx++;
      return result;
    });

    // fill values into FormData
    let formData = new FormData();
    list.forEach(it => {
      if (it.value instanceof Blob) {
        formData.append(it.key, it.value, it.value.name || `${Date.now()}.bin`);
      } else {
        formData.append(it.key, it.value);
      }
    });
    return formData;
  },
  deserialize: function(value) {
    throw new BaseError("Deserializing multipart/form-data is not supported. Value: " + value);
  },
  _getLogger: function() {
    if (!logger) {
      logger = LoggerFactory.get("UuApp.AppClient.Client");
    }
    return logger;
  }
};

module.exports = MultiPart;
