"use strict";

const { LoggerFactory } = require("uu_appg01_core-logging");
const MultiPart = require("./content-transformers-multipart.js");
const dotNotate = require("./dot-notate.js");

let logger;

class ContentTransformers {
  /**
   * Transformers which serialize / deserialize content that is sent to / received from
   * server using specific MIME type.
   */
  static get contentTransformers() {
    return Object.freeze({
      "application/json": ContentTransformers.Json,
      // "application/json+extended": Json,
      //"application/x-msgpack": MessagePack,
      //"application/msgpack": MessagePack,
      "application/x-www-form-urlencoded": ContentTransformers.Form,
      "multipart/form-data": ContentTransformers.MultiPart
    });
  }

  static get Json() {
    return {
      serialize: function(value) {
        return JSON.stringify(value);
      },
      deserialize: function(value) {
        return value ? JSON.parse(value) : null;
      }
    };
  }
  static get Form() {
    return {
      serialize: function(value) {
        if (value == null) return value;
        if (typeof value !== "object") {
          ContentTransformers._getLogger().warn(
            "Unrecognized value when serializing as application/x-www-form-urlencoded - passing as-is. Value:",
            { value: value }
          );
          return value;
        }

        let result = dotNotate(value);
        return result
          .map(({ key, value }) => (value == null ? "" : `${encodeURIComponent(key)}=${encodeURIComponent(value)}`))
          .join("&");
      },
      deserialize: function(value) {
        if (value == null) return value;
        if (typeof value !== "string") {
          ContentTransformers._getLogger.warn(
            "Unrecognized value when deserializing as application/x-www-form-urlencoded - passing as-is. Value:",
            { value: value }
          );
          return value;
        }
        let pairs = value.replace(/\+/g, " ").split("&");
        let result = {};
        for (let i = 0; i < pairs.length; ++i) {
          let pair = pairs[i];
          pair.replace(/^([^=]*)=?(.*)$/, (m, g1, g2) => {
            let dg1 = decodeURIComponent(g1);
            let dg2 = decodeURIComponent(g2);
            if (result.hasOwnProperty(dg1)) {
              if (!Array.isArray(result[dg1])) {
                result[dg1] = [result[dg1]];
              }
              result[dg1].push(dg2);
            } else {
              result[dg1] = dg2;
            }
          });
        }
        return result;
      }
    };
  }

  static get MultiPart() {
    return MultiPart;
  }

  static _getLogger() {
    if (!logger) {
      logger = LoggerFactory.get("UuApp.AppClient.Client");
    }
    return logger;
  }

  static _stringify(key, value, result, topLevel) {
    if (Array.isArray(value)) {
      value.forEach((item, i) => ContentTransformers._stringify(`${key}[${i}]`, item, result, false));
    } else if (value && typeof value === "object") {
      for (const k in value)
        ContentTransformers._stringify(`${key}${topLevel ? "" : "."}${k}`, value[k], result, false);
    } else {
      result.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
    }
  }
}

module.exports = ContentTransformers;
