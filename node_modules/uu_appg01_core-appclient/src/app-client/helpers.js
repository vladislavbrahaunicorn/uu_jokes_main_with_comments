"use strict";

const makeResponse = require("./helpers-make-response.js");

class Helpers {
  static keysToLowerCase(map) {
    if (!map || typeof map !== "object") return null;
    let result = {};
    for (let k in map) result[k.toLowerCase()] = map[k];
    return result;
  }

  static interceptorMakeResponse(response, request, extraArgs) {
    let rawResponse = makeResponse(response, request, extraArgs);
    if (typeof window == "undefined") {
      // Allow "flat" access to attributes of dtoOut. See test "response-wrapper.test.js" for details.
      // Downside is that it is not possible to flatly access dtoOut attributes in case they are named
      // "status" or "headers".
      // TODO This is only temporary solution for backward compatibility. In can be dropped once proxy
      // is supported by all browsers (so that new API can be used on backend and frontend for some
      // time before old response object is removed).
      return new Proxy(rawResponse, {
        get(target, prop) {
          let result;
          if (prop === "unwrap") {
            result = () => ({ status: target.status, headers: target.headers, body: target.data });
          } else if (prop === "status" || prop === "headers") {
            // TODO Do not print deprecation warning until same API is available on frontend
            // console.warn(`Using deprecated property ${prop} on AppClient result. Use unwrap() to access raw response data.`);
            result = target[prop];
          } else if (prop === "data") {
            let body = target.data;
            if (typeof body == "undefined" || body === null) {
              result = body;
            } else if (body.hasOwnProperty("data")) {
              result = new Proxy(body, {
                get(target, prop) {
                  let bodyData = target.data;
                  if (prop == "toJSON") {
                    return () => target;
                  } else if (typeof bodyData == "undefined" || bodyData === null) {
                    return target[prop];
                  } else {
                    let result = bodyData[prop];
                    if (typeof result === "undefined") {
                      return target[prop];
                    }
                    if (typeof result === "function") {
                      result = result.bind(bodyData);
                    }
                    return result;
                  }
                }
              });
            } else {
              // TODO Do not print deprecation warning until same API is available on frontend
              // console.warn(`Using deprecated property ${prop} on AppClient result. Use unwrap() to access raw response data.`);
              result = body;
            }
          } else if (prop == "toJSON") {
            result = () => target.data;
          } else {
            let body = target.data;
            if (typeof body != "undefined" && body != null && typeof body[prop] != "undefined") {
              result = body[prop];
              if (typeof result === "function") {
                result = result.bind(body);
              }
            } else {
              result = target[prop];
            }
          }
          return result;
        },
        ownKeys(target) {
          let body = target.data;
          if (typeof body == "undefined" || body === null) {
            return null;
          } else {
            return Object.keys(body);
          }
        },
        getOwnPropertyDescriptor(target, prop) {
          let body = target.data;
          if (typeof body == "undefined" || body === null) {
            return null;
          } else {
            let descriptor = Object.getOwnPropertyDescriptor(body, prop);
            if (descriptor) {
              descriptor.configurable = true;
            }
            return descriptor;
          }
        },
        has(target, key) {
          let body = target.data;
          if (typeof body == "undefined" || body === null) {
            return false;
          } else {
            return key in body;
          }
        }
      });
    } else {
      // TODO Proxy is not supported by IE
      return rawResponse;
    }
  }
}

module.exports = Helpers;
