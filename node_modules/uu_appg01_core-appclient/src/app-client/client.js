"use strict";

const { BaseError } = require("uu_appg01_core-utils");
const Helpers = require("./helpers.js");
const HttpClient = require("./http-client.js");

const PerflogHandler = require("../intcp/perflog-handler.js");
const RemoteErrorHandler = require("../intcp/remote-error-handler.js");
const TransformParametersHandler = require("../intcp/transform-parameters-handler.js");
const UriHandler = require("../intcp/uri-handler.js");

const DEFAULT_INTERCEPTORS = [PerflogHandler, UriHandler, RemoteErrorHandler, TransformParametersHandler];

/**
 * Creates an instance of command client which will use specified configuration when invoking commands.
 * Unspecified values are taken from global defaults ({@link UuApp.AppClient.Client.defaults Client.defaults}). Most
 * values can be further overridden when invoking the remote call - see {@link UuApp.AppClient.Client#post Client#post}.
 *
 * **Interceptors**
 *
 * It's possible to provide a list of interceptors which pre-/post-process HTTP requests. An interceptor
 * is a JavaScript function {Promise<Response>} interceptorFn({Object} request, {Object} options, {Function} nextInterceptorFn).
 * Request object contains fields uri, method, body and options object contains any remaining options passed down to
 * interceptors, e.g. transformParameters). Example:
 *
 *     function MyInterceptor(request, options, nextInterceptorFn) {
 *       // pre-process in any way
 *       request.headers["x-extra-header-computed-value"] = Math.random() + "";
 *       console.log("Launching Ajax request. Method:", request.method, "Uri:", request.uri, "Parameters:", request.body, "Other options:", options);
 *       let start = new Date().getTime();
 *       return nextInterceptorFn(request, options).then(function (response) {
 *         // post-process in any way, e.g. add extra field to the response object
 *         response.timeTaken = new Date().getTime() - start;
 *         return response;
 *       }, function error(response) {
 *         // ...
 *         return Promise.reject(response); // keep it rejected (i.e. in error state)
 *       });
 *     }
 *
 *     // usage of the interceptor
 *     let client = new UuApp.AppClient.Client({
 *       interceptors: [MyInterceptor].concat(UuApp.AppClient.Client.defaults.interceptors)
 *     });
 *
 * @class UuApp.AppClient.Client
 * @classdesc
 * The Client allows communication with remote uuOS9 endpoints which conform to uuUri format.
 * Besides communication, the client solves also other points of interest, such as authentication or
 * performance logging.
 *
 * Client uses standardized {@link https://developer.mozilla.org/cs/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise API}
 * to provide access to the result of the call.
 *
 *     UuApp.AppClient.Client.get("/cds-gb/UU-BT/guestbook/123/getAttributes").then(function (response) {
 *       console.log(response.data, response.status, response.headers());
 *     }, function (response) { // error
 *       console.log(response.error, response.status, response.headers());
 *     });
 *
 * When used as above, client uses global defaults (timeout, headers, ...). If the call needs to be parametrized, it can
 * be parametrized directly in {@link UuApp.AppClient.Client#post Client#post} ({@link UuApp.AppClient.Client#get Client#get})
 * call or, alternatively, a client instance can be created with defaults that override the global ones.
 *
 * For pre-/post-processing of HTTP requests use custom interceptors (see constructor).
 *
 * **Configuration**
 *
 * Some options are automatically configured from the environment during
 * {@link UuApp.Util.Config.init Config.init} call. These can be overridden when instantiating
 * the client or in method invocations. Supported environment options:
 *
 *     {
 *       "gatewayUri": "https://uuappg01.plus4u.net", // default gateway for command calls using uuUri that doesn't contain gateway
 *       "vendor-app-subapp-spp.gatewayUri": "https://elsewhere.plus4u.net"
 *     }
 *
 * @param {Object} options Default options for this instance of the command client.
 * @param {number} options.requestTimeout The default HTTP timeout for this instance of the command client, in seconds.
 * @param {Object} options.headers The default HTTP headers for command invocations using this instance of the command client.
 * @param {Object[]} options.interceptors List of interceptors to use. Interceptors can arbitrarily pre-/post-process
 *   HTTP requests.
 * @param {*} options.* Any other parameters are passed to the interceptors. These can include environmental options such
 *   as "gatewayUri" which then take precedence over those from global environment.
 *
 * @example
 *    let client = new UuApp.AppClient.Client({
 *      requestTimeout: 20,
 *      headers: {
 *        "x-my-extra-header": "abcd"
 *      },
 *      interceptors: [MyInterceptor].concat(UuApp.AppClient.Client.defaults.interceptors)
 *    });
 *
 *    // ... all calls using "client.get(...)" or "client.post()" will have timeout 20s (unless the timeout
 *    // is overridden in the invoke call directly) and will have an extra HTTP header.
 */
class Client {
  /**
   * Equivalent to {@link UuApp.AppClient.Client#get} using Client with default
   * configuration, i.e.:
   *
   *     new UuApp.AppClient.Client().get(uri, options)
   *
   * @see {@link UuApp.AppClient.Client#get Client#get}
   * @method UuApp.AppClient.Client.get
   */
  static async get(uri, dtoIn = null, options = null) {
    return new Client().get(uri, dtoIn, options);
  }

  /**
   * Equivalent to {@link UuApp.AppClient.Client#post} using Client with default
   * configuration, i.e.:
   *
   *     new UuApp.AppClient.Client().post(uri, dtoIn, options)
   *
   * @see {@link UuApp.AppClient.Client#post Client#post}
   * @method UuApp.AppClient.Client.post
   */
  static async post(uri, dtoIn = null, options = null) {
    return new Client().post(uri, dtoIn, options);
  }

  constructor(options) {
    this._options = options || {};
    this._options.headers = Helpers.keysToLowerCase(this._options.headers);
    this._aborted = false;
  }

  /**
   * Invokes remote call using HTTP GET request. See {@link UuApp.AppClient.Client#post Client#post}
   * for detailed options and behaviour.
   *
   * Keep in mind that the "dtoIn" parameter is sent via URL parameter(s)
   * and browsers impose limit to the maximal length of the URL. To be safe, limit the amount of data so that the URL
   * doesn't exceed 2048 bytes.
   *
   * @param {(string|UuApp.Uri.Uri)} uri Uri of the uuOS9 endpoint.
   * @param {*} dtoIn The parameters to send in the request URL.
   * @param {Object} options Optional options for the remote call.
   * @return Promise resolving to a response object (or rejecting to a response object with error field).
   * @method UuApp.AppClient.Client#get
   * @see {@link UuApp.AppClient.Client#post Client#post}
   *
   * @example
   *    // simple call
   *    let baseUri = Uri.parse(location.protocol + "//" + location.host + location.pathname).baseUri; // "http://example.com/vendor-app/tid-awid"
   *    Client.get(baseUri.join("+/getAttributes"), { param1: "v1" }).then(function success(response) {
   *      let data = response.data; // contains parsed response entity
   *      console.log(response.status, response.headers(), response.data);
   *    }, function error(response) {
   *      let error = response.error; // contains parsed response error
   *      console.log(response.status, response.headers(), response.error);
   *    });
   *
   * @example
   *    // parameterizing uuUri and the call
   *    let uri = new UuApp.Uri.UriBuilder("/cds-gb-main/0-0/getAttributes", {
   *      workspace: "15634-34e5684da3435",
   *      useCase: "getConfig",
   *      parameters: { p1: "v1" }
   *    }).toUri();
   *    client.get(uri, null, {
   *      requestTimeout: 5,
   *      headers: {
   *        "x-my-header": "abc"
   *      }
   *    }).then(console.log.bind(console), console.log.bind(console));
   *
   * @example
   *    // accept any response and don't parse it
   *    let workspace = "...";
   *    let guestbookId = "...";
   *    client.get(`/cds-gb/${workspace}/guestbook/${guestbookId}/downloadData`, null, {
   *      transformResponse: false,
   *      headers: {
   *        "accept": "*\/*"
   *      }
   *    }).then(console.log.bind(console), console.log.bind(console));
   */
  async get(uri, dtoIn, options) {
    return this._invoke("get", uri, dtoIn, options);
  }

  /**
   * Invokes remote call using HTTP POST request. Default values for settings will
   * be filled in from Client instance configuration and then from global defaults.
   *
   * The client serializes data to and from server using {@link UuApp.AppClient.Client.contentTransformers} according
   * to the specified "content-type" HTTP request/response header.
   * Default value for "content-type" request header for requests with body entity is "application/json; charset=utf-8",
   * except for case when sending {@link https://developer.mozilla.org/en-US/docs/Web/API/FormData FormData} object or
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} (or
   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Blob Blob}) object for which the default value is
   * "multipart/form-data". Default accepted response ("accept" request header) is "application/json".
   * Note that default accepted response can be extended in the future to support formats such as MessagePack and others.
   *
   * **Return value**
   *
   * Return value is a {@link https://developer.mozilla.org/cs/docs/Web/JavaScript/Reference/Global_Objects/Promise Promise}
   * resolving / rejecting to a response object which contains following fields:
   *
   * * {Object} data - response data. Data is parsed with content handler according to "content-type" response header
   *     unless option transformResponse is false (in which case it's left as received from browser).
   * * {Error} error - the error instance (see Error handling below). This field is set if and only if the Promise is rejected.
   * * {number} status - the HTTP status code.
   * * {function(string)} headers - function which returns value of the specified (case-insenstive) response header.
   *   If called with no arguments, an array with all response headers is returned.
   * * {Object} config - final configuration options that were used for launching AJAX request.
   *
   * The returned Promise instance additionally contains method {function()} abort for aborting ongoing remote call.
   *
   * **File upload**
   *
   * Use "content-type" header with "multipart/form-data" value when uploading binary data (File, Blob). Alternatively, it's
   * possible to use standard {@link https://developer.mozilla.org/en-US/docs/Web/API/FormData FormData} object - see examples
   * below. Note that when using FormData object, the order of appending the form fields matters - append simple values first
   * and only in the end append file objects. The reason is that in this order, the server might decide not to allow the upload
   * based on the other already-available fields thus allowing to end the connection without full upload of the file(s).
   * _(Client will fix the order of values in FormData object, however not all browsers support this operation.)_
   *
   * Don't forget to **disable timeout when performing the upload** so that it doesn't get cancelled.
   *
   * **Error handling**
   *
   * If an error happens during the call invocation (determined by HTTP response status code), the resulting Promise is
   * rejected with response object which will contain "error" field set to an instance of one of these error types
   * (when using default interceptors):
   *
   *   * null - if server sent response with error HTTP status code but it contained no recognizable error data.
   *   * {@link UuApp.Error.RemoteError} - error as sent from remote server. Note that the response can contain
   *     several errors - in such case only first error is extracted into "error" field.
   *   * {@link UuApp.Error.NetworkError} - in case of problems with connecting to remote server.
   *   * {@link UuApp.Error.TimeoutError} - when the request didn't end within specified timeout.
   *   * {@link UuApp.Error.AbortError} - when invocation is aborted by invoking promise.abort() method.
   *
   * The resulting response object contains also HTTP status code and will contain "data"
   * field set to the response entity (usually containing parsed error list).
   *
   * **Timeout**
   *
   * The timeout applies to the remote call duration only. If an interceptor is used which performs lengthy or asynchronous
   * operation prior to executing the remote call, it's not counted towards the timeout.
   *
   * @param {(string|UuApp.Uri.Uri)} uri Uri of the uuOS9 endpoint.
   * @param {(FormData|*)} dtoIn The DTO to send in the request body.
   * @param {Object} options Optional options for the remote call.
   * @param {number} options.requestTimeout The timeout for the command invocation. Default is 300.
   * @param {Object} options.headers The HTTP headers to send. Header names are case-insensitive, but it's advised
   *   to use lowercased names to prevent duplicities within the map. Headers are merged with default headers from
   *   Client / global configuration. If a header is in defaults and it's required to prevent it from being
   *   sent during this invocation, specify the header and use null as its value.
   * @param {boolean} options.transformParameters If false, processing of the command parameters (DTO) will be skipped so they'll be
   *   sent exactly as-is (the browser must support sending the value as-is in XmlHttpRequest). Default value is true.
   * @param {boolean} options.transformResponse If false, processing of the response (such as parsing the response as JSON) will be skipped. Default is true.
   * @param {*} options.* Any other parameters are passed to the interceptors. These can include environmental options such
   *   as "gatewayUri" which then take precedence over those from global environment.
   * @return Promise resolving to a response object (or rejecting to a response object with error field).
   * @method UuApp.AppClient.Client#post
   *
   * @example
   *    // command call sending data
   *    let tenant = "UU-BT";
   *    let guestbookId = "123";
   *    client.post(`/cds-gb/${tenant}/guestbook/${guestbookId}/setAttributes`, {
   *      name: "Modified guestbook",
   *      invitesLimit: 10,
   *      public: true
   *    }).then(console.log.bind(console), console.log.bind(console));
   *
   * @example
   *     // uploading file(s) - let iant 1 (explicit Content-Type header)
   *     let file = inputElement.files[0];
   *     let params = {
   *       file: file,
   *       anotherValue: "abc"
   *     }
   *     client.post("/cds-gb/UU-BT/guestbook/123/uploadData", params, {
   *       requestTimeout: 0,
   *       headers: {
   *         "content-type": "multipart/form-data"
   *       }
   *     });
   *
   *     // uploading file(s) - let iant 2 (usage of FormData)
   *     // !!! append files as the last values
   *     let formData = new FormData();
   *     formData.append("anotherValue", "abc");
   *     formData.append("file", file);
   *     let promise = client.post("/cds-gb/UU-BT/guestbook/123/uploadData", formData, {
   *       requestTimeout: 0
   *     });
   *     promise.then(...); // process response / error
   *
   *     // aborting ongoing call
   *     elementForUploadCancel.onclick = function (e) {
   *       promise.abort(); // promise will be rejected with UuApp.Error.AbortError instance
   *     };
   *
   * @example
   *    // error distinguishing
   *    client.get("/cds-gb/UU-BT/guestbook/123/getAttributes").then(function success(response) {
   *      console.log(response.status, response.headers(), response.data);
   *    }, function error(response) {
   *      console.log(response.status, response.headers(), response.data);
   *      let error = response.error;
   *      if (error instanceof UuApp.Error.TimeoutError) console.log("Timed out.");
   *      else if (error instanceof UuApp.Error.AbortError) console.log("Aborted.");
   *      else if (error instanceof UuApp.Error.NetworkError) console.log("Communication / network error.");
   *      else if (response.status == 401) console.log("Not authenticated.");
   *      else if (response.status < 500) {
   *        console.log("User or client problem - invalid data / unfulfilled business rules / invalid call / ...", response.data);
   *      } else if (response.status >= 500) console.log("Server-side problem.", response.data);
   *      else console.log("Unrecognized problem.", error);
   *    });
   *
   * @example
   *    // send data in custom format
   *    client.post("/cds-gb/UU-BT/guestbook/123/setSomething", convertToMySuperFormat(dto), {
   *      transformParameters: false,
   *      headers: {
   *        "content-type": "text/x-my-super-format"
   *      }
   *    }).then(console.log.bind(console), console.log.bind(console));
   */
  async post(uri, dtoIn, options) {
    return this._invoke("post", uri, dtoIn, options);
  }

  async _invoke(method, uri, dtoIn, options) {
    // prepare request
    let request = {
      method: (method || "post").toLowerCase(),
      uri: uri,
      body: dtoIn,
      headers: { ...this._options.headers, ...Helpers.keysToLowerCase((options || {}).headers) }
    };

    // build invocation chain
    let invocationChain = (
      (options || {}).interceptors ||
      (this._options || {}).interceptors ||
      this.constructor.getDefaultInterceptors() ||
      []
    ).reduceRight((result, interceptorClass) => {
      return new interceptorClass(result, this._options);
    }, new HttpClient(this._options));

    // invoke request
    return invocationChain.invoke(request, options);
  }

  static getDefaultInterceptors() {
    return DEFAULT_INTERCEPTORS;
  }
}

module.exports = Client;
