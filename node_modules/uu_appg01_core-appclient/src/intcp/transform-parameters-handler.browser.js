"use strict";

const ContentTransformers = require("../app-client/content-transformers.js");
const { Config, OptsReader, BaseError } = require("uu_appg01_core-utils");

/**
 * Interceptor for transforming request parameters / response entity according to the Content Type.
 * Recognized options:
 *
 * - transformParameters {boolean} - whether to transform (serialize by Content-Type) request body
 * - transformResponse {boolean} - whether to transform (deserialize by Content-Type) response body
 * - wrapQuery {boolean} - whether to wrap request body with { dto: ... }
 */
class TransformParametersHandler {
  constructor(next, options = null) {
    this._next = next;
    this._options = options;
  }

  async invoke(request, options = null) {
    let opts = new OptsReader(options, this._options, Config);

    // add default Content-Type & Accept headers
    let paramsInBody = request.method.match(/^(put|post)$/i);
    let contentTransformers = ContentTransformers.contentTransformers || {};
    let contentType = paramsInBody ? request.headers["content-type"] : null;
    if (!("content-type" in request.headers)) {
      if (paramsInBody) {
        let isMultipartPreferred =
          request.body != null &&
          (request.body instanceof FormData ||
            request.body instanceof Blob ||
            (typeof request.body == "object" &&
              Object.keys(request.body).some(it => request.body[it] instanceof Blob)));
        contentType = isMultipartPreferred ? "multipart/form-data" : "application/json; charset=utf-8";
        request.headers["content-type"] = contentType;
      } else {
        contentType = "application/x-www-form-urlencoded";
      }
    }
    if (!("accept" in request.headers)) request.headers["accept"] = "application/json";

    // wrap request data into "dto" parameter if requested to do so
    if (
      opts.getBoolean("transformParameters") !== false &&
      !paramsInBody &&
      request.body != null &&
      opts.getBoolean("wrapQuery") &&
      contentType === "application/x-www-form-urlencoded"
    ) {
      request.body = {
        dto: JSON.stringify(request.body)
      };
    }

    // transform request data
    if (opts.getBoolean("transformParameters") !== false && request.body != null) {
      let contentHandler = contentTransformers[this._getMimeMainType(contentType)];
      try {
        if (contentHandler) request.body = contentHandler.serialize(request.body);
      } catch (e) {
        throw new BaseError("Error while serializing data.", e);
      }
    }

    let response = await this._next.invoke(request, options);

    let respContentDisposition = response.headers("content-disposition");
    if (opts.getBoolean("transformResponse") !== false && !respContentDisposition) {
      let respContentType = response.headers("content-type");
      let contentHandler = contentTransformers[this._getMimeMainType(respContentType)];
      try {
        if (response.status === 204) response.data = null;
        else if (contentHandler) response.data = contentHandler.deserialize(response.data);
      } catch (e) {
        throw new BaseError("Error while deserializing response data.", e);
      }
    }
    return response;
  }

  _getMimeMainType(mimeType) {
    return (mimeType || "").replace(/[+;].*/, "").trim();
  }
}

module.exports = TransformParametersHandler;
