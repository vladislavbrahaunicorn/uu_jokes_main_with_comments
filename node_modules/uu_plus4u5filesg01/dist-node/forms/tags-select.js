"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TagsSelect = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-forms");

var _config = _interopRequireDefault(require("../config/config.js"));

var _css = _interopRequireDefault(require("../helpers/css.js"));

var _autocompleteItems = _interopRequireDefault(require("./autocomplete-items.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

//@@viewOff:imports
var TagsSelect = _uu5g.default.Common.VisualComponent.create({
  displayName: _config.default.TAG + "TagsSelect",
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ElementaryMixin, _uu5g.default.Forms.TextInputMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "TagsSelect",
    classNames: {
      main: function main() {
        return _config.default.CSS + "TagsSelect " + _css.default.css("align-items: baseline; .uu5-bricks-button.uu5-forms-input-button { width: auto; padding: 0 16px; }");
      },
      tag: function tag() {
        return _css.default.css("\n          && {\n            margin-right: 4px;\n            background-color: rgba(0, 0, 0, 0.1);\n            color: rgba(0, 0, 0, .87);\n\n            .uu5-bricks-icon {\n              font-size: inherit;\n              position: static;\n              padding: 0;\n            }\n          }\n        ");
      },
      textButton: function textButton(props, state) {
        return _css.default.css("\n          input:-ms-input-placeholder { color: #bdbdbd; }\n          ".concat(props.tagListPosition === "top" ? "&&& { margin-bottom: 0px; }" : "margin-bottom: 8px;", "\n          ").concat(state.value && state.value.length ? "&&& { margin-top: 8px; }" : "", "\n        "));
      }
    },
    lsi: {
      addButtonLabel: {
        cs: "Přidat",
        en: "Add"
      },
      tagIsAlreadyAdded: {
        cs: 'Tag "$1" je již přidaný.',
        en: 'The tag "$1" is already added.'
      },
      customTagIsNotAllowed: {
        cs: "Není povolené přidávat vlastní tagy.",
        en: "It is not allowed to create custom tags."
      },
      tagIsNotAllowed: {
        cs: 'Tag "$1" není povolený.',
        en: 'The tag "$1" is not allowed.'
      },
      placeholder: {
        cs: "Název tagu",
        en: "Tag Name"
      },
      noTagInfoText: {
        cs: "Vložte tag pomocí vstupního pole níže",
        en: "Insert a tag via input field lower"
      }
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    availableTags: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    ignoreTags: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    allowCustomTgas: _uu5g.default.PropTypes.bool,
    colorSchema: _uu5g.default.PropTypes.string,
    buttonColorSchema: _uu5g.default.PropTypes.string,
    onTagSelect: _uu5g.default.PropTypes.func,
    tagListPosition: _uu5g.default.PropTypes.oneOf(["top", "bottom"]),
    displayHint: _uu5g.default.PropTypes.bool
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      availableTags: null,
      ignoreTags: null,
      allowCustomTags: false,
      onTagSelect: null,
      tagListPosition: "top",
      buttonColorSchema: "default",
      displayHint: true
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    var _this = this;

    // init cache
    this._removeFnCache = {}; // create button configuration

    this._buttons = [{
      icon: "mdi-plus",
      colorSchema: this.props.buttonColorSchema,
      onClick: function onClick() {
        return _this._addTagValue();
      },
      content: _uu5g.default.Common.Element.create(_uu5g.default.Bricks.ScreenSize, null, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.ScreenSize.Item, {
        screenSize: "xs"
      }, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Icon, {
        icon: "mdi-plus"
      })), _uu5g.default.Common.Element.create(_uu5g.default.Bricks.ScreenSize.Item, {
        screenSize: "*"
      }, this.getLsiComponent("addButtonLabel")))
    }];
    return {
      textValue: "",
      focused: false
    };
  },
  componentWillMount: function componentWillMount() {
    // need to initialize value here because of input mixin
    this.setState({
      value: this.props.value || []
    });
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _buttons: undefined,
  _removeFnCache: undefined,
  _registerTextButton: function _registerTextButton(textButton) {
    this._textButton = textButton;
  },
  _getRemoveFn: function _getRemoveFn(tag) {
    var _this2 = this;

    if (!this._removeFnCache[tag]) {
      // create new function into cache if doesn't exist
      this._removeFnCache[tag] = function () {
        _this2.setState(function (state) {
          var newValue = state.value.filter(function (item) {
            return item !== tag;
          });

          if (newValue.length !== state.value.length) {
            // tag is removed from state => remove function from cache
            delete _this2._removeFnCache[tag];
            return {
              value: newValue
            };
          }
        });
      };
    }

    return this._removeFnCache[tag];
  },
  _addTagValue: function _addTagValue(value) {
    var _this3 = this;

    this.setState(function (state) {
      value = value === undefined ? state.textValue : value;
      if (!value) return; // validate value towards ignored tags

      if (_this3.props.ignoreTags && _this3.props.ignoreTags.indexOf(value) !== -1) {
        _this3._textButton.setError(_this3.getLsiValue("tagIsNotAllowed").replace("$1", value));

        return;
      } // validate value towards currently set tags


      if (state.value && state.value.indexOf(value) !== -1) {
        _this3._textButton.setWarning(_this3.getLsiValue("tagIsAlreadyAdded").replace("$1", value));

        return;
      }

      if (!_this3.props.allowCustomTags && (!_this3.props.availableTags || _this3.props.availableTags.indexOf(value) === -1)) {
        _this3._textButton.setError(_this3.getLsiValue("customTagIsNotAllowed"));

        return;
      }

      if (typeof _this3.props.onTagSelect === "function") {
        _this3.props.onTagSelect({
          component: _this3,
          value: state.value,
          tag: value
        });

        return {
          textValue: ""
        };
      } // value is valid - add tag and clear input


      _this3._textButton.setInitial("");

      return {
        value: [].concat(_toConsumableArray(state.value), [value]),
        textValue: ""
      };
    });
  },
  _updateTextValue: function _updateTextValue(_ref) {
    var value = _ref.value;
    this.setState({
      textValue: value
    });
  },
  _onTextInputBlur: function _onTextInputBlur() {
    this.setState({
      focused: false
    });
  },
  _onTextInputFocus: function _onTextInputFocus() {
    this.setState({
      focused: true
    });
  },
  _renderTagList: function _renderTagList() {
    var _this4 = this;

    return this.state.value && this.state.value.length ? this.state.value.map(function (tag, index) {
      return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Label, {
        key: tag,
        colorSchema: "custom",
        onClick: _this4._getRemoveFn(tag),
        icon: "mdi-close",
        className: _this4.getClassName("tag")
      }, tag);
    }) : this.props.displayHint ? _uu5g.default.Common.Element.create("span", {
      className: _css.default.css("color: rgba(0, 0, 0, .24)")
    }, this.getLsiValue("noTagInfoText")) : null;
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var inputId = this.getId() + "-input";
    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, this._getInputAttrs(), this.getLabel(inputId), this.getInputWrapper(_uu5g.default.Common.Element.create(_uu5g.default.Common.Fragment, null, this.props.tagListPosition === "top" && this._renderTagList(), _uu5g.default.Common.Element.create(_uu5g.default.Forms.TextButton, {
      colorSchema: this.props.colorSchema,
      key: "textButton",
      ref_: this._registerTextButton,
      buttons: this._buttons,
      actionOnEnter: true,
      inputAttrs: {
        onFocus: this._onTextInputFocus,
        onBlur: this._onTextInputBlur
      },
      onChange: this._updateTextValue,
      inline: true,
      spacing: 0,
      className: this.getClassName("textButton"),
      placeholder: this.getLsiValue("placeholder"),
      mainAttrs: {
        onKeyPress: function onKeyPress(e) {
          if ((e.keyCode || e.which) === 13 && !e.shiftKey && !e.ctrlKey) {
            e.preventDefault(); // prevent sending form
          }
        }
      },
      value: this.state.textValue
    }), _uu5g.default.Common.Element.create(_autocompleteItems.default, {
      key: "autocomplete-items",
      items: this.props.availableTags,
      filterValue: this.state.textValue,
      filterItems: this.state.value,
      shown: this.state.focused,
      onClick: this._addTagValue
    }), this.props.tagListPosition !== "top" && this._renderTagList())));
  } //@@viewOff:render

});

exports.TagsSelect = TagsSelect;
var _default = TagsSelect;
exports.default = _default;