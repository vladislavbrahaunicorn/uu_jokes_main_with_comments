"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var UU5 = _interopRequireWildcard(require("uu5g04"));

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _lsiHelper = _interopRequireDefault(require("../helpers/lsi-helper.js"));

var _css = _interopRequireDefault(require("../helpers/css.js"));

var _updateFileForm = _interopRequireDefault(require("./update-file-form.js"));

var _updateBinaryMetaDataForm = _interopRequireDefault(require("./update-binary-meta-data-form.js"));

var _deleteFileForm = _interopRequireDefault(require("./delete-file-form.js"));

var _previewFileForm = _interopRequireDefault(require("./preview-file-form.js"));

var _shareFileForm = _interopRequireDefault(require("./share-file-form.js"));

var _dndForm = _interopRequireDefault(require("./dnd-form.js"));

var _controls = _interopRequireDefault(require("./controls.js"));

require("./form-controller.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var FormController = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.CcrReaderMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "FormController",
    classNames: {
      main: _config.default.CSS + "form-controller",
      modalHeader: _config.default.CSS + "form-controller-modal-header",
      alignRight: function alignRight() {
        return _css.default.css("text-align: right;");
      }
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    settings: UU5.PropTypes.object,
    lsiLabels: UU5.PropTypes.object,
    allowCustomTags: UU5.PropTypes.bool,
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    onTagCreate: UU5.PropTypes.func,
    sizeLimit: UU5.PropTypes.number,
    outputMaxHeight: UU5.PropTypes.number,
    outputMaxWidth: UU5.PropTypes.number,
    outputQuality: UU5.PropTypes.number
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      settings: {},
      allowCustomTags: false,
      ignoreTags: undefined,
      onTagCreate: undefined,
      availableTags: undefined,
      sizeLimit: undefined,
      outputMaxHeight: undefined,
      outputMaxWidth: undefined,
      outputQuality: undefined
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    this._initialDomNode = null;
    return {
      forceRender: undefined
    };
  },
  componentDidMount: function componentDidMount() {
    // check whether we're in a modal window and use forceRender iff we're are
    // (to render our own modals over the current one)
    var node = this._initialDomNode;

    while (node && node.tagName && !node.classList.contains("uu5-bricks-modal")) {
      node = node.parentNode;
    }

    this.setState({
      forceRender: !!(node && node.tagName)
    });
  },
  //@@viewOff:standardComponentLifeCycle
  //@@viewOn:interface
  openDnDForm: function openDnDForm(fileList, onSave, formProps) {
    var _this = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: _lsiHelper.default.getLsiComponent(this.props.lsiLabels.addBinariesFormHeader || _lsi.default.LSI_LABEL_ADD_BINARIES)
      }),
      content: UU5.Common.Element.create(_dndForm.default, _extends({
        ref_: function ref_(r) {
          _this._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        done: onSave,
        fileList: fileList,
        onCancel: this._closeModal,
        lsiLabels: this.props.lsiLabels,
        ignoreTags: this.props.ignoreTags,
        availableTags: this.props.availableTags,
        allowCustomTags: this.props.allowCustomTags,
        onTagCreate: this.props.onTagCreate,
        sizeLimit: this.props.sizeLimit,
        outputMaxHeight: this.props.outputMaxHeight,
        outputMaxWidth: this.props.outputMaxWidth,
        outputQuality: this.props.outputQuality
      }, formProps)),
      onClose: function onClose() {
        return _this._closeModal();
      },
      footer: UU5.Common.Element.create(_controls.default, {
        formComponent: this._getCurrentForm,
        className: this.getClassName("alignRight")
      }),
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },
  openUpdateBinaryForm: function openUpdateBinaryForm(file, binary, thumbnail, addThumbnail, removeThumbnail, onSuccess) {
    var _this2 = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: _lsiHelper.default.getLsiComponent(this.props.lsiLabels.updateBinaryFormHeader)
      }),
      content: UU5.Common.Element.create(_updateFileForm.default, {
        ref_: function ref_(r) {
          _this2._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        file: file,
        done: this._closeModal,
        thumbnail: thumbnail,
        addThumbnail: addThumbnail,
        removeThumbnail: removeThumbnail,
        binary: binary,
        onCancel: this._closeModal,
        onSuccess: onSuccess,
        baseUri: this.props.settings.baseUri,
        cmdUpdateBinaryData: this.props.settings.uuCmdUpdateBinaryData,
        cmdCreateThumbnail: this.props.settings.uuCmdCreateThumbnail,
        cmdUpdateThumbnailData: this.props.settings.uuCmdUpdateThumbnailData,
        cmdDeleteThumbnail: this.props.settings.uuCmdDeleteThumbnail,
        shouldSaveThumbnail: this.props.settings.thumbnailStrategy !== "none",
        lsiLabels: this.props.lsiLabels,
        currentControls: this._getCurrentControls,
        outputMaxHeight: this.props.settings.outputMaxHeight,
        outputMaxWidth: this.props.settings.outputMaxWidth,
        outputQuality: this.props.settings.outputQuality,
        sizeLimit: this.props.sizeLimit
      }),
      onClose: this._closeModal,
      footer: UU5.Common.Element.create(_controls.default, {
        ref_: function ref_(r) {
          return _this2._currentControls = r;
        },
        formComponent: this._getCurrentForm,
        className: this.getClassName("alignRight")
      }),
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },
  openUpdateBinaryMetaDataForm: function openUpdateBinaryMetaDataForm(binary, onSuccess) {
    var _this3 = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: _lsiHelper.default.getLsiComponent(this.props.lsiLabels.updateBinaryMetaDataFormHeader)
      }),
      content: UU5.Common.Element.create(_updateBinaryMetaDataForm.default, {
        ref_: function ref_(r) {
          _this3._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        done: this._closeModal,
        binary: binary,
        onCancel: this._closeModal,
        onSuccess: onSuccess,
        baseUri: this.props.settings.baseUri,
        cmdUpdateBinary: this.props.settings.uuCmdUpdateBinary,
        currentControls: this._getCurrentControls,
        ignoreTags: this.props.ignoreTags,
        availableTags: this.props.availableTags,
        allowCustomTags: this.props.allowCustomTags,
        onTagCreate: this.props.onTagCreate
      }),
      onClose: function onClose() {
        return _this3._closeModal();
      },
      footer: UU5.Common.Element.create(_controls.default, {
        ref_: function ref_(r) {
          return _this3._currentControls = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        formComponent: this._getCurrentForm,
        className: this.getClassName("alignRight")
      }),
      sticky: false,
      size: "m",
      overflow: true
    };

    this._openModal(modalContent);
  },
  openDeleteBinaryForm: function openDeleteBinaryForm(binary, thumbnail, removeThumbnail, onSuccess) {
    var _this4 = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: _lsiHelper.default.getLsiComponent(this.props.lsiLabels.deleteBinaryFormHeader)
      }),
      content: UU5.Common.Element.create(_deleteFileForm.default, {
        ref_: function ref_(r) {
          _this4._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        binary: binary,
        filename: binary.filename,
        thumbnail: thumbnail,
        removeThumbnail: removeThumbnail,
        onSuccess: onSuccess,
        done: this._closeModal,
        onCancel: this._closeModal,
        baseUri: this.props.settings.baseUri,
        cmdDeleteBinary: this.props.settings.uuCmdDeleteBinary,
        cmdDeleteThumbnail: this.props.settings.uuCmdDeleteThumbnail,
        shouldSaveThumbnail: this.props.settings.thumbnailStrategy !== "none",
        lsiLabels: this.props.lsiLabels,
        currentControls: this._getCurrentControls
      }),
      footer: UU5.Common.Element.create(_controls.default, {
        ref_: function ref_(r) {
          return _this4._currentControls = r;
        },
        formComponent: this._getCurrentForm,
        hasDelete: true,
        className: this.getClassName("alignRight")
      }),
      onClose: function onClose() {
        return _this4._closeModal(true);
      },
      sticky: false,
      size: "m"
    };

    this._openModal(modalContent);
  },
  openPreviewBinaryForm: function openPreviewBinaryForm(binary) {
    var _this5 = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: binary.filename
      }),
      content: UU5.Common.Element.create(_previewFileForm.default, {
        ref_: function ref_(r) {
          return _this5._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        code: binary.code,
        done: this._closeModal,
        onCancel: this._closeModal,
        rev: binary.sys.rev,
        baseUri: this.props.settings.baseUri,
        cmdGetBinaryData: this.props.settings.uuCmdGetBinaryData
      }),
      onClose: function onClose() {
        return _this5._closeModal();
      },
      sticky: false,
      size: "auto"
    };

    this._openModal(modalContent);
  },
  openShareBinaryForm: function openShareBinaryForm(binary, type) {
    var _this6 = this;

    var modalContent = {
      header: UU5.Common.Element.create(UU5.Bricks.Div, {
        className: this.getClassName("modalHeader"),
        content: _lsiHelper.default.getLsiComponent(this.props.lsiLabels.shareBinaryFormHeader)
      }),
      content: UU5.Common.Element.create(_shareFileForm.default, {
        ref_: function ref_(r) {
          _this6._currentForm = r;
        },
        id: UU5.Common.Tools.generateUUID(),
        binary: binary,
        settings: this.props.settings.sharingOptions[type] ? this.props.settings.sharingOptions[type] : this.props.settings.sharingOptions["default"],
        done: this._closeModal,
        onCancel: this._closeModal
      }),
      footer: UU5.Common.Element.create(_controls.default, {
        formComponent: this._getCurrentForm,
        label: _lsi.default.LSI_LABEL_BUTTON_COPY,
        className: this.getClassName("alignRight")
      }),
      onClose: function onClose() {
        return _this6._closeModal();
      },
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },
  //@@viewOff:interface
  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods
  //@@viewOn:componentSpecificHelpers
  _openModal: function _openModal(modalContent) {
    this._modal.open(modalContent);
  },
  _closeModal: function _closeModal() {
    var _this7 = this;

    this._modal.close(false);

    setTimeout(function () {
      return _this7._currentControls && _this7._currentControls.setDisabledButton(false);
    }, 500);
    this._currentForm = null;
  },
  _getCurrentForm: function _getCurrentForm() {
    return this._currentForm;
  },
  _getCurrentControls: function _getCurrentControls() {
    return this._currentControls;
  },
  _setInitialDomNodeRef: function _setInitialDomNodeRef(ref) {
    this._initialDomNode = ref;
  },
  //@@viewOff:componentSpecificHelpers
  //@@viewOn:render
  render: function render() {
    var _this8 = this;

    var forceRender = this.state.forceRender;
    return forceRender === undefined ? UU5.Common.Element.create("div", {
      ref: this._setInitialDomNodeRef
    }) : UU5.Common.Element.create(UU5.Bricks.Modal, {
      ref: function ref(r) {
        return _this8._modal = r;
      },
      forceRender: forceRender,
      controlled: false
    });
  } //@@viewOff:render

});
var _default = FormController;
exports.default = _default;