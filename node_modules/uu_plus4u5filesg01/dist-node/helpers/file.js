"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getMaxFileSize = exports.adjustFile = void 0;

var UU5 = _interopRequireWildcard(require("uu5g04"));

require("uu5imagingg01");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var adjustFile = function adjustFile(data) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      outputQuality = _ref.outputQuality,
      outputMaxWidth = _ref.outputMaxWidth,
      outputMaxHeight = _ref.outputMaxHeight;

  return new Promise(function (resolve, reject) {
    var isImage = data.type && data.type.match(/image\//); // we adjust only images and adjustment must be set via props
    // so if file is not an image or is not set any of props changing output quality

    if (!isImage || !outputQuality && !outputMaxHeight && !outputMaxWidth) {
      return resolve(data);
    } // handle output quality


    new Promise(function (resolveOutputQuality) {
      if (outputQuality) {
        UU5.Imaging.Adjustment.changeType(data, "jpg", outputQuality).then(function (resultOutputQuality) {
          return resolveOutputQuality(resultOutputQuality.imageFile);
        });
      } else {
        // no output quality change is needed
        resolveOutputQuality(data);
      }
    }).then(function (imageFile) {
      // handle resize of a image if is needed
      if (outputMaxWidth || outputMaxHeight) {
        UU5.Imaging.Adjustment.resizeMax(imageFile, outputMaxWidth, outputMaxHeight).then(function (resultResizeMax) {
          resolve(resultResizeMax.imageFile);
        }, function (resultResizeMaxError) {
          reject({
            error: Object.assign(resultResizeMaxError, {
              code: "resizeFailed"
            })
          });
        });
      } else {
        // no resize is needed
        resolve(imageFile);
      }
    });
  });
};

exports.adjustFile = adjustFile;
var MAX_SIZE = 128 * 1024;

var getMaxFileSize = function getMaxFileSize(sizeLimit) {
  return sizeLimit ? Math.min(MAX_SIZE, sizeLimit) : MAX_SIZE;
};

exports.getMaxFileSize = getMaxFileSize;
var _default = {
  adjustFile: adjustFile,
  getMaxFileSize: getMaxFileSize
};
exports.default = _default;