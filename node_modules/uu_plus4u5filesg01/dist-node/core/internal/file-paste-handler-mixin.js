"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FilePasteHandlerMixin = void 0;
var instances = {};
var InstanceCounter = {
  getInstances: function getInstances(tagName) {
    return instances[tagName] || [];
  },
  Mixin: {
    componentDidMount: function componentDidMount() {
      var compInstances = instances[this.getTagName()];
      if (!compInstances) compInstances = instances[this.getTagName()] = [];
      compInstances.push(this);
    },
    componentWillUnmount: function componentWillUnmount() {
      var compInstances = instances[this.getTagName()];

      if (compInstances) {
        var idx = compInstances.indexOf(this);
        if (idx != -1) compInstances.splice(idx, 1);
      }
    }
  }
};
var FilePasteHandlerMixin = {
  mixins: [InstanceCounter.Mixin],
  componentDidMount: function componentDidMount() {
    if (!this.pasteFiles_) throw new Error("FilePasteHandler requires method pasteFiles_(blobs) to be defined.");

    if (InstanceCounter.getInstances("Plus4U5.Files.FileManager").length === 1) {
      document.addEventListener("paste", handleDocumentPaste);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    if (InstanceCounter.getInstances("Plus4U5.Files.FileManager").length === 0) {
      document.removeEventListener("paste", handleDocumentPaste);
    }
  }
}; // NOTE This method must not be instance method (or mount/unmount listener registering would have to change).

exports.FilePasteHandlerMixin = FilePasteHandlerMixin;

function handleDocumentPaste(e) {
  if (e.repeat !== true) {
    // find out how many instances of Input / UploadInput components are present & visible
    var _instances = InstanceCounter.getInstances("Plus4U5.Files.FileManager");

    var pastableInstances = _instances.filter(function (it) {
      var result = false;

      if (!it.props.ignorePaste) {
        var domNode = it.findDOMNode(); // eslint-disable-line

        if (domNode) {
          var computedStyle = getComputedStyle(domNode);
          if (computedStyle.visibility !== "hidden" && computedStyle.display !== "none") result = true;
        }
      }

      return result;
    });

    if (pastableInstances.length === 1) {
      // paste files to the component
      var items = (e.clipboardData || e.originalEvent.clipboardData || {}).items;
      var blobs = [];

      for (var index in items) {
        var item = items[index];

        if (item.kind === "file") {
          var blob = item.getAsFile();
          blobs.push(blob);
        }
      }

      if (blobs.length > 0) {
        var component = pastableInstances[0];
        component.pasteFiles_(blobs);
      }
    }
  }
}

var _default = FilePasteHandlerMixin;
exports.default = _default;