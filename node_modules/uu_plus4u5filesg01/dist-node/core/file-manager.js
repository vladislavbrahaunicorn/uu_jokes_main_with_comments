"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

require("uu5tilesg01");

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _lsiHelper = _interopRequireDefault(require("../helpers/lsi-helper.js"));

var _fileManagerTile = _interopRequireDefault(require("../bricks/file-manager-tile.js"));

var _fileManagerTypeFilter = _interopRequireDefault(require("../bricks/file-manager-type-filter.js"));

var _fileUploader = _interopRequireDefault(require("./file-uploader.js"));

var _formController = _interopRequireDefault(require("../forms/form-controller.js"));

var _filePasteHandlerMixin = _interopRequireDefault(require("./internal/file-paste-handler-mixin.js"));

var _listWrapper = _interopRequireDefault(require("./internal/list-wrapper.js"));

var _tools = require("./internal/tools.js");

var _file = require("../helpers/file.js");

var _config = _interopRequireDefault(require("../config/config.js"));

var _calls = _interopRequireDefault(require("../calls"));

require("./file-manager.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//@@viewOff:imports
function detectMobileBrowser() {
  var check = false;

  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0, 4))) check = true;
  })(navigator.userAgent || navigator.vendor || window.opera);

  return check;
}

var FileManager = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin, _uu5g.default.Common.ScreenSizeMixin, _filePasteHandlerMixin.default],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "FileManager",
    classNames: {
      main: _config.default.CSS + "file-manager",
      dndWrapper: _config.default.CSS + "file-manager-dnd-wrapper"
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    baseUri: _uu5g.default.PropTypes.string,
    uuCmdListBinaries: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdCreateBinary: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdUpdateBinary: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdUpdateBinaryData: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdDeleteBinary: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdGetBinaryData: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdGetBinaryDataUri: _uu5g.default.PropTypes.func,
    uuCmdListThumbnails: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdCreateThumbnail: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdUpdateThumbnailData: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdDeleteThumbnail: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdGetThumbnailData: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.func, _uu5g.default.PropTypes.string]),
    uuCmdGetThumbnailDataUri: _uu5g.default.PropTypes.func,
    fileList: _uu5g.default.PropTypes.array,
    thumbnailList: _uu5g.default.PropTypes.array,
    onFileCreate: _uu5g.default.PropTypes.func,
    onFileUpdate: _uu5g.default.PropTypes.func,
    onFileDelete: _uu5g.default.PropTypes.func,
    onFileShare: _uu5g.default.PropTypes.func,
    onFileClick: _uu5g.default.PropTypes.func,
    onSelect: _uu5g.default.PropTypes.func,
    thumbnailStrategy: _uu5g.default.PropTypes.string,
    sortItems: _uu5g.default.PropTypes.array,
    sortValues: _uu5g.default.PropTypes.array,
    onSetFileType: _uu5g.default.PropTypes.func,
    fileTypeFilters: _uu5g.default.PropTypes.object,
    dndEnabled: _uu5g.default.PropTypes.bool,
    sharingOptions: _uu5g.default.PropTypes.object,
    fileButtons: _uu5g.default.PropTypes.shape({
      hideDropdown: _uu5g.default.PropTypes.bool,
      itemList: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.string, _uu5g.default.PropTypes.shape({
        active: _uu5g.default.PropTypes.bool,
        onClick: _uu5g.default.PropTypes.func,
        icon: _uu5g.default.PropTypes.string,
        label: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.string, _uu5g.default.PropTypes.object])
      })]))
    }),
    lsiLabels: _uu5g.default.PropTypes.object,
    onFilenameSet: _uu5g.default.PropTypes.string,
    searchKeyList: _uu5g.default.PropTypes.array,
    selectable: _uu5g.default.PropTypes.oneOf(["none", "single", "multi"]),
    selectableOnly: _uu5g.default.PropTypes.bool,
    displayCreateButton: _uu5g.default.PropTypes.oneOfType([_uu5g.default.PropTypes.bool, _uu5g.default.PropTypes.string, _uu5g.default.PropTypes.object]),
    outputMaxHeight: _uu5g.default.PropTypes.number,
    outputMaxWidth: _uu5g.default.PropTypes.number,
    outputQuality: _uu5g.default.PropTypes.number,
    headerHidden: _uu5g.default.PropTypes.bool,
    allowCustomTags: _uu5g.default.PropTypes.bool,
    ignoreTags: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    availableTags: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    onTagCreate: _uu5g.default.PropTypes.func,
    readOnly: _uu5g.default.PropTypes.bool,
    sizeLimit: _uu5g.default.PropTypes.number,
    createButtonFileCodeRule: _uu5g.default.PropTypes.oneOf(["none", "required", "notRequired"]),
    dndFileCodeRule: _uu5g.default.PropTypes.oneOf(["none", "required", "notRequired"]),
    bulkActions: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.shape({
      content: _uu5g.default.PropTypes.any,
      // UU5 content
      onClick: _uu5g.default.PropTypes.func,
      active: _uu5g.default.PropTypes.bool
    })),
    displayInfoBar: _uu5g.default.PropTypes.bool,
    displayFilterBar: _uu5g.default.PropTypes.bool,
    displayFilterByTags: _uu5g.default.PropTypes.bool,
    initialCollapseBars: _uu5g.default.PropTypes.bool
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    var sortItems = [{
      key: "code",
      name: {
        cs: "Kód",
        en: "Code"
      }
    }, {
      key: "filename",
      name: {
        cs: "Název souboru",
        en: "Filename"
      }
    }, {
      key: "sys.mts",
      name: {
        cs: "Datum změny",
        en: "Modification Time"
      }
    }];
    return {
      uuCmdListBinaries: "uu-app-binarystore/listBinaries",
      uuCmdCreateBinary: "uu-app-binarystore/createBinary",
      uuCmdUpdateBinary: "uu-app-binarystore/updateBinary",
      uuCmdUpdateBinaryData: "uu-app-binarystore/updateBinaryData",
      uuCmdDeleteBinary: "uu-app-binarystore/deleteBinary",
      uuCmdGetBinaryData: "uu-app-binarystore/getBinaryData",
      uuCmdGetBinaryDataUri: undefined,
      thumbnailStrategy: "createAll",
      sortItems: sortItems,
      sortValues: [{
        key: "sys.mts",
        descending: true
      }],
      dndEnabled: true,
      searchKeyList: ["code", "filename", "sys.mts", "tagList"],
      selectable: "none",
      selectableOnly: false,
      displayCreateButton: true,
      outputMaxHeight: undefined,
      outputMaxWidth: undefined,
      outputQuality: undefined,
      headerHidden: false,
      allowCustomTags: false,
      ignoreTags: undefined,
      onTagCreate: undefined,
      availableTags: undefined,
      readOnly: false,
      sizeLimit: undefined,
      createButtonFileCodeRule: undefined,
      dndFileCodeRule: undefined,
      bulkActions: undefined,
      displayInfoBar: true,
      displayFilterBar: true,
      displayFilterByTags: true,
      initialCollapseBars: undefined
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState: function getInitialState() {
    this._sharingOptions = {
      default: [{
        label: _lsi.default.LSI_LABEL_FILE_MANAGER_SHARE_TYPE_CODE,
        value: "${code}",
        codeStyle: "text"
      }, {
        label: _lsi.default.LSI_LABEL_FILE_MANAGER_SHARE_TYPE_URI,
        value: _calls.default.getCommandUri(this.props.baseUri, "uu-app-binarystore/getBinaryData") + "?code=${code}",
        codeStyle: "text"
      }]
    };

    var strategies = this._getCodeStrategies(this.props);

    this._settings = _objectSpread({
      baseUri: this.props.baseUri,
      uuCmdCreateBinary: this.props.uuCmdCreateBinary,
      uuCmdUpdateBinary: this.props.uuCmdUpdateBinary,
      uuCmdUpdateBinaryData: this.props.uuCmdUpdateBinaryData,
      uuCmdDeleteBinary: this.props.uuCmdDeleteBinary,
      uuCmdGetBinaryData: this.props.uuCmdGetBinaryData,
      uuCmdGetBinaryDataUri: this.props.uuCmdGetBinaryDataUri,
      uuCmdListThumbnails: this.props.uuCmdListThumbnails,
      uuCmdCreateThumbnail: this.props.uuCmdCreateThumbnail || this.props.uuCmdCreateBinary,
      uuCmdUpdateThumbnailData: this.props.uuCmdUpdateThumbnailData || this.props.uuCmdUpdateBinaryData,
      uuCmdDeleteThumbnail: this.props.uuCmdDeleteThumbnail || this.props.uuCmdDeleteBinary,
      uuCmdGetThumbnailData: this.props.uuCmdGetThumbnailData || this.props.uuCmdGetBinaryData,
      uuCmdGetThumbnailDataUri: this.props.uuCmdGetThumbnailDataUri || this.props.uuCmdGetBinaryDataUri,
      thumbnailStrategy: this.props.thumbnailStrategy
    }, strategies, {
      outputMaxHeight: this.props.outputMaxHeight,
      outputMaxWidth: this.props.outputMaxWidth,
      outputQuality: this.props.outputQuality,
      sharingOptions: this.props.sharingOptions ? this.props.sharingOptions : this._sharingOptions
    });
    this._lsiLabels = {
      header: _lsi.default.LSI_LABEL_FILE_MANAGER,
      barHeader: _lsi.default.LSI_LABEL_FILE_MANAGER_HEADER,
      searchPlaceholder: _lsi.default.LSI_LABEL_FILE_MANAGER_SEARCH_PLACEHOLDER,
      noBinariesWarning: _lsi.default.LSI_LABEL_FILE_MANAGER_EMPTY_WARNING,
      addBinaryFormHeader: _lsi.default.LSI_LABEL_ADD_BINARY,
      addBinariesFormHeader: _lsi.default.LSI_LABEL_ADD_BINARIES,
      updateBinaryFormHeader: _lsi.default.LSI_LABEL_UPDATE_BINARY,
      deleteBinaryFormHeader: _lsi.default.LSI_LABEL_DELETE_BINARY,
      shareBinaryFormHeader: _lsi.default.LSI_LABEL_FILE_MANAGER_SHARE_HEADER,
      dndAreaPlaceholder: _lsi.default.LSI_LABEL_FILE_MANAGER_DROP_BAR_CONTENT,
      dndAreaUploadSuccessMsg: _lsi.default.LSI_LABEL_FILE_MANAGER_UPLOAD_RESULT_SUCCESS,
      dndAreaUploadFailedMsg: _lsi.default.LSI_LABEL_FILE_MANAGER_UPLOAD_RESULT_FAILED,
      deleteBinaryConfirmMsg: _lsi.default.LSI_LABEL_DELETE_BINARY_SUCCESS_CONFIRM_MSG,
      previewFormError: _lsi.default.LSI_LABEL_FILE_MANAGER_PREVIEW_ERROR,
      fileSizeExceededError: _lsi.default.LSI_LABEL_ADD_BINARY_FILE_SIZE_EXCEEDED,
      addBinaryFormFile: _lsi.default.LSI_LABEL_ADD_BINARY_FILE,
      addBinaryFormFileRequired: _lsi.default.LSI_LABEL_ADD_BINARY_FILE_REQUIRED,
      deleteBinaryFormContent: _lsi.default.LSI_LABEL_DELETE_BINARY_MSG,
      updateBinaryMetaDataFormHeader: _lsi.default.LSI_UPDATE_BINARY_META_DATA_FORM_HEADER
    };

    if (this.props.lsiLabels) {
      for (var key in this.props.lsiLabels) {
        this._lsiLabels[key] = this.props.lsiLabels[key];
      }
    }

    this._fileButtons = this._computeFileButtons();
    this._thumbnailMap = {};
    this._noThumbnailImageList = [];
    this._isDndAllowed = this.props.dndEnabled && !this.props.readOnly && !detectMobileBrowser();
    this._onDragEnterCounter = 0;
    var binaries = [];
    var thumbnailMap = {};
    var state = "loading";

    if (this.props.fileList) {
      if (this.props.thumbnailList) {
        for (var i = 0; i < this.props.fileList.length; i++) {
          if (!this.props.fileList[i].code.match(/_th$/)) {
            binaries.push(this._buildBinaryJson(this.props.fileList[i]));
          }
        }

        for (var _i = 0; _i < this.props.thumbnailList.length; _i++) {
          if (this.props.thumbnailList[_i].code.match(/_th$/)) {
            thumbnailMap[this.props.thumbnailList[_i].code] = this.props.thumbnailList[_i];
          }
        }
      } else {
        for (var _i2 = 0; _i2 < this.props.fileList.length; _i2++) {
          if (!this.props.fileList[_i2].code.match(/_th$/)) {
            binaries.push(this._buildBinaryJson(this.props.fileList[_i2]));
          } else {
            thumbnailMap[this.props.fileList[_i2].code] = this.props.fileList[_i2];
          }
        }
      }

      state = "ready";
    }

    return {
      state: state,
      type: "full",
      binaries: binaries,
      thumbnailMap: thumbnailMap,
      displayCreateButton: this._processDisplayCreateButton(),
      dndHover: false,
      collapseBars: this.props.initialCollapseBars
    };
  },
  componentWillMount: function componentWillMount() {
    if (this.props.customCodeStrategy) {
      _uu5g.default.Common.Tools.warning('Property "customCodeStrategy" is deprecated! Use properties "createButtonFileCodeRule" and "dndFileCodeRule" instead.');
    }
  },
  componentDidMount: function componentDidMount() {
    if (!this.props.fileList) {
      this._listBinaries(0);
    }

    if (this.props.fileList && this.props.thumbnailStrategy === "createAll") {
      this._migrateImagesWithoutThumbnail();
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var strategies = this._getCodeStrategies(nextProps);

    this._settings = _objectSpread({
      baseUri: nextProps.baseUri,
      uuCmdCreateBinary: nextProps.uuCmdCreateBinary,
      uuCmdUpdateBinary: nextProps.uuCmdUpdateBinary,
      uuCmdUpdateBinaryData: nextProps.uuCmdUpdateBinaryData,
      uuCmdDeleteBinary: nextProps.uuCmdDeleteBinary,
      uuCmdGetBinaryData: nextProps.uuCmdGetBinaryData,
      uuCmdGetBinaryDataUri: nextProps.uuCmdGetBinaryDataUri,
      uuCmdListThumbnails: nextProps.uuCmdListThumbnails,
      uuCmdCreateThumbnail: nextProps.uuCmdCreateThumbnail || nextProps.uuCmdCreateBinary,
      uuCmdUpdateThumbnailData: nextProps.uuCmdUpdateThumbnailData || nextProps.uuCmdUpdateBinaryData,
      uuCmdDeleteThumbnail: nextProps.uuCmdDeleteThumbnail || nextProps.uuCmdDeleteBinary,
      uuCmdGetThumbnailData: nextProps.uuCmdGetThumbnailData || nextProps.uuCmdGetBinaryData,
      uuCmdGetThumbnailDataUri: nextProps.uuCmdGetThumbnailDataUri || nextProps.uuCmdGetBinaryDataUri,
      thumbnailStrategy: nextProps.thumbnailStrategy
    }, strategies, {
      outputMaxHeight: nextProps.outputMaxHeight,
      outputMaxWidth: nextProps.outputMaxWidth,
      outputQuality: nextProps.outputQuality,
      sharingOptions: nextProps.sharingOptions ? nextProps.sharingOptions : this._sharingOptions
    });
    this._isDndAllowed = nextProps.dndEnabled && !detectMobileBrowser();

    if (this.props.fileButtons !== nextProps.fileButtons || this.props.customFileButtons !== nextProps.customFileButtons || this.props.readOnly !== nextProps.readOnly) {
      this._fileButtons = this._computeFileButtons(nextProps);
    }

    if (this.props.displayCreateButton !== nextProps.displayCreateButton) {
      this.setState({
        displayCreateButton: this._processDisplayCreateButton(nextProps)
      });
    }
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  addFile: function addFile(binary) {
    var binaryToPush = this._buildBinaryJson(binary);

    this.setState(function (prevState) {
      var binaries = _toConsumableArray(prevState.binaries);

      binaries.push(binaryToPush);
      return {
        binaries: binaries
      };
    });
  },
  getFile: function getFile(binaryCode) {
    var binary = null;

    for (var i = 0; i < this.state.binaries.length; i++) {
      if (binaryCode === this.state.binaries[i].binary.code) {
        binary = this.state.binaries[i].binary;
        break;
      }
    }

    return binary;
  },
  updateFile: function updateFile(binary) {
    var _this = this;

    var selectedItemList = this._listController.getSelectedItemList();

    var inMethodSetState = function inMethodSetState() {
      return _this.setState(function (prevState) {
        var binaries = prevState.binaries;

        for (var i = 0; i < binaries.length; i++) {
          if (binaries[i].code === binary.code) {
            binaries = _toConsumableArray(binaries);
            binaries[i] = _this._buildBinaryJson(_objectSpread({}, binary));
            break;
          }
        }

        return {
          binaries: binaries
        };
      });
    };

    var isSelected = false;
    selectedItemList.forEach(function (selectedItem) {
      if (selectedItem.code === binary.code) {
        isSelected = true;
        selectedItem = _this._buildBinaryJson(_objectSpread({}, binary));

        _this._listController.addSelectedItem(selectedItem, inMethodSetState());
      }
    });

    if (!isSelected) {
      inMethodSetState();
    }
  },
  deleteFile: function deleteFile(binaryCode) {
    var _this2 = this;

    this._listController.removeSelectedItem(binaryCode, function () {
      return _this2.setState(function (prevState) {
        var binaries = prevState.binaries;

        for (var i = 0; i < binaries.length; i++) {
          if (binaries[i].binary.code === binaryCode) {
            binaries = _toConsumableArray(binaries);
            binaries.splice(i, 1);
            break;
          }
        }

        return {
          binaries: binaries
        };
      });
    });
  },
  setThumbnail: function setThumbnail(thumbnail) {
    this.setState(function (prevState) {
      var thumbnailMap = _objectSpread({}, prevState.thumbnailMap);

      thumbnailMap[thumbnail.code] = thumbnail;
      return {
        thumbnailMap: thumbnailMap
      };
    });
  },
  unsetThumbnail: function unsetThumbnail(thumbnail) {
    this.setState(function (prevState) {
      var thumbnailMap = _objectSpread({}, prevState.thumbnailMap);

      delete thumbnailMap[thumbnail];
      return {
        thumbnailMap: thumbnailMap
      };
    });
  },
  getThumbnail: function getThumbnail(thumbnailCode) {
    return this.state.thumbnailMap[thumbnailCode];
  },
  customAddSelectedItem: function customAddSelectedItem(tileId) {
    if (this.props.selectable === "single") {
      this._listController.clearSelected();
    }

    this._listController.addSelectedItem(tileId);
  },
  customRemoveSelectedItem: function customRemoveSelectedItem(tileId) {
    this._listController.removeSelectedItem(tileId);
  },
  getSelectedFiles: function getSelectedFiles() {
    return this._listController.getSelectedItemList();
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  pasteFiles_: function pasteFiles_(blobs) {
    if (!this.props.readOnly) {
      blobs = blobs.slice(-1);

      if (blobs.length > 0) {
        this._addFiles(blobs[0]);
      }
    }
  },
  //@@viewOff:overriding
  //@@viewOn:private
  _processDisplayCreateButton: function _processDisplayCreateButton() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    var result = props.displayCreateButton;

    if (result === true) {
      result = {
        xs: "texticon"
      };
    }

    if (result) {
      result = (0, _tools.parseScreenSizeProp)(result, "texticon", function (value) {
        return {
          displayText: !!value.match("text"),
          displayIcon: !!value.match("icon")
        };
      });
    }

    return result;
  },
  _getCodeStrategies: function _getCodeStrategies() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    var createButtonFileCodeRule = props.createButtonFileCodeRule;
    var dndFileCodeRule = props.dndFileCodeRule;

    if (props.customCodeStrategy) {
      if (!createButtonFileCodeRule) {
        if (props.customCodeStrategy === "none") {
          createButtonFileCodeRule = "none";
        } else if (props.customCodeStrategy === "single" || props.customCodeStrategy === "multi") {
          createButtonFileCodeRule = "notRequired";
        } else if (props.customCodeStrategy === "singleRequired" || props.customCodeStrategy === "multiRequired") {
          createButtonFileCodeRule = "required";
        }
      }

      if (!dndFileCodeRule) {
        if (props.customCodeStrategy === "none" || props.customCodeStrategy === "single" || props.customCodeStrategy === "singleRequired") {
          dndFileCodeRule = "none";
        } else if (props.customCodeStrategy === "multi") {
          dndFileCodeRule = "notRequired";
        } else if (props.customCodeStrategy === "multiRequired") {
          dndFileCodeRule = "required";
        }
      }
    }

    return {
      createButtonFileCodeRule: createButtonFileCodeRule || "notRequired",
      dndFileCodeRule: dndFileCodeRule || "none"
    };
  },
  _getType: function _getType(binary) {
    var type;
    var icon;
    var thumbnail = "icon";
    var clickable = false;

    if (binary.contentType.match(/\/svg/)) {
      type = "svg";
      icon = "mdi-file-image";
      thumbnail = "original";
      clickable = true;
    } else if (binary.contentType.match(/image\//)) {
      type = "image";
      icon = "mdi-file-image";
      thumbnail = "thumbnail";
      clickable = true;
    } else if (binary.contentType.match(/\/pdf/)) {
      type = "pdf";
      icon = "mdi-file-pdf";
      clickable = true;
    } else if (binary.contentType.match(/(\/html)|(\/xml)/)) {
      type = "xml";
      icon = "mdi-file-xml";
    } else if (binary.contentType.match(/(\/text$)|(^text\/)/)) {
      type = "text";
      icon = "mdi-file-document";
    } else if (binary.contentType.match(/\/json/)) {
      type = "json";
      icon = "mdi-json";
    } else if (binary.filename && binary.filename.match(/(\.rar$)|(\.zip$)|(\.7z$)|(\.tgz$)|(\.tar$)|(\.tar\.gz$)/)) {
      type = "archive";
      icon = "mdi-package";
    } else {
      type = "other";
      icon = "mdi-file";
    }

    return {
      type: type,
      icon: icon,
      thumbnail: thumbnail,
      clickable: clickable
    };
  },
  _buildBinaryJson: function _buildBinaryJson(dtoOut) {
    var type = this.props.onSetFileType ? this.props.onSetFileType(dtoOut) : this._getType(dtoOut);
    var binaryObj = {};

    for (var i = 0; i < this.props.sortItems.length; i++) {
      // this method allows to read "a.b.c" of dtoOut as dtoOut[a][b][c] - in case of sys.mts or other
      binaryObj[this.props.sortItems[i].key] = this.props.sortItems[i].key.split(".").reduce(this._getVarOnKey, dtoOut);
    }

    binaryObj.id = dtoOut.code;
    binaryObj.binary = dtoOut;
    binaryObj.type = type.type;
    binaryObj.icon = type.icon;
    binaryObj.thumbnailType = type.thumbnail;
    binaryObj.clickable = type.clickable;
    return binaryObj;
  },
  _filterBinariesByTags: function _filterBinariesByTags(binaries, ignoreTags) {
    if (!ignoreTags || ignoreTags.length === 0) {
      return binaries;
    }

    return binaries.filter(function (binary) {
      return !binary.binary.tagList || binary.binary.tagList.every(function (tag) {
        return ignoreTags.indexOf(tag) === -1;
      });
    });
  },
  _getBinaries: function _getBinaries() {
    return this._filterBinariesByTags(this.state.binaries, this.props.ignoreTags);
  },
  _computeFileButtons: function _computeFileButtons() {
    var _this3 = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
        fileButtons = _ref.fileButtons,
        deprecatedCustomFileButtons = _ref.deprecatedCustomFileButtons,
        readOnly = _ref.readOnly,
        availableTags = _ref.availableTags,
        allowCustomTags = _ref.allowCustomTags;

    var result;
    var usingDeprecatedProp = false;

    if (fileButtons) {
      result = _objectSpread({}, fileButtons);
    } else if (deprecatedCustomFileButtons) {
      usingDeprecatedProp = true;
      result = _objectSpread({}, deprecatedCustomFileButtons);
    } else {
      result = {
        hideDropdown: false,
        itemList: ["share", "download", "update", "updateTags", "delete"]
      };
    } // filter updateTags if tags are not used


    if (result.itemList && !availableTags && !allowCustomTags) {
      result.itemList = result.itemList.filter(function (item) {
        return item !== "updateTags";
      });
    } // filter active items


    if (result.itemList && readOnly) {
      result.itemList = result.itemList.filter(function (item) {
        return item !== "update" && item !== "updateTags" && item !== "delete";
      });
    } // filter items for sharing if share is not available


    if (result.itemList && typeof this.props.uuCmdGetBinaryData === "function" && !this.props.onFileShare) {
      // cannot show file URL in share form because we dont know what uuCmd getBinaryData does and what is shape of server request if is any
      // => filter share button if component does not have its own share form
      result.itemList = result.itemList.filter(function (item) {
        return item !== "share";
      });
    }

    if (Array.isArray(result.itemList)) {
      if (usingDeprecatedProp) {
        result.itemList.forEach(function (item) {
          if (item.icon) item.active = true;
        });
      }

      result.itemList = result.itemList.map(function (item) {
        var result = null;

        if (typeof item === "string") {
          switch (item) {
            case "share":
              result = {
                label: _lsi.default.LSI_LABEL_FILE_MANAGER_TILE_DROPDOWN_SHARE,
                isDownload: false,
                onClick: _this3._openShareBinaryForm,
                icon: "mdi-content-copy",
                active: true
              };
              break;

            case "download":
              result = {
                label: _lsi.default.LSI_LABEL_FILE_MANAGER_TILE_DROPDOWN_DOWNLOAD,
                isDownload: true
              };
              break;

            case "update":
              result = {
                label: _lsi.default.LSI_LABEL_FILE_MANAGER_TILE_DROPDOWN_UPDATE,
                isDownload: false,
                onClick: _this3._openUpdateBinaryFileDialog,
                icon: "mdi-pencil",
                active: true
              };
              break;

            case "updateTags":
              result = {
                label: _lsi.default.LSI_LABEL_FILE_MANAGER_TILE_DROPDOWN_UPDATE_TAGS,
                isDownload: false,
                onClick: _this3._openUpdateBinaryDialog,
                icon: "mdi-tag",
                active: true
              };
              break;

            case "delete":
              result = {
                label: _lsi.default.LSI_LABEL_FILE_MANAGER_TILE_DROPDOWN_DELETE,
                isDownload: false,
                onClick: _this3._deleteBinary
              };
              break;
          }
        } else {
          result = item;
        }

        return result;
      });
    }

    return result;
  },
  _shouldListNext: function _shouldListNext(pageInfo) {
    // pageIndex is 0-based
    return (pageInfo.pageIndex + 1) * pageInfo.pageSize < pageInfo.total;
  },
  _listBinariesDone: function _listBinariesDone(dtoOut, pageIndex) {
    var _this4 = this;

    this.setState(function (prevState) {
      var filteredBinaries = [];

      var thumbnailMap = _objectSpread({}, prevState.thumbnailMap);

      for (var i = 0; i < dtoOut.itemList.length; i++) {
        if (!dtoOut.itemList[i].code.match(/_th$/)) {
          filteredBinaries.push(_this4._buildBinaryJson(dtoOut.itemList[i]));
        } else {
          thumbnailMap[dtoOut.itemList[i].code] = dtoOut.itemList[i];
        }
      }

      return {
        binaries: prevState.binaries.concat(filteredBinaries),
        thumbnailMap: thumbnailMap
      };
    });
    this._shouldListNext(dtoOut.pageInfo) ? this._listBinaries(pageIndex + 1) : this.props.uuCmdListThumbnails ? this._listThumbnails(0) : this._finishListBinaries();
  },
  _listBinariesFail: function _listBinariesFail(dtoOut) {
    this.setState({
      state: "error"
    });
  },
  _listBinaries: function _listBinaries(pageIndex) {
    var _this5 = this;

    // create data object
    var data = {
      pageInfo: JSON.stringify({
        pageSize: 1000,
        pageIndex: pageIndex
      })
    };

    var done = function done(dtoOut) {
      return _this5._listBinariesDone(dtoOut, pageIndex);
    };

    var fail = this._listBinariesFail;

    if (typeof this.props.uuCmdListBinaries === "function") {
      this.props.uuCmdListBinaries(data).then(done, fail);
    } else {
      var myDtoIn = {
        data: data,
        done: done,
        fail: fail
      };

      _calls.default.customGetCmd(this.props.baseUri, this.props.uuCmdListBinaries, myDtoIn);
    }
  },
  _listThumbnailsDone: function _listThumbnailsDone(dtoOut, pageIndex) {
    var _this6 = this;

    this.setState(function (prevState) {
      var thumbnailMap = _objectSpread({}, prevState.thumbnailMap);

      for (var i = 0; i < dtoOut.itemList.length; i++) {
        if (dtoOut.itemList[i].code.match(/_th$/)) {
          thumbnailMap[dtoOut.itemList[i].code] = dtoOut.itemList[i];
        }
      }

      return {
        thumbnailMap: thumbnailMap
      };
    }, function () {
      return _this6._shouldListNext(dtoOut.pageInfo) ? _this6._listThumbnails(pageIndex + 1) : _this6._finishListBinaries();
    });
  },
  _listThumbnailsFail: function _listThumbnailsFail(dtoOut) {
    this.setState({
      state: "error"
    });
  },
  _listThumbnails: function _listThumbnails(pageIndex) {
    var _this7 = this;

    if (this.props.thumbnailStrategy !== "none") {
      var data = {
        pageInfo: JSON.stringify({
          pageSize: 1000,
          pageIndex: pageIndex
        })
      };

      var done = function done(dtoOut) {
        return _this7._listThumbnailsDone(dtoOut, pageIndex);
      };

      var fail = this._listThumbnailsFail;
      var cmd = this.props.uuCmdListThumbnails || this.props.uuCmdListBinaries;

      if (typeof cmd === "function") {
        cmd(data).then(done, fail);
      } else {
        var myDtoIn = {
          data: data,
          done: done,
          fail: fail
        };

        _calls.default.customGetCmd(this.props.baseUri, cmd, myDtoIn);
      }
    } else {
      this._finishListBinaries();
    }
  },
  _finishListBinaries: function _finishListBinaries() {
    this.setState({
      state: "ready"
    });

    if (this.props.thumbnailStrategy === "createAll") {
      this._migrateImagesWithoutThumbnail();
    }
  },
  _migrateImagesWithoutThumbnail: function _migrateImagesWithoutThumbnail() {
    var binaries = this.state.binaries;

    for (var i = 0; i < binaries.length; i++) {
      var code = binaries[i].binary.code.length > 61 ? binaries[i].binary.code.substr(0, 61) : binaries[i].binary.code;

      if (binaries[i].thumbnailType === "thumbnail" && !this.state.thumbnailMap[code + "_th"]) {
        this._noThumbnailImageList.push(binaries[i].code);
      }
    }

    this._migrateImage(0);
  },
  _migrateImageDone: function _migrateImageDone(data, header, index) {
    var _this8 = this;

    var blob = new Blob([data], {
      type: header
    });

    this._saveThumbnail(this._noThumbnailImageList[index], blob, index, function () {
      _this8._migrateImage(index + 1);

      _this8._saveOriginalAsThumbnail(_this8._noThumbnailImageList[index], blob);
    }, function (thumbnailDtoOut) {
      _this8.setThumbnail(thumbnailDtoOut);

      _this8._migrateImage(index + 1);
    }, true);
  },
  _migrateImageFail: function _migrateImageFail(dtoOut, index) {
    this._migrateImage(index + 1);
  },
  _migrateImage: function _migrateImage(index) {
    var _this9 = this;

    if (this._noThumbnailImageList[index]) {
      var data = {
        code: this._noThumbnailImageList[index]
      };

      var done = function done(data, header) {
        return _this9._migrateImageDone(data, header, index);
      };

      var fail = function fail(dtoOut) {
        return _this9._migrateImageFail(dtoOut, index);
      };

      if (typeof this._settings.uuCmdGetBinaryData === "function") {
        this._settings.uuCmdGetBinaryData(data).then(done, fail);
      } else {
        var dtoIn = {
          data: data,
          done: done,
          fail: fail
        };

        _calls.default.customGetNotTransformedCmd(this.props.baseUri, this._settings.uuCmdGetBinaryData, dtoIn);
      }
    }
  },
  _saveThumbnail: function _saveThumbnail(code, file, index, onFail, onSuccess, isMigration) {
    var _this10 = this;

    var imageEncoding = "image/jpeg";
    var imageQuality = 0.85;
    var fileLoader = new FileReader();
    var canvas = document.createElement("canvas");
    var context = null;
    var imageObj = new Image();

    if (isMigration && this.props.thumbnailStrategy === "createAll" || !isMigration && (this.props.thumbnailStrategy === "createAll" || this.props.thumbnailStrategy === "createNew")) {
      fileLoader.readAsDataURL(file);
    } else {
      onFail();
    }

    fileLoader.onload = function () {
      var data = fileLoader.result;
      imageObj.src = data;
    };

    imageObj.onerror = function (e) {
      onFail();
    };

    imageObj.onload = function () {
      // Check for empty images
      if (imageObj.width === 0 || imageObj.height === 0) {
        _uu5g.default.Common.Tools.warning("Image is empty");

        onFail();
      } else {
        var canvasProps = _this10._calculateCanvasSize(imageObj.width, imageObj.height);

        canvas.id = "file-manager-hidden-canvas";
        canvas.width = canvasProps.canvasWidth;
        canvas.height = canvasProps.canvasHeight;
        canvas.style.visibility = "hidden";
        document.body.appendChild(canvas);
        context = canvas.getContext("2d");
        context.fillStyle = "white";
        context.fillRect(0, 0, canvasProps.canvasWidth, canvasProps.canvasHeight);
        context.drawImage(imageObj, 0, 0, canvasProps.canvasWidth, canvasProps.canvasHeight);
        var dataURI = canvas.toDataURL(imageEncoding, imageQuality);
        var byteString = atob(dataURI.split(",")[1]);
        var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
        var ab = new ArrayBuffer(byteString.length);
        var ia = new Uint8Array(ab);

        for (var i = 0; i < byteString.length; i++) {
          ia[i] = byteString.charCodeAt(i);
        }

        var blob = new Blob([ab], {
          type: mimeString
        });
        document.body.removeChild(canvas);
        var dtoIn = {
          done: function done(thumbnailDtoOut) {
            onSuccess(thumbnailDtoOut);
          },
          fail: function fail() {
            onFail();
          },
          data: {
            code: (code.length > 61 ? code.substr(0, 61) : code) + "_th",
            data: blob
          }
        };

        if (typeof _this10._settings.uuCmdCreateThumbnail === "function") {
          _this10._settings.uuCmdCreateThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
        } else {
          _calls.default.customPostMultipartCmd(_this10.props.baseUri, _this10._settings.uuCmdCreateThumbnail, dtoIn);
        }
      }
    };
  },
  _saveOriginalAsThumbnail: function _saveOriginalAsThumbnail(code, data) {
    code = code.length > 61 ? code.substr(0, 61) : code;
    var dtoIn = {
      done: function done() {},
      fail: function fail() {},
      data: {
        code: code + "_th",
        data: data
      }
    };

    if (typeof this._settings.uuCmdCreateThumbnail === "function") {
      this._settings.uuCmdCreateThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
    } else {
      _calls.default.customPostMultipartCmd(this.props.baseUri, this._settings.uuCmdCreateThumbnail, dtoIn);
    }
  },
  _calculateCanvasSize: function _calculateCanvasSize(imgWidth, imgHeight) {
    var canvasWidth = 512;
    var canvasHeight = 512; // Shrink to fit the whole rectangle, if any side is bigger than canvas side

    if (imgHeight > canvasHeight || imgWidth > canvasWidth) {
      if (imgHeight / canvasHeight > imgWidth / canvasWidth) {
        // scale by height
        imgWidth = imgWidth / (imgHeight / canvasHeight);
        imgHeight = canvasHeight;
      } else {
        // scale by width
        imgHeight = imgHeight / (imgWidth / canvasWidth);
        imgWidth = canvasWidth;
      }
    } // Recalculate canvas size, if img is too small


    canvasHeight = Math.min(canvasHeight, imgHeight);
    canvasWidth = Math.min(canvasWidth, imgWidth);
    return {
      canvasWidth: Math.ceil(canvasWidth),
      canvasHeight: Math.ceil(canvasHeight)
    };
  },
  _openFileDialogue: function _openFileDialogue(type) {
    var inputComp = type === "add" ? this._fileFormAdd : this._fileFormUpdate; // empty the File's value because if not emptied, choosing the same file twice will not trigger onChange

    var input = _uu5g.default.Common.DOM.findNode(inputComp);

    if (input) {
      input = input.querySelector("input");
      if (input) input.value = "";
    }

    inputComp._open();
  },
  _addFiles: function _addFiles(files) {
    files = Array.isArray(files) ? files : [files];

    this._dropBar.setFiles(files, {
      customCodesEnabled: this._settings.createButtonFileCodeRule !== "none",
      customCodesRequired: this._settings.createButtonFileCodeRule === "required"
    });
  },
  _deleteBinary: function _deleteBinary(binary, type) {
    if (this.props.onFileDelete) {
      this.props.onFileDelete(binary, type);
    } else {
      var thumbnail = (binary.code.length > 61 ? binary.code.substr(0, 61) : binary.code) + "_th";

      this._formController.openDeleteBinaryForm(binary, this.state.thumbnailMap[thumbnail], this.unsetThumbnail, this.deleteFile);
    }
  },
  _openUpdateBinaryFileDialog: function _openUpdateBinaryFileDialog(binary, type) {
    if (this.props.onFileUpdate) {
      this.props.onFileUpdate(binary, type);
    } else {
      this._binaryToUpdate = binary;

      this._openFileDialogue("update");
    }
  },
  _openUpdateBinaryDialog: function _openUpdateBinaryDialog(binary, type) {
    if (this.props.onFileInfoUpdate) {
      this.props.onFileInfoUpdate(binary, type);
    } else {
      this._formController.openUpdateBinaryMetaDataForm(binary, this.updateFile);
    }
  },
  _updateBinary: function _updateBinary(binary) {
    var thumbnailCode = (this._binaryToUpdate.code.length > 61 ? this._binaryToUpdate.code.substr(0, 61) : this._binaryToUpdate.code) + "_th";

    this._formController.openUpdateBinaryForm(binary, this._binaryToUpdate, this.state.thumbnailMap[thumbnailCode], this.setThumbnail, this.unsetThumbnail, this.updateFile);
  },
  _openDnDForm: function _openDnDForm(fileList, onSave, formProps) {
    this._formController.openDnDForm(fileList, onSave, formProps);
  },
  _openShareBinaryForm: function _openShareBinaryForm(file, type) {
    if (this.props.onFileShare) {
      this.props.onFileShare(file, type);
    } else {
      this._formController.openShareBinaryForm(file, type);
    }
  },
  _getActions: function _getActions(screenSize) {
    var _this11 = this;

    var actions = []; // displayCreateButton is false or object with screen size keys

    if (this.state.displayCreateButton) {
      actions.push({
        content: this.state.displayCreateButton[screenSize].displayText ? this._lsiLabels.addBinaryFormHeader : undefined,
        icon: this.state.displayCreateButton[screenSize].displayIcon ? "mdi-upload" : null,
        onClick: function onClick() {
          return _this11.props.onFileCreate ? _this11.props.onFileCreate() : _this11._openFileDialogue("add");
        },
        active: true,
        controlledContent: true
      });
    }

    this.state.type !== "full" && actions.push({
      content: "",
      onClick: function onClick() {
        return _this11._setType("full");
      },
      icon: "mdi-view-grid",
      active: true
    });
    this.state.type !== "small" && actions.push({
      content: "",
      onClick: function onClick() {
        return _this11._setType("small");
      },
      icon: "mdi-view-headline",
      active: true
    });
    return actions;
  },
  _setType: function _setType(type) {
    this.state.type !== type && this.setState({
      type: type
    });
  },
  _getVarOnKey: function _getVarOnKey(obj, i) {
    return obj[i];
  },
  _getAttrValue: function _getAttrValue(obj, attr) {
    return attr.split(".").reduce(this._getVarOnKey, obj);
  },
  _attrContainsValue: function _attrContainsValue(attrValue, value) {
    if (!attrValue || !value) return false;
    var result;

    if (Array.isArray(attrValue)) {
      result = attrValue.some(function (item) {
        return item && item.toLowerCase().indexOf(value) !== -1;
      });
    } else {
      result = attrValue.toLowerCase().indexOf(value) !== -1;
    }

    return result;
  },
  _matchSearch: function _matchSearch(item, value) {
    var _this12 = this;

    var fragments = value.toLowerCase().split(/[\s]/);
    var match = false;

    var _loop = function _loop(i) {
      var attrVal = _this12._getAttrValue(item.binary, _this12.props.searchKeyList[i]);

      if (fragments.some(function (frag) {
        return _this12._attrContainsValue(attrVal, frag);
      })) {
        match = true;
        return "break";
      }
    };

    for (var i = 0; i < this.props.searchKeyList.length; i++) {
      var _ret = _loop(i);

      if (_ret === "break") break;
    }

    return match;
  },
  _uploadFiles: function _uploadFiles(fileList, codeList, tagList, shouldAdjustFile) {
    if (!this._dndStats || this._dndStats.finished) {
      var fileStats = [];

      for (var i = 0; i < fileList.length; i++) {
        fileStats.push({
          name: fileList[i].name,
          state: i === 0 ? "started" : "waiting"
        });
      }

      this._dndStats = {
        index: 0,
        fileStats: fileStats,
        fileList: fileList,
        codeList: codeList,
        tagList: tagList
      };

      this._dropBar.setProgress(this._dndStats.fileStats);

      this._uploadFile(shouldAdjustFile);
    } else {
      for (var _i3 = 0; _i3 < fileList.length; _i3++) {
        this._dndStats.fileStats.push({
          name: fileList[_i3].name,
          state: "waiting"
        });
      }

      this._dndStats.fileList = this._dndStats.fileList.concat(fileList);
      this._dndStats.codeList && (this._dndStats.codeList = this._dndStats.codeList.concat(codeList));
      this._dndStats.tagList && (this._dndStats.tagList = this._dndStats.tagList.concat(tagList));

      this._dropBar.setProgress(this._dndStats.fileStats);
    }
  },
  _callUploadFileDone: function _callUploadFileDone(dtoOut, index, shouldAdjustFile) {
    var _this13 = this;

    this._saveThumbnail(dtoOut.code, this._dndStats.fileList[index], index, function () {
      _this13._dndStats.fileStats[index].state = "success";
      _this13._dndStats.fileStats[index + 1] && (_this13._dndStats.fileStats[index + 1].state = "started");

      _this13._dropBar.setProgress(_this13._dndStats.fileStats);

      _this13.addFile(dtoOut);

      _this13._dndStats.index++;

      _this13._uploadFile(shouldAdjustFile);
    }, function (thumbnailDtoOut) {
      _this13._dndStats.fileStats[index].state = "success";
      _this13._dndStats.fileStats[index + 1] && (_this13._dndStats.fileStats[index + 1].state = "started");

      _this13._dropBar.setProgress(_this13._dndStats.fileStats);

      _this13.setThumbnail(thumbnailDtoOut);

      _this13.addFile(dtoOut);

      _this13._dndStats.index++;

      _this13._uploadFile(shouldAdjustFile);
    }, false);
  },
  _callUploadFileFail: function _callUploadFileFail(shouldAdjustFile, message) {
    this._dndStats.fileStats[this._dndStats.index].state = "failed";
    this._dndStats.fileStats[this._dndStats.index].message = message;

    this._dropBar.setProgress(this._dndStats.fileStats);

    this._dndStats.index++;

    this._uploadFile(shouldAdjustFile);
  },
  _callUploadFile: function _callUploadFile(file, index, shouldAdjustFile) {
    var _this14 = this;

    if (file) {
      // validate maximal size of image
      if (file.size && file.size > (0, _file.getMaxFileSize)(this.props.sizeLimit) * 1024) {
        return this._callUploadFileFail(shouldAdjustFile, _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
          lsi: _lsi.default.LSI_LABEL_ADD_BINARY_FILE_SIZE_EXCEEDED,
          params: {
            maxSize: this.props.sizeLimit
          }
        }));
      }

      var data = {
        data: file
      };

      var done = function done(dtoOut) {
        return _this14._callUploadFileDone(dtoOut, index, shouldAdjustFile);
      };

      var _fail = this._callUploadFileFail;

      if (this._dndStats.codeList && this._dndStats.codeList[index]) {
        data.code = this._dndStats.codeList[index];
      }

      if (this._dndStats.tagList && this._dndStats.tagList[index]) {
        data.tagList = this._dndStats.tagList[index];
      }

      if (typeof this._settings.uuCmdCreateBinary === "function") {
        this._settings.uuCmdCreateBinary(data).then(done, function () {
          return _fail(shouldAdjustFile);
        });
      } else {
        var dtoIn = {
          data: data,
          done: done,
          fail: function fail(response) {
            var message;

            if (response && response.code) {
              var code = response.code.split("/");
              code = code[code.length - 1];

              if (code === "duplicateCode") {
                message = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
                  lsi: _lsi.default.LSI_DUPLICATE_CODE
                });
              }
            }

            if (!message) {
              message = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
                lsi: _lsi.default.LSI_DEFAULT_ERROR_MESSAGE
              });
            }

            _fail(shouldAdjustFile, message);
          }
        };

        _calls.default.customPostMultipartCmd(this.props.baseUri, this._settings.uuCmdCreateBinary, dtoIn);
      }
    } else {
      this._dndStats.finished = true;
    }
  },
  _uploadFile: function _uploadFile(shouldAdjustFile) {
    var _this15 = this;

    var index = this._dndStats.index;

    if (index >= this._dndStats.fileList.length) {
      // all files uploaded => ends processing of uploading files
      this._dndStats.finished = true;
      return;
    }

    var file = this._dndStats.fileList[index];

    if (shouldAdjustFile) {
      (0, _file.adjustFile)(file, this.props).then(function (file) {
        return _this15._callUploadFile(file, index, shouldAdjustFile);
      }, function (response) {
        var message;

        if (response && response.code) {
          var code = response.code.split("/");
          code = code[code.length - 1];

          if (code === "duplicateCode") {
            message = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
              lsi: _lsi.default.LSI_DUPLICATE_CODE
            });
          }
        }

        if (!message) {
          message = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Lsi, {
            lsi: _lsi.default.LSI_DEFAULT_ERROR_MESSAGE
          });
        }

        _this15._callUploadFileFail(shouldAdjustFile, message);
      });
    } else {
      this._callUploadFile(file, index, shouldAdjustFile);
    }
  },
  _onSetFiles: function _onSetFiles(fileList, opt) {
    var _this16 = this;

    // opt is only present if setFiles is explicitly called which only happens when uploading files using the upload button
    var customCodesEnabled = opt ? opt.customCodesEnabled : this._settings.dndFileCodeRule !== "none";
    var customCodesRequired = opt ? opt.customCodesRequired : this._settings.dndFileCodeRule === "required";

    if (customCodesEnabled || this.props.availableTags || this.props.allowCustomTags) {
      this._openDnDForm(fileList, function (codeList, tagList) {
        _this16._uploadFiles(fileList, codeList, tagList, false);
      }, {
        customCodesEnabled: customCodesEnabled,
        customCodesRequired: customCodesRequired
      });
    } else {
      this._uploadFiles(fileList, undefined, undefined, true);
    }
  },
  _onTagCreate: function _onTagCreate(value) {
    this.props.onTagCreate({
      component: this,
      value: value
    });
  },
  _onDropHandler: function _onDropHandler(e) {
    this._onDragEnterCounter = 0;
    this.setState({
      dndHover: false
    });
    e.preventDefault();
    e.stopPropagation();
    var files = [];

    if (e.dataTransfer.items) {
      // Use DataTransfer interface to access the file(s)
      for (var i = 0; i < e.dataTransfer.files.length; i++) {
        if (e.dataTransfer.files[i].type || e.dataTransfer.files[i].size % 4096 !== 0) {
          var file = e.dataTransfer.files[i];
          files.push(file);
        }
      }
    }

    this._onSetFiles(files);
  },
  _onDragOverHandler: function _onDragOverHandler(e) {
    e.preventDefault();
    e.stopPropagation();
  },
  _onDragEnterHandler: function _onDragEnterHandler(e) {
    this._onDragEnterCounter++;
    !this.state.dndHover && this.setState({
      dndHover: true
    });
    e.preventDefault();
    e.stopPropagation();
  },
  _onDragEndHandler: function _onDragEndHandler(e) {
    this._onDragEnterCounter = 0;
    this.setState({
      dndHover: false
    });
    e.preventDefault();
    e.stopPropagation();
  },
  _onDragLeaveHandler: function _onDragLeaveHandler(e) {
    this._onDragEnterCounter--;
    this._onDragEnterCounter <= 0 && this.setState({
      dndHover: false
    });
    e.preventDefault();
    e.stopPropagation();
  },
  _getFilterableTags: function _getFilterableTags() {
    // returns only tags of non ignored files
    var binaries = this._getBinaries();

    if (!binaries) return null; // fill set by tags from binaries

    var binariesTags = new Set();
    binaries.forEach(function (file) {
      if (file.binary.tagList) {
        file.binary.tagList.forEach(function (tag) {
          return binariesTags.add(tag);
        });
      }
    }); // sort all tags

    var result = _toConsumableArray(binariesTags);

    return result.sort();
  },
  _getBulkActions: function _getBulkActions() {
    var result = [];
    var bulkActions = this.props.bulkActions;

    if (Array.isArray(bulkActions)) {
      result = result.concat(bulkActions);
    }

    return result;
  },
  _registerListController: function _registerListController(controller) {
    this._listController = controller;
  },
  _onSelect: function _onSelect(opt) {
    if (typeof this.props.onSelect === "function") {
      this.props.onSelect(_objectSpread({}, opt, {
        component: this
      }));
    }
  },
  _getChild: function _getChild() {
    var _this17 = this;

    // let tileHeight;
    var tileMinWidth;
    var tileMaxWidth;

    if (this.state.type === "full") {
      // tileHeight = this.isXs() || this.isS() ? 278 : 205;
      tileMinWidth = this.isXs() || this.isS() ? 232 : 192;
      tileMaxWidth = this.isXs() || this.isS() ? 540 : 280;
    } else {
      // tileHeight = this.isXs() || this.isS() ? 118 : 70;
      tileMinWidth = 400;
      tileMaxWidth = 800;
    }

    return [_uu5g.default.Common.Element.create(_formController.default, {
      ref_: function ref_(r) {
        return _this17._formController = r;
      },
      id: _uu5g.default.Common.Tools.generateUUID(),
      settings: this._settings,
      lsiLabels: this._lsiLabels,
      key: "formController",
      ignoreTags: this.props.ignoreTags,
      availableTags: this.props.availableTags,
      allowCustomTags: this.props.allowCustomTags,
      onTagCreate: typeof this.props.onTagCreate === "function" ? this._onTagCreate : undefined,
      sizeLimit: this.props.sizeLimit
    }), _uu5g.default.Common.Element.create(_uu5g.default.Forms.File, {
      ref_: function ref_(r) {
        return _this17._fileFormAdd = r;
      },
      key: "fileFormAdd",
      hidden: true,
      multiple: true,
      onChange: function onChange(e) {
        _this17._addFiles(e.value);
      }
    }), _uu5g.default.Common.Element.create(_uu5g.default.Forms.File, {
      ref_: function ref_(r) {
        return _this17._fileFormUpdate = r;
      },
      key: "fileFormUpdate",
      hidden: true,
      multiple: false,
      onChange: function onChange(e) {
        _this17._updateBinary(e.value);
      }
    }), _uu5g.default.Common.Element.create(_uu5g.default.Tiles.ListController, {
      ref_: this._registerListController,
      data: this._getBinaries(),
      selectable: this.props.selectable !== "none",
      padding: "none",
      onSelect: this._onSelect,
      key: "tiles",
      outputMaxHeight: this.props.outputMaxHeight,
      outputMaxWidth: this.props.outputMaxWidth,
      outputQuality: this.props.outputQuality
    }, _uu5g.default.Common.Element.create(_uu5g.default.Tiles.ActionBar, {
      title: this.getLsiItem(this._lsiLabels.barHeader),
      actions: this._getActions(this.state.screenSize),
      onItemSearch: this._matchSearch,
      searchPlaceHolder: this.getLsiItem(this._lsiLabels.searchPlaceholder),
      collapsed: this.state.collapseBars === undefined ? this.props.selectable === "single" : this.state.collapseBars
    }), this.props.displayFilterBar && _uu5g.default.Common.Element.create(_fileManagerTypeFilter.default, {
      displayFilterByTags: this.props.displayFilterByTags,
      fileTypeFilters: this.props.fileTypeFilters,
      tags: this._getFilterableTags()
    }), this.props.selectable === "multi" && !this.props.readOnly && _uu5g.default.Common.Element.create(_uu5g.default.Tiles.BulkActionBar, {
      key: "bulkBar",
      actions: this._getBulkActions()
    }), this.props.displayInfoBar && _uu5g.default.Common.Element.create(_uu5g.default.Tiles.InfoBar, {
      controller: this._listController,
      sortItems: this.props.sortItems,
      sortValues: this.props.sortValues,
      selectable: this.props.selectable === "multi" && !this.props.readOnly
    }), _uu5g.default.Common.Element.create(_listWrapper.default, {
      ref_: function ref_(r) {
        return _this17._list = r;
      },
      tileHeight: "auto",
      tileMinWidth: tileMinWidth,
      tileMaxWidth: tileMaxWidth,
      tileSpacing: 8,
      rowSpacing: 8,
      tileElevation: 0,
      tileJustify: "space-between",
      skipInnerTile: true,
      isEmpty: this.state.binaries.length === 0,
      isEmptyMessage: _lsiHelper.default.getLsiComponent(this._lsiLabels.noBinariesWarning),
      tile: _uu5g.default.Common.Element.create(_fileManagerTile.default, {
        isS: this.isXs() || this.isS(),
        fileManager: this,
        tileType: this.state.type,
        onFileClick: this.props.onFileClick ? this.props.onFileClick : null,
        uuCmdGetBinaryData: this._settings.uuCmdGetBinaryData,
        uuCmdGetBinaryDataUri: this._settings.uuCmdGetBinaryDataUri,
        uuCmdGetThumbnailData: this._settings.uuCmdGetThumbnailData,
        uuCmdGetThumbnailDataUri: this._settings.uuCmdGetThumbnailDataUri,
        getThumbnail: this.getThumbnail,
        shouldShowThumbnail: this.props.thumbnailStrategy !== "none",
        fileButtons: this._fileButtons,
        customSelectable: this.props.readOnly ? "none" : this.props.selectable,
        selectableOnly: this.props.selectableOnly,
        onFilenameSet: this.props.onFilenameSet,
        baseUri: this.props.baseUri
      }),
      wrapperAttrs: this._isDndAllowed ? {
        onDragOver: this._onDragOverHandler,
        onDragEnter: this._onDragEnterHandler,
        onDrop: this._onDropHandler,
        onDragEnd: this._onDragEndHandler,
        onDragLeave: this._onDragLeaveHandler
      } : null,
      isHovered: this.state.dndHover
    }, !this.props.readOnly && _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
      className: this.getClassName("dndWrapper")
    }, _uu5g.default.Common.Element.create(_fileUploader.default, {
      ref_: function ref_(r) {
        return _this17._dropBar = r;
      },
      onSetFiles: this._onSetFiles,
      lsiLabels: {
        placeholder: this._lsiLabels.dndAreaPlaceholder,
        uploadSuccessMsg: this._lsiLabels.dndAreaUploadSuccessMsg,
        uploadFailedMsg: this._lsiLabels.dndAreaUploadFailedMsg
      },
      sizeLimit: this.props.sizeLimit,
      customCodesEnabled: this._settings.dndFileCodeRule !== "none",
      customCodesRequired: this._settings.dndFileCodeRule === "required",
      dndEnabled: false
    }))))];
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    var child;

    if (this.state.state === "loading") {
      child = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Loading, null);
    } else if (this.state.state === "ready") {
      child = this._getChild();
    } else if (this.state.state === "error") {
      child = _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Div, {
        content: _lsiHelper.default.getLsiComponent(_lsi.default.LSI_LABEL_COPY_FILE_MANAGER_LIST_FAILED)
      });
    }

    return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Section, _extends({}, this.getMainPropsToPass(), {
      header: this.props.headerHidden ? null : _lsiHelper.default.getLsiComponent(this._lsiLabels.header),
      level: 1
    }), child);
  } //@@viewOff:render

});

var _default = FileManager;
exports.default = _default;