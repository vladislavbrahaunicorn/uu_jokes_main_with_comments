"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uu5g = _interopRequireDefault(require("uu5g04"));

require("uu5g04-bricks");

var _config = _interopRequireDefault(require("../config/config.js"));

var _css = _interopRequireDefault(require("../helpers/css.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TagList = _uu5g.default.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [_uu5g.default.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "TagList",
    classNames: {
      main: function main(props, state) {
        return _css.default.css("\n          line-height: 22px;\n          position: relative;\n          ".concat(state.showAllTags ? "max-height: auto;" : "max-height: 44px;", "\n          ").concat(state.showAllTags ? "flex-basis: auto;" : "flex-basis: 44px;", "\n          overflow: hidden;\n        "));
      },
      resize: function resize() {
        return _css.default.css("\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n        ");
      },
      tag: function tag() {
        return _css.default.css("\n          cursor: default;\n          background-color: rgba(0, 0, 0, 0.1);\n          color: rgba(0, 0, 0, .87);\n          margin-right: 4px;\n          margin-bottom: 2px;\n          vertical-align: top;\n\n          .uu5-bricks-icon {\n            display: none;\n          }\n        ");
      },
      tagInvisible: function tagInvisible() {
        return _css.default.css("\n          visibility: hidden;\n        ");
      },
      expander: function expander() {
        return _css.default.css("\n          cursor: pointer;\n        ");
      }
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    items: _uu5g.default.PropTypes.arrayOf(_uu5g.default.PropTypes.string),
    onTagExpand: _uu5g.default.PropTypes.func,
    height: _uu5g.default.PropTypes.number,
    width: _uu5g.default.PropTypes.number
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      items: undefined,
      onTagExpand: null,
      height: 0,
      width: 0
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    this._node = _uu5g.default.Common.Reference.create();
    this._updateState = "initial";
    return {
      width: this.props.width,
      height: this.props.height,
      hiddenCount: 0,
      showAllTags: false
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var newState = {};

    if (nextProps.height) {
      if (Math.abs(nextProps.height - this.props.height) > 2) {
        newState.height = nextProps.height;
      }
    }

    if (nextProps.width) {
      newState.width = nextProps.width;
    }

    if (Object.keys(newState) !== 0) {
      this.setState(newState, function () {
        if (typeof nextProps.onTagExpand === "function") {
          nextProps.onTagExpand();
        }
      });
    } // NOTE If converted to getDerivedStateFromProps then add condition like "this.props !== nextProps"
    // (we want this to do only if props changed, not if just state changed).


    this._updateState = "initial";
  },
  componentDidMount: function componentDidMount() {
    this._updateHiddenTags();
  },
  componentDidUpdate: function componentDidUpdate() {
    this._updateHiddenTags();
  },
  //@@viewOff:standardComponentLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods
  //@@viewOn:componentSpecificHelpers
  _updateHiddenTags: function _updateHiddenTags() {
    var _this = this;

    if (!this._node.current) return;
    if (this.state.showAllTags) return;
    var hiddenCount = 0;
    var scrollHeight = this._node.current.scrollHeight;

    var rect = this._node.current.getBoundingClientRect();

    var expander;

    if (scrollHeight > rect.height) {
      // TODO optimalize algorithm to find first hidden object
      // filter all nodes that are not created from props.tags
      var tagClassName = this.getClassName("tag");
      var expanderClassName = this.getClassName("expander");
      var childNodes = [];

      for (var i = 0; i < this._node.current.childNodes.length; i++) {
        var node = this._node.current.childNodes[i];

        if (node.className.indexOf(tagClassName) !== -1) {
          if (node.className.indexOf(expanderClassName) === -1) {
            childNodes.push(node);
          } else {
            expander = node;
          }
        }
      } // measure all tags and count how many is visible


      for (var _i = 0; _i < childNodes.length; _i++) {
        var nodeRect = childNodes[_i].getBoundingClientRect(); // node is not fully (nearly fully) visible; -4px reserved if container was not high enough / browser uses weird font sizes / ...


        if (nodeRect.bottom - 4 >= rect.bottom) {
          // find first invisible node
          hiddenCount = childNodes.length - _i;
          break;
        }
      }
    } // NOTE There's a potential never-ending update loop:
    // 1. Assume several labels, 1st is short (so expander can be near it), 2nd is long (expander would be wrapped on the next line).
    // 2. At some point, 1st+2nd+expander will be rendered, but expader will be wrapped onto the 3rd line and therefore be hidden.
    // 3. So hiddenCount gets increased => 1st+expander+2nd will be rendered, but 1st+expander are short and are on single line,
    //    and 2nd is alone on the 2nd line, i.e. it is visible => hiddenCount gets decreased, leading to step 2.


    this.setState(function (state) {
      if (state.hiddenCount === hiddenCount) {
        // count of hidden nodes does not chnaged -> check if expander is visible otherwise is not needed to change state
        if (expander && expander.getBoundingClientRect().bottom - 4 >= rect.bottom) {
          // expander is hidden -> increase count of hidden nodes to rerender expander to new position
          if (_this._updateState === "initial") _this._updateState = "shrinked";else if (_this._updateState === "shrinked,expanded") _this._updateState = "shrinked,expanded,shrinked"; // shrinked, expanded, now shrinked again,are in a loop

          return {
            hiddenCount: state.hiddenCount + 1
          };
        } else {
          return null;
        }
      }

      if (_this._updateState === "shrinked" && hiddenCount < state.hiddenCount) _this._updateState = "shrinked,expanded";else if (_this._updateState === "shrinked,expanded,shrinked") return null; // break loop

      return {
        hiddenCount: hiddenCount
      };
    });
    Promise.resolve().then(function () {
      return _this._updateState = "initial";
    });
  },
  _showAllTags: function _showAllTags() {
    var _this2 = this;

    this.setState({
      showAllTags: true
    }, function () {
      if (typeof _this2.props.onTagExpand === "function") {
        _this2.props.onTagExpand();
      }
    });
  },
  //@@viewOff:componentSpecificHelpers
  //@@viewOn:render
  render: function render() {
    var _this3 = this;

    if (!Array.isArray(this.props.items) || !this.props.items.length) {
      return null;
    }

    var hiddenCount = this.state.showAllTags ? 0 : this.state.hiddenCount;
    var firstInivisibleItem = this.props.items.length - hiddenCount;
    var visibleItems = this.props.items.slice(0, firstInivisibleItem);
    var invisibleItems = hiddenCount ? this.props.items.slice(firstInivisibleItem) : null;
    return _uu5g.default.Common.Element.create("div", {
      // eslint-disable-next-line react/prop-types
      className: this.getClassName("main") + (this.props.className ? " " + this.props.className : ""),
      ref: this._node,
      style: {
        maxHeight: this.state.height && !this.state.showAllTags ? this.state.height + "px" : undefined
      }
    }, visibleItems.map(function (tag) {
      return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Label, {
        key: tag,
        colorSchema: "custom",
        className: _this3.getClassName("tag")
      }, tag);
    }), hiddenCount ? _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Label, {
      key: "show-all",
      colorSchema: "custom",
      className: this.getClassName("tag") + " " + this.getClassName("expander"),
      onClick: this._showAllTags
    }, "+", this.state.hiddenCount) : null, invisibleItems && invisibleItems.map(function (tag) {
      return _uu5g.default.Common.Element.create(_uu5g.default.Bricks.Label, {
        key: tag,
        colorSchema: "custom",
        className: _this3.getClassName("tag") + " " + _this3.getClassName("tagInvisible")
      }, tag);
    }));
  } //@@viewOff:render

});

var _default = TagList;
exports.default = _default;