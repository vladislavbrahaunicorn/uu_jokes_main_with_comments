"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var UU5 = _interopRequireWildcard(require("uu5g04"));

var _config = _interopRequireDefault(require("../config/config.js"));

var _lsi = _interopRequireDefault(require("../config/lsi.js"));

var _lsiHelper = _interopRequireDefault(require("../helpers/lsi-helper.js"));

var _css = _interopRequireDefault(require("../helpers/css.js"));

var _tagsSelect = _interopRequireDefault(require("../forms/tags-select.js"));

require("./file-manager-type-filter.less");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FileManagerTypeFilter = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config.default.TAG + "FileManagerTypeFilter",
    classNames: {
      main: _config.default.CSS + "file-manager-type-filter",
      leftCol: "left-col",
      rightCol: "right-col",
      label: "label",
      addTagFilterPanel: function addTagFilterPanel() {
        return _css.default.css("\n          .uu5-bricks-panel-header {\n            display: none;\n          }\n\n          .uu5-bricks-panel-body-body {\n            padding: 0;\n          }\n        ");
      },
      filterButton: function filterButton() {
        return _css.default.css("\n          && {\n            border-radius: 16px;\n          }\n\n          margin: 0 0 8px 8px;\n          \n          &:last-child{\n            margin-right: 0px;\n          }\n        ");
      },
      addTagFilterSelect: function addTagFilterSelect() {
        return _css.default.css("\n          &&& {\n            margin: 0;\n          }\n\n          .uu5-forms-input-wrapper > span:first-child {\n            display: none;\n          }\n\n          .uu5-forms-input-wrapper > .uu5-forms-text-button.uu5-forms-text-button {\n            margin-top: 0;\n          }\n        ");
      },
      rightTagFilterPanelColumn: function rightTagFilterPanelColumn() {
        return _css.default.css("text-align: right; && { padding: 0; }");
      }
    },
    lsi: {
      addFilterButtonLabel: {
        cs: "Filtrovat podle tagu",
        en: "Filter by tag"
      },
      tagFilterButtonPrefix: {
        cs: "Tag: ",
        en: "Tag: "
      }
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    controller: UU5.PropTypes.object,
    fileTypeFilters: UU5.PropTypes.object,
    tags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    displayFilterByTags: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    var fileTypeFilters = {
      image: {
        label: _lsi.default.LSI_LABEL_FILE_MANAGER_FILTER_IMAGE,
        active: false,
        types: ["image", "svg"]
      },
      text: {
        label: _lsi.default.LSI_LABEL_FILE_MANAGER_FILTER_TEXT,
        active: false,
        types: ["text", "xml", "pdf"]
      },
      other: {
        label: _lsi.default.LSI_LABEL_FILE_MANAGER_FILTER_OTHER,
        active: false,
        types: ["other", "archive", "json"]
      }
    };
    return {
      fileTypeFilters: fileTypeFilters,
      tags: null,
      displayFilterByTags: true
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:standardComponentLifeCycle
  getInitialState: function getInitialState() {
    var _this = this;

    this._bs = {};
    this._filters = {};
    this.props.fileTypeFilters && Object.keys(this.props.fileTypeFilters).forEach(function (key) {
      if (_this.props.fileTypeFilters.hasOwnProperty(key)) {
        if (_this.props.fileTypeFilters[key].active) {
          for (var i = 0; i < _this.props.fileTypeFilters[key].types.length; i++) {
            _this._filters[_this.props.fileTypeFilters[key].types[i]] = {
              visible: true
            };
          }
        }
      }
    });
    return {
      buttons: this.props.fileTypeFilters,
      tagFilters: []
    };
  },
  componentWillMount: function componentWillMount() {
    this.props.controller.registerBar("typeFilter", this);
  },
  componentDidMount: function componentDidMount() {
    this._buildFilter();
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.controller.unregisterBar("typeFilter");
  },
  //@@viewOff:standardComponentLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods
  //@@viewOn:componentSpecificHelpers
  _filterFn: function _filterFn(item) {
    return this._filters[_lsiHelper.default.getLsiComponent(item.type).toLowerCase()];
  },
  _buildFilter: function _buildFilter() {
    var classes = [];
    Object.entries(this._filters).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      if (value.visible) classes.push(key);
    });

    if (classes.length > 0) {
      var r = UU5.Common.Element.create(UU5.Bricks.Span, null, UU5.Common.Element.create(UU5.Bricks.Icon, {
        icon: "mdi-paw"
      }), "\xA0", classes.join(",\xA0"));
      this.props.controller.addFilterExt("type", r, null, this._filterFn, null);
    } else {
      this.props.controller.removeFilterExt("type");
    }
  },
  _handleClick: function _handleClick(type) {
    var _this2 = this;

    return function (e) {
      var buttons = _this2.state.buttons;
      buttons[type].active = !buttons[type].active;

      _this2.setState({
        buttons: buttons
      });

      {
        if (!buttons[type].active) {
          for (var i = 0; i < buttons[type].types.length; i++) {
            delete _this2._filters[buttons[type].types[i]];
          }
        } else {
          for (var _i2 = 0; _i2 < buttons[type].types.length; _i2++) {
            _this2._filters[buttons[type].types[_i2]] = {
              visible: true
            };
          }
        }

        _this2._buildFilter();
      }
    };
  },
  _registerBS: function _registerBS(type, r) {
    this._bs[type] = r;
  },
  _registerAddTagFilterPanel: function _registerAddTagFilterPanel(panel) {
    this._addTagFilterPanel = panel;
  },
  _shouldRenderCancel: function _shouldRenderCancel() {
    var should = false;

    if (this.state.tagFilters && this.state.tagFilters.length) {
      return true;
    }

    for (var button in this.state.buttons) {
      if (this.state.buttons[button].active) {
        should = true;
        break;
      }
    }

    return should;
  },
  _clearFilter: function _clearFilter() {
    var _this3 = this;

    var buttons = this.state.buttons;

    for (var button in buttons) {
      buttons[button].active = false;
    }

    this._filters = {};

    this._buildFilter();

    this.setState(function (state) {
      // clean all filters in tagFilter
      state.tagFilters.forEach(function (tag) {
        return _this3.props.controller.removeFilterExt("tag-" + tag);
      });
      return {
        buttons: buttons,
        tagFilters: []
      };
    });
  },
  _toggleAddFilterPanel: function _toggleAddFilterPanel() {
    this._addTagFilterPanel && this._addTagFilterPanel.toggle();
  },
  _closeTagFilterPanel: function _closeTagFilterPanel() {
    this._addTagFilterPanel && this._addTagFilterPanel.collapse();
  },
  _addTagFilter: function _addTagFilter(_ref3) {
    var _this4 = this;

    var tag = _ref3.tag;
    this.setState(function (state) {
      if (state.tagFilters.indexOf(tag) === -1) {
        _this4.props.controller.addFilterExt("tag-" + tag, tag, null, function (item) {
          return item.binary.tagList && item.binary.tagList.indexOf(tag) !== -1;
        });

        return {
          tagFilters: [].concat(_toConsumableArray(state.tagFilters), [tag])
        };
      }
    });
  },
  _removeTagFilter: function _removeTagFilter(component) {
    var _this5 = this;

    var tag = component.props._tag;
    this.setState(function (state) {
      _this5.props.controller.removeFilterExt("tag-" + tag);

      return {
        tagFilters: state.tagFilters.filter(function (filterTag) {
          return filterTag !== tag;
        })
      };
    });
  },
  _filterIgnoreTags: function _filterIgnoreTags(item) {
    var _this6 = this;

    return !item.binary.tagList || !Array.isArray(this.props.ignoreTags) || item.binary.tagList.every(function (tag) {
      return _this6.props.ignoreTags.indexOf(tag) === -1;
    });
  },
  _renderButtonSwitches: function _renderButtonSwitches() {
    var _this7 = this;

    var buttons = [];

    var _loop = function _loop(key) {
      buttons.push(UU5.Common.Element.create(UU5.Bricks.ButtonSwitch, {
        key: "switch_button_" + key,
        className: _this7.getClassName("filterButton"),
        props: {
          onClick: _this7._handleClick(key)
        },
        ref_: function ref_(r) {
          return _this7._registerBS(key, r);
        },
        switchedOn: _this7.state.buttons[key].active,
        content: _lsiHelper.default.getLsiComponent(_this7.state.buttons[key].label),
        onProps: {
          colorSchema: "primary"
        },
        offProps: {
          bgStyle: "outline",
          colorSchema: "primary"
        }
      }));
    };

    for (var key in this.state.buttons) {
      _loop(key);
    }

    return buttons;
  },
  _renderTagFilters: function _renderTagFilters() {
    var _this8 = this;

    if (!this.props.tags || !this.props.displayFilterByTags) return null;
    return UU5.Common.Element.create(UU5.Common.Fragment, null, this.state.tagFilters.map(function (tag) {
      return UU5.Common.Element.create(UU5.Bricks.Button, {
        _tag: tag,
        key: tag,
        className: _this8.getClassName("filterButton"),
        colorSchema: "primary",
        toggled: true,
        onClick: _this8._removeTagFilter
      }, _this8.getLsiComponent("tagFilterButtonPrefix"), UU5.Common.Element.create(UU5.Bricks.Span, null, tag), UU5.Common.Element.create(UU5.Bricks.Icon, {
        icon: "mdi-close"
      }));
    }), UU5.Common.Element.create(UU5.Bricks.Button, {
      key: "addTagFilter",
      className: this.getClassName("filterButton"),
      onClick: this._toggleAddFilterPanel,
      colorSchema: "primary",
      bgStyle: "outline"
    }, UU5.Common.Element.create(UU5.Bricks.Icon, {
      icon: "mdi-plus"
    }), this.getLsiComponent("addFilterButtonLabel")));
  },
  _getAvailableTags: function _getAvailableTags() {
    var _this9 = this;

    // filter all already added filters
    return this.props.tags.filter(function (tag) {
      return _this9.state.tagFilters.indexOf(tag) === -1;
    });
  },
  _getChild: function _getChild() {
    return UU5.Common.Element.create(UU5.Common.Fragment, null, UU5.Common.Element.create(UU5.Bricks.Div, this.getMainPropsToPass(), UU5.Common.Element.create(UU5.Bricks.Div, {
      className: this.getClassName("leftCol")
    }, UU5.Common.Element.create(UU5.Bricks.Span, {
      content: _lsiHelper.default.getLsiComponent(_lsi.default.LSI_LABEL_FILE_MANAGER_FILTER_HEADER),
      className: this.getClassName("label")
    }), this._renderButtonSwitches(), this._renderTagFilters()), this._shouldRenderCancel() && UU5.Common.Element.create(UU5.Bricks.Div, {
      className: this.getClassName("rightCol")
    }, UU5.Common.Element.create(UU5.Bricks.Button, {
      bgStyle: "transparent",
      onClick: this._clearFilter,
      content: _lsiHelper.default.getLsiComponent(_lsi.default.LSI_LABEL_FILE_MANAGER_FILTER_RESET)
    }))), UU5.Common.Element.create(UU5.Bricks.Panel, {
      className: this.getClassName("addTagFilterPanel"),
      ref_: this._registerAddTagFilterPanel
    }, UU5.Common.Element.create(UU5.Bricks.Well, {
      colorSchema: "blue"
    }, UU5.Common.Element.create(UU5.Bricks.Row, null, UU5.Common.Element.create(UU5.Bricks.Column, {
      colWidth: "xs-10 s-8 m-6 l-4"
    }, UU5.Common.Element.create(_tagsSelect.default, {
      availableTags: this._getAvailableTags(),
      allowCustomTags: true,
      buttonColorSchema: "blue",
      onTagSelect: this._addTagFilter,
      className: this.getClassName("addTagFilterSelect")
    })), UU5.Common.Element.create(UU5.Bricks.Column, {
      colWidth: "xs-2 s-4 m-6 l-8",
      className: this.getClassName("rightTagFilterPanelColumn")
    }, UU5.Common.Element.create(UU5.Bricks.Button, {
      onClick: this._closeTagFilterPanel
    }, UU5.Common.Element.create(UU5.Bricks.Icon, {
      icon: "mdi-chevron-up"
    })))))));
  },
  //@@viewOff:componentSpecificHelpers
  //@@viewOn:render
  render: function render() {
    return this._getChild();
  } //@@viewOff:render

});
var _default = FileManagerTypeFilter;
exports.default = _default;