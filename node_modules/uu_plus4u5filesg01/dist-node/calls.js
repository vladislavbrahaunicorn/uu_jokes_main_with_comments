"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uu_appg = require("uu_appg01");

var UU5 = _interopRequireWildcard(require("uu5g04"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Calls = {
  APP_BASE_URI: location.protocol + "//" + location.host + UU5.Environment.getAppBasePath(),
  call: function call(method, url, dtoIn, clientOptions) {
    if (this._detectIe() && method === "get") {
      dtoIn.data = dtoIn.data || {};
      dtoIn.data.Msiets = new Date().getTime();
    }

    _uu_appg.Client[method](url, dtoIn.data || null, clientOptions).then(function (response) {
      return dtoIn.done(response.data);
    }, function (response) {
      return dtoIn.fail(response);
    });
  },
  callWithHeader: function callWithHeader(method, url, dtoIn, clientOptions, header) {
    _uu_appg.Client[method](url, dtoIn.data || null, clientOptions).then(function (response) {
      return dtoIn.done(response.data, response.headers(header));
    }, function (response) {
      return dtoIn.fail(response);
    });
  },
  getCommandUri: function getCommandUri(baseUri, aUseCase) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // useCase <=> e.g. "getSomething" or "sys/getSomething"
    // add useCase to the application base URI
    // NOTE Using string concatenation instead of UriBuilder to support also URLs
    // that don't conform to uuUri specification.
    if (baseUri && !baseUri.match(/\/$/)) {
      baseUri = baseUri + "/";
    }

    var targetUriStr = (baseUri || Calls.APP_BASE_URI) + aUseCase.replace(/^\/+/, ""); // override tid / awid if it's present in environment (use also its gateway in such case)

    var env = UU5.Environment;

    if (env.tid || env.awid || env.vendor || env.app) {
      var uriBuilder = _uu_appg.Uri.UriBuilder.parse(targetUriStr);

      if (env.tid || env.awid) {
        if (env.gatewayUri) uriBuilder.setGateway = env.gatewayUri;
        if (env.tid) uriBuilder.setTid = env.tid;
        if (env.awid) uriBuilder.setAwid = env.awid;
      }

      if (env.vendor || env.app) {
        if (env.vendor) uriBuilder.setVendor = env.vendor;
        if (env.app) uriBuilder.setApp = env.app;
        if (env.subApp) uriBuilder.setSubApp = env.subApp;
      }

      targetUriStr = uriBuilder.toUri().toString();
    }

    var first = true;

    for (var param in params) {
      if (first) {
        targetUriStr += "?";
        first = false;
      } else {
        targetUriStr += "&";
      }

      targetUriStr += "".concat(param, "=").concat(params[param]);
    }

    return targetUriStr;
  },
  _detectIe: function _detectIe() {
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");

    if (msie > 0) {
      // IE 10
      return true;
    }

    var trident = ua.indexOf("Trident/");

    if (trident > 0) {
      // IE 11
      var rv = ua.indexOf("rv:");
      return true;
    }

    var edge = ua.indexOf("Edge/");

    if (edge > 0) {
      // Edge (IE 12+)
      return true;
    }

    return false;
  },
  customPostMultipartCmd: function customPostMultipartCmd(baseUri, ucName, dtoIn) {
    var commandUri = Calls.getCommandUri(baseUri, ucName); // NOTE Edge doesn't support 'new File()' so the value is Blob and we have to pass file name via FormData API.

    var formData = new FormData();
    if (dtoIn.data.sys) formData.append("sys.rev", dtoIn.data.sys.rev);
    if (dtoIn.data.code) formData.append("code", dtoIn.data.code);

    if (Array.isArray(dtoIn.data.tagList)) {
      dtoIn.data.tagList.forEach(function (tag, index) {
        formData.append("tagList[" + index + "]", tag);
      });
    } // file must be set to form data at last due to parsing on the server. All data appended after the file won't be parsed on the server
    // by default data is sorted by uuApp client but this doesn't work in IE where FormData doesn't have proper API.


    if (dtoIn.data.data) {
      formData.append("data", dtoIn.data.data, dtoIn.data.data.name);
    }

    var adjustedDtoIn = _objectSpread({}, dtoIn, {
      data: formData
    });

    Calls.call("post", commandUri.toString(), adjustedDtoIn, {
      requestTimeout: 0,
      // set no timeout when uploading
      headers: {
        "content-type": "multipart/form-data"
      }
    });
  },
  customPostCmd: function customPostCmd(baseUri, ucName, dtoIn) {
    var commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.call("post", commandUri.toString(), dtoIn);
  },
  customGetCmd: function customGetCmd(baseUri, ucName, dtoIn) {
    var commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.call("get", commandUri.toString(), dtoIn);
  },
  customGetNotTransformedCmd: function customGetNotTransformedCmd(baseUri, ucName, dtoIn) {
    var commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.callWithHeader("get", commandUri.toString(), dtoIn, {
      transformResponse: false
    }, "content-type");
  }
};
var _default = Calls;
exports.default = _default;