import * as UU5 from "uu5g04";
import Config from "../config/config.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import Css from "../helpers/css.js";

import UpdateFileForm from "./update-file-form.js";
import UpdateBinaryMetaDataForm from "./update-binary-meta-data-form.js";
import DeleteFileForm from "./delete-file-form.js";
import PreviewFileForm from "./preview-file-form.js";
import ShareFileForm from "./share-file-form.js";
import DnDForm from "./dnd-form.js";
import Controls from "./controls.js";

import "./form-controller.less";

const FormController = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.CcrReaderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "FormController",
    classNames: {
      main: Config.CSS + "form-controller",
      modalHeader: Config.CSS + "form-controller-modal-header",
      alignRight: () => Css.css("text-align: right;")
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    settings: UU5.PropTypes.object,
    lsiLabels: UU5.PropTypes.object,
    allowCustomTags: UU5.PropTypes.bool,
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    onTagCreate: UU5.PropTypes.func,
    sizeLimit: UU5.PropTypes.number,
    outputMaxHeight: UU5.PropTypes.number,
    outputMaxWidth: UU5.PropTypes.number,
    outputQuality: UU5.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      settings: {},
      allowCustomTags: false,
      ignoreTags: undefined,
      onTagCreate: undefined,
      availableTags: undefined,
      sizeLimit: undefined,
      outputMaxHeight: undefined,
      outputMaxWidth: undefined,
      outputQuality: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._initialDomNode = null;
    return {
      forceRender: undefined
    };
  },

  componentDidMount() {
    // check whether we're in a modal window and use forceRender iff we're are
    // (to render our own modals over the current one)
    let node = this._initialDomNode;
    while (node && node.tagName && !node.classList.contains("uu5-bricks-modal")) node = node.parentNode;
    this.setState({ forceRender: !!(node && node.tagName) });
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  openDnDForm(fileList, onSave, formProps) {
    let modalContent = {
      header: (
        <UU5.Bricks.Div
          className={this.getClassName("modalHeader")}
          content={LsiHelper.getLsiComponent(this.props.lsiLabels.addBinariesFormHeader || Lsi.LSI_LABEL_ADD_BINARIES)}
        />
      ),
      content: (
        <DnDForm
          ref_={r => {
            this._currentForm = r;
          }}
          id={UU5.Common.Tools.generateUUID()}
          done={onSave}
          fileList={fileList}
          onCancel={this._closeModal}
          lsiLabels={this.props.lsiLabels}
          ignoreTags={this.props.ignoreTags}
          availableTags={this.props.availableTags}
          allowCustomTags={this.props.allowCustomTags}
          onTagCreate={this.props.onTagCreate}
          sizeLimit={this.props.sizeLimit}
          outputMaxHeight={this.props.outputMaxHeight}
          outputMaxWidth={this.props.outputMaxWidth}
          outputQuality={this.props.outputQuality}
          {...formProps}
        />
      ),
      onClose: () => this._closeModal(),
      footer: <Controls formComponent={this._getCurrentForm} className={this.getClassName(`alignRight`)} />,
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },

  openUpdateBinaryForm(file, binary, thumbnail, addThumbnail, removeThumbnail, onSuccess) {
    let modalContent = {
      header: (
        <UU5.Bricks.Div
          className={this.getClassName("modalHeader")}
          content={LsiHelper.getLsiComponent(this.props.lsiLabels.updateBinaryFormHeader)}
        />
      ),
      content: (
        <UpdateFileForm
          ref_={r => {
            this._currentForm = r;
          }}
          id={UU5.Common.Tools.generateUUID()}
          file={file}
          done={this._closeModal}
          thumbnail={thumbnail}
          addThumbnail={addThumbnail}
          removeThumbnail={removeThumbnail}
          binary={binary}
          onCancel={this._closeModal}
          onSuccess={onSuccess}
          baseUri={this.props.settings.baseUri}
          cmdUpdateBinaryData={this.props.settings.uuCmdUpdateBinaryData}
          cmdCreateThumbnail={this.props.settings.uuCmdCreateThumbnail}
          cmdUpdateThumbnailData={this.props.settings.uuCmdUpdateThumbnailData}
          cmdDeleteThumbnail={this.props.settings.uuCmdDeleteThumbnail}
          shouldSaveThumbnail={this.props.settings.thumbnailStrategy !== "none"}
          lsiLabels={this.props.lsiLabels}
          currentControls={this._getCurrentControls}
          outputMaxHeight={this.props.settings.outputMaxHeight}
          outputMaxWidth={this.props.settings.outputMaxWidth}
          outputQuality={this.props.settings.outputQuality}
          sizeLimit={this.props.sizeLimit}
        />
      ),
      onClose: this._closeModal,
      footer: (
        <Controls
          ref_={r => (this._currentControls = r)}
          formComponent={this._getCurrentForm}
          className={this.getClassName(`alignRight`)}
        />
      ),
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },

  openUpdateBinaryMetaDataForm(binary, onSuccess) {
    let modalContent = {
      header: (
        <UU5.Bricks.Div
          className={this.getClassName("modalHeader")}
          content={LsiHelper.getLsiComponent(this.props.lsiLabels.updateBinaryMetaDataFormHeader)}
        />
      ),
      content: (
        <UpdateBinaryMetaDataForm
          ref_={r => {
            this._currentForm = r;
          }}
          id={UU5.Common.Tools.generateUUID()}
          done={this._closeModal}
          binary={binary}
          onCancel={this._closeModal}
          onSuccess={onSuccess}
          baseUri={this.props.settings.baseUri}
          cmdUpdateBinary={this.props.settings.uuCmdUpdateBinary}
          currentControls={this._getCurrentControls}
          ignoreTags={this.props.ignoreTags}
          availableTags={this.props.availableTags}
          allowCustomTags={this.props.allowCustomTags}
          onTagCreate={this.props.onTagCreate}
        />
      ),
      onClose: () => this._closeModal(),
      footer: (
        <Controls
          ref_={r => (this._currentControls = r)}
          id={UU5.Common.Tools.generateUUID()}
          formComponent={this._getCurrentForm}
          className={this.getClassName(`alignRight`)}
        />
      ),
      sticky: false,
      size: "m",
      overflow: true
    };

    this._openModal(modalContent);
  },

  openDeleteBinaryForm(binary, thumbnail, removeThumbnail, onSuccess) {
    let modalContent = {
      header: (
        <UU5.Bricks.Div
          className={this.getClassName("modalHeader")}
          content={LsiHelper.getLsiComponent(this.props.lsiLabels.deleteBinaryFormHeader)}
        />
      ),
      content: (
        <DeleteFileForm
          ref_={r => {
            this._currentForm = r;
          }}
          id={UU5.Common.Tools.generateUUID()}
          binary={binary}
          filename={binary.filename}
          thumbnail={thumbnail}
          removeThumbnail={removeThumbnail}
          onSuccess={onSuccess}
          done={this._closeModal}
          onCancel={this._closeModal}
          baseUri={this.props.settings.baseUri}
          cmdDeleteBinary={this.props.settings.uuCmdDeleteBinary}
          cmdDeleteThumbnail={this.props.settings.uuCmdDeleteThumbnail}
          shouldSaveThumbnail={this.props.settings.thumbnailStrategy !== "none"}
          lsiLabels={this.props.lsiLabels}
          currentControls={this._getCurrentControls}
        />
      ),
      footer: (
        <Controls
          ref_={r => (this._currentControls = r)}
          formComponent={this._getCurrentForm}
          hasDelete
          className={this.getClassName(`alignRight`)}
        />
      ),
      onClose: () => this._closeModal(true),
      sticky: false,
      size: "m"
    };

    this._openModal(modalContent);
  },

  openPreviewBinaryForm(binary) {
    let modalContent = {
      header: <UU5.Bricks.Div className={this.getClassName("modalHeader")} content={binary.filename} />,
      content: (
        <PreviewFileForm
          ref_={r => (this._currentForm = r)}
          id={UU5.Common.Tools.generateUUID()}
          code={binary.code}
          done={this._closeModal}
          onCancel={this._closeModal}
          rev={binary.sys.rev}
          baseUri={this.props.settings.baseUri}
          cmdGetBinaryData={this.props.settings.uuCmdGetBinaryData}
        />
      ),
      onClose: () => this._closeModal(),
      sticky: false,
      size: "auto"
    };

    this._openModal(modalContent);
  },

  openShareBinaryForm(binary, type) {
    let modalContent = {
      header: (
        <UU5.Bricks.Div
          className={this.getClassName("modalHeader")}
          content={LsiHelper.getLsiComponent(this.props.lsiLabels.shareBinaryFormHeader)}
        />
      ),
      content: (
        <ShareFileForm
          ref_={r => {
            this._currentForm = r;
          }}
          id={UU5.Common.Tools.generateUUID()}
          binary={binary}
          settings={
            this.props.settings.sharingOptions[type]
              ? this.props.settings.sharingOptions[type]
              : this.props.settings.sharingOptions["default"]
          }
          done={this._closeModal}
          onCancel={this._closeModal}
        />
      ),
      footer: (
        <Controls
          formComponent={this._getCurrentForm}
          label={Lsi.LSI_LABEL_BUTTON_COPY}
          className={this.getClassName(`alignRight`)}
        />
      ),
      onClose: () => this._closeModal(),
      sticky: false,
      size: "l"
    };

    this._openModal(modalContent);
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _openModal(modalContent) {
    this._modal.open(modalContent);
  },

  _closeModal() {
    this._modal.close(false);
    setTimeout(() => this._currentControls && this._currentControls.setDisabledButton(false), 500);
    this._currentForm = null;
  },

  _getCurrentForm() {
    return this._currentForm;
  },

  _getCurrentControls() {
    return this._currentControls;
  },

  _setInitialDomNodeRef(ref) {
    this._initialDomNode = ref;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let { forceRender } = this.state;
    return forceRender === undefined ? (
      <div ref={this._setInitialDomNodeRef} />
    ) : (
      <UU5.Bricks.Modal ref={r => (this._modal = r)} forceRender={forceRender} controlled={false} />
    );
  }
  //@@viewOff:render
});

export default FormController;
