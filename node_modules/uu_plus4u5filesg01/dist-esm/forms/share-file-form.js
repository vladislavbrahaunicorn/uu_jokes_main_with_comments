import * as UU5 from "uu5g04";
import Config from "../config/config.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";

import "./share-file-form.less";

export const ShareFileForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.CcrReaderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "ShareFileForm",
    classNames: {
      main: Config.CSS + "share-file-form",
      radioLabel: Config.CSS + "share-file-form-radio-label"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    binary: UU5.PropTypes.object,
    done: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    settings: UU5.PropTypes.array
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      option: "1"
    };
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },

  hasUnsavedChanges() {
    return false;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _copyToClipboard(text) {
    let textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand("copy");
    } catch (err) {
      UU5.Common.Tools.warning("Oops, unable to copy", err);
    }
    document.body.removeChild(textArea);
  },

  _onSave() {
    this._embeddedText && this._copyToClipboard(this._embeddedText.getValue());
    this.props.done && this.props.done();

    this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
      .getAlertBus()
      .clearAlerts(() => {
        this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE) &&
          this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getAlertBus &&
          this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getAlertBus() &&
          this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
            .getAlertBus()
            .setAlert({
              content: LsiHelper.getLsiComponent(Lsi.LSI_LABEL_SHARE_BINARY_SUCCESS_CONFIRM_MSG),
              colorSchema: "success",
              closeTimer: 3000
            });
      });
  },

  _getOutput() {
    let output = this.props.settings[parseInt(this.state.option) - 1].value;

    let varScan = output.match(/\${[^(})]*}/g);

    if (varScan) {
      for (let i = 0; i < varScan.length; i++) {
        let attribute = varScan[i].substr(2, varScan[i].length - 3);
        let value = attribute.split(".").reduce(this._getVarOnKey, this.props.binary);

        output = output.replace(varScan[i], value !== undefined && value !== null ? value : "");
      }
    }

    return output;
  },

  _getVarOnKey(obj, i) {
    return obj[i];
  },

  _getChild() {
    let embeddedText = UU5.Common.Tools.findComponent("UuApp.DesignKit.EmbeddedText", {
      ref_: r => {
        this._embeddedText = r;
      },
      header: LsiHelper.getLsiComponent(Lsi.LSI_LABEL_FILE_MANAGER_SHARE_TEXT),
      level: 6,
      showCopyButton: false,
      codeStyle: this.props.settings[parseInt(this.state.option) - 1].codeStyle || "text",
      content: this._getOutput()
    });

    let radioValues = [];

    for (let i = 0; i < this.props.settings.length; i++) {
      radioValues.push({
        label: LsiHelper.getLsiComponent(this.props.settings[i].label),
        name: (i + 1).toString(),
        value: this.state.option === (i + 1).toString()
      });
    }

    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={({ component, values }) => this._onSave(component, values)}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
      >
        <UU5.Bricks.Div>
          <UU5.Bricks.Div
            content={LsiHelper.getLsiComponent(Lsi.LSI_LABEL_FILE_MANAGER_SHARE_RADIO_LABEL)}
            className={this.getClassName("radioLabel")}
          />
          <UU5.Forms.Radios
            value={radioValues}
            onChange={opt => {
              this.setState({ option: opt.value });
            }}
          />
          {embeddedText}
        </UU5.Bricks.Div>
      </UU5.Forms.Form>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default ShareFileForm;
