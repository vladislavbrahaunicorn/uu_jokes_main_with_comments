import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Calls from "../calls.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";

import "./delete-file-form.less";

const DeleteFileForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.CcrReaderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "DeleteFileForm",
    classNames: {
      main: Config.CSS + "delete-file-form"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    done: UU5.PropTypes.func,
    onSuccess: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    binary: UU5.PropTypes.object,
    thumbnail: UU5.PropTypes.object,
    removeThumbnail: UU5.PropTypes.func,
    baseUri: UU5.PropTypes.string,
    cmdDeleteBinary: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    cmdDeleteThumbnail: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    shouldSaveThumbnail: UU5.PropTypes.bool,
    lsiLabels: UU5.PropTypes.object,
    currentControls: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _onSave() {
    this.props.currentControls() && this.props.currentControls().setDisabledButton(true);
    const done = this.props.shouldSaveThumbnail && this.props.thumbnail ? this._deleteThumbnail : this._saveDone;
    const fail = this._sendFail;
    const data = {
      code: this.props.binary.code
    };

    if (typeof this.props.cmdDeleteBinary === "function") {
      this.props.cmdDeleteBinary(data).then(done, fail);
    } else {
      const dtoIn = { data, done, fail };
      Calls.customPostCmd(this.props.baseUri, this.props.cmdDeleteBinary, dtoIn);
    }
  },

  _deleteThumbnail(dtoOut) {
    let dtoIn = {
      done: () => {
        this.props.removeThumbnail(this.props.thumbnail.code);
        this._saveDone(dtoOut);
      },
      fail: () => {
        UU5.Common.Tools.warning("Delete image thumbnail failed.");
        this._saveDone(dtoOut);
      },
      data: {
        code: this.props.thumbnail.code
      }
    };
    if (typeof this.props.cmdDeleteThumbnail === "function") {
      this.props.cmdDeleteThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
    } else {
      Calls.customPostCmd(this.props.baseUri, this.props.cmdDeleteThumbnail, dtoIn);
    }
  },

  _sendFail(opt) {
    this.props.currentControls() && this.props.currentControls().setDisabledButton(false);
    let msg = null;
    if (opt.error && opt.error["cause"] && opt.error["cause"]["uuAppErrorMap"]["uu-app-objectstore/invalidRevision"]) {
      let code = opt.error["code"] + "/invalidRevision";
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[code] || Lsi.commandErrors["default"]);
    } else {
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[opt.error["code"]] || Lsi.commandErrors["default"]);
    }
    this._form.getAlertBus().setAlert({ content: msg, colorSchema: "danger" });
  },

  _saveDone(dtoOut, justSave) {
    this.props.onSuccess && this.props.onSuccess(this.props.binary.code);
    this.props.done && this.props.done(dtoOut, justSave);
    this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE) &&
      this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
        .getAlertBus()
        .clearAlerts(() => {
          this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE) &&
            this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getAlertBus &&
            this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getAlertBus() &&
            this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
              .getAlertBus()
              .setAlert({
                content: LsiHelper.getLsiComponent(Lsi.LSI_LABEL_DELETE_BINARY_SUCCESS_CONFIRM_MSG),
                colorSchema: "success",
                closeTimer: 3000
              });
        });
  },

  _onValidate(component) {},

  _getChild() {
    let content;
    if (typeof this.props.lsiLabels.deleteBinaryFormContent === "string") {
      content = this.props.lsiLabels.deleteBinaryFormContent;
    } else {
      content = { ...this.props.lsiLabels.deleteBinaryFormContent };
    }
    if (typeof content === "string") {
      content = content.replace("${filename}", this.props.binary.filename);
    } else if (typeof content === "object") {
      for (let key in content) {
        if (content.hasOwnProperty(key)) {
          content[key] = content[key].replace("${filename}", this.props.binary.filename);
        }
      }
    }
    let text = LsiHelper.getLsiComponent(content);

    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={({ component, values }) => this._onSave(component, values)}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
      >
        <UU5.Bricks.P {...this.getMainPropsToPass()} content={text} />
      </UU5.Forms.Form>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default DeleteFileForm;
