import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import TagsSelect from "./tags-select.js";
import Css from "../helpers/css.js";
import { adjustFile, getMaxFileSize } from "../helpers/file.js";

import "./dnd-form.less";

const DnDBinaryForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "DnDBinaryForm",
    classNames: {
      main: Config.CSS + "dnd-form",
      row:
        Config.CSS +
        "dnd-form-row " +
        Css.css`
        padding: 24px 0;
      `,
      rowLabel: Config.CSS + "dnd-form-row-label",
      rowLabelRequired: Config.CSS + "dnd-form-row-label-required",
      formItem: Css.css`
        &&& {
          margin: 8px 0 0;
        }
      `
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    done: UU5.PropTypes.func,
    onSuccess: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    fileList: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.array]),
    lsiLabels: UU5.PropTypes.object,
    customCodesEnabled: UU5.PropTypes.bool,
    customCodesRequired: UU5.PropTypes.bool,
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    allowCustomTags: UU5.PropTypes.bool,
    onTagCreate: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      feedbacks: {},
      messages: {},
      files: this.props.fileList.map(file => ({ file, feedback: "initial", message: undefined }))
    };
  },

  componentDidMount() {
    setTimeout(() => this._first && this._first.focus(), 200); // TODO Remove / lower timeout when UU5 fixes animation of modal.
  },

  componentWillReceiveProps(nextProps) {
    if (this.props.fileList !== nextProps.fileList) {
      this.setState({ files: nextProps.fileList.map(file => ({ file, feedback: "initial", message: undefined })) });
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _registerFileInput(key, value) {
    this._validateFileSize(key, value);
  },

  _validateFileSize(key, file) {
    if (file) {
      // check file size after adjustment
      adjustFile(file, this.props).then(adjustedFile => {
        let stateObject = { ...this.state.files[key] };
        let newFiles = [...this.state.files];
        if (adjustedFile && adjustedFile.size > getMaxFileSize(this.props.sizeLimit) * 1024) {
          stateObject.feedback = "error";
          stateObject.message = LsiHelper.getLsiComponent(this.props.lsiLabels.fileSizeExceededError, {
            maxSize: getMaxFileSize(this.props.sizeLimit) + "KB"
          });
          stateObject.file = adjustedFile;
          newFiles[key] = stateObject;
          this.setState({ files: newFiles });
        } else {
          stateObject.feedback = "initial";
          stateObject.message = undefined;
          stateObject.file = adjustedFile;
          newFiles[key] = stateObject;
          this.setState({ files: newFiles });
        }
      });
    } else {
      let stateObject = { ...this.state.files[key] };
      let newFiles = [...this.state.files];
      stateObject.feedback = "initial";
      stateObject.message = undefined;
      stateObject.file = file;
      newFiles[key] = stateObject;
      this.setState({ files: newFiles });
    }
  },

  _onSave() {
    let values = this._form.getValues();
    let codes = [];
    let tags = [];

    for (let i = 0; i < this.props.fileList.length; i++) {
      codes.push(values["code" + i]);
      tags.push(values["tag" + i]);
    }

    this.props.done(codes, tags);
    this.props.onCancel();
  },

  _validateCode(opt) {
    if (opt.value && !opt.value.match(/^([a-zA-Z0-9_]){3,64}$/g)) {
      return {
        feedback: "error",
        message: LsiHelper.getLsiComponent(Lsi.LSI_INVALID_CODE),
        value: opt.value
      };
    }
  },

  _getRow(fileState, key) {
    const showTags = this.props.availableTags || this.props.allowCustomTags;

    return (
      <UU5.Bricks.Row key={"row" + key} className={this.getClassName("row")}>
        {this.props.customCodesEnabled ? (
          <UU5.Forms.Text
            label={LsiHelper.getLsiComponent(Lsi.LSI_LABEL_ADD_BINARY_CODE)}
            inputColWidth="s-12 m-7"
            labelColWidth="s-12 m-5"
            className={this.getClassName("formItem")}
            name={"code" + key}
            ref_={r => {
              key === 0 && (this._first = r);
            }}
            inputAttrs={{ autoComplete: "off" }}
            onValidate={this._validateCode}
            required={this.props.customCodesRequired}
            requiredMessage={
              this.props.customCodesRequired && LsiHelper.getLsiComponent(Lsi.LSI_LABEL_ADD_BINARY_CODE_REQUIRED)
            }
            controlled={false}
          />
        ) : null}
        {showTags ? (
          <TagsSelect
            label={LsiHelper.getLsiComponent(Lsi.LSI_LABEL_ADD_TAGS)}
            inputColWidth="s-12 m-7"
            labelColWidth="s-12 m-5"
            className={this.getClassName("formItem")}
            availableTags={this.props.availableTags}
            ignoreTags={this.props.ignoreTags}
            allowCustomTags={this.props.allowCustomTags}
            name={"tag" + key}
            displayHint={false}
            controlled={false}
          />
        ) : null}
        <UU5.Forms.File
          ref_={() => this._registerFileInput(key, fileState.file)}
          label={LsiHelper.getLsiComponent(this.props.lsiLabels.addBinaryFormFile)}
          inputColWidth="s-12 m-7"
          labelColWidth="s-12 m-5"
          className={this.getClassName("formItem")}
          name={"file" + key}
          value={fileState.file}
          feedback={fileState.feedback}
          message={fileState.message}
          onChange={({ value }) => this._validateFileSize(key, value)}
          required
        />
      </UU5.Bricks.Row>
    );
  },

  _getRows() {
    let rows = [];
    for (let i = 0; i < this.state.files.length; i++) {
      rows.push(this._getRow(this.state.files[i], i));
    }
    return rows;
  },

  _getChild() {
    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={({ component, values }) => this._onSave(component, values)}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
      >
        {this._getRows()}
      </UU5.Forms.Form>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default DnDBinaryForm;
