//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-forms";
import Config from "../config/config.js";
import Css from "../helpers/css.js";

import AutocompleteItems from "./autocomplete-items.js";
//@@viewOff:imports

export const TagsSelect = UU5.Common.VisualComponent.create({
  displayName: Config.TAG + "TagsSelect",
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Forms.TextInputMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "TagsSelect",
    classNames: {
      main: () =>
        Config.CSS +
        "TagsSelect " +
        Css.css("align-items: baseline; .uu5-bricks-button.uu5-forms-input-button { width: auto; padding: 0 16px; }"),
      tag: () =>
        Css.css(`
          && {
            margin-right: 4px;
            background-color: rgba(0, 0, 0, 0.1);
            color: rgba(0, 0, 0, .87);

            .uu5-bricks-icon {
              font-size: inherit;
              position: static;
              padding: 0;
            }
          }
        `),
      textButton: (props, state) =>
        Css.css(`
          input:-ms-input-placeholder { color: #bdbdbd; }
          ${props.tagListPosition === "top" ? "&&& { margin-bottom: 0px; }" : "margin-bottom: 8px;"}
          ${state.value && state.value.length ? "&&& { margin-top: 8px; }" : ""}
        `)
    },
    lsi: {
      addButtonLabel: {
        cs: "Přidat",
        en: "Add"
      },
      tagIsAlreadyAdded: {
        cs: 'Tag "$1" je již přidaný.',
        en: 'The tag "$1" is already added.'
      },
      customTagIsNotAllowed: {
        cs: "Není povolené přidávat vlastní tagy.",
        en: "It is not allowed to create custom tags."
      },
      tagIsNotAllowed: {
        cs: 'Tag "$1" není povolený.',
        en: 'The tag "$1" is not allowed.'
      },
      placeholder: {
        cs: "Název tagu",
        en: "Tag Name"
      },
      noTagInfoText: {
        cs: "Vložte tag pomocí vstupního pole níže",
        en: "Insert a tag via input field lower"
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    allowCustomTgas: UU5.PropTypes.bool,
    colorSchema: UU5.PropTypes.string,
    buttonColorSchema: UU5.PropTypes.string,
    onTagSelect: UU5.PropTypes.func,
    tagListPosition: UU5.PropTypes.oneOf(["top", "bottom"]),
    displayHint: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      availableTags: null,
      ignoreTags: null,
      allowCustomTags: false,
      onTagSelect: null,
      tagListPosition: "top",
      buttonColorSchema: "default",
      displayHint: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    // init cache
    this._removeFnCache = {};

    // create button configuration
    this._buttons = [
      {
        icon: "mdi-plus",
        colorSchema: this.props.buttonColorSchema,
        onClick: () => this._addTagValue(),
        content: (
          <UU5.Bricks.ScreenSize>
            <UU5.Bricks.ScreenSize.Item screenSize="xs">
              <UU5.Bricks.Icon icon="mdi-plus" />
            </UU5.Bricks.ScreenSize.Item>
            <UU5.Bricks.ScreenSize.Item screenSize="*">
              {this.getLsiComponent("addButtonLabel")}
            </UU5.Bricks.ScreenSize.Item>
          </UU5.Bricks.ScreenSize>
        )
      }
    ];
    return {
      textValue: "",
      focused: false
    };
  },

  componentWillMount() {
    // need to initialize value here because of input mixin
    this.setState({ value: this.props.value || [] });
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _buttons: undefined,
  _removeFnCache: undefined,

  _registerTextButton(textButton) {
    this._textButton = textButton;
  },

  _getRemoveFn(tag) {
    if (!this._removeFnCache[tag]) {
      // create new function into cache if doesn't exist
      this._removeFnCache[tag] = () => {
        this.setState(state => {
          let newValue = state.value.filter(item => item !== tag);
          if (newValue.length !== state.value.length) {
            // tag is removed from state => remove function from cache
            delete this._removeFnCache[tag];
            return { value: newValue };
          }
        });
      };
    }

    return this._removeFnCache[tag];
  },

  _addTagValue(value) {
    this.setState(state => {
      value = value === undefined ? state.textValue : value;
      if (!value) return;
      // validate value towards ignored tags
      if (this.props.ignoreTags && this.props.ignoreTags.indexOf(value) !== -1) {
        this._textButton.setError(this.getLsiValue("tagIsNotAllowed").replace("$1", value));
        return;
      }

      // validate value towards currently set tags
      if (state.value && state.value.indexOf(value) !== -1) {
        this._textButton.setWarning(this.getLsiValue("tagIsAlreadyAdded").replace("$1", value));
        return;
      }

      if (
        !this.props.allowCustomTags &&
        (!this.props.availableTags || this.props.availableTags.indexOf(value) === -1)
      ) {
        this._textButton.setError(this.getLsiValue("customTagIsNotAllowed"));
        return;
      }

      if (typeof this.props.onTagSelect === "function") {
        this.props.onTagSelect({ component: this, value: state.value, tag: value });
        return { textValue: "" };
      }

      // value is valid - add tag and clear input
      this._textButton.setInitial("");
      return { value: [...state.value, value], textValue: "" };
    });
  },

  _updateTextValue({ value }) {
    this.setState({
      textValue: value
    });
  },

  _onTextInputBlur() {
    this.setState({ focused: false });
  },

  _onTextInputFocus() {
    this.setState({ focused: true });
  },

  _renderTagList() {
    return this.state.value && this.state.value.length ? (
      this.state.value.map((tag, index) => (
        <UU5.Bricks.Label
          key={tag}
          colorSchema="custom"
          onClick={this._getRemoveFn(tag)}
          icon="mdi-close"
          className={this.getClassName("tag")}
        >
          {tag}
        </UU5.Bricks.Label>
      ))
    ) : this.props.displayHint ? (
      <span className={Css.css("color: rgba(0, 0, 0, .24)")}>{this.getLsiValue("noTagInfoText")}</span>
    ) : null;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let inputId = this.getId() + "-input";
    return (
      <UU5.Bricks.Div {...this._getInputAttrs()}>
        {this.getLabel(inputId)}
        {this.getInputWrapper(
          <>
            {this.props.tagListPosition === "top" && this._renderTagList()}
            <UU5.Forms.TextButton
              colorSchema={this.props.colorSchema}
              key="textButton"
              ref_={this._registerTextButton}
              buttons={this._buttons}
              actionOnEnter={true}
              inputAttrs={{
                onFocus: this._onTextInputFocus,
                onBlur: this._onTextInputBlur
              }}
              onChange={this._updateTextValue}
              inline={true}
              spacing={0}
              className={this.getClassName("textButton")}
              placeholder={this.getLsiValue("placeholder")}
              mainAttrs={{
                onKeyPress: e => {
                  if ((e.keyCode || e.which) === 13 && !e.shiftKey && !e.ctrlKey) {
                    e.preventDefault(); // prevent sending form
                  }
                }
              }}
              value={this.state.textValue}
            />
            <AutocompleteItems
              key="autocomplete-items"
              items={this.props.availableTags}
              filterValue={this.state.textValue}
              filterItems={this.state.value}
              shown={this.state.focused}
              onClick={this._addTagValue}
            />
            {this.props.tagListPosition !== "top" && this._renderTagList()}
          </>
        )}
      </UU5.Bricks.Div>
    );
  }
  //@@viewOff:render
});

export default TagsSelect;
