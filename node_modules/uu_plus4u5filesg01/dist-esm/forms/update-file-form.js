import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Calls from "../calls.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import { adjustFile, getMaxFileSize } from "../helpers/file.js";

import "./update-file-form.less";

const UpdateFileForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "UpdateFileForm",
    classNames: {
      main: Config.CSS + "update-file-form"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    done: UU5.PropTypes.func,
    onSuccess: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    addThumbnail: UU5.PropTypes.func,
    removeThumbnail: UU5.PropTypes.func,
    thumbnail: UU5.PropTypes.object,
    binary: UU5.PropTypes.object,
    file: UU5.PropTypes.object,
    baseUri: UU5.PropTypes.string,
    cmdUpdateBinaryData: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    cmdCreateThumbnail: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    cmdUpdateThumbnailData: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    cmdDeleteThumbnail: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    shouldSaveThumbnail: UU5.PropTypes.bool,
    lsiLabels: UU5.PropTypes.object,
    currentControls: UU5.PropTypes.func,
    outputMaxHeight: UU5.PropTypes.number,
    outputMaxWidth: UU5.PropTypes.number,
    outputQuality: UU5.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {},
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _callUpdateBinary(values, imageFile) {
    let isImage = values.data.type && values.data.type.match(/image\//);
    let done;
    if (!this.props.shouldSaveThumbnail || (!isImage && !this.props.thumbnail)) {
      done = this._saveDone;
    } else if (!isImage && this.props.thumbnail) {
      done = this._deleteThumbnail;
    } else {
      done = this._saveThumbnail;
    }
    const fail = this._sendFail;
    const data = {
      code: this.props.binary.code,
      data: imageFile
    };
    data.sys = { rev: this.props.binary.sys.rev };

    if (typeof this.props.cmdUpdateBinaryData === "function") {
      this.props.cmdUpdateBinaryData(data).then(done, fail);
    } else {
      const dtoIn = { data, done, fail };
      Calls.customPostMultipartCmd(this.props.baseUri, this.props.cmdUpdateBinaryData, dtoIn);
    }
  },

  _onSave() {
    let values = this._form.getValues();
    adjustFile(values.data, this.props).then(
      file => {
        this._callUpdateBinary(values, file);
      },
      error => {
        this._sendFail(error);
      }
    );
  },

  _saveThumbnail(dtoOut) {
    let values = this._form.getValues();
    adjustFile(values.data, { outputMaxHeight: 512, outputMaxWidth: 512, outputQuality: 0.85 }).then(file => {
      let dtoIn = {
        done: thumbnailDtoOut => {
          this.props.addThumbnail(thumbnailDtoOut);
          this._saveDone(dtoOut);
        },
        fail: () => {
          UU5.Common.Tools.warning("Saving image thumbnail failed.");
          this._saveDone(dtoOut);
        },
        data: {
          code: (dtoOut.code.length > 61 ? dtoOut.code.substr(0, 61) : dtoOut.code) + "_th",
          data: file
        }
      };
      if (this.props.thumbnail) {
        dtoIn.data.sys = { rev: this.props.thumbnail.sys.rev };
        if (typeof this.props.cmdUpdateThumbnailData === "function") {
          this.props.cmdUpdateThumbnailData(dtoIn.data).then(dtoIn.done, dtoIn.fail);
        } else {
          Calls.customPostMultipartCmd(this.props.baseUri, this.props.cmdUpdateThumbnailData, dtoIn);
        }
      } else {
        if (typeof this.props.cmdCreateThumbnail === "function") {
          this.props.cmdCreateThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
        } else {
          if (typeof this.props.cmdCreateThumbnail === "function") {
            this.props.cmdCreateThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
          } else {
            Calls.customPostMultipartCmd(this.props.baseUri, this.props.cmdCreateThumbnail, dtoIn);
          }
        }
      }
    });
  },

  _deleteThumbnail(dtoOut) {
    let dtoIn = {
      done: () => {
        this.props.removeThumbnail(this._getSafeThumbnailCode(this.props.binary.code));
        this._saveDone(dtoOut);
      },
      fail: () => {
        UU5.Common.Tools.warning("Delete image thumbnail failed.");
        this._saveDone(dtoOut);
      },
      data: {
        code: this._getSafeThumbnailCode(this.props.binary.code)
      }
    };
    if (typeof this.props.cmdDeleteThumbnail === "function") {
      this.props.cmdDeleteThumbnail(dtoIn.data).then(dtoIn.done, dtoIn.fail);
    } else {
      Calls.customPostCmd(this.props.baseUri, this.props.cmdDeleteThumbnail, dtoIn);
    }
  },

  _getSafeThumbnailCode(code) {
    return (code.length > 61 ? code.substr(0, 61) : code) + "_th";
  },

  _sendFail(opt) {
    this.props.currentControls() && this.props.currentControls().setDisabledButton(false);
    let msg = null;
    if (!opt.error) {
      msg = opt.toString();
    } else if (
      opt.error &&
      opt.error["cause"] &&
      opt.error["cause"]["uuAppErrorMap"]["uu-app-objectstore/invalidRevision"]
    ) {
      let code = opt.error["code"] + "/invalidRevision";
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[code] || Lsi.commandErrors["default"]);
    } else {
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[opt.error["code"]] || Lsi.commandErrors["default"]);
    }
    this._form.getAlertBus().setAlert({ content: msg, colorSchema: "danger" });
  },

  _saveDone(dtoOut, justSave) {
    this.props.onSuccess && this.props.onSuccess(dtoOut);
    this.props.done && this.props.done(dtoOut, justSave);
    this._fileForm.disable();
  },

  _registerFileInput(input) {
    this._fileForm = input;
    this._validateFileSize({ value: this.props.file });
  },

  _validateFileSize({ value }, props = this.props) {
    if (value) {
      // check file size after adjustment
      adjustFile(value, props).then(file => {
        if (file && file.size > getMaxFileSize(props.sizeLimit) * 1024) {
          this._fileForm.setError(
            LsiHelper.getLsiComponent(props.lsiLabels.fileSizeExceededError, {
              maxSize: getMaxFileSize(props.sizeLimit) + "KB"
            }),
            value
          );
        } else {
          this._fileForm.setInitial(null, value);
        }
      });
    } else {
      this._fileForm.setInitial(null, value);
    }
  },

  _getChild() {
    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={({ component, values }) => this._onSave(component, values)}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
      >
        <UU5.Forms.File
          label={LsiHelper.getLsiComponent(this.props.lsiLabels.addBinaryFormFile)}
          controlled={false}
          required
          name="data"
          requiredMessage={LsiHelper.getLsiComponent(this.props.lsiLabels.addBinaryFormFileRequired)}
          ref_={this._registerFileInput}
          onChange={this._validateFileSize}
        />
      </UU5.Forms.Form>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default UpdateFileForm;
