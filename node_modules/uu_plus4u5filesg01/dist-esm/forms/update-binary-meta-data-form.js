import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Calls from "../calls.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import TagsSelect from "./tags-select.js";

import "./add-file-form.less";

const UpdateBinaryMetaDataForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "UpdateBinaryForm",
    classNames: {
      main: Config.CSS + "update-binary-form"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    done: UU5.PropTypes.func,
    onSuccess: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    binary: UU5.PropTypes.object.isRequired,
    baseUri: UU5.PropTypes.string,
    cmdUpdateBinary: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]).isRequired,
    currentControls: UU5.PropTypes.func.isRequired,
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    allowCustomTags: UU5.PropTypes.bool,
    onTagCreate: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _callUpdateBinary(values) {
    const data = {
      code: this.props.binary.code,
      tagList: values.tagList || [],
      sys: this.props.binary.sys
    };
    const done = this._saveDone;
    const fail = this._sendFail;

    if (typeof this.props.cmdUpdateBinary === "function") {
      this.props.cmdUpdateBinary(data).then(done, fail);
    } else {
      const dtoIn = { data, done, fail };
      Calls.customPostCmd(this.props.baseUri, this.props.cmdUpdateBinary, dtoIn);
    }
  },

  _onSave({ component, values }) {
    this.props.currentControls() && this.props.currentControls().setDisabledButton(true);
    this._callUpdateBinary(values);
  },

  _sendFail(opt) {
    this.props.currentControls() && this.props.currentControls().setDisabledButton(false);
    let msg = null;
    if (!opt.error) {
      msg = opt.toString();
    } else if (
      opt.error &&
      opt.error["cause"] &&
      opt.error["cause"]["uuAppErrorMap"]["uu-app-objectstore/invalidRevision"]
    ) {
      let code = opt.error["code"] + "/invalidRevision";
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[code] || Lsi.commandErrors["default"]);
    } else {
      msg = LsiHelper.getLsiComponent(Lsi.commandErrors[opt.error["code"]] || Lsi.commandErrors["default"]);
    }
    this._form.getAlertBus().setAlert({ content: msg, colorSchema: "danger" });
  },

  _saveDone(dtoOut, justSave) {
    // check new tags and call onTagCreate
    if (this.props.onTagCreate && dtoOut.tagList) {
      let newTags = [];
      let originalTagList = this.props.binary.tagList || [];
      let availableTags = this.props.availableTags || [];
      if (!originalTagList && !availableTags.length) {
        newTags = [...dtoOut.tagList];
      } else {
        dtoOut.tagList.forEach(tag => {
          if (originalTagList.indexOf(tag) === -1 && availableTags.indexOf(tag) === -1) {
            newTags.push(tag);
          }
        });
      }

      if (newTags.length) {
        this.props.onTagCreate(newTags);
      }
    }
    this.props.onSuccess && this.props.onSuccess(dtoOut);
    this.props.done && this.props.done(dtoOut, justSave);
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={this._onSave}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
        spacing={8}
      >
        <TagsSelect
          label={<UU5.Bricks.Lsi lsi={Lsi.LSI_LABEL_ADD_TAGS} />}
          labelAlignment="left"
          availableTags={this.props.availableTags}
          ignoreTags={this.props.ignoreTags}
          allowCustomTags={this.props.allowCustomTags}
          name="tagList"
          value={this.props.binary.tagList}
          labelColWidth="xs-12"
          inputColWidth="xs-12"
          tagListPosition="bottom"
        />
      </UU5.Forms.Form>
    );
  }
  //@@viewOff:render
});

export default UpdateBinaryMetaDataForm;
