/**
 * Server calls of application client.
 */
import { Client, Uri } from "uu_appg01";
import * as UU5 from "uu5g04";

let Calls = {
  APP_BASE_URI: location.protocol + "//" + location.host + UU5.Environment.getAppBasePath(),

  call(method, url, dtoIn, clientOptions) {
    if (this._detectIe() && method === "get") {
      dtoIn.data = dtoIn.data || {};
      dtoIn.data.Msiets = new Date().getTime();
    }
    Client[method](url, dtoIn.data || null, clientOptions).then(
      response => dtoIn.done(response.data),
      response => dtoIn.fail(response)
    );
  },

  callWithHeader(method, url, dtoIn, clientOptions, header) {
    Client[method](url, dtoIn.data || null, clientOptions).then(
      response => dtoIn.done(response.data, response.headers(header)),
      response => dtoIn.fail(response)
    );
  },

  getCommandUri(baseUri, aUseCase, params = {}) {
    // useCase <=> e.g. "getSomething" or "sys/getSomething"
    // add useCase to the application base URI
    // NOTE Using string concatenation instead of UriBuilder to support also URLs
    // that don't conform to uuUri specification.
    if (baseUri && !baseUri.match(/\/$/)) {
      baseUri = baseUri + "/";
    }
    let targetUriStr = (baseUri || Calls.APP_BASE_URI) + aUseCase.replace(/^\/+/, "");

    // override tid / awid if it's present in environment (use also its gateway in such case)
    let env = UU5.Environment;

    if (env.tid || env.awid || env.vendor || env.app) {
      let uriBuilder = Uri.UriBuilder.parse(targetUriStr);
      if (env.tid || env.awid) {
        if (env.gatewayUri) uriBuilder.setGateway = env.gatewayUri;
        if (env.tid) uriBuilder.setTid = env.tid;
        if (env.awid) uriBuilder.setAwid = env.awid;
      }
      if (env.vendor || env.app) {
        if (env.vendor) uriBuilder.setVendor = env.vendor;
        if (env.app) uriBuilder.setApp = env.app;
        if (env.subApp) uriBuilder.setSubApp = env.subApp;
      }
      targetUriStr = uriBuilder.toUri().toString();
    }
    let first = true;
    for (let param in params) {
      if (first) {
        targetUriStr += "?";
        first = false;
      } else {
        targetUriStr += "&";
      }
      targetUriStr += `${param}=${params[param]}`;
    }

    return targetUriStr;
  },

  _detectIe() {
    let ua = window.navigator.userAgent;

    let msie = ua.indexOf("MSIE ");
    if (msie > 0) {
      // IE 10
      return true;
    }

    let trident = ua.indexOf("Trident/");
    if (trident > 0) {
      // IE 11
      let rv = ua.indexOf("rv:");
      return true;
    }

    let edge = ua.indexOf("Edge/");
    if (edge > 0) {
      // Edge (IE 12+)
      return true;
    }

    return false;
  },

  customPostMultipartCmd(baseUri, ucName, dtoIn) {
    let commandUri = Calls.getCommandUri(baseUri, ucName);
    // NOTE Edge doesn't support 'new File()' so the value is Blob and we have to pass file name via FormData API.
    let formData = new FormData();
    if (dtoIn.data.sys) formData.append("sys.rev", dtoIn.data.sys.rev);
    if (dtoIn.data.code) formData.append("code", dtoIn.data.code);
    if (Array.isArray(dtoIn.data.tagList)) {
      dtoIn.data.tagList.forEach((tag, index) => {
        formData.append("tagList[" + index + "]", tag);
      });
    }

    // file must be set to form data at last due to parsing on the server. All data appended after the file won't be parsed on the server
    // by default data is sorted by uuApp client but this doesn't work in IE where FormData doesn't have proper API.
    if (dtoIn.data.data) {
      formData.append("data", dtoIn.data.data, dtoIn.data.data.name);
    }
    let adjustedDtoIn = {
      ...dtoIn,
      data: formData
    };

    Calls.call("post", commandUri.toString(), adjustedDtoIn, {
      requestTimeout: 0, // set no timeout when uploading
      headers: {
        "content-type": "multipart/form-data"
      }
    });
  },

  customPostCmd(baseUri, ucName, dtoIn) {
    let commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.call("post", commandUri.toString(), dtoIn);
  },

  customGetCmd(baseUri, ucName, dtoIn) {
    let commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.call("get", commandUri.toString(), dtoIn);
  },

  customGetNotTransformedCmd(baseUri, ucName, dtoIn) {
    let commandUri = Calls.getCommandUri(baseUri, ucName);
    Calls.callWithHeader("get", commandUri.toString(), dtoIn, { transformResponse: false }, "content-type");
  }
};

export default Calls;
