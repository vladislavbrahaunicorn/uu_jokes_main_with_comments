import * as UU5 from "uu5g04";
import "uu5imagingg01";

export const adjustFile = (data, { outputQuality, outputMaxWidth, outputMaxHeight } = {}) => {
  return new Promise((resolve, reject) => {
    let isImage = data.type && data.type.match(/image\//);

    // we adjust only images and adjustment must be set via props
    // so if file is not an image or is not set any of props changing output quality
    if (!isImage || (!outputQuality && !outputMaxHeight && !outputMaxWidth)) {
      return resolve(data);
    }

    // handle output quality
    new Promise(resolveOutputQuality => {
      if (outputQuality) {
        UU5.Imaging.Adjustment.changeType(data, "jpg", outputQuality).then(resultOutputQuality =>
          resolveOutputQuality(resultOutputQuality.imageFile)
        );
      } else {
        // no output quality change is needed
        resolveOutputQuality(data);
      }
    }).then(imageFile => {
      // handle resize of a image if is needed
      if (outputMaxWidth || outputMaxHeight) {
        UU5.Imaging.Adjustment.resizeMax(imageFile, outputMaxWidth, outputMaxHeight).then(
          resultResizeMax => {
            resolve(resultResizeMax.imageFile);
          },
          resultResizeMaxError => {
            reject({ error: Object.assign(resultResizeMaxError, { code: "resizeFailed" }) });
          }
        );
      } else {
        // no resize is needed
        resolve(imageFile);
      }
    });
  });
};

const MAX_SIZE = 128 * 1024;

export const getMaxFileSize = sizeLimit => {
  return sizeLimit ? Math.min(MAX_SIZE, sizeLimit) : MAX_SIZE;
};

export default { adjustFile, getMaxFileSize };
