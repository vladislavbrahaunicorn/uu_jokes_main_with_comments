import * as UU5 from "uu5g04";
import Config from "../config/config.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import Css from "../helpers/css.js";
import TagsSelect from "../forms/tags-select.js";

import "./file-manager-type-filter.less";

const FileManagerTypeFilter = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "FileManagerTypeFilter",
    classNames: {
      main: Config.CSS + "file-manager-type-filter",
      leftCol: "left-col",
      rightCol: "right-col",
      label: "label",
      addTagFilterPanel: () =>
        Css.css(`
          .uu5-bricks-panel-header {
            display: none;
          }

          .uu5-bricks-panel-body-body {
            padding: 0;
          }
        `),
      filterButton: () =>
        Css.css(`
          && {
            border-radius: 16px;
          }

          margin: 0 0 8px 8px;
          
          &:last-child{
            margin-right: 0px;
          }
        `),
      addTagFilterSelect: () =>
        Css.css(`
          &&& {
            margin: 0;
          }

          .uu5-forms-input-wrapper > span:first-child {
            display: none;
          }

          .uu5-forms-input-wrapper > .uu5-forms-text-button.uu5-forms-text-button {
            margin-top: 0;
          }
        `),
      rightTagFilterPanelColumn: () => Css.css("text-align: right; && { padding: 0; }")
    },
    lsi: {
      addFilterButtonLabel: {
        cs: "Filtrovat podle tagu",
        en: "Filter by tag"
      },
      tagFilterButtonPrefix: {
        cs: "Tag: ",
        en: "Tag: "
      }
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    controller: UU5.PropTypes.object,
    fileTypeFilters: UU5.PropTypes.object,
    tags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    displayFilterByTags: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    let fileTypeFilters = {
      image: {
        label: Lsi.LSI_LABEL_FILE_MANAGER_FILTER_IMAGE,
        active: false,
        types: ["image", "svg"]
      },
      text: {
        label: Lsi.LSI_LABEL_FILE_MANAGER_FILTER_TEXT,
        active: false,
        types: ["text", "xml", "pdf"]
      },
      other: {
        label: Lsi.LSI_LABEL_FILE_MANAGER_FILTER_OTHER,
        active: false,
        types: ["other", "archive", "json"]
      }
    };

    return {
      fileTypeFilters: fileTypeFilters,
      tags: null,
      displayFilterByTags: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._bs = {};
    this._filters = {};
    this.props.fileTypeFilters &&
      Object.keys(this.props.fileTypeFilters).forEach(key => {
        if (this.props.fileTypeFilters.hasOwnProperty(key)) {
          if (this.props.fileTypeFilters[key].active) {
            for (let i = 0; i < this.props.fileTypeFilters[key].types.length; i++) {
              this._filters[this.props.fileTypeFilters[key].types[i]] = { visible: true };
            }
          }
        }
      });
    return {
      buttons: this.props.fileTypeFilters,
      tagFilters: []
    };
  },

  componentWillMount() {
    this.props.controller.registerBar("typeFilter", this);
  },

  componentDidMount() {
    this._buildFilter();
  },

  componentWillUnmount() {
    this.props.controller.unregisterBar("typeFilter");
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _filterFn(item) {
    return this._filters[LsiHelper.getLsiComponent(item.type).toLowerCase()];
  },

  _buildFilter() {
    let classes = [];
    Object.entries(this._filters).forEach(([key, value]) => {
      if (value.visible) classes.push(key);
    });
    if (classes.length > 0) {
      let r = (
        <UU5.Bricks.Span>
          <UU5.Bricks.Icon icon="mdi-paw" />
          {"\xA0"}
          {classes.join(",\xA0")}
        </UU5.Bricks.Span>
      );
      this.props.controller.addFilterExt("type", r, null, this._filterFn, null);
    } else {
      this.props.controller.removeFilterExt("type");
    }
  },

  _handleClick(type) {
    return e => {
      let buttons = this.state.buttons;
      buttons[type].active = !buttons[type].active;
      this.setState({ buttons: buttons });
      {
        if (!buttons[type].active) {
          for (let i = 0; i < buttons[type].types.length; i++) {
            delete this._filters[buttons[type].types[i]];
          }
        } else {
          for (let i = 0; i < buttons[type].types.length; i++) {
            this._filters[buttons[type].types[i]] = { visible: true };
          }
        }
        this._buildFilter();
      }
    };
  },

  _registerBS(type, r) {
    this._bs[type] = r;
  },

  _registerAddTagFilterPanel(panel) {
    this._addTagFilterPanel = panel;
  },

  _shouldRenderCancel() {
    let should = false;
    if (this.state.tagFilters && this.state.tagFilters.length) {
      return true;
    }
    for (let button in this.state.buttons) {
      if (this.state.buttons[button].active) {
        should = true;
        break;
      }
    }
    return should;
  },

  _clearFilter() {
    let buttons = this.state.buttons;
    for (let button in buttons) {
      buttons[button].active = false;
    }
    this._filters = {};
    this._buildFilter();
    this.setState(state => {
      // clean all filters in tagFilter
      state.tagFilters.forEach(tag => this.props.controller.removeFilterExt("tag-" + tag));
      return { buttons: buttons, tagFilters: [] };
    });
  },

  _toggleAddFilterPanel() {
    this._addTagFilterPanel && this._addTagFilterPanel.toggle();
  },

  _closeTagFilterPanel() {
    this._addTagFilterPanel && this._addTagFilterPanel.collapse();
  },

  _addTagFilter({ tag }) {
    this.setState(state => {
      if (state.tagFilters.indexOf(tag) === -1) {
        this.props.controller.addFilterExt("tag-" + tag, tag, null, item => {
          return item.binary.tagList && item.binary.tagList.indexOf(tag) !== -1;
        });
        return { tagFilters: [...state.tagFilters, tag] };
      }
    });
  },

  _removeTagFilter(component) {
    const tag = component.props._tag;
    this.setState(state => {
      this.props.controller.removeFilterExt("tag-" + tag);
      return { tagFilters: state.tagFilters.filter(filterTag => filterTag !== tag) };
    });
  },

  _filterIgnoreTags(item) {
    return (
      !item.binary.tagList ||
      !Array.isArray(this.props.ignoreTags) ||
      item.binary.tagList.every(tag => this.props.ignoreTags.indexOf(tag) === -1)
    );
  },

  _renderButtonSwitches() {
    let buttons = [];

    for (let key in this.state.buttons) {
      buttons.push(
        <UU5.Bricks.ButtonSwitch
          key={"switch_button_" + key}
          className={this.getClassName("filterButton")}
          props={{ onClick: this._handleClick(key) }}
          ref_={r => this._registerBS(key, r)}
          switchedOn={this.state.buttons[key].active}
          content={LsiHelper.getLsiComponent(this.state.buttons[key].label)}
          onProps={{ colorSchema: "primary" }}
          offProps={{ bgStyle: "outline", colorSchema: "primary" }}
        />
      );
    }

    return buttons;
  },

  _renderTagFilters() {
    if (!this.props.tags || !this.props.displayFilterByTags) return null;
    return (
      <>
        {this.state.tagFilters.map(tag => (
          <UU5.Bricks.Button
            _tag={tag}
            key={tag}
            className={this.getClassName("filterButton")}
            colorSchema="primary"
            toggled
            onClick={this._removeTagFilter}
          >
            {this.getLsiComponent("tagFilterButtonPrefix")}
            <UU5.Bricks.Span>{tag}</UU5.Bricks.Span>
            <UU5.Bricks.Icon icon="mdi-close" />
          </UU5.Bricks.Button>
        ))}
        <UU5.Bricks.Button
          key="addTagFilter"
          className={this.getClassName("filterButton")}
          onClick={this._toggleAddFilterPanel}
          colorSchema="primary"
          bgStyle="outline"
        >
          <UU5.Bricks.Icon icon="mdi-plus" />
          {this.getLsiComponent("addFilterButtonLabel")}
        </UU5.Bricks.Button>
      </>
    );
  },

  _getAvailableTags() {
    // filter all already added filters
    return this.props.tags.filter(tag => this.state.tagFilters.indexOf(tag) === -1);
  },

  _getChild() {
    return (
      <>
        <UU5.Bricks.Div {...this.getMainPropsToPass()}>
          <UU5.Bricks.Div className={this.getClassName("leftCol")}>
            <UU5.Bricks.Span
              content={LsiHelper.getLsiComponent(Lsi.LSI_LABEL_FILE_MANAGER_FILTER_HEADER)}
              className={this.getClassName("label")}
            />
            {this._renderButtonSwitches()}
            {this._renderTagFilters()}
          </UU5.Bricks.Div>

          {this._shouldRenderCancel() && (
            <UU5.Bricks.Div className={this.getClassName("rightCol")}>
              <UU5.Bricks.Button
                bgStyle="transparent"
                onClick={this._clearFilter}
                content={LsiHelper.getLsiComponent(Lsi.LSI_LABEL_FILE_MANAGER_FILTER_RESET)}
              />
            </UU5.Bricks.Div>
          )}
        </UU5.Bricks.Div>
        <UU5.Bricks.Panel className={this.getClassName("addTagFilterPanel")} ref_={this._registerAddTagFilterPanel}>
          <UU5.Bricks.Well colorSchema="blue">
            <UU5.Bricks.Row>
              <UU5.Bricks.Column colWidth="xs-10 s-8 m-6 l-4">
                <TagsSelect
                  availableTags={this._getAvailableTags()}
                  allowCustomTags={true}
                  buttonColorSchema="blue"
                  onTagSelect={this._addTagFilter}
                  className={this.getClassName("addTagFilterSelect")}
                />
              </UU5.Bricks.Column>
              <UU5.Bricks.Column colWidth="xs-2 s-4 m-6 l-8" className={this.getClassName("rightTagFilterPanelColumn")}>
                <UU5.Bricks.Button onClick={this._closeTagFilterPanel}>
                  <UU5.Bricks.Icon icon="mdi-chevron-up" />
                </UU5.Bricks.Button>
              </UU5.Bricks.Column>
            </UU5.Bricks.Row>
          </UU5.Bricks.Well>
        </UU5.Bricks.Panel>
      </>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default FileManagerTypeFilter;
