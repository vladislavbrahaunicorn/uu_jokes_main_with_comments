import UU5 from "uu5g04";
import "uu5g04-bricks";

import Config from "../config/config.js";
import Css from "../helpers/css.js";

const TagList = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "TagList",
    classNames: {
      main: (props, state) =>
        Css.css(`
          line-height: 22px;
          position: relative;
          ${state.showAllTags ? "max-height: auto;" : "max-height: 44px;"}
          ${state.showAllTags ? "flex-basis: auto;" : "flex-basis: 44px;"}
          overflow: hidden;
        `),
      resize: () =>
        Css.css(`
          display: flex;
          flex-direction: column;
          align-items: stretch;
        `),
      tag: () =>
        Css.css(`
          cursor: default;
          background-color: rgba(0, 0, 0, 0.1);
          color: rgba(0, 0, 0, .87);
          margin-right: 4px;
          margin-bottom: 2px;
          vertical-align: top;

          .uu5-bricks-icon {
            display: none;
          }
        `),
      tagInvisible: () =>
        Css.css(`
          visibility: hidden;
        `),
      expander: () =>
        Css.css(`
          cursor: pointer;
        `)
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    items: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    onTagExpand: UU5.PropTypes.func,
    height: UU5.PropTypes.number,
    width: UU5.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      items: undefined,
      onTagExpand: null,
      height: 0,
      width: 0
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._node = UU5.Common.Reference.create();
    this._updateState = "initial";
    return {
      width: this.props.width,
      height: this.props.height,
      hiddenCount: 0,
      showAllTags: false
    };
  },

  componentWillReceiveProps(nextProps) {
    let newState = {};
    if (nextProps.height) {
      if (Math.abs(nextProps.height - this.props.height) >2 ) {
        newState.height = nextProps.height;
      }
    }
    if (nextProps.width) {
      newState.width = nextProps.width;
    }

    if (Object.keys(newState) !== 0) {
      this.setState(newState, () => {
        if (typeof nextProps.onTagExpand === "function") {
          nextProps.onTagExpand();
        }
      });
    }

    // NOTE If converted to getDerivedStateFromProps then add condition like "this.props !== nextProps"
    // (we want this to do only if props changed, not if just state changed).
    this._updateState = "initial";
  },

  componentDidMount() {
    this._updateHiddenTags();
  },

  componentDidUpdate() {
    this._updateHiddenTags();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _updateHiddenTags() {
    if (!this._node.current) return;
    if (this.state.showAllTags) return;
    let hiddenCount = 0;

    let scrollHeight = this._node.current.scrollHeight;
    let rect = this._node.current.getBoundingClientRect();
    let expander;

    if (scrollHeight > rect.height) {
      // TODO optimalize algorithm to find first hidden object

      // filter all nodes that are not created from props.tags
      const tagClassName = this.getClassName("tag");
      const expanderClassName = this.getClassName("expander");
      const childNodes = [];
      for (let i = 0; i < this._node.current.childNodes.length; i++) {
        let node = this._node.current.childNodes[i];
        if (node.className.indexOf(tagClassName) !== -1) {
          if (node.className.indexOf(expanderClassName) === -1) {
            childNodes.push(node);
          } else {
            expander = node;
          }
        }
      }

      // measure all tags and count how many is visible
      for (let i = 0; i < childNodes.length; i++) {
        let nodeRect = childNodes[i].getBoundingClientRect();

        // node is not fully (nearly fully) visible; -4px reserved if container was not high enough / browser uses weird font sizes / ...
        if (nodeRect.bottom - 4 >= rect.bottom) {
          // find first invisible node
          hiddenCount = childNodes.length - i;
          break;
        }
      }
    }

    // NOTE There's a potential never-ending update loop:
    // 1. Assume several labels, 1st is short (so expander can be near it), 2nd is long (expander would be wrapped on the next line).
    // 2. At some point, 1st+2nd+expander will be rendered, but expader will be wrapped onto the 3rd line and therefore be hidden.
    // 3. So hiddenCount gets increased => 1st+expander+2nd will be rendered, but 1st+expander are short and are on single line,
    //    and 2nd is alone on the 2nd line, i.e. it is visible => hiddenCount gets decreased, leading to step 2.
    this.setState(state => {
      if (state.hiddenCount === hiddenCount) {
        // count of hidden nodes does not chnaged -> check if expander is visible otherwise is not needed to change state
        if (expander && expander.getBoundingClientRect().bottom - 4 >= rect.bottom) {
          // expander is hidden -> increase count of hidden nodes to rerender expander to new position
          if (this._updateState === "initial") this._updateState = "shrinked";
          else if (this._updateState === "shrinked,expanded") this._updateState = "shrinked,expanded,shrinked"; // shrinked, expanded, now shrinked again,are in a loop
          return { hiddenCount: state.hiddenCount + 1 };
        } else {
          return null;
        }
      }
      if (this._updateState === "shrinked" && hiddenCount < state.hiddenCount) this._updateState = "shrinked,expanded";
      else if (this._updateState === "shrinked,expanded,shrinked") return null; // break loop

      return { hiddenCount };
    });
    Promise.resolve().then(() => (this._updateState = "initial"));
  },

  _showAllTags() {
    this.setState({ showAllTags: true }, () => {
      if (typeof this.props.onTagExpand === "function") {
        this.props.onTagExpand();
      }
    });
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    if (!Array.isArray(this.props.items) || !this.props.items.length) {
      return null;
    }

    const hiddenCount = this.state.showAllTags ? 0 : this.state.hiddenCount;
    const firstInivisibleItem = this.props.items.length - hiddenCount;
    const visibleItems = this.props.items.slice(0, firstInivisibleItem);
    const invisibleItems = hiddenCount ? this.props.items.slice(firstInivisibleItem) : null;

    return (
      <div
        // eslint-disable-next-line react/prop-types
        className={this.getClassName("main") + (this.props.className ? " " + this.props.className : "")}
        ref={this._node}
        style={{ maxHeight: this.state.height && !this.state.showAllTags ? this.state.height + "px" : undefined }}
      >
        {visibleItems.map(tag => (
          <UU5.Bricks.Label key={tag} colorSchema="custom" className={this.getClassName("tag")}>
            {tag}
          </UU5.Bricks.Label>
        ))}
        {hiddenCount ? (
          <UU5.Bricks.Label
            key="show-all"
            colorSchema="custom"
            className={this.getClassName("tag") + " " + this.getClassName("expander")}
            onClick={this._showAllTags}
          >
            +{this.state.hiddenCount}
          </UU5.Bricks.Label>
        ) : null}
        {invisibleItems &&
          invisibleItems.map(tag => (
            <UU5.Bricks.Label
              key={tag}
              colorSchema="custom"
              className={this.getClassName("tag") + " " + this.getClassName("tagInvisible")}
            >
              {tag}
            </UU5.Bricks.Label>
          ))}
      </div>
    );
  }
  //@@viewOff:render
});

export default TagList;
