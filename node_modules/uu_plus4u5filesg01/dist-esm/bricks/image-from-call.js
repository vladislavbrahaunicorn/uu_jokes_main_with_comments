//@@viewOn:imports
import UU5, { createComponent } from "uu5g04";
import Config from "../config/config.js";
//@@viewOff:imports

const STATICS = {
  //@@viewOn:statics
  displayName: Config.TAG + "ImageFromCall"
  //@@viewOff:statics
};

const ImageFromCall = createComponent({
  ...STATICS,

  //@@viewOn:mixins
  //@@viewOff:mixins

  //@@viewOn:propTypes
  propTypes: {
    srcMeta: UU5.PropTypes.shape({
      data: UU5.PropTypes.any,
      uuCmd: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
      stringSrc: UU5.PropTypes.string,
      callback: UU5.PropTypes.func
    }).isRequired,
    srcReadyKey: UU5.PropTypes.string,
    onSrcReady: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    srcMeta: undefined
  },
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    // TODO Don't eagerly prepare "src" if thumbnail is set (currently it is required
    // because UU5.Imaging.Image requires both of them set).
    return {
      src: this._updateSrc("src", this.props.srcMeta),
      thumbSrc: this._updateSrc("thumbSrc", this.props.thumbSrcMeta)
    };
  },

  componentWillReceiveProps(nextProps) {
    let newState = {};
    if (!UU5.Common.Tools.deepEqual(this.props.srcMeta, nextProps.srcMeta)) {
      newState.src = this._updateSrc("src", nextProps.srcMeta);
    }
    if (!UU5.Common.Tools.deepEqual(this.props.thumbSrcMeta, nextProps.thumbSrcMeta)) {
      newState.thumbSrc = this._updateSrc("thumbSrc", nextProps.thumbSrcMeta);
    }
    if (Object.keys(newState).length > 0) {
      this.setState(newState);
    }
  },

  componentDidMount() {
    this._checkSrcReady();
  },

  componentDidUpdate(prevProps, prevState) {
    this._checkSrcReady();
  },

  componentWillUnmount() {
    this._unmounted = true;
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _checkSrcReady() {
    if (
      this._id_src === this._id_srcFinished &&
      this._id_thumbSrc === this._id_thumbSrcFinished &&
      this._lastReportedId !== this._id_src + " " + this._id_thumbSrc + " " + this.props.srcReadyKey
    ) {
      this._lastReportedId = this._id_src + " " + this._id_thumbSrc + " " + this.props.srcReadyKey;
      if (typeof this.props.onSrcReady === "function") {
        this.props.onSrcReady({ src: this.state.src, thumbSrc: this.state.thumbSrc });
      }
    }
  },

  _updateSrc(stateName, settings) {
    if (!settings) return null;

    let id = (this["_id_" + stateName] = UU5.Common.Tools.generateUUID());
    let { data, uuCmd, stringSrc, callback } = settings;
    if (!stringSrc && typeof uuCmd === "function") {
      uuCmd(data).then(
        dataOut => this._updateSrcDone(id, dataOut, stateName, callback),
        dataOut => this._updateSrcFail(id, dataOut, stateName, callback)
      );
      return undefined;
    } else {
      this._updateSrcDone(id, stringSrc, stateName, callback);
      return stringSrc;
    }
  },

  _updateSrcDone(id, data, stateName, callback) {
    if (this._unmounted) return;

    // called synchonously from initialiation
    if (this["_id_" + stateName] === id) {
      this["_id_" + stateName + "Finished"] = id;
      if (this.state) {
        this.setState(
          state => {
            if (state[stateName] && state[stateName].match(/^blob:/)) {
              // release old image url
              window.URL.revokeObjectURL(state[stateName]);
            }
            // create new url to blob
            const result = {};
            result[stateName] = typeof data === "string" ? data : window.URL.createObjectURL(data);
            return result;
          },
          () => {
            if (typeof callack === "function") callback(this.state);
          }
        );
      }
    }
  },

  _updateSrcFail(id, error, stateName, callback) {
    if (this._unmounted) return;

    if (this["_id_" + stateName] === id) {
      this["_id_" + stateName + "Finished"] = id;
      if (this.state) {
        let result = {};
        result[stateName] = null;
        console.log(error);
        this.setState(result, () => {
          if (typeof callack === "function") callback(this.state);
        });
      }
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { imageComponent, srcMeta, thumbSrcMeta, onSrcReady, ...restProps } = this.props;
    let { src, thumbSrc } = this.state;
    let ImageComponent = imageComponent || UU5.Bricks.Image;

    let isReadyToRender = src !== undefined && (thumbSrcMeta ? thumbSrc !== undefined : true);
    let renderAsImage = isReadyToRender && src;
    return renderAsImage ? (
      <ImageComponent {...restProps} src={src || undefined} thumbSrc={thumbSrc || undefined} />
    ) : null;
  }
  //@@viewOff:render
});

export { ImageFromCall };
export default ImageFromCall;
