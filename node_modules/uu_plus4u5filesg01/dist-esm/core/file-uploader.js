import * as UU5 from "uu5g04";
import Config from "../config/config.js";

import FormController from "../forms/form-controller.js";

import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import { getMaxFileSize } from "../helpers/file.js";
import Calls from "../calls";
import Css from "../helpers/css.js";

import "./file-uploader.less";

function detectMobileBrowser() {
  let check = false;

  (function(a) {
    if (
      /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
        a
      ) ||
      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(
        a.substr(0, 4)
      )
    )
      check = true;
  })(navigator.userAgent || navigator.vendor || window.opera);

  return check;
}

const FileUploader = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "FileUploader",
    classNames: {
      main: Config.CSS + "file-uploader",
      successState: Config.CSS + "file-uploader-success-state",
      failureState: Config.CSS + "file-uploader-failure-state",
      heightMeasurer: Css.css`
        overflow: hidden;
      `,
      wrapper: (props, state) => Css.css`
        overflow: hidden;
        transition: height 500ms;
        ${!props.dndEnabled ? `height: ${state.height}px;` : ""}
      `,
      initialContent: Config.CSS + "file-uploader-initial-content",
      hiddenInitialContent: Css.css`
        visibility: hidden;
      `,
      progressContent: Config.CSS + "file-uploader-progress-content",
      dndContent: Config.CSS + "file-uploader-dnd-content",
      statsWrapper: Config.CSS + "file-uploader-stats-wrapper",
      progressStat: Config.CSS + "file-uploader-progress-stat",
      progressStatContent: Config.CSS + "file-uploader-progress-stat-content",
      progressStatMessage: Config.CSS + "file-uploader-progress-stat-message",
      resultSuccess: Config.CSS + "file-uploader-result-success",
      resultFailed: Config.CSS + "file-uploader-result-failed",
      hoverArea: Config.CSS + "file-uploader-hover-area",
      resetButton: Config.CSS + "file-uploader-reset-button"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    baseUri: UU5.PropTypes.string,
    lsiLabels: UU5.PropTypes.object,
    uuCmdCreateBinary: UU5.PropTypes.oneOfType([UU5.PropTypes.func, UU5.PropTypes.string]),
    onSetFiles: UU5.PropTypes.func,
    customCodesEnabled: UU5.PropTypes.bool,
    customCodesRequired: UU5.PropTypes.bool,
    sizeLimit: UU5.PropTypes.number,
    dndEnabled: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      uuCmdCreateBinary: "uu-app-binarystore/createBinary",
      customCodesEnabled: false,
      sizeLimit: undefined,
      dndEnabled: true
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._index = 0;
    this._files = [];
    this._onDragEnterCounter = 0;
    this._codes = [];

    this._lsiLabels = {
      placeholder: Lsi.LSI_LABEL_FILE_MANAGER_DROP_BAR_CONTENT,
      uploadSuccessMsg: Lsi.LSI_LABEL_FILE_MANAGER_UPLOAD_RESULT_SUCCESS,
      uploadFailedMsg: Lsi.LSI_LABEL_FILE_MANAGER_UPLOAD_RESULT_FAILED
    };
    if (this.props.lsiLabels) {
      for (let key in this.props.lsiLabels) {
        this._lsiLabels[key] = this.props.lsiLabels[key];
      }
    }

    return {
      state: "initial",
      hover: false,
      progressStats: [],
      height: 0
    };
  },

  componentDidUpdate(prevProps, prevState) {
    let isDnd = !this.props.dndEnabled && !detectMobileBrowser();

    if (isDnd && this._heightMeasurer) {
      if (prevState.progressStats.length !== this.state.progressStats.length || prevState.state !== this.state.state) {
        let height;
        if (this.state.state !== "initial" && this.state.progressStats.length) {
          let element = UU5.Common.DOM.findNode(this._heightMeasurer);
          height = element.getBoundingClientRect().height;
        } else {
          height = 0;
        }

        this.setState({ height });
      }
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  update() {
    return true;
  },

  getProgress() {
    return this.state.progressStats;
  },

  setProgress(progressStats) {
    let state = "initial";
    let success = true;

    if (progressStats.length > 0) {
      let done = true;
      for (let i = 0; i < progressStats.length; i++) {
        if (progressStats[i].state === "failed") {
          success = false;
        }
        if (progressStats[i].state !== "success" && progressStats[i].state !== "failed") {
          done = false;
          break;
        }
      }
      state = done ? "done" : "inProgress";
    }

    this.setState({ progressStats: progressStats, state: state, success: success });
  },

  setFiles(files, opt) {
    this._files = this.state.state === "inProgress" ? this._files : [];

    if (files.length > 0) {
      files.forEach(file => {
        this._files.push(file);
      });

      if (this.props.onSetFiles && typeof this.props.onSetFiles === "function") {
        this.props.onSetFiles(files, opt);
      } else {
        if (this.props.customCodesEnabled) {
          this._openDnDForm(files);
        } else {
          this._uploadFiles(files);
        }
      }
    }

    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _registerHeightMeasurer(ref) {
    this._heightMeasurer = ref;
  },

  _saveImageDone(dtoOut) {
    let progressStats = this.state.progressStats;
    progressStats[this._index].state = "success";
    if (this._index + 1 < this._files.length) {
      progressStats[this._index + 1].state = "started";
      this.setState({
        progressStats: progressStats
      });
      this._index++;
      this._saveImage();
    } else {
      this.setState({
        progressStats: progressStats
      });
      this._uploadDone();
    }
  },

  _saveImageFail(dtoOut) {
    let progressStats = this.state.progressStats;
    progressStats[this._index].state = "failed";
    if (this._index + 1 < this._files.length) {
      progressStats[this._index + 1].state = "started";
      this.setState({
        progressStats: progressStats
      });
      this._index++;
      this._saveImage();
    } else {
      this.setState({
        progressStats: progressStats
      });
      this._uploadDone();
    }
  },

  _saveImage() {
    if (this._files[this._index] && this._files[this._index].size > getMaxFileSize(this.props.sizeLimit) * 1024) {
      let progressStats = this.state.progressStats;
      progressStats[this._index].state = "failed";
      if (this._index + 1 < this._files.length) {
        progressStats[this._index + 1].state = "started";
        this.setState({
          progressStats: progressStats
        });
        this._index++;
        this._saveImage();
      } else {
        this.setState({
          progressStats: progressStats
        });
        this._uploadDone();
      }
    } else {
      const data = this._files[this._index];
      const done = this._saveImageDone;
      const fail = this._saveImageFail;

      if (this._codes[this._index]) {
        data.code = this._codes[this._index];
      }

      if (typeof this.props.uuCmdCreateBinary === "function") {
        this.props.uuCmdCreateBinary(data).then(done, fail);
      } else {
        let dtoIn = { data, done, fail };
        Calls.customPostMultipartCmd(this.props.baseUri, this.props.uuCmdCreateBinary, dtoIn);
      }
    }
  },

  _uploadFiles(files) {
    let wasRunning = this.state.state === "inProgress";
    let progressStats = wasRunning ? this.state.progressStats : [];
    for (let i = 0; i < files.length; i++) {
      progressStats.push({
        name: files[i].name,
        state: !wasRunning && i === 0 ? "started" : "waiting"
      });
    }
    this.setState(
      {
        progressStats: progressStats,
        state: "inProgress"
      },
      () => {
        if (!wasRunning) {
          this._index = 0;
          this._saveImage();
        }
      }
    );
  },

  _uploadDone() {
    let success = true;
    for (let i = 0; i < this.state.progressStats.length; i++) {
      if (this.state.progressStats[i].state === "failed") {
        success = false;
        break;
      }
    }

    this.setState({
      state: "done",
      success: success
    });
  },

  _openDnDForm(fileList) {
    this._formController.openDnDForm(
      fileList,
      codeList => {
        this._codes = codeList;
        this._uploadFiles(fileList);
      },
      { customCodesEnabled: this.props.customCodesEnabled, customCodesRequired: this.props.customCodesRequired },
      this.props.customCodesRequired
    );
  },

  _onDropHandler(e) {
    this._onDragEnterCounter = 0;
    this.setState({ hover: false });
    e.preventDefault();
    e.stopPropagation();
    let files = [];

    if (this.state.state !== "inProgress") {
      if (e.dataTransfer.items) {
        // Use DataTransfer interface to access the file(s)
        for (let i = 0; i < e.dataTransfer.files.length; i++) {
          if (e.dataTransfer.files[i].type || e.dataTransfer.files[i].size % 4096 !== 0) {
            let file = e.dataTransfer.files[i];
            files.push(file);
          }
        }
      }

      this.setFiles(files);
    }
  },

  _onDragOverHandler(e) {
    e.preventDefault();
    e.stopPropagation();
  },

  _onDragEnterHandler(e) {
    this._onDragEnterCounter++;
    !this.state.hover && this.setState({ hover: true });
    e.preventDefault();
    e.stopPropagation();
  },

  _onDragEndHandler(e) {
    this._onDragEnterCounter = 0;
    this.setState({ hover: false });
    e.preventDefault();
    e.stopPropagation();
  },

  _onDragLeaveHandler(e) {
    this._onDragEnterCounter--;
    this._onDragEnterCounter <= 0 && this.setState({ hover: false });
    e.preventDefault();
    e.stopPropagation();
  },

  _getInitialContent(isDnd) {
    let className = this.getClassName("initialContent");

    if (!isDnd) {
      className += " " + this.getClassName("hiddenInitialContent");
    }

    if (isDnd) {
      className += " " + this.getClassName("dndContent");
    }

    return (
      <UU5.Bricks.Div
        className={className}
        content={LsiHelper.getLsiComponent(this._lsiLabels.placeholder)}
        ref_={r => {
          this._dropZone = r;
        }}
        mainAttrs={
          isDnd
            ? {
                onDragOver: this._onDragOverHandler,
                onDragEnter: this._onDragEnterHandler,
                onDrop: this._onDropHandler,
                onDragEnd: this._onDragEndHandler,
                onDragLeave: this._onDragLeaveHandler
              }
            : null
        }
      />
    );
  },

  _getResultContent() {
    return this.state.success ? (
      <UU5.Bricks.Div
        content={LsiHelper.getLsiComponent(this._lsiLabels.uploadSuccessMsg)}
        className={this.getClassName("resultSuccess")}
      />
    ) : (
      <UU5.Bricks.Div
        content={LsiHelper.getLsiComponent(this._lsiLabels.uploadFailedMsg)}
        className={this.getClassName("resultFailed")}
      />
    );
  },

  _getClearButton() {
    return (
      <UU5.Bricks.Link
        onClick={() => this.setState({ state: "initial" })}
        className={this.getClassName("resetButton")}
        colorSchema="custom"
      >
        <UU5.Bricks.Icon icon="mdi-close" />
      </UU5.Bricks.Link>
    );
  },

  _getProgressContent(isDnd) {
    let stats = [];
    for (let i = 0; i < this.state.progressStats.length; i++) {
      let statItem = this.state.progressStats[i];
      let icon;

      switch (statItem.state) {
        case "waiting":
          icon = "mdi-timer";
          break;
        case "started":
          icon = "mdi-loading";
          break;
        case "success":
          icon = "mdi-checkbox-marked-circle";
          break;
        case "failed":
          icon = "mdi-alert";
          break;
      }

      stats.push(
        <UU5.Bricks.Div key={"stat_" + i} className={this.getClassName("progressStat")}>
          <UU5.Bricks.Icon icon={icon} />
          <div className={this.getClassName("progressStatContent")}>
            <UU5.Bricks.Span content={this.state.progressStats[i].name} />
            {statItem.message ? (
              <div className={this.getClassName("progressStatMessage")}>{statItem.message}</div>
            ) : null}
          </div>
        </UU5.Bricks.Div>
      );
    }

    let wrapperClassName = this.getClassName("progressContent");

    if (isDnd) {
      wrapperClassName += " " + this.getClassName("dndContent");
    }

    return (
      <UU5.Bricks.Div
        className={wrapperClassName}
        mainAttrs={
          isDnd
            ? {
                onDragOver: this._onDragOverHandler,
                onDragEnter: this._onDragEnterHandler,
                onDrop: this._onDropHandler,
                onDragEnd: this._onDragEndHandler,
                onDragLeave: this._onDragLeaveHandler
              }
            : null
        }
      >
        {this.state.state === "inProgress" && <UU5.Bricks.Loading />}
        {this.state.state === "done" && this._getResultContent()}
        {this.state.state === "done" && this._getClearButton()}
        <UU5.Bricks.Div className={this.getClassName("statsWrapper")}>{stats}</UU5.Bricks.Div>
      </UU5.Bricks.Div>
    );
  },

  _getMainPropsToPass() {
    let mainProps = this.getMainPropsToPass();

    if (this.state.state === "done") {
      if (this.state.success) {
        mainProps.className += " " + this.getClassName("successState");
      } else {
        mainProps.className += " " + this.getClassName("failureState");
      }
    }

    return mainProps;
  },

  _getChild() {
    let isDnd = this.props.dndEnabled && !detectMobileBrowser();
    let content;
    switch (this.state.state) {
      case "initial":
        content = this._getInitialContent(isDnd);
        break;
      case "inProgress":
      case "done":
        content = this._getProgressContent(isDnd);
        break;
    }

    return (
      <>
        <FormController lsiLabels={this._lsiLabels} key="formController" ref_={r => (this._formController = r)} />
        <UU5.Bricks.Div {...this._getMainPropsToPass()} key="uploader">
          {content}
          <UU5.Bricks.Div
            className={this.getClassName("hoverArea")}
            style={!this.state.hover ? { display: "none" } : null}
          />
        </UU5.Bricks.Div>
      </>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      <UU5.Bricks.Div className={this.getClassName("wrapper")}>
        <div className={this.getClassName("heightMeasurer")} ref={this._registerHeightMeasurer}>
          {this._getChild()}
        </div>
      </UU5.Bricks.Div>
    );
  }
  //@@viewOff:render
});

export default FileUploader;
