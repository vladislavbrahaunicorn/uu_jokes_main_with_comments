//@@viewOn:imports
import React from "react";
import UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5tilesg01";

import Config from "../../config/config";
import Css from "../../helpers/css.js";
import Lsi from "../../config/lsi.js";
//@@viewOff:imports

const ListWrapper = UU5.Common.Reference.forward((props, ref) => {
  return <ListWrapperBody {...props} listRef={ref} />;
});

ListWrapper.displayName = Config.TAG + "ListWrapper";
ListWrapper.hocFor = UU5.Tiles.List.hocFor;

const ListWrapperBody = UU5.Common.VisualComponent.create({
  displayName: "ListWrapperBody",
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    classNames: {
      main: () => Css.css`
        position: relative;
      `,
      emptyListWarning: Config.CSS + "file-manager-empty-list-warning",
      dndHoverArea: () => Css.css`
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(250, 250, 250, 0.95);
        border: 4px dashed rgba(0, 0, 0, 0.17);
      `,
      hintWrapper: () => Css.css`
        position: absolute;
        left: 0;
        right: 0;
        top: ${typeof state.positionY === "number" ? state.positionY + "px" : "0"};
        display: flex;
        flex-direction: column;
        align-items: center;
      `,
      hintIcon: () => Css.css`
        font-size: 80px;
        color: #616161;
        width: 80px;
        height: 80px;
        display: flex;
        align-items: center;
      `,
      hintText: () => Css.css`
        font-size: 24px;
      `
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    wrapperAttrs: UU5.PropTypes.object,
    isEmpty: UU5.PropTypes.bool,
    isEmptyMessage: UU5.PropTypes.node
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    this._hasRendered = false;

    return {
      positionY: null,
      height: null,
      hintHeight: null
    };
  },

  componentWillReceiveProps(nextProps) {
    if (this.props.isHovered !== nextProps.isHovered) {
      this._hasRendered = false;
    }
  },

  componentDidUpdate() {
    if (this._hoverArea && this._hintWrapper && !this._hasRendered) {
      this._hasRendered = true;
      this.forceUpdate();
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _registerHoverArea(ref) {
    this._hoverArea = ref;
  },

  _registerHintWrapper(ref) {
    this._hintWrapper = ref;
  },

  _getHintWrapperClassName() {
    if (this._hasRendered) {
      let hoverAreaRect = this._hoverArea.getBoundingClientRect();
      let hintWrapperRect = this._hintWrapper.getBoundingClientRect();
      let positionY;

      let visibleArea = { top: 0, height: hoverAreaRect.height };
      if (hoverAreaRect.top < 0) {
        visibleArea.top -= hoverAreaRect.top;
        visibleArea.height -= visibleArea.top;
      }
      if (hoverAreaRect.bottom > window.innerHeight) {
        visibleArea.height -= hoverAreaRect.bottom - window.innerHeight;
      }

      positionY = visibleArea.top + (visibleArea.height - hintWrapperRect.height) / 2;

      return Css.css`
        position: absolute;
        left: 0;
        right: 0;
        top: ${typeof positionY === "number" ? positionY + "px" : "0"};
        display: flex;
        flex-direction: column;
        align-items: center;
      `;
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { wrapperAttrs, isHovered, listRef, isEmpty, isEmptyMessage, ...listProps } = this.props;

    return (
      <>
        {this.props.children}
        <UU5.Bricks.Div mainAttrs={wrapperAttrs} className={this.getClassName("main")}>
          <UU5.Tiles.List {...listProps} ref={listRef} />
          {isEmpty && (
            <UU5.Bricks.Div className={this.getClassName("emptyListWarning")}>
              <UU5.Bricks.Icon icon="mdi-package-variant" />
              <UU5.Bricks.Div content={isEmptyMessage} />
            </UU5.Bricks.Div>
          )}
          {isHovered ? (
            <div className={this.getClassName("dndHoverArea")} ref={this._registerHoverArea}>
              <div className={this._getHintWrapperClassName()} ref={this._registerHintWrapper}>
                <span className={this.getClassName("hintIcon")}>
                  <UU5.Bricks.Icon icon="mdi-upload" />
                </span>
                <UU5.Bricks.Lsi className={this.getClassName("hintText")} lsi={Lsi.LSI_LABEL_FILE_MANAGER_DROP_ZONE} />
              </div>
            </div>
          ) : null}
        </UU5.Bricks.Div>
      </>
    );
  }
  //@@viewOff:render
});

export default ListWrapper;
