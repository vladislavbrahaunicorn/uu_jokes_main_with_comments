"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initTest = initTest;
exports.default = exports.Tools = exports.cleanupErrorStack = void 0;

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _mixinProps = _interopRequireDefault(require("./mixin-props.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DEFAULT_TIMEOUT = 100;
var setTimeout = global.setTimeout;
var clearTimeout = global.clearTimeout;

var cleanupErrorStack = function cleanupErrorStack(message, stack) {
  // remove stacktrace rows containing tools.js & regenerator-runtime so that Jest
  // displays source code portion from which the Tools method has been called.
  var lines = stack.split(/\n/);
  var i = 0;

  while (i < lines.length && !lines[i].match(/^\s*at\s+/)) {
    i++;
  } // skip 1st/few lines (error message)


  var messageLines = lines.slice(0, i);

  while (i < lines.length && lines[i].match(/(src|uu5g04[/\\]dist[^/\\]*)[/\\]test[/\\][^.]+\.js:|regenerator-runtime|\(<anonymous>\)|node_modules[/\\]jest-mock[/\\]/)) {
    i++;
  }

  return [].concat(_toConsumableArray(messageLines), _toConsumableArray(lines.slice(i))).join("\n");
};

exports.cleanupErrorStack = cleanupErrorStack;

function withSnapshotComment(value, comment) {
  var result = {
    comment: comment,
    value: value
  };
  result[SYMBOL_SNAPSHOT_WITH_COMMENT] = true;
  return result;
} // !!! Modify both takeSnaphot & takeSnapshotAsync. !!!


function takeSnapshot(component, comment) {
  var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var wrapper = Tools.shallow(component, opt.shallowOpt);
  var snapshotValue = comment ? withSnapshotComment(wrapper, comment) : wrapper;
  expect(snapshotValue).toMatchSnapshot();
  var snapshotString = toStringSerializer ? toStringSerializer.lastSnapshotString : null;
  return {
    wrapper: wrapper,
    snapshotString: snapshotString
  };
}

function takeSnapshotAsync(_x, _x2) {
  return _takeSnapshotAsync.apply(this, arguments);
}

function _takeSnapshotAsync() {
  _takeSnapshotAsync = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(component, comment) {
    var opt,
        wrapper,
        snapshotValue,
        snapshotString,
        _args8 = arguments;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            opt = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {};
            wrapper = Tools.shallow(component, opt.shallowOpt);
            _context8.next = 4;
            return Tools.wait();

          case 4:
            snapshotValue = comment ? withSnapshotComment(wrapper, comment) : wrapper;
            expect(snapshotValue).toMatchSnapshot();
            snapshotString = toStringSerializer ? toStringSerializer.lastSnapshotString : null;
            return _context8.abrupt("return", {
              wrapper: wrapper,
              snapshotString: snapshotString
            });

          case 8:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _takeSnapshotAsync.apply(this, arguments);
}

function toSafeJson(value) {
  if (typeof value === "function" && typeof value.toJSON !== "function") return "[Function]";

  try {
    return JSON.stringify(value);
  } catch (e) {
    return value != null ? value + "" : value;
  }
}

var toStringSerializer;
var SYMBOL_SNAPSHOT_STRING = Symbol.for("UU5.Test.Tools.SNAPSHOT_STRING");
var ERROR_MESSAGE_SNAPSHOT_STRING_PREFIX = "UU5.Test.Tools.getSnapshotStringErrorMessage";

var SnapshotToStringSerializer = /*#__PURE__*/function () {
  function SnapshotToStringSerializer() {
    _classCallCheck(this, SnapshotToStringSerializer);

    toStringSerializer = this;
  }

  _createClass(SnapshotToStringSerializer, [{
    key: "getSnapshotString",
    value: function getSnapshotString(wrapper) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var value = {
        value: wrapper
      };
      value[SYMBOL_SNAPSHOT_STRING] = true;
      value.preventSnapshotStore = true;

      try {
        expect(value).toMatchSnapshot();
        return "";
      } catch (e) {
        if (!e || !e.message || !e.message.startsWith(ERROR_MESSAGE_SNAPSHOT_STRING_PREFIX)) throw e;
        return e.message.substr(ERROR_MESSAGE_SNAPSHOT_STRING_PREFIX.length);
      }
    }
  }, {
    key: "print",
    value: function print(val, serialize) {
      this._nested = true;

      try {
        if (!val || _typeof(val) !== "object" || !(SYMBOL_SNAPSHOT_STRING in val)) {
          val = {
            value: val,
            preventSnapshotStore: false
          };
        }

        var snapshotString = serialize(val.value);

        if (val.preventSnapshotStore) {
          throw new Error(ERROR_MESSAGE_SNAPSHOT_STRING_PREFIX + snapshotString);
        }

        this.lastSnapshotString = snapshotString;
        return snapshotString;
      } finally {
        this._nested = false;
      }
    }
  }, {
    key: "test",
    value: function test(val) {
      return !this._nested;
    }
  }]);

  return SnapshotToStringSerializer;
}();

var SYMBOL_SNAPSHOT_WITH_COMMENT = Symbol.for("UU5.Test.Tools.SNAPSHOT_WITH_COMMENT");

var SnapshotCommentSerializer = /*#__PURE__*/function () {
  function SnapshotCommentSerializer() {
    _classCallCheck(this, SnapshotCommentSerializer);
  }

  _createClass(SnapshotCommentSerializer, [{
    key: "print",
    value: function print(val, serialize) {
      return "/* ".concat(val.comment, " */\n") + serialize(val.value);
    }
  }, {
    key: "test",
    value: function test(val) {
      return val && _typeof(val) === "object" && SYMBOL_SNAPSHOT_WITH_COMMENT in val;
    }
  }]);

  return SnapshotCommentSerializer;
}();

var HookOuterComponent = _react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      initialHookParams = _ref.initialHookParams,
      hook = _ref.hook;

  var _React$useState = _react.default.useState(function () {
    return initialHookParams;
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      hookParams = _React$useState2[0],
      setHookParams = _React$useState2[1];

  _react.default.useImperativeHandle(ref, function () {
    return {
      setHookParams: setHookParams
    };
  }, []);

  var result = hook.apply(void 0, _toConsumableArray(hookParams)); // NOTE Using HookInnerComponent to measure render counts of subtrees (hooks are allowed to change their state during render
  // because it results in re-calling of the Component but not of its subtree - we don't want to measure these
  // shallow re-renders).
  // NOTE This also means that we'll collect only "committed" hook results.

  return UU5.Common.Element.create(HookInnerComponent, {
    result: result
  }, children);
});

var HookInnerComponent = function HookInnerComponent(_ref2) {
  var children = _ref2.children,
      result = _ref2.result;
  return children(result);
}; // unmount components after each test


var container;
var lastWrapper;
var inTest = false;

function initTest() {
  afterEach(function () {
    if (lastWrapper && lastWrapper.length === 1) lastWrapper.unmount();
    if (container) _reactDom.default.unmountComponentAtNode(container);
    lastWrapper = null;
  });
  beforeEach(function () {
    inTest = true;
  });
  afterEach(function () {
    inTest = false;
  });
}

var Tools = {
  SnapshotCommentSerializer: SnapshotCommentSerializer,
  SnapshotToStringSerializer: SnapshotToStringSerializer,
  mount: function mount(jsx, options) {
    // NOTE Condition for inTest - UU5.Bricks.Page uses shallow outside of test to get an instance of Page component
    // and to pass it in "parent" prop => use minimal mount/shallow (and don't auto-unmount it)
    if (inTest) {
      if (!container) {
        container = document.createElement("div");
        document.body.appendChild(container);
      } else {
        _reactDom.default.unmountComponentAtNode(container);

        lastWrapper = null;
      }
    }

    var wrapper = (0, _enzyme.mount)(jsx, _objectSpread({
      attachTo: container
    }, options));
    if (inTest) lastWrapper = wrapper;
    return wrapper;
  },
  shallow: function shallow(jsx, options) {
    // NOTE Condition for inTest - UU5.Bricks.Page uses shallow outside of test to get an instance of Page component
    // and to pass it in "parent" prop => use minimal mount/shallow (and don't auto-unmount it)
    if (lastWrapper) lastWrapper.unmount();
    var wrapper = (0, _enzyme.shallow)(jsx, options);
    if (inTest) lastWrapper = wrapper;
    return wrapper;
  },
  act: function act(fn) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref3$updateWrapper = _ref3.updateWrapper,
        updateWrapper = _ref3$updateWrapper === void 0 ? true : _ref3$updateWrapper;

    // call react-dom's act() and update wrapper (if any)
    var originalSyncStack = new Error().stack;

    var actResult = _testUtils.default.act(function () {
      var fnResult = fn();

      if (fnResult !== undefined && (!fnResult || typeof fnResult.then !== "function")) {
        // enforce proper behaviour (React logs just warning)
        var error = new Error("The callback passed to act(...) function must return undefined, or a Promise. You returned ".concat(fnResult));
        error.code = "INVALID_ARGUMENTS";
        error.stack = cleanupErrorStack(error.message, originalSyncStack);
        throw error;
      }

      return fnResult;
    });

    if (actResult && typeof actResult.then === "function") {
      // NOTE We don't want to access actResult.then() right away because react-dom has
      // overridden this particular "then" to provide warning in case that no-one is doing "await".
      // (And we don't want to do it via simple Promise.resolve().then(...) because that would enqueue
      // it for processing in the next tick and call "then" automatically.)
      var runPromise = function runPromise() {
        return new Promise(function (resolve, reject) {
          actResult.then(function (v) {
            if (updateWrapper && lastWrapper) lastWrapper.update();
            resolve(v);
          }, function (e) {
            if (updateWrapper && lastWrapper) lastWrapper.update();
            reject(e);
          });
        });
      };

      return {
        then: function then(onResolve, onReject) {
          return runPromise().then(onResolve, onReject);
        },
        catch: function _catch(onReject) {
          return runPromise().catch(onReject);
        }
      };
    } else {
      if (updateWrapper && lastWrapper) lastWrapper.update();
    }

    return actResult;
  },
  renderHook: function renderHook(hook) {
    for (var _len = arguments.length, initialHookParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      initialHookParams[_key - 1] = arguments[_key];
    }

    var _Tools$initHookRender = Tools.initHookRenderer.apply(Tools, [hook].concat(initialHookParams)),
        HookComponent = _Tools$initHookRender.HookComponent,
        result = _objectWithoutProperties(_Tools$initHookRender, ["HookComponent"]);

    var wrapper = Tools.mount(UU5.Common.Element.create(HookComponent, null));
    return _objectSpread({
      wrapper: wrapper
    }, result);
  },
  initHookRenderer: function initHookRenderer(hook) {
    for (var _len2 = arguments.length, initialHookParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      initialHookParams[_key2 - 1] = arguments[_key2];
    }

    if (typeof hook !== "function") {
      var error = new Error("Invalid value used as a hook: ".concat(hook, ". Are you passing hook parameters but forgot to pass the hook?\nExample:\n  const { lastResult } = renderHook(useLsi, { \"cs\": \"Ahoj\", \"en\": \"Hello\" });\n  const { lastResult } = initHookRenderer(useLsi, { \"cs\": \"Ahoj\", \"en\": \"Hello\" });"));
      error.code = "INVALID_ARGUMENTS";
      error.stack = cleanupErrorStack(error.message, error.stack);
      throw error;
    }

    if (typeof hook.name === "string" && !hook.name.match(/^use[A-Z]/)) {
      var _error = new Error("Invalid value used as a hook (hook name must start with 'use' followed by uppercase letter): \"".concat(hook.name, "\". Are you passing hook parameters but forgot to pass the hook?\nExample:\n  const { lastResult } = renderHook(useLsi, { \"cs\": \"Ahoj\", \"en\": \"Hello\" });\n  const { lastResult } = initHookRenderer(useLsi, { \"cs\": \"Ahoj\", \"en\": \"Hello\" });"));

      _error.code = "INVALID_ARGUMENTS";
      _error.stack = cleanupErrorStack(_error.message, _error.stack);
      throw _error;
    }

    var hookResults = [];

    var hookOuterComponentRef = _react.default.createRef();

    var HookComponent = function HookComponent(_ref4) {
      var children = _ref4.children;
      return UU5.Common.Element.create(HookOuterComponent, {
        ref: hookOuterComponentRef,
        initialHookParams: initialHookParams,
        hook: hook
      }, function (lastHookResult) {
        hookResults.push(lastHookResult);
        var child;
        if (typeof children === "function") child = children(lastHookResult);else if (children !== undefined) child = children;else child = UU5.Common.Element.create("div", null);
        return child;
      });
    };

    return {
      HookComponent: HookComponent,
      lastResult: function lastResult() {
        return hookResults[hookResults.length - 1];
      },
      allResults: function allResults() {
        return [].concat(hookResults);
      },
      renderCount: function renderCount() {
        return hookResults.length;
      },
      rerender: function rerender() {
        for (var _len3 = arguments.length, newHookParams = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          newHookParams[_key3] = arguments[_key3];
        }

        if (!hookOuterComponentRef.current) {
          throw new Error("Cannot re-render hook component because it wasn't mounted yet (or is already unmounted)!");
        }

        Tools.act(function () {
          return hookOuterComponentRef.current.setHookParams(newHookParams);
        });
      }
    };
  },
  waitUntilCalled: function waitUntilCalled(callbackFn) {
    var _arguments = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _ref5, _ref5$timeout, timeout, _ref5$updateWrapper, updateWrapper;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref5 = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {}, _ref5$timeout = _ref5.timeout, timeout = _ref5$timeout === void 0 ? DEFAULT_TIMEOUT : _ref5$timeout, _ref5$updateWrapper = _ref5.updateWrapper, updateWrapper = _ref5$updateWrapper === void 0 ? true : _ref5$updateWrapper;
              return _context.abrupt("return", Tools.waitUntilCalledTimes(callbackFn, 1, {
                timeout: timeout,
                updateWrapper: updateWrapper
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  waitUntilCalledTimes: function waitUntilCalledTimes(callbackFn, times) {
    var _arguments2 = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _ref6, _ref6$timeout, timeout, _ref6$updateWrapper, updateWrapper, originalSyncStack, now, error;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _ref6 = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : {}, _ref6$timeout = _ref6.timeout, timeout = _ref6$timeout === void 0 ? DEFAULT_TIMEOUT : _ref6$timeout, _ref6$updateWrapper = _ref6.updateWrapper, updateWrapper = _ref6$updateWrapper === void 0 ? true : _ref6$updateWrapper;
              originalSyncStack = new Error().stack;

              if (!callbackFn.mock) {
                _context2.next = 16;
                break;
              }

              now = Date.now();

            case 4:
              if (!(Date.now() - now < timeout)) {
                _context2.next = 11;
                break;
              }

              if (!(callbackFn.mock.calls.length >= times)) {
                _context2.next = 7;
                break;
              }

              return _context2.abrupt("break", 11);

            case 7:
              _context2.next = 9;
              return Tools.wait({
                timeout: 2,
                updateWrapper: false
              });

            case 9:
              _context2.next = 4;
              break;

            case 11:
              if (!(callbackFn.mock.calls.length < times)) {
                _context2.next = 16;
                break;
              }

              error = new Error("Mock function should have been called ".concat(times, " time(s) but was called only ").concat(callbackFn.mock.calls.length, " time(s) within specified timeout (").concat(timeout, "ms)."));
              error.code = "CALL_COUNT_TOO_LOW";
              error.stack = cleanupErrorStack(error.message, originalSyncStack);
              throw error;

            case 16:
              if (updateWrapper && lastWrapper) lastWrapper.update();

            case 17:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  // wait() or wait(100) or wait({ timeout: 100, updateWrapper: true })
  wait: function wait() {
    var _arguments3 = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
      var timeout, updateWrapper, _len4, args, _key4, _ref7, _ref7$updateWrapper;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              for (_len4 = _arguments3.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = _arguments3[_key4];
              }

              if (typeof args[0] === "number") timeout = args.shift();else timeout = (args[0] || {}).timeout || 0;
              _ref7 = args[0] || {};
              _ref7$updateWrapper = _ref7.updateWrapper;
              updateWrapper = _ref7$updateWrapper === void 0 ? true : _ref7$updateWrapper;

              if (!(timeout >= 0)) {
                _context3.next = 8;
                break;
              }

              _context3.next = 8;
              return Tools.act(function () {
                return new Promise(function (resolve) {
                  return setTimeout(resolve, timeout);
                });
              }, {
                updateWrapper: updateWrapper
              });

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }))();
  },
  waitWhile: function waitWhile(conditionFn) {
    var _arguments4 = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var _ref8, _ref8$timeout, timeout, _ref8$updateWrapper, updateWrapper, originalSyncStack, now, lastResult, error;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _ref8 = _arguments4.length > 1 && _arguments4[1] !== undefined ? _arguments4[1] : {}, _ref8$timeout = _ref8.timeout, timeout = _ref8$timeout === void 0 ? DEFAULT_TIMEOUT : _ref8$timeout, _ref8$updateWrapper = _ref8.updateWrapper, updateWrapper = _ref8$updateWrapper === void 0 ? true : _ref8$updateWrapper;
              originalSyncStack = new Error().stack;
              now = Date.now();

            case 3:
              if (!(Date.now() - now < timeout)) {
                _context5.next = 15;
                break;
              }

              lastResult = void 0;
              _context5.next = 7;
              return Tools.act( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        return _context4.abrupt("return", lastResult = conditionFn());

                      case 1:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              })), {
                updateWrapper: false
              });

            case 7:
              _context5.next = 9;
              return lastResult;

            case 9:
              if (_context5.sent) {
                _context5.next = 11;
                break;
              }

              return _context5.abrupt("break", 15);

            case 11:
              _context5.next = 13;
              return Tools.wait({
                timeout: 2,
                updateWrapper: updateWrapper
              });

            case 13:
              _context5.next = 3;
              break;

            case 15:
              if (!(Date.now() - now >= timeout)) {
                _context5.next = 20;
                break;
              }

              error = new Error("Conditional wait did not finish within specified timeout (".concat(timeout, "ms)."));
              error.code = "TIMED_OUT";
              error.stack = cleanupErrorStack(error.message, originalSyncStack);
              throw error;

            case 20:
              if (updateWrapper && lastWrapper) lastWrapper.update();

            case 21:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  },
  setInputValue: function setInputValue(wrapper, value) {
    var focusBeforeSetting = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var blurAfterSetting = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var input = wrapper.type() === "input" ? wrapper : wrapper.find("input").first();

    if (input && input.length === 1) {
      if (focusBeforeSetting) {
        Tools.act(function () {
          input.simulate("focus");
        });
      }

      input.getDOMNode().value = value;
      Tools.act(function () {
        input.simulate("change");
      });

      if (blurAfterSetting) {
        Tools.act(function () {
          document.body.dispatchEvent(new MouseEvent("mousedown"));
        });
        Tools.act(function () {
          input.simulate("blur");
        });
        Tools.act(function () {
          document.body.dispatchEvent(new MouseEvent("mouseup"));
        });
        Tools.act(function () {
          document.body.dispatchEvent(new MouseEvent("click"));
        });
      }
    } else {
      var error = new Error("Input not found in specified wrapper.");
      error.code = "INPUT_NOT_FOUND";
      error.stack = cleanupErrorStack(error.message, error.stack);
      throw error;
    }
  },
  testProperty: function testProperty(Component, propName, values) {
    var requiredProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var opt = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var originalSyncStack = new Error().stack;
    !Array.isArray(values) && (values = [values]);
    var skip = opt.skip,
        wait = opt.wait;
    values.forEach(function (value, i) {
      var testFn = skip ? it.skip : it;
      testFn("".concat(propName, "=").concat(toSafeJson(value)), /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var props, _ref11, wrapper, snapshotString, nextValue, snapshotString2, chainProp, simpleProp, error;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                props = Object.assign({}, requiredProps);
                props[propName] = value; // NOTE Distinguishing here so that sync variant is really sync.

                if (!(wait || wait === undefined)) {
                  _context6.next = 8;
                  break;
                }

                _context6.next = 5;
                return takeSnapshotAsync(UU5.Common.Element.create(Component, _extends({
                  id: "uuID"
                }, props)), null, opt);

              case 5:
                _context6.t0 = _context6.sent;
                _context6.next = 9;
                break;

              case 8:
                _context6.t0 = takeSnapshot(UU5.Common.Element.create(Component, _extends({
                  id: "uuID"
                }, props)), null, opt);

              case 9:
                _ref11 = _context6.t0;
                wrapper = _ref11.wrapper;
                snapshotString = _ref11.snapshotString;
                nextValue = values[values.length - 1 > i ? i + 1 : i === 0 ? values.length : i - 1];
                if (nextValue === undefined && requiredProps) nextValue = requiredProps[propName];

                if (!(nextValue !== undefined && nextValue !== value)) {
                  _context6.next = 31;
                  break;
                }

                wrapper.setProps(_defineProperty({}, propName, nextValue));

                if (!(wait || wait === undefined)) {
                  _context6.next = 19;
                  break;
                }

                _context6.next = 19;
                return Tools.wait();

              case 19:
                wrapper.setProps(_defineProperty({}, propName, value));

                if (!(wait || wait === undefined)) {
                  _context6.next = 23;
                  break;
                }

                _context6.next = 23;
                return Tools.wait();

              case 23:
                snapshotString2 = toStringSerializer ? toStringSerializer.getSnapshotString(wrapper, opt) : null;

                if (!(snapshotString2 !== snapshotString)) {
                  _context6.next = 31;
                  break;
                }

                chainProp = "".concat(propName, "=").concat(toSafeJson(value), " --> ").concat(propName, "=").concat(toSafeJson(nextValue), " --> ").concat(propName, "=").concat(toSafeJson(value));
                simpleProp = "".concat(propName, "=").concat(toSafeJson(value)); // TODO Use some diff to show differences.

                error = new Error("Changing props dynamically from ".concat(chainProp, " results in different snapshot than if simply using ").concat(simpleProp, "!\n/* ").concat(chainProp, " */\n").concat(snapshotString2, "\n\n/* ").concat(simpleProp, " */\n").concat(snapshotString));
                error.code = "PROP_CHANGE_PRODUCES_DIFFERENT_SNAPSHOT";
                error.stack = cleanupErrorStack(error.message, originalSyncStack);
                throw error;

              case 31:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      })));
    });
  },
  testProperties: function testProperties(Component, config) {
    // guard against most common error
    if (typeof Component === "string") {
      var error = new Error("Invalid arguments to testProperties - 1st argument must be a component class but it is string.");
      error.code = "INVALID_ARGUMENTS";
      error.stack = cleanupErrorStack(error.message, error.stack);
      throw error;
    }

    test("default props", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(!config.opt || config.opt.wait === undefined || config.opt.wait)) {
                _context7.next = 5;
                break;
              }

              _context7.next = 3;
              return takeSnapshotAsync(UU5.Common.Element.create(Component, _extends({
                id: "uuID"
              }, config.requiredProps)), null, config.opt);

            case 3:
              _context7.next = 6;
              break;

            case 5:
              takeSnapshot(UU5.Common.Element.create(Component, _extends({
                id: "uuID"
              }, config.requiredProps)), null, config.opt);

            case 6:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    })));

    if (config.mixins) {
      config.mixins.forEach(function (mixinName) {
        var mixinProps = _mixinProps.default[mixinName];

        if (mixinProps) {
          for (var propName in mixinProps) {
            if (propName in config.props) continue;

            var requiredProps = _objectSpread(_objectSpread({}, config.requiredProps), mixinProps[propName].requiredProps);

            Tools.testProperty(Component, propName, mixinProps[propName].values, requiredProps, _objectSpread(_objectSpread({}, config.opt), mixinProps[propName].opt));
          }
        }
      });
    }

    for (var propName in config.props) {
      var requiredProps = _objectSpread(_objectSpread({}, config.requiredProps), config.props[propName].requiredProps);

      Tools.testProperty(Component, propName, config.props[propName].values, requiredProps, _objectSpread(_objectSpread({}, config.opt), config.props[propName].opt));
    }
  }
};
exports.Tools = Tools;
var _default = Tools;
exports.default = _default;