"use strict";

var _tools = require("./tools.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO Mocking UuApp Client should be somewhere else (uu_appg01-test?).
// NOTE All root scope variables/functions must have prefix "mock" so that babel-jest doesn't complain.
var mockClient;

function mockThrowErrorFn(method) {
  return function (uri) {
    var error = new Error("Unmocked call detected - Client.".concat(method, "(").concat(JSON.stringify(uri), "). This is by default disabled. You should mock remote calls (see testing guideline) or, if it was really intended to make unmocked call, then use `jest.unmock(\"uu_appg01\");` in the root scope of your test file. Note that this could also happen if your component performs more calls than you mocked."));
    error.stack = _tools.cleanupErrorStack ? (0, _tools.cleanupErrorStack)(error.message, error.stack) : error.stack;
    throw error;
  };
}

try {
  // NOTE Mocking uu_appg01 via jest.doMock can be done only if that module is actually
  // installed. If it is not, Jest resolver will throw an error which has no code so
  // we would have to check the message to identify this scenario (this is the case if the module
  // is re-mapped via moduleNameMapper)
  //   => instead try to resolve the module's package.json which will throw standard error
  // with code MODULE_NOT_FOUND and skip mocking in such case.
  require.resolve("uu_appg01/package.json");

  jest.doMock("uu_appg01", function () {
    var real = jest.requireActual("uu_appg01");
    mockClient = _objectSpread(_objectSpread({}, real.Client), {}, {
      get: jest.fn(mockThrowErrorFn("get")),
      post: jest.fn(mockThrowErrorFn("post"))
    });
    return _objectSpread(_objectSpread({}, real), {}, {
      Client: mockClient
    });
  });
} catch (e) {
  if (e.code !== "MODULE_NOT_FOUND") throw e;
}

beforeEach(function () {
  mockClient && mockClient.get.mockImplementation(mockThrowErrorFn("get"));
  mockClient && mockClient.post.mockImplementation(mockThrowErrorFn("post"));
});
afterEach(function () {
  mockClient && mockClient.get.mockRestore();
  mockClient && mockClient.post.mockRestore();
});