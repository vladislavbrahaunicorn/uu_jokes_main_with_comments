export = UU5;
declare namespace UU5 {
    namespace Common {
        const Css: {
            createCssModule(key: any, owner?: any): any;
        };
        const REGEXP: {
            attrs: any;
            uu5string: any;
            uu5stringTemplate: any;
            uu5json: any;
            uu5data: any;
            slashes: any;
            char: any;
            mobile1: any;
            mobile2: any;
            xy: any;
            splitByWhiteSpace: any;
            whiteSpaces: any;
            digitInBracket: any;
            stringParamsArray: any;
            stringParamsObject: any;
            jsCode: any;
            columnRegexp: any;
            chrome: any;
            edge: any;
            ie: any;
            windowsPhone: any;
            android: any;
            iPhone: any;
            mobile: any;
            weekYear: any;
            numberParts: any;
            isoTimeZone: any;
        };
        interface Tools$warning$1 {
        }
        interface Tools$getDateString$1 {
        }
        interface Tools$parseDate$1 {
        }
        interface Tools$formatNumber$1 {
            maxDecimals?: any;
            roundType?: any;
            country?: any;
            thousandSeparator?: any;
            decimalSeparator?: any;
            minDecimals?: any;
        }
        interface Tools$normalizeNumberSeparators$1 {
        }
        interface Tools$parseNumber$1 {
        }
        interface Tools$debounce$2 {
        }
        interface Tools$throttle$2 {
        }
        const Tools: {
            ELEVATIONS: {
                "-1": "inset 0 1px 5px 0 rgba(0,0,0,.14),inset 0 2px 4px 0 rgba(0,0,0,.3),inset 0 1px 5px 0 rgba(0,0,0,.15)";
                "1": "0 2px 2px 0 rgba(0,0,0,.14),0 3px 1px -2px rgba(0,0,0,.12),0 1px 5px 0 rgba(0,0,0,.2)";
                "2": "0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2)";
                "3": "0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12),0 3px 5px -1px rgba(0,0,0,.2)";
                "4": "0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12),0 5px 5px -3px rgba(0,0,0,.2)";
                "5": "0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12),0 7px 8px -4px rgba(0,0,0,.2)";
            };
            events: {
                lsi: "UU5_Common_LsiMixin_lsiEvent";
                highlight: "UU5_Bricks_TextCorrector_highlightEvent";
                dateTime: "UU5_Bricks_DateTime_event";
                number: "UU5_Bricks_Number_event";
            };
            screenSize: {
                xs: 480;
                s: 768;
                m: 992;
                l: 1360;
                xl: any;
            };
            getPage(): any;
            checkTag(tag: any, hideError: any): any;
            findComponent(tag: any, props: any, content: any, error: any, onLoad: any): any;
            loadLibrary(libraryName: any, callback: any): any;
            loadLibraryCache: {
            };
            buildAttributes(attrsString: any): any;
            isUU5String(uu5String: any): any;
            getChildrenFromUu5String(uu5String: any, opt: any): any;
            execMetaTag(tag: any, args: any): any;
            parseFromUu5JSON(uu5Json: any): any;
            parseFromUu5Data(uu5data: any): any;
            replaceTextEntity(text: any): any;
            pad(n: any, width: any, z: any): any;
            getServerRequest(src: any, parameters: any, contentType: any, done: any, fail: any): any;
            mergeDeep(): any;
            merge(): any;
            mergeEnvironmentUu5DataMap(uu5DataMap: any): any;
            getUrlParam(name: any): any;
            getBasicObject(object: any): any;
            getNavigator(): any;
            getFileName(path: any): any;
            getCamelCase(string: any, firstCharLowerCase?: boolean): any;
            getDashCase(string: any): any;
            getSnakeCase(string: any): any;
            getDocumentHeight(): any;
            getDocumentWidth(): any;
            getWidth(element: any): any;
            getInnerWidth(element: any): any;
            getOuterWidth(element: any, withMargin: any): any;
            getHeight(element: any): any;
            getInnerHeight(element: any): any;
            getOuterHeight(element: any, withMargin: any): any;
            calculateTextWidth(text: any, style: any): any;
            getOffsetTop(offsetElement: any, scrollElement: any): any;
            getOffsetLeft(offsetElement: any, scrollElement: any): any;
            getChildTag(child: any): any;
            getChildDisplayName(child: any): any;
            getChildTagName(child: any): any;
            isMobileOrTablet: any;
            getMobileOS(): any;
            isMobileIOS(): any;
            isMobileAndroid(): any;
            isSafari(): any;
            isChrome(): any;
            isEdge(): any;
            isIE(): any;
            isAndroidChrome(): any;
            isMac(): any;
            getBrowserLanguage(): any;
            getMobileOSVersion(): any;
            isTablet(): any;
            setCookie(cookieName: any, cookieValue: any, expireDays: any): any;
            getCookie(cookieName: any): any;
            sortLanguages(languagesString: any): any;
            generateUUID(length: any): any;
            joinClassNames(className1: any, className2: any): any;
            buildClasses(classes: any, keys: any): any;
            isInClasses(classes: any, regExp: any): any;
            addClassName(newClassName: any, classes: any): any;
            buildCounterCallback(callback: any, count: any): any;
            formatString(string: any, stringParams: any): any;
            scrollToTarget(id: any, smoothScroll: any, offset: any, scrollElement: any, stickToPosition: any): any;
            error(msg: any, context: any): any;
            warning(msg: any, context?: Tools$warning$1): any;
            repeat(value: any, count: any): any;
            rjust(string: any, length: any, padding: any): any;
            ljust(string: any, length: any, padding: any): any;
            decimalAdjust(type?: string, value: any, exp: any): any;
            round10(value: any, exp: any): any;
            floor10(value: any, exp: any): any;
            ceil10(value: any, exp: any): any;
            encodeValue(value: any): any;
            encodeQuery(params: any): any;
            isJson(str: any): any;
            decodeValue(value: any): any;
            decodeQuery(query: any): any;
            copyToClipboard(content: any): any;
            getWeekNumber(date: any): any;
            formatDate(date: any, format: any, timeZone?: any): any;
            extend(): any;
            isPlainObject(obj: any): any;
            isSame(x: any, y: any): any;
            shallowEqual(objA: any, objB: any): any;
            deepEqual(objA: any, objB: any): any;
            prettyJson(object: any, space: any): any;
            childToBodyItem(child: any): any;
            getElementByComputedStyle(element: any, styleProperty: any, value: any): any;
            createStyleTag(css: any, id: any): any;
            removeStyleTag(id: any): any;
            hasProfile(sourceProfileList: any, requestedProfile: any): any;
            hasProfileOnly(sourceProfileList: any, requestedProfile: any): any;
            hasSomeProfiles(sourceProfileList: any, requestedProfileList: any): any;
            hasEveryProfiles(sourceProfileList: any, requestedProfileList: any): any;
            getScreenSize(): any;
            getLanguages(language: any): any;
            getLanguage(): any;
            setLanguage(language: any): any;
            setLanguages(languages: any): any;
            getLsiKey(lsi: any, languages: any, language: any, defaultLanguage: any): any;
            getLsiItemByLanguage(lsi: any, params: any, languages: any): any;
            getLsiValueByLanguage(lsi: any, language: any, params: any): any;
            toLocaleDateString(date: any, country: any, opt: any): any;
            toLocaleTimeString(date: any, country: any, opt: any): any;
            toLocaleString(date: any, country: any, opt: any): any;
            adjustForTimezone(date: any, outputTimeZone: any, inputTimeZone: any): any;
            formatDateByCountry(date: any, country: any): any;
            streamToString(stream: any, encoding?: string): any;
            isDateReversed(country: any): any;
            getLocaleFormat(locale: any): any;
            getDateString(dateTime: any, opt?: Tools$getDateString$1): any;
            getTimeString(dateTime: any, displaySeconds: any, timeFormat: any, includeTimeFormat: any, timeStep?: number): any;
            isISODateString(string: any): any;
            getISOTimeZone(string: any): any;
            getDayPart(dateObject: any): any;
            isValidTime(timeString: any, format: any, seconds: any): any;
            parseDate(anyDate: any, opt?: Tools$parseDate$1): any;
            parseMonth(stringDate: any): any;
            parseYear(stringDate: any): any;
            compareDates(firstDate: any, secondDate: any, method: any, depth?: string): any;
            formatTime(timeObject: any, displaySeconds: any, timeFormat: any, includeTimeFormat: any, timeStep: any, fill0: any): any;
            parseTime(stringTime: any, timeFormat: any, autofill: any, allow24: any): any;
            changeTimeFormat(timeString: any, format: any): any;
            compareTimeObjects(firstTime: any, secondTime: any, method: any): any;
            cloneDateObject(dateObject: any): any;
            formatNumber(number: any, _?: Tools$formatNumber$1): any;
            normalizeNumberSeparators(number: any, opt?: Tools$normalizeNumberSeparators$1): any;
            parseNumber(number: any, opt?: Tools$parseNumber$1): any;
            getLSIItemByLanguage(lsi: any, params: any, languages: any): any;
            debounce(func: any, wait?: number, options?: Tools$debounce$2): any;
            throttle(func: any, wait: any, options?: Tools$throttle$2): any;
            buildColWidthClassName(colWidth: any): any;
            createContext: any;
            wrapIfExists(Wrapper: any, ...content: any): any;
            fillUnit(value: any, defaultUnit?: string): any;
            getCallToken(url: any, session: any): Promise<any>;
            deepSortObjectKeys(object: any): any;
            groupCall(uri: any, dtoIn: any, doLoadFn: any): any;
            openWindow(url: any, target: any): any;
        };
        const ClassNames: {
            text: "uu5-common-text";
            bg: "uu5-common-bg";
            hover: "uu5-common-hover";
            focus: "uu5-common-focus";
            outline: "uu5-common-bg-style-outline";
            transparent: "uu5-common-bg-style-transparent";
            underline: "uu5-common-bg-style-underline";
            filled: "uu5-common-bg-style-filled";
            link: "uu5-common-bg-style-link";
            elevation: "uu5-common-elevation-";
            elevationHover: "uu5-common-elevation-hover-";
            forceRich: "uu5-common-force-rich";
        };
        interface BaseMixin$propTypes$tooltip {
        }
        interface BaseMixin$propTypes$style {
        }
        interface BaseMixin$propTypes$mainAttrs {
        }
        interface BaseMixin$propTypes$parent {
        }
        interface BaseMixin$propTypes$ref_ {
            current?: any;
        }
        const BaseMixin: {
            statics: {
                "UU5.Common.BaseMixin": {
                    warnings: {
                        colWidthNotUsed: "Property colWidth was not used. Component was not covered itself by column.";
                        overflowNotUsed: "Property overflow was not used. Component was not covered itself by flc.";
                    };
                    errors: {
                        idMissing: "Id %s was not set.";
                        parentMissing: "Parent was not found in props.";
                        childrenAreNotIndexedByParent: "Children are not indexed by parent %s.";
                        tagIsWrong: "Wrong tag %s - element was not found.";
                        notRequiredMixin: "Registered mixin %s needs to require mixin %s in component %s!";
                        invalidParentTagName: "Parent %s is not %s.";
                        invalidParentType: "Parent %s has not function %s.";
                        childTagNotAllowed: "Child tag %s is by default not allowed here. Use <%s allowTags={[\"%s\"]} ...> if you really want to allow it, or wrap it into %s.";
                        childNotAllowed: "Child \"%s\" is by default not allowed here. Wrap it into %s.";
                    };
                    defaults: {
                        regexpChars: any;
                    };
                };
            };
            propTypes: {
                id?: string;
                name?: string;
                tooltip?: BaseMixin$propTypes$tooltip | string;
                className?: string;
                style?: BaseMixin$propTypes$style | string;
                mainAttrs?: BaseMixin$propTypes$mainAttrs;
                parent?: BaseMixin$propTypes$parent;
                ref_?: ((...args: any)=>any) | BaseMixin$propTypes$ref_;
                noIndex?: boolean;
                editable?: boolean;
                contentEditable?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            hasUU5CommonBaseMixin(): any;
            getTagName(): any;
            getMixinRegister(): any;
            registerMixin(mixinName: any): any;
            hasMixin(mixinName: any): any;
            getClassName(item: any, mixinName: any): any;
            getDefault(item: any, mixinName: any): any;
            getOpt(item: any, mixinName: any): any;
            getLsi(item: any, mixinName: any): any;
            getLSI(item: any, mixinName: any): any;
            getLsiComponent(item: any, mixin: any, params: any): any;
            getLSIComponent(item: any, mixin: any, params: any): any;
            getLsiValue(item: any, mixin: any, params: any): any;
            getLSIValue(item: any, mixin: any, params: any): any;
            getLsiItem(value: any, params: any): any;
            getLSIItem(value: any, params: any): any;
            isRendered(): any;
            setAsyncState(newState: any, setStateCallback: any): any;
            getLimit(item: any, mixinName: any): any;
            getError(item: any, mixinName: any): any;
            getWarning(item: any, mixinName: any): any;
            getCallName(item: any, mixinName: any): any;
            getId(): any;
            getName(): any;
            getTooltip(): any;
            getProps(prop: any): any;
            getUU5CommonBaseMixinProps(): any;
            getUU5CommonBaseMixinPropsToPass(suffix: any): any;
            getMainPropsToPass(mixinNames: any): any;
            getMainAttrs(): any;
            getParent(): any;
            getParentByType(typeFunction: any): any;
            checkParentTagName(parentTagNames: any): any;
            checkParentType(typeFunction: any): any;
            getIndex(): any;
            getFullClassName(className: any): any;
            stringToObjectType(string: any, type: any, prefix: any): any;
            switchChildrenToBody(props: any): any;
            findDOMNode: any;
            exportToObject(): any;
            showError(msgKey: any, msgParams: any, opt: any): any;
            showWarning(msgKey: any, msgParams: any, opt: any): any;
            replaceByHardSpace(text: any, language: any): any;
            shouldRender(nextProps: any, nextState: any, thisProps: any, thisState: any): any;
        };
        const Div: any;
        const Level: any;
        const Error: any;
        const NotFoundTag: any;
        const ElementaryMixin: {
            statics: {
                "UU5.Common.ElementaryMixin": {
                    requiredMixins: string[];
                    classNames: {
                        hidden: any;
                        selected: any;
                        disabled: any;
                        disabledCover: any;
                        disabledCoverTransparent: any;
                    };
                };
            };
            propTypes: {
                hidden?: boolean;
                disabled?: boolean;
                selected?: boolean;
                controlled?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonElementaryMixin(): any;
            getUU5CommonElementaryMixinProps(): any;
            getUU5CommonElementaryMixinPropsToPass(): any;
            setHiddenValue(value: any, setStateCallback: any): any;
            setHiddenValueDefault(value: any, setStateCallback: any): any;
            hide(setStateCallback: any): any;
            hideDefault(setStateCallback: any): any;
            show(setStateCallback: any): any;
            showDefault(setStateCallback: any): any;
            isHidden(): any;
            toggleHidden(setStateCallback: any): any;
            toggleHiddenDefault(setStateCallback: any): any;
            setDisabledValue(value: any, setStateCallback: any): any;
            setDisabledValueDefault(value: any, setStateCallback: any): any;
            disable(setStateCallback: any): any;
            disableDefault(setStateCallback: any): any;
            enable(setStateCallback: any): any;
            enableDefault(setStateCallback: any): any;
            isDisabled(): any;
            toggleDisabled(setStateCallback: any): any;
            toggleDisabledDefault(setStateCallback: any): any;
            setSelectedValue(value: any, setStateCallback: any): any;
            select(setStateCallback: any): any;
            selectDefault(setStateCallback: any): any;
            deselect(setStateCallback: any): any;
            deselectDefault(setStateCallback: any): any;
            isSelected(): any;
            toggleSelected(setStateCallback: any): any;
            toggleSelectedDefault(setStateCallback: any): any;
            buildMainAttrs(mainAttrs: any): any;
            getHiddenClassName(className: any): any;
            getDisabledClassName(className: any): any;
            getSelectedClassName(className: any): any;
            getDisabledCover(): any;
            getDisabledCoverTransparent(): any;
        };
        const IdentityMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.IdentityMixin": {
                    requiredMixins: string[];
                    lsi: {
                        login: {
                            cs: "Uživatel je odhlášen...";
                            en: "User is logged out...";
                        };
                    };
                };
            };
            getInitialState(): any;
            componentDidMount(): any;
            componentWillUnmount(): any;
            hasUU5CommonIdentityMixin(): any;
            getUU5CommonIdentityMixinProps(): any;
            getUU5CommonIdentityMixinPropsToPass(): any;
            isAuthenticated(): any;
            isNotAuthenticated(): any;
            isPending(): any;
            getIdentityFeedback(): any;
            getIdentity(): any;
            setAuthenticated(isAuth: any, setStateCallback: any): any;
            changeIdentity(setStateCallback: any): any;
            onChangeIdentityDefault(session: any): any;
            getAuthenticatedChild(getChild: any, opt: any): any;
        };
        const LevelMixin: {
            statics: {
                "UU5.Common.LevelMixin": {
                    requiredMixins: string[];
                    defaults: {
                        minLevel: 0;
                        maxLevel: 6;
                    };
                    warnings: {
                        levelMismatch: "Component level %s is lower than parent level %s.";
                        levelMax: "Maximum level of component is 6 but is set %d.";
                    };
                };
            };
            propTypes: {
                level?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | 0 | 1 | 2 | 3 | 4 | 5 | 6;
                increaseLevel?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonLevelMixin(): any;
            getLevel(): any;
            getUU5CommonLevelMixinProps(): any;
            getUU5CommonLevelMixinPropsToPass(): any;
            shouldIncreaseLevel(parentLevelComponent: any, props?: any): any;
            checkLevel(props?: any): any;
        };
        const NestingLevelMixin: {
            statics: {
                "UU5.Common.NestingLevelMixin": {
                    requiredMixins: string[];
                    defaults: {
                        nestingLevel: "boxCollection";
                    };
                    errors: {
                        unsupportedNestingLevel: "Nesting level \"%s\" is not a supported value. Use one of: %s.";
                    };
                };
            };
            propTypes: {
                nestingLevel?: "spa" | "page" | "container" | "bigBoxCollection" | "bigBox" | "boxCollection" | "box" | "smallBoxCollection" | "smallBox" | "inline";
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonNestingLevelMixin(): any;
            getNestingLevel(): any;
            getUU5CommonNestingLevelMixinProps(): any;
            getUU5CommonNestingLevelMixinPropsToPass(): any;
            getParentNestingLevel(parentNestingLevelComponent: any): any;
            getNestingLevelList(): any;
            checkNestingLevel(props?: any): any;
        };
        interface ContentMixin$propTypes$content {
            tag?: string | ((...args: any)=>any);
            props?: any[];
        }
        interface ContentMixin$propTypes$content$0 {
            tag?: string | ((...args: any)=>any);
            propsArray?: any[];
        }
        const ContentMixin: {
            statics: {
                "UU5.Common.ContentMixin": {
                    requiredMixins: string[];
                    defaults: {
                        standardMode: "standard";
                        outlineMode: "outline";
                        regexpUu5: any;
                    };
                    errors: {
                        unexpectedContentType: "Type \"%s\" of content property is unexpected.";
                        dynamicOnly: "Method %s can be used just for dynamic content.";
                        insertedchildIdNotExists: "Child with ID %s does not exist.";
                        childIdNotExists: "Child with ID %s does not exist.";
                        indexNotSet: "In this case index has to be specified.";
                        addRenderedChildToIdList_IdDuplicity: "There is duplicity ID %s in adding rendered child to the list of children by ID.";
                        addRenderedChildToNameList_IdDuplicity: "There is Name duplicity in adding rendered child to the list children by Name.";
                    };
                };
            };
            propTypes: {
                content?: any[] | ContentMixin$propTypes$content | ContentMixin$propTypes$content$0 | any | number | boolean;
                ignoreInnerHTML?: boolean;
                checkSpaces?: boolean;
                checkGrammar?: boolean;
                checkHighlight?: boolean;
                textCorrector?: boolean;
                dynamic?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonContentMixin(): any;
            isDynamic(): any;
            getContent(): any;
            getUU5CommonContentMixinProps(): any;
            getUU5CommonContentMixinPropsToPass(): any;
            expandChildProps(prevChild: any, childIndex: any): any;
            buildChild(childTag: any, childProps: any, children: any): any;
            cloneChild(child: any, props: any): any;
            expandChildDefault(child: any, key: any): any;
            buildNodeChildren(children: any, childPropsExpander: any): any;
            shouldChildRender(child: any): any;
            buildChildren(contentProps: any, childPropsExpander: any, childIndex: any): any;
            buildChildrenDefault(contentProps: any, childPropsExpander: any, childIndex: any): any;
            getStandardChildren(): any;
            getOutlineChildren(): any;
            getChildren(): any;
            getRenderedChildren(): any;
            getRenderedChildrenDefault(): any;
            setRenderedChildren(childrenIndexList: any): any;
            addRenderedChild(renderedChild: any, index: any): any;
            removeRenderedChild(renderedChild: any): any;
            getRenderedChildrenIdList(): any;
            getRenderedChildrenIdListDefault(): any;
            setRenderedChildrenIdList(childrenIdList: any): any;
            addRenderedChildToIdList(renderedChild: any): any;
            removeRenderedChildFromIdList(renderedChild: any): any;
            getRenderedChildrenNameList(): any;
            getRenderedChildrenNameListDefault(): any;
            setRenderedChildrenNameList(childrenNameList: any): any;
            addRenderedChildToNameList(renderedChild: any): any;
            removeRenderedChildFromNameList(renderedChild: any): any;
            getChildIndexById(childId: any): any;
            getChildIndexByIdDefault(childId: any): any;
            getRenderedChildById(childId: any): any;
            getRenderedChildByIdDefault(childId: any): any;
            getRenderedChildrenByName(childName: any): any;
            getRenderedChildByName(childName: any): any;
            getRenderedChildByNameDefault(childName: any): any;
            getRenderedChildByIndex(index: any): any;
            getRenderedChildByIndexDefault(index: any): any;
            getRenderedChildByTagName(tagName: any): any;
            getRenderedChildByTagNameDefault(tagName: any): any;
            getFirstRenderedChild(): any;
            getFirstRenderedChildDefault(): any;
            getLastRenderedChild(): any;
            getLastRenderedChildDefault(): any;
            eachRenderedChild(callback: any): any;
            eachRenderedChildDefault(callback: any): any;
            registerRenderedChild(renderedChild: any, index: any): any;
            unregisterRenderedChild(renderedChild: any): any;
            setChildren(newChildren: any, ...args: any): any;
            setChildrenDefault(newChildren: any, setStateCallback: any): any;
            insertChild(child: any, opt: any): any;
            insertChildDefault(child: any, opt: any): any;
            insertChildBefore(child: any, opt: any): any;
            insertChildBeforeDefault(child: any, opt: any): any;
            insertChildAfter(child: any, opt: any): any;
            insertChildAfterDefault(child: any, opt: any): any;
            updateChild(childId: any, newProps: any, opt: any): any;
            updateChildDefault(childId: any, newProps: any, opt: any): any;
            replaceChild(childId: any, child: any, opt: any): any;
            replaceChildDefault(childId: any, child: any, opt: any): any;
            deleteChild(childId: any, opt: any): any;
            deleteChildDefault(childId: any, opt: any): any;
            clearChildren(opt: any): any;
            clearChildrenDefault(opt: any): any;
            setFilter(filter: any, setStateCallback: any): any;
            resetFilter(setStateCallback: any): any;
            setSorter(sorter: any, setStateCallback: any): any;
            resetSorter(setStateCallback: any): any;
            setFilterAndSorter(filter: any, sorter: any, setStateCallback: any): any;
            resetFilterAndSorter(setStateCallback: any): any;
            getFilteredSorterChildren(children: any): any;
            setStandardMode(setStateCallback: any): any;
            setOutlineMode(setStateCallback: any): any;
            getMode(): any;
            isStandardMode(): any;
            isOutlineMode(): any;
        };
        const ColorSchemaMixin: {
            statics: {
                "UU5.Common.ColorSchemaMixin": {
                    classNames: {
                        main: "getMainClassUU5CommonColorSchemaMixin";
                    };
                    defaults: {
                        mainClassPrefix: "color-schema-";
                    };
                };
            };
            propTypes: {
                colorSchema(props: any, propName: any, componentName: any): any;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            hasUU5CommonColorSchemaMixin(): any;
            getColorSchema(): any;
            getUU5CommonColorSchemaMixinProps(): any;
            getUU5CommonColorSchemaMixinPropsToPass(): any;
            getMainClassUU5CommonColorSchemaMixin(): any;
        };
        interface SectionMixin$propTypes$header {
            tag?: string | any;
            props?: any[];
        }
        interface SectionMixin$propTypes$header$0 {
            tag?: string | any;
            propsArray?: any[];
        }
        interface SectionMixin$propTypes$header$element$props {
        }
        interface SectionMixin$propTypes$header$element {
            tag?: string | any;
            props?: SectionMixin$propTypes$header$element$props;
        }
        interface SectionMixin$propTypes$header$0 {
            element?: any | SectionMixin$propTypes$header$element;
        }
        interface SectionMixin$propTypes$footer {
            tag?: string | any;
            props?: any[];
        }
        interface SectionMixin$propTypes$footer$0 {
            tag?: string | any;
            propsArray?: any[];
        }
        interface SectionMixin$propTypes$footer$element$props {
        }
        interface SectionMixin$propTypes$footer$element {
            tag?: string | any;
            props?: SectionMixin$propTypes$footer$element$props;
        }
        interface SectionMixin$propTypes$footer$0 {
            element?: any | SectionMixin$propTypes$footer$element;
        }
        const SectionMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.SectionMixin": {
                    requiredMixins: string[];
                    defaults: {
                        headerTag: "UU5.Bricks.Header";
                        footerTag: "UU5.Bricks.Footer";
                        regexpUu5Json: any;
                    };
                };
            };
            propTypes: {
                header?: any[] | SectionMixin$propTypes$header | SectionMixin$propTypes$header$0 | any | SectionMixin$propTypes$header$0;
                footer?: any[] | SectionMixin$propTypes$footer | SectionMixin$propTypes$footer$0 | any | SectionMixin$propTypes$footer$0;
                underline?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            hasUU5CommonSectionMixin(): any;
            getHeader(props?: any): any;
            getHeaderDefault(props?: any): any;
            getFooter(props?: any): any;
            getFooterDefault(props?: any): any;
            getHeaderType(headerContent: any): any;
            getFooterType(footerContent: any): any;
            getUU5CommonSectionMixinProps(): any;
            getUU5CommonSectionMixinPropsToPass(): any;
            registerRenderedHeaderChild(renderedHeaderChild: any): any;
            registerRenderedFooterChild(renderedFooterChild: any): any;
            expandHeaderProps(prevHeaderChild: any, level: any): any;
            expandFooterProps(prevFooterChild: any, level: any): any;
            buildHeaderChild(header: any, level: any): any;
            buildHeaderChildDefault(header: any, level: any): any;
            buildFooterChild(footer: any, level: any): any;
            buildFooterChildDefault(footer: any, level: any): any;
            getHeaderChild(level: any): any;
            getFooterChild(level: any): any;
            getRenderedHeaderChild(): any;
            getRenderedFooterChild(): any;
        };
        interface SessionMixin$propTypes$session$initPromise {
        }
        interface SessionMixin$propTypes$session {
            initComplete?: boolean;
            initPromise?: SessionMixin$propTypes$session$initPromise;
            addListener?(...args: any): any;
            removeListener?(...args: any): any;
            getIdentity?(...args: any): any;
            isAuthenticated?(...args: any): any;
        }
        const SessionMixin: {
            statics: {
                "UU5.Common.SessionMixin": {
                    requiredMixins: string[];
                    errors: {
                        sessionNotFound: "Session has to be set.";
                    };
                };
            };
            propTypes: {
                session?: SessionMixin$propTypes$session;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentWillUnmount(): any;
            hasUU5CommonSessionMixin(): any;
            getUU5CommonSessionMixinProps(): any;
            getUU5CommonSessionMixinPropsToPass(): any;
            getSession(): any;
            login(opt: any): any;
            logout(): any;
            isSessionExpiring(): any;
            sessionExpiring(event: any): any;
            sessionExtended(event: any): any;
            onSessionExpiringDefault(event: any): any;
            onSessionExtendedDefault(event: any): any;
        };
        const CcrReaderMixin: {
            statics: {
                "UU5.Common.CcrReaderMixin": {
                    requiredMixins: string[];
                    errors: {
                        keyNotRegistered: "Component with key %s is not registered.";
                    };
                };
            };
            getInitialState(): any;
            hasUU5CommonCcrReaderMixin(): any;
            getUU5CommonCcrReaderMixinProps(): any;
            getUU5CommonCcrReaderMixinPropsToPass(): any;
            getCcrComponentByKey(key: any): any;
            isCcrRegisteredByKey(key: any): any;
            getCcrByKeyRegister(): any;
        };
        const CcrWriterMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.CcrWriterMixin": {
                    requiredMixins: string[];
                    warnings: {
                        keyNotRegistered: "Component with key %s was not registered.";
                    };
                    errors: {
                        alreadyRegistered: "Component with ccr key %s is already registered.";
                        unregisterNotThis: "Component with ccr key %s is not this component, cannot be unregistered.";
                    };
                };
            };
            propTypes: {
                ccrKey?: string;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            hasUU5CommonCcrWriterMixin(): any;
            getUU5CommonCcrWriterMixinProps(): any;
            getUU5CommonCcrWriterMixinPropsToPass(): any;
            getCcrKey(props: any): any;
        };
        const ScreenSizeMixin: {
            statics: {
                "UU5.Common.ScreenSizeMixin": {
                    requiredMixins: string[];
                    defaults: {
                        screenSizeEvent: "UU5_Common_screenSize";
                    };
                };
            };
            propTypes: {
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            hasUU5CommonScreenSizeMixinProps(): any;
            getUU5CommonScreenSizeMixinProps(): any;
            getUU5CommonScreenSizeMixinPropsToPass(): any;
            getScreenSize(): any;
            isXs(): any;
            isS(): any;
            isM(): any;
            isL(): any;
            isXl(): any;
            onChangeScreenSizeDefault(e: any, actualScreenSize: any): any;
        };
        interface CallsMixin$propTypes$calls {
        }
        const CallsMixin: {
            statics: {
                "UU5.Common.CallsMixin": {
                    requiredMixins: string[];
                    errors: {
                        callsNotFound: "Property calls was not set.";
                        staticsCallsNotFound: "Variable calls was not found in statics.";
                        callNameNotFound: "Call key %s was not found in calls.";
                        callNotFound: "Call %s was not found in calls.";
                    };
                };
            };
            propTypes: {
                calls?: string | CallsMixin$propTypes$calls;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonCallsMixin(): any;
            getUU5CommonCallsMixinProps(): any;
            getUU5CommonCallsMixinPropsToPass(): any;
            getCalls(): any;
            setCalls(calls: any): any;
            getCall(item: any, mixinName: any): any;
        };
        interface LoadMixin$propTypes$dtoOut {
        }
        const LoadMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.LoadMixin": {
                    defaults: {
                        minReloadInterval: any;
                        onLoadCall: "onLoad";
                        onReloadCall: "onReload";
                    };
                    errors: {
                        onLoad: "Error during loading data from server by call %s.";
                        onReload: "Error during reloading data from server by call %s.";
                    };
                    lsi(): any;
                };
            };
            propTypes: {
                uri?: string;
                dtoOut?: LoadMixin$propTypes$dtoOut;
                reloadInterval?: number;
                refireLoad?: boolean;
                overrideMinReloadInterval?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            getUri(): any;
            getDtoOut(): any;
            getErrorData(): any;
            getLoadFeedback(): any;
            isLoading(): any;
            isReady(): any;
            isError(): any;
            onLoadSuccess(dtoOut: any, setStateCallback: any): any;
            onReloadSuccess(dtoOut: any, setStateCallback: any): any;
            onLoadError(dtoOut: any, setStateCallback: any): any;
            onReloadError(dtoOut: any, setStateCallback: any): any;
            getLoadFeedbackChildren(getChildren: any): any;
            reload(callName: any, dtoIn: any): any;
            forceReload(callName: any, dtoIn: any): any;
            onLoadSuccessDefault(dtoOut: any): any;
            onLoadErrorDefault(dtoOut: any): any;
        };
        const LsiMixin: {
            statics: {
                "UU5.Common.LsiMixin": {
                    requiredMixins: string[];
                    lsiEvent: "UU5_Common_LsiMixin_lsiEvent";
                };
            };
            propTypes: {
                language?: string;
                registerLsi?(...args: any): any;
                unregisterLsi?(...args: any): any;
                setLanguage?(...args: any): any;
                getLanguage?(...args: any): any;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentWillUnmount(): any;
            hasUU5CommonLsiMixin(): any;
            getUU5CommonLsiMixinProps(): any;
            getUU5CommonLsiMixinPropsToPass(): any;
            getLanguages(): any;
            getLanguage(): any;
            onChangeLanguageDefault(language: any): any;
            Context: any;
            withContext(Component: any): any;
        };
        const SwipeMixin: {
            statics: {
                "UU5.Common.SwipeMixin": {
                    requiredMixins: string[];
                    defaults: {
                        maxLengthOnShortSwipe: 70;
                        minLengthOnSwipe: 10;
                        maxSpeedOnSlowSwipe: 0.3;
                        maxAngleDivergence: 10;
                    };
                };
            };
            propTypes: {
                swiped?: "up" | "right" | "down" | "left" | "upRight" | "downRight" | "upLeft" | "downLeft";
                swipedLong?: boolean;
                swipedFast?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            hasUU5CommonSwipeMixin(): any;
            getUU5CommonSwipeMixinProps(): any;
            getUU5CommonSwipeMixinPropsToPass(): any;
            getSwipeLength(): any;
            getAngle(): any;
            isSwipedHorizontal(): any;
            isSwipedVertical(): any;
            isSwiped(): any;
            isSwipedShort(): any;
            isSwipedLong(): any;
            isSwipedSlow(): any;
            isSwipedFast(): any;
            isSwipedUp(): any;
            isSwipedRight(): any;
            isSwipedDown(): any;
            isSwipedLeft(): any;
            isSwipedUpRight(): any;
            isSwipedDownRight(): any;
            isSwipedUpLeft(): any;
            isSwipedDownLeft(): any;
            isSwipedUpShort(): any;
            isSwipedRightShort(): any;
            isSwipedDownShort(): any;
            isSwipedLeftShort(): any;
            isSwipedUpRightShort(): any;
            isSwipedDownRightShort(): any;
            isSwipedUpLeftShort(): any;
            isSwipedDownLeftShort(): any;
            isSwipedUpLong(): any;
            isSwipedRightLong(): any;
            isSwipedDownLong(): any;
            isSwipedLeftLong(): any;
            isSwipedUpRightLong(): any;
            isSwipedDownRightLong(): any;
            isSwipedUpLeftLong(): any;
            isSwipedDownLeftLong(): any;
            swipeOnTouchStart(handler: any, e: any): any;
            swipeOnTouchMove(handler: any, e: any): any;
            swipeOnTouchEnd(handler: any, e: any): any;
            angle(x: any, y: any, ex: any, ey: any): any;
        };
        interface VucMixin$propTypes$calls {
        }
        interface VucMixin$propTypes$errorRoute$props {
        }
        interface VucMixin$propTypes$errorRoute {
            tag?: string | ((...args: any)=>any);
            props?: VucMixin$propTypes$errorRoute$props;
        }
        interface VucMixin$propTypes$params {
        }
        const VucMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.VucMixin": {
                    requiredMixins: string[];
                    calls: {
                        authorizeVuc: "authorizeVuc";
                    };
                    errors: {
                        sysAuthorizeVuc: "Error of VUC %s during connection to server.";
                        notErrorRoute: "Error route was not set either in props or in Environment.";
                        notCall: "Call %s was not found either in props or in Environment.";
                    };
                    lsi(): any;
                };
            };
            propTypes: {
                authorized?: boolean;
                calls?: VucMixin$propTypes$calls;
                errorRoute?: string | any | VucMixin$propTypes$errorRoute;
                params?: VucMixin$propTypes$params;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentWillUnmount(): any;
            hasUU5CommonVucMixin(): any;
            getUU5CommonVucMixinProps(): any;
            getUU5CommonVucMixinPropsToPass(): any;
            getProfiles(): any;
            isReady(): any;
            isLoading(): any;
            isError(): any;
            getVucChildren(getChildren: any): any;
            checkAuthorizing(): any;
            setTitle(title: any): any;
        };
        const PureRenderMixin: {
            statics: {
                "UU5.Common.PureRenderMixin": {
                    requiredMixins: string[];
                };
            };
            propTypes: {
                pureRender?: boolean;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            shouldComponentUpdate(nextProps: any, nextState: any): any;
            shouldComponentUpdateDefault(nextProps: any, nextState: any): any;
            hasUU5CommonPureRenderMixin(): any;
            getUU5CommonPureRenderMixinProps(): any;
            getUU5CommonPureRenderMixinPropsToPass(): any;
        };
        const ResizeMixin: {
            statics: {
                "UU5.Common.ResizeMixin": {
                    requiredMixins: string[];
                    defaults: {
                        minResizeInterval: 100;
                    };
                };
            };
            propTypes: {
                resizeInterval?: number;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentDidUpdate(prevProps: any, prevState: any): any;
            componentWillUnmount(): any;
            hasUU5CommonResizeMixin(): any;
            getUU5CommonResizeMixinProps(): any;
            getUU5CommonResizeMixinPropsToPass(): any;
        };
        interface RouteMixin$propTypes$params {
        }
        const RouteMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.RouteMixin": {
                    requiredMixins: string[];
                };
            };
            propTypes: {
                params?: RouteMixin$propTypes$params;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentDidUpdate(prevProps: any, prevState: any): any;
            hasUU5CommonRouteMixin(): any;
            getUU5CommonRouteMixinProps(): any;
            getUU5CommonRouteMixinPropsToPass(): any;
        };
        const Router: any;
        const UU5String: any;
        const UU5Json: any;
        const UU5Data: any;
        const Url: any;
        const EventListener: any;
        const TagPlaceholder: any;
        const Outline: any;
        const Help: any;
        const EditableMixin: {
            statics: {
                "UU5.Common.EditableMixin": {
                    requiredMixins: string[];
                    lsi: {
                        header: {
                            cs: "Editace komponenty %s";
                            en: "%s editation";
                        };
                    };
                    classNames: {
                        docLink: any;
                    };
                };
                editMode_: {
                    customEdit: true;
                };
            };
            propTypes: {
                getEditablePropValue?(...args: any): any;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            componentWillUnmount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentDidUpdate(): any;
            hasUU5CommonEditableMixin(): any;
            startWatchingResize(key: any, resizeCallback: any): any;
            stopWatchingResize(key: any): any;
            getEditablePropsValues(propsArray: any): any;
            getEditablePropsValuesDefault(propsArray: any): any;
            startEditation(endEditationCallback: any, saveEditationCallback: any, endChildrenEditationFn: any): any;
            isInlineEdited(): any;
            saveEditation(newProps: any): any;
            endChildrenEditation(): any;
            endEditation(newProps: any): any;
            forceEndEditation(): any;
            isNotInlineEdited(): any;
            getEditingLoading(): any;
        };
        const TextCorrector: any;
        const Request: any;
        const FragmentMixin: {
            mixins: any[];
            statics: {
                "UU5.Common.FragmentMixin": {
                    requiredMixins: string[];
                };
            };
            getInitialState(): any;
            hasUU5CommonFragmentMixin(): any;
            initComponentFragmentation(initFn: any, nextProps: any): any;
            setFragment(fragment: any): any;
        };
        const ListDataManager: any;
        const DataManager: any;
        const Loader: any;
        const PropMapper: any;
        const SessionContext: any;
        const Session: any;
        const Identity: any;
        const Redirect: any;
        const Context: any;
        const Component: {
            create(componentDescriptor: any): any;
            createHoc(args: any): any;
            lazy(...args: any): any;
            memo(...args: any): any;
        };
        const DnD: {
            Provider: any;
            withContext(Component: any): any;
        };
        const DOM: any;
        const Element: any;
        const Portal: any;
        const Reference: any;
        const VisualComponent: any;
        function withVisibilityCheck(Component: any, reserve?: number): any;
        const Children: any;
        const Fragment: any;
        interface Suspense$0 {
            loading?: any;
        }
        function Suspense(_: Suspense$0): any;
        namespace Suspense {
            const displayName: "Suspense";
        }
        const bookKitUrl: "https://uuos9.plus4u.net/uu-bookkitg01-main/78462435-ed11ec379073476db0aa295ad6c00178/book/page";
    }
    const Environment: {
        name: any;
        mode: any;
        version: any;
        licence: string;
        basePath: any;
        nestingLevelList: string[];
        nestingLevelStrict: false;
        showProductionWarning: false;
        colorSchemaMap: {
            default: {
                color: "default";
            };
            primary: {
                color: "blue-rich";
                src: any;
            };
            success: {
                color: "green";
                src: any;
            };
            info: {
                color: "blue";
                src: any;
            };
            warning: {
                color: "orange";
                src: any;
            };
            danger: {
                color: "red";
                src: any;
            };
            yellow: {
                color: "yellow";
                src: any;
            };
            "yellow-rich": {
                color: "yellow-rich";
                src: any;
            };
            orange: {
                color: "orange";
                src: any;
            };
            "orange-rich": {
                color: "orange-rich";
                src: any;
            };
            pink: {
                color: "pink";
                src: any;
            };
            "pink-rich": {
                color: "pink-rich";
                src: any;
            };
            red: {
                color: "red";
                src: any;
            };
            "red-rich": {
                color: "red-rich";
                src: any;
            };
            purple: {
                color: "purple";
                src: any;
            };
            "purple-rich": {
                color: "purple-rich";
                src: any;
            };
            cyan: {
                color: "cyan";
                src: any;
            };
            "cyan-rich": {
                color: "cyan-rich";
                src: any;
            };
            blue: {
                color: "blue";
                src: any;
            };
            "blue-rich": {
                color: "blue-rich";
                src: any;
            };
            green: {
                color: "green";
                src: any;
            };
            "green-rich": {
                color: "green-rich";
                src: any;
            };
            brown: {
                color: "brown";
                src: any;
            };
            "brown-rich": {
                color: "brown-rich";
                src: any;
            };
            amber: {
                color: "amber";
                src: any;
            };
            "amber-rich": {
                color: "amber-rich";
                src: any;
            };
            "deep-orange": {
                color: "deep-orange";
                src: any;
            };
            "deep-orange-rich": {
                color: "deep-orange-rich";
                src: any;
            };
            "deep-purple": {
                color: "deep-purple";
                src: any;
            };
            "deep-purple-rich": {
                color: "deep-purple-rich";
                src: any;
            };
            indigo: {
                color: "indigo";
                src: any;
            };
            "indigo-rich": {
                color: "indigo-rich";
                src: any;
            };
            teal: {
                color: "teal";
                src: any;
            };
            "teal-rich": {
                color: "teal-rich";
                src: any;
            };
            "light-green": {
                color: "light-green";
                src: any;
            };
            "light-green-rich": {
                color: "light-green-rich";
                src: any;
            };
            "light-blue": {
                color: "light-blue";
                src: any;
            };
            "light-blue-rich": {
                color: "light-blue-rich";
                src: any;
            };
            lime: {
                color: "lime";
                src: any;
            };
            "lime-rich": {
                color: "lime-rich";
                src: any;
            };
            "blue-grey": {
                color: "blue-grey";
                src: any;
            };
            "blue-grey-rich": {
                color: "blue-grey-rich";
                src: any;
            };
            grey: {
                color: "grey";
                src: any;
            };
            "grey-rich": {
                color: "grey-rich";
                src: any;
            };
            black: {
                color: "black";
                src: any;
            };
            white: {
                color: "white";
                src: any;
            };
            custom: {
                color: "custom";
            };
        };
        colors: {
            amber: {
                c50: "#FFF8E1";
                c100: "#FFECB3";
                c200: "#FFE082";
                c300: "#FFD54F";
                c400: "#FFCA28";
                c500: "#FFC107";
                c600: "#FFB300";
                c700: "#FFA000";
                c800: "#FF8F00";
                c900: "#FF6F00";
                inverse: "rgba(0,0,0,.87)";
            };
            black: {
                c50: "rgba(255, 255, 255, 0.60)";
                c100: "rgba(255, 255, 255, 0.40)";
                c500: "rgba(255, 255, 255, 0.20)";
                c600: "rgba(0, 0, 0, 0.20)";
                c700: "rgba(0, 0, 0, 0.40)";
                c800: "rgba(0, 0, 0, 0.60)";
                c900: "rgb(0, 0, 0)";
                inverse: "#FFF";
            };
            "blue-grey": {
                c50: "#ECEFF1";
                c100: "#CFD8DC";
                c200: "#B0BEC5";
                c300: "#90A4AE";
                c400: "#78909C";
                c500: "#607D8B";
                c600: "#546E7A";
                c700: "#455A64";
                c800: "#37474F";
                c900: "#263238";
                inverse: "#FFF";
            };
            blue: {
                c50: "#E3F2FD";
                c100: "#BBDEFB";
                c200: "#90CAF9";
                c300: "#64B5F6";
                c400: "#42A5F5";
                c500: "#2196F3";
                c600: "#1E88E5";
                c700: "#1976D2";
                c800: "#1565C0";
                c900: "#0D47A1";
                inverse: "#FFF";
            };
            brown: {
                c50: "#EFEBE9";
                c100: "#D7CCC8";
                c200: "#BCAAA4";
                c300: "#A1887F";
                c400: "#8D6E63";
                c500: "#795548";
                c600: "#6D4C41";
                c700: "#5D4037";
                c800: "#4E342E";
                c900: "#3E2723";
                inverse: "#FFF";
            };
            cyan: {
                c50: "#E0F7FA";
                c100: "#B2EBF2";
                c200: "#80DEEA";
                c300: "#4DD0E1";
                c400: "#26C6DA";
                c500: "#00BCD4";
                c600: "#00ACC1";
                c700: "#0097A7";
                c800: "#00838F";
                c900: "#006064";
                inverse: "rgba(0,0,0,.87)";
            };
            "deep-orange": {
                c50: "#FBE9E7";
                c100: "#FFCCBC";
                c200: "#FFAB91";
                c300: "#FF8A65";
                c400: "#FF7043";
                c500: "#FF5722";
                c600: "#F4511E";
                c700: "#E64A19";
                c800: "#D84315";
                c900: "#BF360C";
                inverse: "#FFF";
            };
            "deep-purple": {
                c50: "#EDE7F6";
                c100: "#D1C4E9";
                c200: "#B39DDB";
                c300: "#9575CD";
                c400: "#7E57C2";
                c500: "#673AB7";
                c600: "#5E35B1";
                c700: "#512DA8";
                c800: "#4527A0";
                c900: "#311B92";
                inverse: "#FFF";
            };
            green: {
                c50: "#E8F5E9";
                c100: "#C8E6C9";
                c200: "#A5D6A7";
                c300: "#81C784";
                c400: "#66BB6A";
                c500: "#4CAF50";
                c600: "#43A047";
                c700: "#388E3C";
                c800: "#2E7D32";
                c900: "#1B5E20";
                inverse: "#FFF";
            };
            grey: {
                c50: "#FAFAFA";
                c100: "#F5F5F5";
                c200: "#EEEEEE";
                c300: "#E0E0E0";
                c400: "#BDBDBD";
                c500: "#9E9E9E";
                c600: "#757575";
                c700: "#616161";
                c800: "#424242";
                c900: "#212121";
                inverse: "#FFF";
            };
            indigo: {
                c50: "#E8EAF6";
                c100: "#C5CAE9";
                c200: "#9FA8DA";
                c300: "#7986CB";
                c400: "#5C6BC0";
                c500: "#3F51B5";
                c600: "#3949AB";
                c700: "#303F9F";
                c800: "#283593";
                c900: "#1A237E";
                inverse: "#FFF";
            };
            "light-blue": {
                c50: "#E1F5FE";
                c100: "#B3E5FC";
                c200: "#81D4FA";
                c300: "#4FC3F7";
                c400: "#29B6F6";
                c500: "#03A9F4";
                c600: "#039BE5";
                c700: "#0288D1";
                c800: "#0277BD";
                c900: "#01579B";
                inverse: "#FFF";
            };
            "light-green": {
                c50: "#F1F8E9";
                c100: "#DCEDC8";
                c200: "#C5E1A5";
                c300: "#AED581";
                c400: "#9CCC65";
                c500: "#8BC34A";
                c600: "#7CB342";
                c700: "#689F38";
                c800: "#558B2F";
                c900: "#33691E";
                inverse: "rgba(0,0,0,.87)";
            };
            lime: {
                c50: "#F9FBE7";
                c100: "#F0F4C3";
                c200: "#E6EE9C";
                c300: "#DCE775";
                c400: "#D4E157";
                c500: "#CDDC39";
                c600: "#C0CA33";
                c700: "#AFB42B";
                c800: "#9E9D24";
                c900: "#827717";
                inverse: "rgba(0,0,0,.87)";
            };
            orange: {
                c50: "#FFF3E0";
                c100: "#FFE0B2";
                c200: "#FFCC80";
                c300: "#FFB74D";
                c400: "#FFA726";
                c500: "#FF9800";
                c600: "#FB8C00";
                c700: "#F57C00";
                c800: "#EF6C00";
                c900: "#E65100";
                inverse: "rgba(0,0,0,.87)";
            };
            pink: {
                c50: "#FCE4EC";
                c100: "#F8BBD0";
                c200: "#F48FB1";
                c300: "#F06292";
                c400: "#EC407A";
                c500: "#E91E63";
                c600: "#D81B60";
                c700: "#C2185B";
                c800: "#AD1457";
                c900: "#880E4F";
                inverse: "#FFF";
            };
            purple: {
                c50: "#F3E5F5";
                c100: "#E1BEE7";
                c200: "#CE93D8";
                c300: "#BA68C8";
                c400: "#AB47BC";
                c500: "#9C27B0";
                c600: "#8E24AA";
                c700: "#7B1FA2";
                c800: "#6A1B9A";
                c900: "#4A148C";
                inverse: "#FFF";
            };
            red: {
                c50: "#FFEBEE";
                c100: "#FFCDD2";
                c200: "#EF9A9A";
                c300: "#E57373";
                c400: "#EF5350";
                c500: "#F44336";
                c600: "#E53935";
                c700: "#D32F2F";
                c800: "#C62828";
                c900: "#B71C1C";
                inverse: "#FFF";
            };
            teal: {
                c50: "#E0F2F1";
                c100: "#B2DFDB";
                c200: "#80CBC4";
                c300: "#4DB6AC";
                c400: "#26A69A";
                c500: "#009688";
                c600: "#00897B";
                c700: "#00796B";
                c800: "#00695C";
                c900: "#004D40";
                inverse: "#FFF";
            };
            white: {
                c50: "rgba(0, 0, 0, 0.40)";
                c100: "rgba(0, 0, 0, 0.20)";
                c500: "rgba(255, 255, 255, 0.20)";
                c600: "rgba(255, 255, 255, 0.40)";
                c700: "rgba(255, 255, 255, 0.60)";
                c800: "rgba(255, 255, 255, 0.80)";
                c900: "#FFF";
                inverse: "rgba(0,0,0,.87)";
            };
            yellow: {
                c50: "#FFFDE7";
                c100: "#FFF9C4";
                c200: "#FFF59D";
                c300: "#FFF176";
                c400: "#FFEE58";
                c500: "#FFEB3B";
                c600: "#FDD835";
                c700: "#FBC02D";
                c800: "#F9A825";
                c900: "#F57F17";
                inverse: "rgba(0,0,0,.87)";
            };
            common: {
                darkText: "rgba(0,0,0,.87)";
                darkIcon: "rgba(0, 0, 0, 0.54)";
                white: "#FFF";
                black: "#000";
            };
        };
        calls: {
        };
        limits: {
        };
        ccr: {
            byKey: {
            };
        };
        ccrStrict: false;
        CCRKEY_PAGE: "UU5.Bricks.Page";
        CCRKEY_ROUTER: "UU5.Common.Router";
        COMPONENT_REGISTRY_URL: "https://uuapp.plus4u.net/uu-applibraryregistry-maing01/fe96c133c895434bbd4d5b24831483f3/library/get";
        STATISTICS_BASE_PATH: "https://uuapp.plus4u.net/uu-applibraryregistry-statsg01/8fc27ec054b340cb98c9f10789bd4f63/";
        CDN_URL: any;
        COMPONENT_RENDER_UVE: "https://uuapp.plus4u.net/uu-plus4ugo-maing01/f34b62a867db4bd89490534bb26451ad/component/render";
        fontCssUrl: any;
        resizeInterval: 150;
        holdTimeout: 500;
        holdDiff: 20;
        uu5DataMap: {
        };
        languages: any[];
        languageList: {
            cs: {
                flag: any;
                language: "Česky";
            };
            nl: {
                flag: any;
                language: "Nederlands";
            };
            en: {
                flag: any;
                language: "English";
            };
            "en-gb": {
                flag: any;
                language: "English GB";
            };
            "en-us": {
                flag: any;
                language: "English US";
            };
            fr: {
                flag: any;
                language: "Français";
            };
            de: {
                flag: any;
                language: "Deutsch";
            };
            pl: {
                flag: any;
                language: "Polski";
            };
            ru: {
                flag: any;
                language: "Pусский";
            };
            sk: {
                flag: any;
                language: "Slovensky";
            };
            es: {
                flag: any;
                language: "Español";
            };
            uk: {
                flag: any;
                language: "Українська";
            };
            it: {
                flag: any;
                language: "Italiano";
            };
        };
        defaultLanguage: "en-gb";
        logErrorFunction: any;
        hardSpace: {
            regExp: "&nbsp;";
            nbSpace: " ";
            nbHyphen: "‑";
            lsiReplacer: {
                "cs-cz"(text: any): any;
                code(text: any): any;
            };
        };
        textCorrector: false;
        textEntityMap: {
            htmlEntity(): any;
            htmlEntity(s: any): any;
            replaceHtmlEntity(text: any): any;
            asciiEmoji(): any;
            asciiEmoji(s: any): any;
            replaceAsciiEmoji(text: any): any;
            extendedTextEntity(): any;
            extendedTextEntity(s: any): any;
            replace(text: any): any;
            addExtendedTextEntityMap(map: any): any;
            removeExtendedTextEntityMap(map: any): any;
            extendedTextEntityMapList(): any;
            recompile(): any;
        };
        textEntityReplace: true;
        numberFormat: {
        };
        dateTimeFormat: {
        };
        dateTimeZone: any;
        uu5StringTagsRegExp: any;
        session: any;
        urlBuilder: any;
        library: {
        };
        useLibraryRegistry: true;
        basePathAttrName: "data-uu-app-base";
        trustedDomainRegexp: any;
        allowStatistics: true;
        allowTelemetry: true;
        useComponentRegistry: true;
        DocumentManager: any;
        TimeManager: any;
        iconLibraries: {
            mdi: any;
            glyphicon: any;
            fa: any;
            uu5: any;
            plus4u: any;
            plus4u5: any;
            uubml: any;
            uubmlicon: "https://uuappg01-eu-w-1.plus4u.net/uu-uubmldraw-stencilcatalogueg01/c168bd044ce044d48ba284c89eeb573b/stencil/getCss?code=";
        };
        IconManager: any;
        addIconLibrary(iconsKey: any, src: any): any;
        removeIconLibrary(iconsKey: any): any;
        clearIconLibraries(): any;
        addLibrary(libraryName: any, params: any): any;
        getLibrary(libraryName: any): any;
        disableStatistics(): any;
        enableStatistics(): any;
        isStatistics(): any;
        addRuntimeLibrary(library: any): any;
        getRuntimeLibraries(): any;
        colorSchema: any;
        isDevelopment(): any;
        isProduction(): any;
        changeColorSchema(key: any, colorSchema: any, src: any): any;
        getColorSchema(key: any): any;
        search(searchedTexts: any): any;
        setDateTimeFormat(format: any): any;
        setDateTimeCountry(country: any): any;
        setDateTimeZone(timeZone: any): any;
        setDateTimeOptions(opt: any): any;
        setNumberCountry(country: any): any;
        setNumberOptions(opt: any): any;
        getPage(): any;
        getRouter(): any;
        setRoute(...args: any): any;
        setSession(session: any): any;
        getSession(): any;
        App: {
            vucConfig: {
                errorRoute: any;
            };
            callConfig: {
                authorizeVuc(): any;
            };
        };
        Lsi: {
            Forms: {
            };
            Common: {
            };
        };
        getNestingLevelList(levelFrom: any, levelTo: any): any;
        getUrlBuilder(): any;
        setUrlBuilder(urlBuilder: any): any;
        tagCalls: {
        };
        getAppBasePath(): any;
        getScrollBarWidth(): any;
        isTrustedDomain(url: any): any;
        isPageVisible(): any;
        isPageFocused(): any;
        numberOptions: {
            country: any;
            thousandSeparator: any;
            decimalSeparator: any;
        };
        Speech: any;
        EventListener: any;
    };
    namespace Icons {
        const alertCircle: string;
        const arrowDown: string;
        const arrowLeft: string;
        const arrowRight: string;
        const arrowUp: string;
        const calendar: string;
        const clock: string;
        const cross: string;
        const errorCircle: string;
        const finder: string;
        const flagUpload: string;
        const menu: string;
        const minus: string;
        const ok: string;
        const okCircle: string;
        const person: string;
        const picture: string;
        const plus: string;
        const point: string;
        const thumb: string;
    }
    namespace PropTypes {
    }
    namespace Utils {
        const ColorSchema: {
            getClassName(colorSchema: any): any;
        };
        const Content: {
            getChildren(children: any, props: any, statics: any): any;
        };
        const Lsi: {
            register(listener: any): any;
            unregister(listener: any): any;
            setLanguage(language: any): any;
            getLanguage(): any;
            parseLanguage(languagesString: any): any;
            getItem(lsi: any, language?: any): any;
        };
        const NestingLevel: {
            values: string[];
            getNestingLevel(props: any, statics: any): any;
            getChildNestingLevel(props: any, statics: any): any;
        };
        const ScreenSize: any;
        const Session: {
            register(session: any, setIdentity: any, setExpiring: any): any;
        };
    }
    const createVisualComponent: any;
    function createComponent(componentDescriptor: any): any;
    function createHoc(args: any): any;
    namespace Bricks {
        interface Alert$Props {
            position?: "left" | "center" | "right";
            closeTimer?: number;
            closeDisabled?: boolean;
            block?: boolean;
            onClose?(...args: any): any;
            onCloseAfter?(...args: any): any;
            onCloseBefore?(...args: any): any;
            countdown?: boolean;
            offsetTop?: number | string | "auto";
            content?: any;
        }
        function Alert(props: Alert$Props): any;
        interface AlertBus$Props {
            colorSchema?: any;
            position?: string;
            closeTimer?: number;
            closeDisabled?: boolean;
            block?: boolean;
            onClose?(...args: any): any;
            descending?: boolean;
            stacked?: boolean;
            offsetTop?: number | string | "auto";
            location?: "portal" | "local" | "page";
        }
        function AlertBus(props: AlertBus$Props): any;
        interface Accordion$iconExpanded {
        }
        interface Accordion$iconCollapsed {
        }
        interface Accordion$Props {
            panels?: any[];
            onClickNotCollapseOthers?: boolean;
            iconExpanded?: string | Accordion$iconExpanded;
            iconCollapsed?: string | Accordion$iconCollapsed;
            onClick?(...args: any): any;
            allowTags?: string[];
            size?: "s" | "m" | "l" | "xl";
            iconAlign?: "right" | "after" | "left";
            openClick?: "header" | "icon" | "none";
            mountPanelContent?: "onEachExpand" | "onFirstExpand" | "onFirstRender";
        }
        function Accordion(props: Accordion$Props): any;
        interface Panel$Props {
            expanded?: boolean;
            alwaysExpanded?: boolean;
            iconExpanded?: string;
            iconCollapsed?: string;
            onClick?(...args: any): any;
            disableHeaderClick?: boolean;
            size?: "s" | "m" | "l" | "xl";
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            bgStyleHeader?: "filled" | "outline" | "transparent" | "underline";
            bgStyleContent?: "filled" | "outline" | "transparent" | "underline";
            colorSchemaHeader?: string;
            colorSchemaContent?: string;
            borderRadius?: string;
            elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            iconAlign?: "right" | "after" | "left";
            openClick?: "header" | "icon" | "none";
            mountContent?: "onEachExpand" | "onFirstExpand" | "onFirstRender";
        }
        function Panel(props: Panel$Props): any;
        interface Button$Props {
            size?: "s" | "m" | "l" | "xl";
            displayBlock?: boolean;
            pressed?: boolean;
            bgStyle?: "filled" | "outline" | "transparent" | "underline" | "link";
            onClick?(...args: any): any;
            onWheelClick?(...args: any): any;
            onCtrlClick?(...args: any): any;
            href?: string;
            target?: "_blank" | "_parent" | "_top" | "_self";
            smoothScroll?: number;
            offset?: number;
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            baseline?: boolean;
        }
        function Button(props: Button$Props): any;
        interface ButtonGroup$Props {
            size?: string;
            vertical?: boolean;
            allowTags?: string[];
            bgStyle?: "filled" | "outline" | "transparent" | "underline" | "link";
            borderRadius?: string;
            elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            baseline?: boolean;
        }
        function ButtonGroup(props: ButtonGroup$Props): any;
        interface Dropdown$buttonProps {
        }
        interface Dropdown$splitButtonProps {
        }
        interface Dropdown$Props {
            label?: any;
            size?: string;
            onClick?(...args: any): any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline" | "link";
            iconOpen?: string;
            iconClosed?: string;
            iconHidden?: boolean;
            items?: any[];
            pullRight?: boolean;
            dropup?: boolean;
            split?: boolean;
            smoothScroll?: number;
            offset?: number;
            closedOnLeave?: boolean;
            openOnHover?: boolean;
            allowTags?: string[];
            disableBackdrop?: boolean;
            menuClassName?: string;
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            buttonProps?: Dropdown$buttonProps;
            splitButtonProps?: Dropdown$splitButtonProps;
            baseline?: boolean;
            fitMenuToViewport?: boolean;
            popoverLocation?: "local" | "portal";
            compactSubmenu?: boolean | string;
        }
        function Dropdown(props: Dropdown$Props): any;
        namespace Dropdown {
            interface Item$linkProps {
            }
            interface Item$Props {
                header?: boolean;
                divider?: boolean;
                label?: any;
                href?: string;
                onClick?(...args: any): any;
                onCtrlClick?(...args: any): any;
                onWheelClick?(...args: any): any;
                smoothScroll?: number;
                offset?: number;
                target?: string;
                dropup?: boolean;
                linkProps?: Item$linkProps;
            }
            function Item(props: Item$Props): any;
        }
        interface LanguageSelector$languages$languageCode {
            flag?: string;
            language?: string;
        }
        interface LanguageSelector$languages {
            languageCode?: LanguageSelector$languages$languageCode;
        }
        interface LanguageSelector$Props {
            headerMode?: "all" | "flag" | "label" | "code";
            bodyMode?: "all" | "flag" | "label" | "label-code";
            displayedLanguages?: string[] | string;
            languages?: LanguageSelector$languages;
            defaultLanguage?: string;
            size?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            pullRight?: boolean;
            dropup?: boolean;
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            baseline?: boolean;
        }
        function LanguageSelector(props: LanguageSelector$Props): any;
        interface TouchIcon$Props {
            icon?: string;
            href?: string;
            target?: "_blank" | "_parent" | "_top" | "_self";
            onClick?(...args: any): any;
            onCtrlClick?(...args: any): any;
            onWheelClick?(...args: any): any;
            borderRadius?: string;
            bgStyle?: "filled" | "transparent";
        }
        function TouchIcon(props: TouchIcon$Props): any;
        interface NavBar$Props {
            fixed?: "top" | "bottom";
            smoothScroll?: number;
            offset?: number;
            open?: boolean;
            alwaysOpen?: boolean;
            iconOpen?: string;
            iconClosed?: string;
            onOpen?(...args: any): any;
            onClose?(...args: any): any;
            size?: "s" | "m" | "l" | "xl";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        function NavBar(props: NavBar$Props): any;
        namespace NavBar {
            interface Header$Props {
                _icon?: string;
                _size?: string;
                _hamburger?: boolean;
                _onOpen?(...args: any): any;
                _onClose?(...args: any): any;
            }
            function Header(props: Header$Props): any;
            interface Nav$Props {
                aligned?: "left" | "right";
                smoothScroll?: number;
                offset?: number;
                allowTags?: string[];
                _size?: string;
            }
            function Nav(props: Nav$Props): any;
            namespace Nav {
                interface Item$Props {
                    onClick?(...args: any): any;
                    href?: string;
                    target?: "_blank" | "_parent" | "_top" | "_self";
                    _size?: string;
                }
                function Item(props: Item$Props): any;
            }
        }
        interface Page$topWrapperProps {
        }
        interface Page$bottomWrapperProps {
        }
        interface Page$leftWrapperProps {
        }
        interface Page$rightWrapperProps {
        }
        interface Page$contentWrapperProps {
        }
        interface Page$appLayerWrapperProps {
        }
        interface Page$systemLayerWrapperProps {
        }
        interface Page$top {
            tag?: string | any;
            props?: any[];
        }
        interface Page$bottom {
            tag?: string | any;
            props?: any[];
        }
        interface Page$left {
            tag?: string | any;
            props?: any[];
        }
        interface Page$leftOpen {
            tag?: string | any;
            props?: any[];
        }
        interface Page$leftClosed {
            tag?: string | any;
            props?: any[];
        }
        interface Page$right {
            tag?: string | any;
            props?: any[];
        }
        interface Page$rightOpen {
            tag?: string | any;
            props?: any[];
        }
        interface Page$rightClosed {
            tag?: string | any;
            props?: any[];
        }
        interface Page$alertBus {
            tag?: string | any;
            props?: any[];
        }
        interface Page$modal {
            tag?: string | any;
            props?: any[];
        }
        interface Page$Props {
            type?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
            fullPage?: boolean;
            topWrapperProps?: Page$topWrapperProps;
            bottomWrapperProps?: Page$bottomWrapperProps;
            leftWrapperProps?: Page$leftWrapperProps;
            rightWrapperProps?: Page$rightWrapperProps;
            contentWrapperProps?: Page$contentWrapperProps;
            appLayerWrapperProps?: Page$appLayerWrapperProps;
            systemLayerWrapperProps?: Page$systemLayerWrapperProps;
            switchElevationTopBottom?: boolean;
            switchElevationLeftRight?: boolean;
            isLeftOpen?: boolean | string;
            isRightOpen?: boolean | string;
            top?: Page$top | any | any | string | number;
            bottom?: Page$bottom | any | any | string | number;
            left?: Page$left | any | any | string | number;
            leftOpen?: Page$leftOpen | any | any | string | number;
            leftClosed?: Page$leftClosed | any | any | string | number;
            right?: Page$right | any | any | string | number;
            rightOpen?: Page$rightOpen | any | any | string | number;
            rightClosed?: Page$rightClosed | any | any | string | number;
            alertBus?: Page$alertBus | any | any;
            modal?: Page$modal | any | any;
            appLayerContent?: any;
            systemLayerContent?: any;
            leftWidth?: string;
            rightWidth?: string;
            leftSwipe?: boolean | number;
            rightSwipe?: boolean | number;
            topFixed?: boolean | "always" | "smart" | "none";
            topFixedHeight?: number;
            topFixedScrolledDownOffset?: number;
            bottomFixed?: boolean | "always" | "smart" | "none";
            bottomFixedHeight?: number;
            leftFixed?: boolean;
            rightFixed?: boolean;
            leftRelative?: string;
            rightRelative?: string;
            leftResizable?: boolean | string | "open" | "closed";
            rightResizable?: boolean | string | "open" | "closed";
            leftResizableMinWidth?: number;
            leftResizableMaxWidth?: number;
            rightResizableMinWidth?: number;
            rightResizableMaxWidth?: number;
            onLeftResize?(...args: any): any;
            onRightResize?(...args: any): any;
            useDnD?: boolean;
            overlayTop?: boolean;
            content?: any;
            showLeftToggleButton?: boolean;
            showRightToggleButton?: boolean;
        }
        function Page(props: Page$Props): any;
        namespace Page {
            interface MenuButton$Props {
                menu?: "left" | "right";
                onClick?(...args: any): any;
                pageKey?: string;
                size?: string;
                displayBlock?: boolean;
                pressed?: boolean;
                bgStyle?: "filled" | "outline" | "transparent" | "underline" | "link";
                borderRadius?: string;
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            }
            function MenuButton(props: MenuButton$Props): any;
        }
        interface Container$Props {
            noSpacing?: boolean;
        }
        function Container(props: Container$Props): any;
        interface Row$Props {
            noSpacing?: boolean;
            display?: "standard" | "flex";
        }
        function Row(props: Row$Props): any;
        interface Column$colWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        interface Column$Props {
            noSpacing?: boolean;
            width?: string | number;
            colWidth?: Column$colWidth | string;
        }
        function Column(props: Column$Props): any;
        interface Lsi$lsi {
        }
        interface Lsi$params {
        }
        interface Lsi$Props {
            lsi?: Lsi$lsi;
            allowTags?: string[];
            params?: string | any[] | Lsi$params;
        }
        function Lsi(props: Lsi$Props): any;
        namespace Lsi {
            interface Item$Props {
                language: string;
            }
            function Item(props: Item$Props): any;
        }
        interface LsiContext$Props {
            localLsi?: boolean;
        }
        function LsiContext(props: LsiContext$Props): any;
        interface ScreenSize$Props {
            screenSize?: string;
        }
        function ScreenSize(props: ScreenSize$Props): any;
        namespace ScreenSize {
            interface Item$Props {
                screenSize: string | ("xs" | "s" | "m" | "l" | "xl")[];
            }
            function Item(props: Item$Props): any;
        }
        interface Modal$Props {
            size?: "s" | "m" | "l" | "auto" | "max";
            shown?: boolean;
            sticky?: boolean;
            stickyBackground?: boolean;
            scrollableBackground?: boolean;
            forceRender?: boolean;
            onClose?(...args: any): any;
            overflow?: boolean;
            mountContent?: "onEachOpen" | "onFirstOpen" | "onFirstRender";
            offsetTop?: number | string;
            location?: "local" | "portal";
        }
        function Modal(props: Modal$Props): any;
        interface ConfirmModal$confirmButtonProps {
        }
        interface ConfirmModal$refuseButtonProps {
        }
        interface ConfirmModal$Props {
            size?: "s" | "m" | "l" | "auto";
            onRefuse?(...args: any): any;
            onConfirm?(...args: any): any;
            confirmButtonProps?: ConfirmModal$confirmButtonProps;
            refuseButtonProps?: ConfirmModal$refuseButtonProps;
            confirmButtonLeft?: boolean;
            sticky?: boolean;
            stickyBackground?: boolean;
        }
        function ConfirmModal(props: ConfirmModal$Props): any;
        function Section(props: any): any;
        interface Header$Props {
            underline?: boolean;
        }
        function Header(props: Header$Props): any;
        function Footer(props: any): any;
        interface Card$Props {
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            inline?: boolean;
            width?: number;
            minWidth?: number;
            noSpaces?: boolean;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string | number;
        }
        function Card(props: Card$Props): any;
        interface Resize$Props {
            height?: number | string;
            width?: number | string;
            onResize?(...args: any): any;
        }
        function Resize(props: Resize$Props): any;
        namespace Resize {
            interface Item$Props {
                max?: number;
            }
            function Item(props: Item$Props): any;
            function withResize(Component: any, ignoreWidthChange?: boolean, ignoreHeightChange?: boolean): any;
        }
        const Loader: any;
        function Text(props: any): any;
        function Span(props: any): any;
        function Mark(props: any): any;
        interface Icon$Props {
            icon?: string;
            clickable?: boolean;
            src?: string;
            authenticate?: boolean;
        }
        function Icon(props: Icon$Props): any;
        interface Image$Props {
            type?: "rounded" | "circle" | "thumbnail";
            src?: string;
            responsive?: boolean;
            alt?: string;
            authenticate?: boolean;
            borderRadius?: string;
            elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            width?: number | string;
            height?: number | string;
        }
        function Image(props: Image$Props): any;
        interface Link$Props {
            href?: string;
            onClick?(...args: any): any;
            onCtrlClick?(...args: any): any;
            onWheelClick?(...args: any): any;
            smoothScroll?: number;
            offset?: number;
            target?: "_blank" | "_parent" | "_top" | "_self";
            download?: boolean | string;
            authenticate?: boolean;
        }
        function Link(props: Link$Props): any;
        interface A$Props {
            href?: string;
            onClick?(...args: any): any;
            onCtrlClick?(...args: any): any;
            onWheelClick?(...args: any): any;
            smoothScroll?: number;
            offset?: number;
            target?: "_blank" | "_parent" | "_top" | "_self";
            download?: boolean | string;
            authenticate?: boolean;
        }
        function A(props: A$Props): any;
        interface Loading$Props {
            inline?: boolean;
        }
        function Loading(props: Loading$Props): any;
        interface Calendar$value {
        }
        interface Calendar$value$0 {
        }
        interface Calendar$dateFrom {
        }
        interface Calendar$dateTo {
        }
        interface Calendar$displayDate {
        }
        interface Calendar$Props {
            value?: Calendar$value | string | (Calendar$value$0 | string)[];
            dateFrom?: Calendar$dateFrom | string;
            dateTo?: Calendar$dateTo | string;
            displayDate?: Calendar$displayDate | string;
            selectionMode?: "single" | "range";
            step?: "days" | "months" | "years";
            view?: "days" | "months" | "years";
            showTodayButton?: boolean;
            hideWeekNumber?: boolean;
            hidePrevSelection?: boolean;
            hideNextSelection?: boolean;
            hideOtherSections?: boolean;
            onChange?(...args: any): any;
            onViewChange?(...args: any): any;
            onNextSelection?(...args: any): any;
            onPrevSelection?(...args: any): any;
            monthNameFormat?: "abbr" | "roman";
        }
        function Calendar(props: Calendar$Props): any;
        interface ColorPalette$Props {
            simplePalette?: boolean;
            onChange?(...args: any): any;
            onColorSchemaChange?(...args: any): any;
            color?: string;
        }
        function ColorPalette(props: ColorPalette$Props): any;
        function Null(): any;
        interface Box$Props {
            infoHeader?: any;
            infoContent?: any;
            disableClick?: boolean;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        function Box(props: Box$Props): any;
        function Console(props: any): any;
        interface Todo$props {
        }
        interface Todo$Props {
            props?: any[] | Todo$props;
        }
        function Todo(props: Todo$Props): any;
        interface CookieBar$Props {
            infoText?: any;
            infoHref?: string;
            infoTarget?: "_blank" | "_parent" | "_top" | "_self";
            fixed?: "top" | "bottom";
            onClose?(...args: any): any;
            expireDays?: number;
            cookieKey?: string;
            cookieValue?: string;
        }
        function CookieBar(props: CookieBar$Props): any;
        interface CookiesInfo$data {
            header?: any;
            chapters?: any[];
        }
        interface CookiesInfo$Props {
            data?: CookiesInfo$data;
            headerLevel?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | 0 | 1 | 2 | 3 | 4 | 5 | 6;
            chapterLevel?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | 0 | 1 | 2 | 3 | 4 | 5 | 6;
        }
        function CookiesInfo(props: CookiesInfo$Props): any;
        interface HomeScreen$Props {
            appID?: string;
            skipFirstVisit?: boolean;
            startDelay?: number;
            lifespan?: number;
            displayPace?: number;
            maxDisplayCount?: number;
            message?: any;
            detectHomescreen?: "hash" | "query" | "smart" | false;
        }
        function HomeScreen(props: HomeScreen$Props): any;
        interface ButtonToTop$Props {
            icon?: string;
            offset?: number;
            scrollDuration?: number;
            size?: "s" | "m" | "l" | "xl";
            bgStyle?: "filled" | "outline" | "transparent";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        function ButtonToTop(props: ButtonToTop$Props): any;
        function ClickConfirm(props: any): any;
        interface ContextMenu$parentElement {
        }
        interface ContextMenu$Props {
            shown?: boolean;
            forceRender?: boolean;
            parentElement?: ContextMenu$parentElement;
            allowTags?: string[];
            compactSubmenu?: boolean | string;
        }
        function ContextMenu(props: ContextMenu$Props): any;
        namespace ContextMenu {
            interface Item$Props {
                label?: any;
                href?: string;
                onClick?(...args: any): any;
                smoothScroll?: number;
                offset?: number;
                target?: string;
                icon?: string;
                space?: boolean;
                header?: boolean;
                divider?: boolean;
                allowTags?: string[];
            }
            function Item(props: Item$Props): any;
        }
        interface Line$Props {
            size?: string | number;
            borderRadius?: string;
            vertical?: boolean | number | string;
        }
        function Line(props: Line$Props): any;
        interface Pager$leftLink {
            text?: any;
            href?: string;
            icon?: string;
            onClick?: any;
        }
        interface Pager$rightLink {
            text?: any;
            href?: string;
            icon?: string;
            onClick?: any;
        }
        interface Pager$upLink {
            text?: any;
            href?: string;
            icon?: string;
            onClick?: any;
        }
        interface Pager$downLink {
            text?: any;
            href?: string;
            icon?: string;
            onClick?: any;
        }
        interface Pager$Props {
            leftLink?: Pager$leftLink;
            rightLink?: Pager$rightLink;
            upLink?: Pager$upLink;
            downLink?: Pager$downLink;
            size?: "s" | "m" | "l" | "xl";
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string;
        }
        function Pager(props: Pager$Props): any;
        interface Pagination$Props {
            items?: any[];
            activeIndex?: number;
            range?: number;
            prevIcon?: string;
            prevLabel?: any;
            nextIcon?: string;
            nextLabel?: any;
            firstIcon?: string;
            firstLabel?: any;
            lastIcon?: string;
            lastLabel?: any;
            size?: "s" | "m" | "l" | "xl";
            onChange?(...args: any): any;
            onChanged?(...args: any): any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            colorSchemaInactive?: string;
            borderRadius?: string;
            ellipsisIcon?: string;
        }
        function Pagination(props: Pagination$Props): any;
        interface Popover$Props {
            shown?: boolean;
            forceRender?: boolean;
            fitHeightToViewport?: boolean;
            getPopover?(...args: any): any;
            hidden?: any;
            controlled?: any;
            disabled?: any;
            header?: any;
            content?: any;
            footer?: any;
            className?: any;
            location?: "local" | "portal";
            autoResize?: boolean;
        }
        function Popover(props: Popover$Props): any;
        namespace Popover {
            const Context: {
                Provider: any;
            };
        }
        interface ProgressBar$Props {
            progress?: number;
            striped?: boolean;
            animated?: boolean;
            allowTags?: string[];
            size?: "s" | "m" | "l" | "xl";
        }
        function ProgressBar(props: ProgressBar$Props): any;
        namespace ProgressBar {
            interface Item$Props {
                progress?: number;
                striped?: boolean;
                animated?: boolean;
            }
            function Item(props: Item$Props): any;
        }
        interface Rating$Props {
            count?: number;
            value?: number;
            onClick?(...args: any): any;
            icon?: string;
            size?: "s" | "m" | "l" | "xl";
        }
        function Rating(props: Rating$Props): any;
        interface Tabs$stacked {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        interface Tabs$lineProps {
        }
        interface Tabs$Props {
            type?: "tabs" | "pills";
            stacked?: boolean | Tabs$stacked | string;
            justified?: boolean;
            fade?: boolean;
            activeName?: string;
            allowTags?: string[];
            size?: "s" | "m" | "l" | "xl";
            onChange?(...args: any): any;
            borderRadius?: string;
            elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            underline?: boolean;
            lineProps?: Tabs$lineProps;
            getButton?(...args: any): any;
            mountTabContent?: "onFirstRender" | "onFirstActive" | "onActive";
        }
        function Tabs(props: Tabs$Props): any;
        namespace Tabs {
            interface Item$Props {
                _fade?: boolean;
                _active?: boolean;
                _onDisable?(...args: any): any;
            }
            function Item(props: Item$Props): any;
        }
        interface Backdrop$Props {
            onClick?(...args: any): any;
            onMouseOver?(...args: any): any;
            background?: boolean;
        }
        function Backdrop(props: Backdrop$Props): any;
        function Badge(props: any): any;
        interface Label$Props {
            bgStyle?: "filled" | "outline";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            icon?: string;
            iconAlign?: "right" | "left";
            iconOnClick?(...args: any): any;
            onClick?(...args: any): any;
        }
        function Label(props: Label$Props): any;
        const DraggableMixin: {
            statics: {
                UU5_Bricks_DraggableMixin: {
                    requiredMixins: string[];
                    classNames: {
                        main: any;
                    };
                };
            };
            getInitialState(): any;
            componentWillUnmount(): any;
            hasUU5_Bricks_DraggableMixin(): any;
            startDragging(draggedItem: any, x: any, y: any): any;
            dragStart(draggedItem: any, x: any, y: any): any;
            stopDragging(): any;
            getXOffset(): any;
            getYOffset(): any;
            getClientLeft(): any;
            getClientTop(): any;
            getStylePropertyValue(object: any, property: any): any;
            getPaddingLeft(): any;
            getPaddingTop(): any;
        };
        interface DraggableItem$Props {
            x?: number;
            y?: number;
            onMoveStart?(...args: any): any;
            onMove?(...args: any): any;
            onMoveEnd?(...args: any): any;
        }
        function DraggableItem(props: DraggableItem$Props): any;
        interface Swiper$Props {
            leftMenuOpen?: boolean;
            rightMenuOpen?: boolean;
            onSwipeOpenLeftMenu?(...args: any): any;
            onSwipeCloseLeftMenu?(...args: any): any;
            onSwipeOpenRightMenu?(...args: any): any;
            onSwipeCloseRightMenu?(...args: any): any;
            allowBodyTags?: any[];
            allowMenuTags?: any[];
        }
        function Swiper(props: Swiper$Props): any;
        namespace Swiper {
            interface Menu$Props {
                pullRight?: boolean;
                _open?: boolean;
            }
            function Menu(props: Menu$Props): any;
            function Body(props: any): any;
        }
        interface Iframe$iframeAttrs {
        }
        interface Iframe$Props {
            src?: string;
            resize?: boolean;
            height?: string;
            syncTimeout?: number;
            inline?: boolean;
            iframeAttrs?: Iframe$iframeAttrs;
        }
        function Iframe(props: Iframe$Props): any;
        interface Jumbotron$Props {
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        function Jumbotron(props: Jumbotron$Props): any;
        interface Block$Props {
            background?: boolean;
        }
        function Block(props: Block$Props): any;
        interface Blockquote$Props {
            background?: boolean;
            alignment?: "left" | "right";
            footer?: any;
            footerAlignment?: "left" | "right";
            noSpacing?: boolean;
        }
        function Blockquote(props: Blockquote$Props): any;
        function Code(props: any): any;
        interface Carousel$Props {
            hideControls?: boolean;
            hideIndicators?: boolean;
            activeIndex?: number;
            nextIcon?: string;
            prevIcon?: string;
            displayedItems?: number;
            type?: "circular" | "final" | "rewind";
            interval?: number;
            stepByOne?: boolean;
            allowTags?: string[];
            onIndexChange?(...args: any): any;
        }
        function Carousel(props: Carousel$Props): any;
        namespace Carousel {
            function Item(props: any): any;
        }
        interface DataTable$Props {
            striped?: boolean;
            bordered?: boolean;
            hover?: boolean;
            condensed?: boolean;
            headerRow?: any[];
            footerRow?: any[];
            rows?: any[];
        }
        function DataTable(props: DataTable$Props): any;
        interface Table$Props {
            striped?: boolean;
            bordered?: boolean;
            hover?: boolean;
            condensed?: boolean;
            responsive?: boolean;
            allowTags?: string[];
        }
        function Table(props: Table$Props): any;
        namespace Table {
            interface ColGroup$Props {
                allowTags?: string[];
            }
            function ColGroup(props: ColGroup$Props): any;
            interface Col$Props {
                span?: number;
            }
            function Col(props: Col$Props): any;
            interface TBody$Props {
                allowTags?: string[];
            }
            function TBody(props: TBody$Props): any;
            interface Td$Props {
                colSpan?: number | string;
                rowSpan?: number | string;
            }
            function Td(props: Td$Props): any;
            interface TFoot$Props {
                allowTags?: string[];
            }
            function TFoot(props: TFoot$Props): any;
            interface Th$Props {
                colSpan?: number | string;
                rowSpan?: number | string;
            }
            function Th(props: Th$Props): any;
            interface THead$Props {
                allowTags?: string[];
            }
            function THead(props: THead$Props): any;
            interface Tr$Props {
                allowTags?: string[];
            }
            function Tr(props: Tr$Props): any;
        }
        interface Spreadsheet$cols {
        }
        interface Spreadsheet$rows {
        }
        interface Spreadsheet$cells {
        }
        interface Spreadsheet$Props {
            striped?: boolean;
            bordered?: boolean;
            hover?: boolean;
            condensed?: boolean;
            cols?: Spreadsheet$cols;
            rows?: Spreadsheet$rows;
            cells?: Spreadsheet$cells;
        }
        function Spreadsheet(props: Spreadsheet$Props): any;
        interface DateTime$Props {
            value?: string | any;
            format?: string;
            country?: string;
            timeZone?: number;
            onChange?(...args: any): any;
            dateOnly?: boolean;
            timeOnly?: boolean;
            secondsDisabled?: boolean;
        }
        function DateTime(props: DateTime$Props): any;
        interface Number$Props {
            country?: string;
            value?: number;
            onChange?(...args: any): any;
            thousandSeparator?: string;
            decimalSeparator?: string;
            minDecimalLength?: number;
            maxDecimalLength?: number;
            rounded?: number;
        }
        function Number(props: Number$Props): any;
        interface Slider$Props {
            vertical?: boolean;
            min?: number;
            max?: number;
            step?: number;
            value?: number | number[];
            onChange?(...args: any): any;
            onChanged?(...args: any): any;
            size?: "s" | "m" | "l" | "xl";
            allowTags?: any[];
        }
        function Slider(props: Slider$Props): any;
        namespace Slider {
            interface Item$Props {
                value?: number;
                _min?: number;
                _max?: number;
                _step?: number;
                _getStyle?(...args: any): any;
                _checkValue?(...args: any): any;
            }
            function Item(props: Item$Props): any;
        }
        interface Heading$Props {
            fixed?: boolean;
            fixedOnScroll?: boolean;
            hideOnScroll?: boolean;
            hideOnScrollOffset?: number;
            onScrollToFixed?(...args: any): any;
            onScrollToBlocked?(...args: any): any;
            spaceHolder?: boolean;
        }
        function Heading(props: Heading$Props): any;
        interface Tree$Props {
            items?: any[];
            iconExpanded?: string;
            iconCollapsed?: string;
            size?: "s" | "m" | "l" | "xl";
            allowTags?: string[];
        }
        function Tree(props: Tree$Props): any;
        namespace Tree {
            interface List$Props {
                items?: any[];
                iconExpanded?: string;
                iconCollapsed?: string;
            }
            function List(props: List$Props): any;
            interface Item$Props {
                label?: any;
                items?: any[];
                iconExpanded?: string;
                iconCollapsed?: string;
                expanded?: boolean;
            }
            function Item(props: Item$Props): any;
        }
        interface Li$Props {
            markerIcon?: string;
            iconColorSchema?: string;
            ordered?: boolean;
            type?: string;
            counterId?: string;
            listLevel?: number;
        }
        function Li(props: Li$Props): any;
        const typeIconMap: {
            disc: "mdi-circle";
            circle: "mdi-circle-outline";
            square: "mdi-square";
        };
        interface Ul$Props {
            allowTags?: string[];
            type?: "disc" | "circle" | "square" | "none";
            markerIcon?: string;
            iconColorSchema?: string;
            listLevel?: number;
        }
        function Ul(props: Ul$Props): any;
        interface Ol$Props {
            allowTags?: string[];
            type?: "1" | "a" | "A" | "i" | "I" | "1.1";
            counterId?: string;
            listLevel?: number;
        }
        function Ol(props: Ol$Props): any;
        interface ButtonSwitch$onProps {
        }
        interface ButtonSwitch$offProps {
        }
        interface ButtonSwitch$props {
        }
        interface ButtonSwitch$Props {
            onProps?: ButtonSwitch$onProps;
            offProps?: ButtonSwitch$offProps;
            switchedOn?: boolean;
            props?: ButtonSwitch$props;
        }
        function ButtonSwitch(props: ButtonSwitch$Props): any;
        interface Camera$Props {
            mode?: "environment" | "user" | "left" | "right";
        }
        function Camera(props: Camera$Props): any;
        interface Dl$Props {
            allowTags?: string[];
        }
        function Dl(props: Dl$Props): any;
        interface FileViewer$parameters {
        }
        interface FileViewer$Props {
            src?: string;
            parameters?: FileViewer$parameters;
            numbered?: boolean;
            trimmed?: boolean;
            blockKey?: string;
            blockStart?: string;
            blockEnd?: string;
        }
        function FileViewer(props: FileViewer$Props): any;
        interface GoogleMap$Props {
            mapType?: "satellite" | "roadmap";
            mapRef?(...args: any): any;
            latitude?: number;
            longitude?: number;
            markers?: any[];
            zoom?: number;
            disableZoom?: boolean;
            draggable?: boolean;
            disableDefaultUI?: boolean;
            googleApiKey?: string;
            height?: string;
            width?: string;
            mapStyle?: any[];
        }
        function GoogleMap(props: GoogleMap$Props): any;
        interface Newspaper$Props {
            columnsCount?: 1 | 2 | 3 | 4 | 5 | 6;
        }
        function Newspaper(props: Newspaper$Props): any;
        interface ProgressBus$Props {
            position?: "left" | "center" | "right";
            verticalPosition?: "top" | "bottom";
            alertPosition?: "top" | "bottom";
        }
        function ProgressBus(props: ProgressBus$Props): any;
        interface Well$Props {
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        function Well(props: Well$Props): any;
        interface Video$Props {
            autoPlay?: boolean;
            disableControls?: boolean;
            loop?: boolean;
            poster?: string;
            preload?: "auto" | "metadata" | "none";
            src: string;
            muted?: boolean;
            type?: "mp4" | "webm" | "ogg" | "m3u8";
            authenticate?: boolean;
        }
        function Video(props: Video$Props): any;
        interface YoutubeVideo$Props {
            autoplay?: boolean;
            disableControls?: boolean;
            loop?: boolean;
            disableInfo?: boolean;
            src: string;
            disableRelatedVideos?: boolean;
            size?: "s" | "m" | "l" | "xl";
            disableFullscreen?: boolean;
            muted?: boolean;
        }
        function YoutubeVideo(props: YoutubeVideo$Props): any;
        namespace YoutubeVideo {
            function validateUrl(url: any): any;
        }
        interface Audio$Props {
            autoPlay?: boolean;
            loop?: boolean;
            preload?: "auto" | "metadata" | "none";
            src: string;
            muted?: boolean;
            playbackRate?: number;
            authenticate?: boolean;
            onStart?(...args: any): any;
            onPause?(...args: any): any;
            onEnded?(...args: any): any;
        }
        function Audio(props: Audio$Props): any;
        interface AudioButton$Props {
            playIcon?: string;
            pauseIcon?: string;
            size?: "s" | "m" | "l" | "xl";
            displayBlock?: boolean;
            pressed?: boolean;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string | number;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            elevationHover?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            baseline?: boolean;
            colorSchema?: string;
            src: string;
            autoPlay?: boolean;
            loop?: boolean;
            preload?: "auto" | "metadata" | "none";
            muted?: boolean;
            playbackRate?: number;
            authenticate?: boolean;
        }
        function AudioButton(props: AudioButton$Props): any;
        const Factory: {
            createTag(tag: any, uu5Name: any, className: any, defaultContent: any, levelFrom: any, levelTo: any): any;
            createLink(uu5Name: any, href: any, defaultContent: any, target: any): any;
        };
        const Div: any;
        const P: any;
        const Paragraph: any;
        const Small: any;
        const Lead: any;
        const Del: any;
        const S: any;
        const Ins: any;
        const U: any;
        const Strong: any;
        const Em: any;
        const Abbr: any;
        const Address: any;
        const Dd: any;
        const Dt: any;
        const Var: any;
        const Kbd: any;
        const Pre: any;
        const Samp: any;
        const LinkUnicorn: any;
        const LinkUnicornSystems: any;
        const LinkUnicornUniverse: any;
        const LinkUnicornCollege: any;
        const LinkUAF: any;
        const LinkUuApp: any;
        const LinkUU5: any;
        const LinkUuPlus4U5: any;
        const LinkUuAppLibraryRegistry: any;
        const LinkUu5LibraryRegistry: any;
        const LinkUu5ComponentRegistry: any;
        const LinkUu5CodeKit: any;
        const LinkUuAppServer: any;
        const LinkUuAppServerJava: any;
        const LinkUuOIDC: any;
        const LinkUuCloud: any;
        const LinkUuBookKit: any;
        const LinkUuDocKit: any;
        const LinkUuBmlDraw: any;
        const LinkUuKnowledgeBase: any;
        const LinkUuP: any;
        const LinkUUP: any;
        const LinkMyTerritory: any;
        const LinkUuMT: any;
        const LinkBusinessTerritory: any;
        const LinkUuBT: any;
        const LinkUnicornApproach: any;
        const LinkPlus4U: any;
        const LinkBootstrap: any;
        const LinkW3Schools: any;
        const LinkHTML5: any;
        const LinkCSS: any;
        const LinkJavaScript: any;
        const LinkJQuery: any;
        const LinkReact: any;
        const LinkRuby: any;
        const LinkPuma: any;
        const LinkDocker: any;
        const LinkMSAzure: any;
        const LinkMongoDB: any;
        const LinkMaterialDesign: any;
        interface Switch$Props {
            switchedOn?: boolean;
            size?: "s" | "m" | "l" | "xl";
            offIcon?: string;
            onIcon?: string;
            onChange?(...args: any): any;
            loading?: boolean;
            colorSchemaOff?: string;
        }
        function Switch(props: Switch$Props): any;
        interface SwitchSelector$Props {
            items: any[];
            value?: string | number | boolean;
            onChange?(...args: any): any;
            size?: "s" | "m" | "l" | "xl";
            width?: number | string;
            readOnly?: boolean;
            colorSchema?: any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            borderRadius?: number | string;
            borderWidth?: number;
            borderWidthFocus?: number;
        }
        function SwitchSelector(props: SwitchSelector$Props): any;
        interface CodePreview$props {
        }
        interface CodePreview$Props {
            tagName?: string;
            props?: CodePreview$props;
            uu5string?: boolean;
        }
        function CodePreview(props: CodePreview$Props): any;
        interface Authenticated$Props {
            authenticated?: boolean;
            notAuthenticated?: boolean;
            pending?: boolean;
        }
        function Authenticated(props: Authenticated$Props): any;
        interface Unauthenticated$Props {
            width?: string | number;
            height?: string | number;
            content?: any;
        }
        function Unauthenticated(props: Unauthenticated$Props): any;
        interface Unauthorized$Props {
            width?: string | number;
            height?: string | number;
            content?: any;
        }
        function Unauthorized(props: Unauthorized$Props): any;
        interface VirtualList$boxPadding {
            left?: number;
            right?: number;
            top?: number;
            bottom?: number;
        }
        interface VirtualList$Props {
            data: any[];
            height?: number;
            width?: number;
            boxPadding?: VirtualList$boxPadding;
            item?: ((...args: any)=>any) | any;
            itemHeight: number;
            itemWidth?: number;
            overscanRowCount?: number;
            initialScrollTop?: number;
        }
        function VirtualList(props: VirtualList$Props): any;
        interface ScrollArea$Props {
            customScrollbar?: boolean;
            reserveSpace?: boolean;
            hideOnBlur?: boolean;
            onDisplayBar?(...args: any): any;
            onHideBar?(...args: any): any;
            initialScrollTop?: number;
        }
        function ScrollArea(props: ScrollArea$Props): any;
        interface Stepper$itemProps {
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            borderRadius?: string;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
        }
        interface Stepper$Props {
            size?: "s" | "m" | "l" | "xl";
            orientation?: "horizontal" | "vertical";
            onClick?(...args: any): any;
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            topVisitedStep?: number;
            currentStep?: number;
            hideText?: boolean;
            alignment?: "left" | "center" | "right";
            itemProps?: Stepper$itemProps;
        }
        function Stepper(props: Stepper$Props): any;
        namespace Stepper {
            interface Item$Props {
                size?: "s" | "m" | "l" | "xl";
                onClick?(...args: any): any;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                topVisitedStep?: number;
                currentStep?: number;
                index?: number;
            }
            function Item(props: Item$Props): any;
            const Context: any;
        }
        interface FloatingBox$Props {
            elevation?: "0" | "1" | "2" | "3" | "4" | "5" | 0 | 1 | 2 | 3 | 4 | 5;
            borderRadius?: string | number;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            width?: string | number;
            header?: any;
            position?: string;
            draggable?: boolean;
            onDragStart?(...args: any): any;
            onDragMove?(...args: any): any;
            onDragEnd?(...args: any): any;
            minDragArea?: string | number;
        }
        function FloatingBox(props: FloatingBox$Props): any;
        interface SessionWatch$Props {
            header?: any;
        }
        function SessionWatch(props: SessionWatch$Props): any;
        interface QRCode$Props {
            value: string;
            size?: number;
            correction?: "low" | "medium" | "quartile" | "high";
        }
        function QRCode(props: QRCode$Props): any;
        function PortalModal(props: any): any;
        interface RichLink$Props {
            type?: "simple" | "full";
        }
        function RichLink(props: RichLink$Props): any;
        function PortalPopover(props: any): any;
        interface Component$Props {
            text?: string;
        }
        function Component(props: Component$Props): any;
        interface LinkModal$modalProps {
        }
        interface LinkModal$Props {
            component: any;
            modalProps?: LinkModal$modalProps;
        }
        function LinkModal(props: LinkModal$Props): any;
        interface LinkUve$componentProps {
        }
        interface LinkUve$uveProps {
            top?: any;
            languages?: any[];
            title?: any;
            publicContent?: boolean;
        }
        interface LinkUve$Props {
            componentName?: string;
            componentProps?: LinkUve$componentProps;
            href?: string;
            uveProps?: LinkUve$uveProps;
        }
        function LinkUve(props: LinkUve$Props): any;
        const Error: any;
        const bookKitUrl: "https://uuos9.plus4u.net/uu-bookkitg01-main/78462435-ed11ec379073476db0aa295ad6c00178/book/page";
    }
    namespace BricksEditable {
        interface Button$component {
        }
        interface Button$Props {
            component: Button$component;
        }
        function Button(props: Button$Props): any;
        interface Dropdown$component {
        }
        interface Dropdown$Props {
            component: Dropdown$component;
        }
        function Dropdown(props: Dropdown$Props): any;
        interface TouchIcon$component {
        }
        interface TouchIcon$Props {
            component: TouchIcon$component;
        }
        function TouchIcon(props: TouchIcon$Props): any;
        interface Header$component {
        }
        interface Header$Props {
            component: Header$component;
        }
        function Header(props: Header$Props): any;
        interface Accordion$component {
        }
        interface Accordion$Props {
            component: Accordion$component;
        }
        function Accordion(props: Accordion$Props): any;
        interface Toolbar$items$props {
        }
        interface Toolbar$items {
            type?: "button" | "dropdown" | ((...args: any)=>any);
            props?: ((...args: any)=>any) | Toolbar$items$props;
        }
        interface Toolbar$settingsItems {
        }
        interface Toolbar$Props {
            items?: (Toolbar$items | any)[];
            settingsItems?: (Toolbar$settingsItems | any)[];
            moreSettings?(...args: any): any;
            onMoreSettingsClick?(...args: any): any;
            onClose?(...args: any): any;
        }
        function Toolbar(props: Toolbar$Props): any;
        namespace Toolbar {
            function withContext(Component: any): any;
        }
        interface EndEditation$Props {
            onClick?(...args: any): any;
        }
        function EndEditation(props: EndEditation$Props): any;
        interface Input$toolbarItems$props {
        }
        interface Input$toolbarItems {
            type?: "button" | "dropdown" | "separator" | ((...args: any)=>any);
            props?: ((...args: any)=>any) | Input$toolbarItems$props;
        }
        interface Input$placeholder {
        }
        interface Input$Props {
            value?: string;
            toolbarItems?: (Input$toolbarItems | any)[];
            placeholder?: string | Input$placeholder;
            readOnly?: boolean;
            open?(...args: any): any;
            close?(...args: any): any;
            onBlur?(...args: any): any;
            onChange?(...args: any): any;
        }
        function Input(props: Input$Props): any;
        function Modal(props: any): any;
        const bookKitUrl: "https://uuos9.plus4u.net/uu-bookkitg01-main/78462435-ed11ec379073476db0aa295ad6c00178/book/page";
    }
    namespace Forms {
        const ChoiceMixin: {
            propTypes: {
                placeholder?: any;
                required?: boolean;
                requiredMessage?: any;
                buttonHidden?: boolean;
                iconOpen?: string;
                iconClosed?: string;
            };
            getDefaultProps(): any;
            isValid(): any;
        };
        interface FormMixin$propTypes$values {
        }
        interface FormMixin$propTypes$labelColWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        interface FormMixin$propTypes$inputColWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        const FormMixin: {
            statics: {
                "UU5.Forms.FormMixin": {
                    classNames: {
                        form(props: any): any;
                    };
                    warnings: {
                        formInForm: "Form control %s should not be placed in other form control %s.";
                        nonRegistered: "Form control with ID %s cannot be unregistered. Component with the ID is not registered.";
                        noName: "Form control has not any name. It will be used its ID %s.";
                    };
                    errors: {
                        duplicateId: "Duplicate id '%s' of a form control.";
                    };
                    lsi(): any;
                };
            };
            propTypes: {
                values?: FormMixin$propTypes$values;
                progressIndicator?: any;
                onInit?(...args: any): any;
                onSave?(...args: any): any;
                onSaveDone?(...args: any): any;
                onSaveFail?(...args: any): any;
                onSaveByKey?(...args: any): any;
                onValidate?(...args: any): any;
                onReset?(...args: any): any;
                onCancel?(...args: any): any;
                saveOnEnter?: boolean;
                usePageAlertBus?: boolean;
                spacing?: number;
                readOnly?: boolean;
                labelColWidth?: FormMixin$propTypes$labelColWidth | string;
                inputColWidth?: FormMixin$propTypes$inputColWidth | string;
                labelAlignment?: string;
                padding?: string | number;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillMount(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentDidUpdate(): any;
            setValues(values: any): any;
            eachFormInput(func: any): any;
            hasFormControls(): any;
            eachFormControls(func: any): any;
            isValid(): any;
            isValidDefault(): any;
            isForm(): any;
            registerFormInput(id: any, formInput: any): any;
            unregisterFormInput(id: any): any;
            registerFormControls(id: any, formControl: any): any;
            unregisterFormControls(id: any): any;
            getValues(): any;
            getInputs(): any;
            getInputByName(name: any): any;
            getFormChildren(fce: any): any;
            getAlertBus(): any;
            save(values: any): any;
            saveDefault(values: any): any;
            saveDone(dtoOut: any): any;
            saveDoneDefault(dtoOut: any): any;
            saveFail(dtoOut: any): any;
            saveFailDefault(dtoOut: any): any;
            validate(): any;
            setPending(setStateCallback: any): any;
            setReady(setStateCallback: any): any;
            reset(setStateCallback: any): any;
            resetDefault(setStateCallback: any): any;
            cancel(): any;
            getSaveFormEvents(func: any): any;
            readOnly(): any;
            editable(): any;
            isReadOnly(): any;
        };
        interface ControlsMixin$propTypes$getForm {
        }
        const ControlsMixin: {
            mixins: any[];
            propTypes: {
                getForm?: ((...args: any)=>any) | ControlsMixin$propTypes$getForm;
            };
            getDefaultProps(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            getForm(): any;
        };
        interface GroupMixin$propTypes$colWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        const GroupMixin: {
            propTypes: {
                value?: any[];
                required?: boolean;
                requiredMessage?: any;
                onIcon?: string;
                offIcon?: string;
                labelPosition?: "left" | "right";
                inline?: boolean;
                colWidth?: GroupMixin$propTypes$colWidth | string;
            };
            getDefaultProps(): any;
            isValid(): any;
        };
        const INITIAL_FEEDBACK: "initial";
        const SUCCESS_FEEDBACK: "success";
        const WARNING_FEEDBACK: "warning";
        const ERROR_FEEDBACK: "error";
        const LOADING_FEEDBACK: "loading";
        interface InputMixin$propTypes$labelColWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        interface InputMixin$propTypes$inputColWidth {
            xs?: number;
            s?: number;
            m?: number;
            l?: number;
            xl?: number;
        }
        interface InputMixin$propTypes$inputAttrs {
        }
        const InputMixin: {
            statics: {
                "UU5.Forms.InputMixin": {
                    classNames: {
                        main: any;
                        formItem: any;
                        input: any;
                        readOnly: any;
                        hasIcon: any;
                        inline: any;
                        labelWidth: any;
                        withAutoWidth: any;
                        preventWrap: any;
                    };
                    defaults: {
                        columnRegexp: any;
                        labelColWidth: {
                            xs: 12;
                            s: 5;
                        };
                        inputColWidth: {
                            xs: 12;
                            s: 7;
                        };
                    };
                };
            };
            propTypes: {
                label?: any;
                message?: any;
                feedback?: "initial" | "success" | "warning" | "error" | "loading";
                readOnly?: boolean;
                size?: "s" | "m" | "l" | "xl";
                onChange?(...args: any): any;
                onValidate?(...args: any): any;
                onChangeFeedback?(...args: any): any;
                labelColWidth?: InputMixin$propTypes$labelColWidth | string;
                inputColWidth?: InputMixin$propTypes$inputColWidth | string;
                inputWidth?: string;
                labelWidth?: string;
                inputAttrs?: InputMixin$propTypes$inputAttrs;
                spacing?: number;
                tooltipIcon?: string;
                labelAlignment?: string;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            componentDidMount(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            componentWillUnmount(): any;
            isInput(): any;
            getValue(...params: any): any;
            getValueDefault(): any;
            setValue(value: any, ...args: any): any;
            setValueDefault(value: any, setStateCallback: any): any;
            getMessage(): any;
            getMessageDefault(): any;
            setMessage(message: any, setStateCallback: any): any;
            setMessageDefault(message: any, setStateCallback: any): any;
            getFeedback(): any;
            getFeedbackDefault(): any;
            setFeedback(feedback: any, message: any, value: any, setStateCallback: any): any;
            setFeedbackDefault(feedback: any, message: any, value: any, setStateCallback: any): any;
            setInitial(message: any, value: any, setStateCallback: any): any;
            setInitialDefault(message: any, value: any, setStateCallback: any): any;
            isInitial(): any;
            setLoading(message: any, value: any, setStateCallback: any): any;
            setLoadingDefault(message: any, value: any, setStateCallback: any): any;
            isLoading(): any;
            setSuccess(message: any, value: any, setStateCallback: any): any;
            setSuccessDefault(message: any, value: any, setStateCallback: any): any;
            isSuccess(): any;
            setWarning(message: any, value: any, setStateCallback: any): any;
            setWarningDefault(message: any, value: any, setStateCallback: any): any;
            isWarning(): any;
            setError(message: any, value: any, setStateCallback: any): any;
            setErrorDefault(message: any, value: any, setStateCallback: any): any;
            isError(): any;
            reset(setStateCallback: any): any;
            resetDefault(setStateCallback: any): any;
            getChangeFeedback(opt: any): any;
            getChangeFeedbackDefault(opt: any): any;
            setChangeFeedback(opt: any, setStateCallback: any): any;
            setChangeFeedbackDefault(opt: any, setStateCallback: any): any;
            isReadOnly(): any;
            setEditableValue(value: any, setStateCallback: any): any;
            setEditableValueDefault(value: any, setStateCallback: any): any;
            readOnly(setStateCallback: any): any;
            readOnlyDefault(setStateCallback: any): any;
            editable(setStateCallback: any): any;
            editableDefault(setStateCallback: any): any;
            getLabel(inputId: any): any;
            getInputWrapper(children: any, buttons: any, opts: any): any;
            focus(): any;
            isComputedDisabled(): any;
            shouldValidateRequired(): any;
            onChangeFeedbackDefault(opt: any): any;
            INITIAL_FEEDBACK: "initial";
            SUCCESS_FEEDBACK: "success";
            WARNING_FEEDBACK: "warning";
            ERROR_FEEDBACK: "error";
            LOADING_FEEDBACK: "loading";
        };
        interface TextInputMixin$propTypes$placeholder {
        }
        const TextInputMixin: {
            mixins: any[];
            statics: {
                "UU5.Forms.TextInputMixin": {
                    classNames: {
                        main: any;
                        item: any;
                    };
                };
            };
            propTypes: {
                placeholder?: TextInputMixin$propTypes$placeholder | string;
                required?: boolean;
                requiredMessage?: any;
                focusMessage?: any;
                patternMessage?: any;
                autocompleteItems?: any[];
                onFocus?(...args: any): any;
                onBlur?(...args: any): any;
                onEnter?(...args: any): any;
                validateOnChange?: boolean;
                borderRadius?: string;
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            };
            getDefaultProps(): any;
            getInitialState(): any;
            UNSAFE_componentWillReceiveProps(nextProps: any): any;
            isTextInput(): any;
            getInput(): any;
            isValid(): any;
            open(setStateCallback: any): any;
            openDefault(setStateCallback: any): any;
            close(setStateCallback: any): any;
            closeDefault(setStateCallback: any): any;
            isOpen(): any;
            isOpenDefault(): any;
            getFocusFeedback(): any;
            getBlurFeedback(opt: any): any;
            onValidate(opt: any): any;
            setAutoCompleteItems(items: any, opt: any, setStateCallback: any): any;
            onFocus(e: any): any;
            onFocusDefault(opt: any): any;
            onChange(e: any): any;
            onChangeDefault(opt: any, setStateCallback: any): any;
            onBlur(e: any): any;
            onBlurDefault(opt: any): any;
            onKeyDown(e: any, param: any): any;
            focus_(): any;
            getChangeFeedback_(opt: any): any;
            setChangeFeedback_(opt: any, setStateCallback: any): any;
        };
        interface Text$Props {
            value?: string;
            password?: boolean;
            pattern?: string;
        }
        function Text(props: Text$Props): any;
        interface TextArea$Props {
            value?: string;
            rows?: number;
            autoResize?: boolean;
            maxRows?: number;
        }
        function TextArea(props: TextArea$Props): any;
        interface TextButton$Props {
            value?: string;
            buttons?: any[];
            pattern?: string;
            actionOnEnter?: boolean;
        }
        function TextButton(props: TextButton$Props): any;
        interface TextIcon$Props {
            value?: string;
            password?: boolean;
            icon?: string;
            iconPosition?: "left" | "right";
            onClick?(...args: any): any;
            pattern?: string;
            actionOnEnter?: boolean;
        }
        function TextIcon(props: TextIcon$Props): any;
        interface DatePicker$value {
        }
        interface DatePicker$dateFrom {
        }
        interface DatePicker$dateTo {
        }
        interface DatePicker$Props {
            value?: DatePicker$value | string;
            dateFrom?: DatePicker$dateFrom | string;
            dateTo?: DatePicker$dateTo | string;
            iconOpen?: string;
            iconClosed?: string;
            format?: string;
            country?: string;
            nanMessage?: any;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            disableBackdrop?: boolean;
            valueType?: "string" | "date" | "iso";
            openToContent?: boolean | string;
            hideFormatPlaceholder?: boolean;
            showTodayButton?: boolean;
            step?: "days" | "months" | "years";
            monthNameFormat?: "abbr" | "roman";
        }
        function DatePicker(props: DatePicker$Props): any;
        interface Datepicker$value {
        }
        interface Datepicker$dateFrom {
        }
        interface Datepicker$dateTo {
        }
        interface Datepicker$Props {
            value?: Datepicker$value | string;
            dateFrom?: Datepicker$dateFrom | string;
            dateTo?: Datepicker$dateTo | string;
            iconOpen?: string;
            iconClosed?: string;
            format?: string;
            country?: string;
            nanMessage?: any;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            disableBackdrop?: boolean;
            valueType?: "string" | "date" | "iso";
            openToContent?: boolean | string;
            hideFormatPlaceholder?: boolean;
            showTodayButton?: boolean;
            step?: "days" | "months" | "years";
            monthNameFormat?: "abbr" | "roman";
        }
        function Datepicker(props: Datepicker$Props): any;
        interface DateTimePicker$dateInputAttrs {
        }
        interface DateTimePicker$timeInputAttrs {
        }
        interface DateTimePicker$Props {
            value?: any | string;
            dateFrom?: any | string;
            dateTo?: any | string;
            format?: string;
            timeFormat?: string;
            country?: string;
            nanMessage?: any;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            placeholderTime?: string;
            dateIcon?: string;
            timeIcon?: string;
            seconds?: boolean;
            valueType?: "string" | "date" | "iso" | "isoLocal";
            openToContent?: boolean | string;
            timePickerType?: "single-column" | "multi-column";
            timeStep?: number;
            strictTimeStep?: boolean;
            hideFormatPlaceholder?: boolean;
            showTodayButton?: boolean;
            dateInputAttrs?: DateTimePicker$dateInputAttrs;
            timeInputAttrs?: DateTimePicker$timeInputAttrs;
            timeZone?: number;
            monthNameFormat?: "abbr" | "roman";
        }
        function DateTimePicker(props: DateTimePicker$Props): any;
        interface Datetimepicker$dateInputAttrs {
        }
        interface Datetimepicker$timeInputAttrs {
        }
        interface Datetimepicker$Props {
            value?: any | string;
            dateFrom?: any | string;
            dateTo?: any | string;
            format?: string;
            timeFormat?: string;
            country?: string;
            nanMessage?: any;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            placeholderTime?: string;
            dateIcon?: string;
            timeIcon?: string;
            seconds?: boolean;
            valueType?: "string" | "date" | "iso" | "isoLocal";
            openToContent?: boolean | string;
            timePickerType?: "single-column" | "multi-column";
            timeStep?: number;
            strictTimeStep?: boolean;
            hideFormatPlaceholder?: boolean;
            showTodayButton?: boolean;
            dateInputAttrs?: Datetimepicker$dateInputAttrs;
            timeInputAttrs?: Datetimepicker$timeInputAttrs;
            timeZone?: number;
            monthNameFormat?: "abbr" | "roman";
        }
        function Datetimepicker(props: Datetimepicker$Props): any;
        interface DateRangePicker$value {
        }
        interface DateRangePicker$dateFrom {
        }
        interface DateRangePicker$dateTo {
        }
        interface DateRangePicker$Props {
            value?: (DateRangePicker$value | string)[];
            dateFrom?: DateRangePicker$dateFrom | string;
            dateTo?: DateRangePicker$dateTo | string;
            format?: string;
            country?: string;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            icon?: string;
            iconOpen?: string;
            iconClosed?: string;
            disableBackdrop?: boolean;
            openToContent?: boolean | string;
            hideFormatPlaceholder?: boolean;
            hideWeekNumber?: boolean;
            showTodayButton?: boolean;
            labelFrom?: any;
            labelTo?: any;
            pickerLabelFrom?: any;
            pickerLabelTo?: any;
            innerLabel?: boolean;
            step?: "days" | "months" | "years";
            monthNameFormat?: "abbr" | "roman";
        }
        function DateRangePicker(props: DateRangePicker$Props): any;
        interface DateTimeRangePicker$value {
        }
        interface DateTimeRangePicker$dateFrom {
        }
        interface DateTimeRangePicker$dateTo {
        }
        interface DateTimeRangePicker$Props {
            value?: (DateTimeRangePicker$value | string)[];
            dateFrom?: DateTimeRangePicker$dateFrom | string;
            dateTo?: DateTimeRangePicker$dateTo | string;
            format?: string;
            country?: string;
            beforeRangeMessage?: any;
            afterRangeMessage?: any;
            parseDate?(...args: any): any;
            icon?: string;
            iconOpen?: string;
            iconClosed?: string;
            dateIcon?: string;
            timeIcon?: string;
            disableBackdrop?: boolean;
            openToContent?: boolean | string;
            placeholderTime?: string;
            hideFormatPlaceholder?: boolean;
            hideWeekNumber?: boolean;
            showTodayButton?: boolean;
            labelFrom?: any;
            labelTo?: any;
            pickerLabelFrom?: any;
            pickerLabelTo?: any;
            innerLabel?: boolean;
            timeFormat?: "12" | "24" | 12 | 24;
            timeStep?: number;
            timePickerType?: "single-column" | "multi-column";
            timeZone?: number;
        }
        function DateTimeRangePicker(props: DateTimeRangePicker$Props): any;
        interface Time$value {
            hours?: number;
            minutes?: number;
            seconds?: number;
            dayPart?: "AM" | "PM";
        }
        interface Time$timeFrom {
        }
        interface Time$timeTo {
        }
        interface Time$Props {
            value?: Time$value;
            format?: "12" | "24" | 12 | 24;
            onChange?(...args: any): any;
            seconds?: boolean;
            step?: number;
            type?: "single-column" | "multi-column";
            mobileDisplay?: boolean;
            timeFrom?: Time$timeFrom;
            timeTo?: Time$timeTo;
            show24?: boolean;
        }
        function Time(props: Time$Props): any;
        interface TimePicker$Props {
            value?: string;
            iconOpen?: string;
            iconClosed?: string;
            format?: "24" | "12";
            nanMessage?: any;
            seconds?: boolean;
            valueType?: "string" | "date";
            openToContent?: boolean | string;
            step?: number;
            strictStep?: boolean;
            pickerType?: "single-column" | "multi-column";
            suffix?: string;
            timeFrom?: string;
            timeTo?: string;
            show24?: boolean;
        }
        function TimePicker(props: TimePicker$Props): any;
        interface Timepicker$Props {
            value?: string;
            iconOpen?: string;
            iconClosed?: string;
            format?: "24" | "12";
            nanMessage?: any;
            seconds?: boolean;
            valueType?: "string" | "date";
            openToContent?: boolean | string;
            step?: number;
            strictStep?: boolean;
            pickerType?: "single-column" | "multi-column";
            suffix?: string;
            timeFrom?: string;
            timeTo?: string;
            show24?: boolean;
        }
        function Timepicker(props: Timepicker$Props): any;
        interface File$value {
        }
        interface File$dndAreaPlaceholder {
        }
        interface File$Props {
            value?: File$value | any[];
            multiple?: boolean;
            closeIcon?: string;
            downloadIcon?: string;
            selectedIcon?: string;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            authenticate?: boolean;
            dndAreaPlaceholder?: File$dndAreaPlaceholder | string;
        }
        function File(props: File$Props): any;
        interface Number$Props {
            value?: number | string;
            step?: number;
            min?: number;
            max?: number;
            decimals?: number;
            decimalSeparator?: string;
            thousandSeparator?: string;
            rounded?: boolean;
            nanMessage?: any;
            lowerMessage?: any;
            upperMessage?: any;
            buttonHidden?: boolean;
            suffix?: string;
            prefix?: string;
            hideSuffixOnFocus?: boolean;
            hidePrefixOnFocus?: boolean;
            decimalsView?: number;
            decimalsViewRounded?: "round" | "floor" | "ceil";
            valueType?: "number" | "string";
        }
        function Number(props: Number$Props): any;
        interface Checkbox$Props {
            value?: boolean;
            onIcon?: string;
            offIcon?: string;
            labelPosition?: "left" | "right";
            _radio?: boolean;
            type?: number;
            bgStyleChecked?: "filled" | "outline";
        }
        function Checkbox(props: Checkbox$Props): any;
        interface Checkboxes$Props {
            type?: number;
            bgStyleChecked?: "filled" | "outline";
            selectionBackground?: boolean;
            selectionBorderRadius?: string | number;
        }
        function Checkboxes(props: Checkboxes$Props): any;
        interface Radios$Props {
            bgStyleChecked?: "filled" | "outline";
            selectionBackground?: boolean;
            selectionBorderRadius?: string | number;
        }
        function Radios(props: Radios$Props): any;
        interface Select$Props {
            value?: string | string[];
            multiple?: boolean;
            selectAllEnabled?: boolean;
            allowTags?: any[];
            disableBackdrop?: boolean;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            openToContent?: boolean | string;
        }
        function Select(props: Select$Props): any;
        namespace Select {
            interface Option$Props {
                value: string;
                selectedContent?: any;
                onClick?(...args: any): any;
            }
            function Option(props: Option$Props): any;
        }
        interface TagSelect$Props {
            value?: string | string[];
            availableTags?: any[];
            ignoreTags?: string[];
            allowCustomTags?: boolean;
            colorSchema?: string;
            multiple?: boolean;
            borderRadius?: string | number;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            placeholder?: string;
            required?: boolean;
            requiredMessage?: any;
        }
        function TagSelect(props: TagSelect$Props): any;
        interface Slider$Props {
            min?: number;
            max?: number;
            step?: number;
            value?: number;
            onChange?(...args: any): any;
            onChanged?(...args: any): any;
        }
        function Slider(props: Slider$Props): any;
        interface SwitchSelector$inputAttrs {
        }
        interface SwitchSelector$Props {
            width?: number;
            items?: any;
            size?: any;
            elevation?: any;
            borderRadius?: any;
            onValidate?(...args: any): any;
            onChange?(...args: any): any;
            colorSchema?: any;
            message?: any;
            feedback?: "initial" | "success" | "warning" | "error" | "loading";
            readOnly?: boolean;
            inputAttrs?: SwitchSelector$inputAttrs;
            inputWidth?: string;
        }
        function SwitchSelector(props: SwitchSelector$Props): any;
        function Form(props: any): any;
        interface PropsForm$Props {
            props: any[];
            onSave(...args: any): any;
            onCancel?(...args: any): any;
            labelColWidth?: string;
            inputColWidth?: string;
            tagName?: string;
            uu5string?: boolean;
        }
        function PropsForm(props: PropsForm$Props): any;
        interface IconPicker$Props {
            disableBackdrop?: boolean;
            categories?: string[];
            selectedCategory?: any;
            placeholder?: string;
            required?: boolean;
            requiredMessage?: any;
            value?: string;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            openToContent?: boolean | string;
            onClose?(...args: any): any;
        }
        function IconPicker(props: IconPicker$Props): any;
        interface Iconpicker$Props {
            disableBackdrop?: boolean;
            categories?: string[];
            selectedCategory?: any;
            placeholder?: string;
            required?: boolean;
            requiredMessage?: any;
            value?: string;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            openToContent?: boolean | string;
            onClose?(...args: any): any;
        }
        function Iconpicker(props: Iconpicker$Props): any;
        interface TriStateCheckbox$Props {
            value?: true | false | any;
            onIcon?: string;
            offIcon?: string;
            indeterminateIcon?: string;
            labelPosition?: "left" | "right";
            bgStyleChecked?: "filled" | "outline";
            bgStyleIndeterminate?: "filled" | "outline";
        }
        function TriStateCheckbox(props: TriStateCheckbox$Props): any;
        interface ColorPicker$Props {
            value?: string;
            enableCustomColor?: boolean;
            simplePalette?: boolean;
            required?: boolean;
            requiredMessage?: any;
            borderRadius?: string;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            openToContent?: boolean | string;
        }
        function ColorPicker(props: ColorPicker$Props): any;
        interface ContextControls$0 {
            align?: any;
            className?: any;
        }
        function ContextControls(props: ContextControls$0): any;
        interface ContextForm$0 {
            className?: any;
        }
        function ContextForm(props: ContextForm$0): any;
        interface ContextHeader$Props {
            content?: any;
            info?: any;
            icon?: string;
        }
        function ContextHeader(props: ContextHeader$Props): any;
        interface ContextModal$0 {
            className?: any;
        }
        function ContextModal(props: ContextModal$0): any;
        interface ContextSection$0 {
            className?: any;
        }
        function ContextSection(props: ContextSection$0): any;
        const ContextFormConsumer: any;
        const Context: any;
        interface Controls$buttonSubmitProps {
            size?: "s" | "m" | "l" | "xl";
            content?: any;
            colorSchema?: any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
        }
        interface Controls$buttonCancelProps {
            size?: "s" | "m" | "l" | "xl";
            content?: any;
            colorSchema?: any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
        }
        interface Controls$buttonResetProps {
            size?: "s" | "m" | "l" | "xl";
            content?: any;
            colorSchema?: any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
        }
        interface Controls$buttonValidateProps {
            size?: "s" | "m" | "l" | "xl";
            content?: any;
            colorSchema?: any;
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
        }
        interface Controls$Props {
            buttonSubmitProps?: Controls$buttonSubmitProps;
            buttonCancelProps?: Controls$buttonCancelProps;
            buttonResetProps?: Controls$buttonResetProps;
            buttonValidateProps?: Controls$buttonValidateProps;
            buttonReset?: boolean;
            buttonValidate?: boolean;
        }
        function Controls(props: Controls$Props): any;
        function FormControls(): any;
        const bookKitUrl: "https://uuos9.plus4u.net/uu-bookkitg01-main/78462435-ed11ec379073476db0aa295ad6c00178/book/page";
    }
    namespace CodeKit {
    }
    namespace Calendar {
    }
    namespace Imaging {
    }
    namespace ParamQuery {
    }
    namespace Math {
    }
    namespace Tree {
    }
    namespace DataTable {
    }
    namespace Chart {
    }
    namespace SimpleChart {
    }
    namespace LibraryRegistry {
    }
    namespace ComponentCatalogue {
    }
    namespace Tiles {
    }
    namespace RichText {
    }
    namespace BlockLayout {
        interface Tile$Props {
            bgStyle?: "filled" | "outline" | "transparent" | "underline";
            elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            borderRadius?: number | string;
            width?: number | string;
            padding?: number | string;
            margin?: number | string;
        }
        function Tile(props: Tile$Props): any;
        interface Block$Props {
            actions?: any[];
            menuColorSchema?: string;
            menuBgStyle?: string;
            menuBorderRadius?: string;
        }
        function Block(props: Block$Props): any;
        interface Row$Props {
            size?: "s" | "m";
            weight?: "primary" | "normal" | "secondary";
            ellipsis?: boolean;
        }
        function Row(props: Row$Props): any;
        interface Column$Props {
            textAlign?: "left" | "center" | "right";
            width?: number | string;
        }
        function Column(props: Column$Props): any;
        interface Text$Props {
            size?: "s" | "m";
            weight?: "primary" | "normal" | "secondary";
            icon?: string;
        }
        function Text(props: Text$Props): any;
        function Line(props: any): any;
    }
    namespace Test {
        interface Tools$act$1 {
            updateWrapper?: any;
        }
        interface Tools$waitUntilCalled$1 {
            timeout?: any;
            updateWrapper?: any;
        }
        interface Tools$waitUntilCalledTimes$2 {
            timeout?: any;
            updateWrapper?: any;
        }
        interface Tools$waitWhile$1 {
            timeout?: any;
            updateWrapper?: any;
        }
        interface Tools$testProperty$4 {
        }
        const Tools: {
            SnapshotCommentSerializer: any;
            SnapshotToStringSerializer: any;
            mount(jsx: any, options: any): any;
            shallow(jsx: any, options: any): any;
            act(fn: any, _?: Tools$act$1): any;
            renderHook(hook: any, ...initialHookParams: any): any;
            initHookRenderer(hook: any, ...initialHookParams: any): any;
            waitUntilCalled(callbackFn: any, _?: Tools$waitUntilCalled$1): Promise<any>;
            waitUntilCalledTimes(callbackFn: any, times: any, _?: Tools$waitUntilCalledTimes$2): Promise<any>;
            wait(...args: any): Promise<any>;
            waitWhile(conditionFn: any, _?: Tools$waitWhile$1): Promise<any>;
            setInputValue(wrapper: any, value: any, focusBeforeSetting?: boolean, blurAfterSetting?: boolean): any;
            testProperty(Component: any, propName: any, values: any, requiredProps?: any, opt?: Tools$testProperty$4): any;
            testProperties(Component: any, config: any): any;
        };
        const Session: {
            TEST_IDENTITY: {
                id: "a8c5f13c239f820003dd4aff";
                name: "Test User";
                type: "uuPerson";
                uuIdentity: "1-9999";
                email: "test.user@example.org";
                levelOfAssurance: 0;
                loginLevelOfAssurance: 1;
            };
            instance: any;
            setPending(): any;
            setIdentity(identity: any): Promise<any>;
            setExpiring(expiring?: boolean): any;
            reset(): any;
        };
    }
    namespace Hooks {
        const useCallback: any;
        const useContext: any;
        const useEffect: any;
        const useImperativeHandle: any;
        const useDebugValue: any;
        const useLayoutEffect: any;
        const useMemo: any;
        const useReducer: any;
        const useRef: any;
        const useState: any;
        function createComponent(component: any, isRef?: boolean): any;
        function createComponentWithRef(component: any): any;
        function createVisualComponent(component: any, isRef?: boolean): any;
        function createVisualComponentWithRef(component: any): any;
        function createHoc(args: any): any;
        function useScreenSize(): any;
        interface ScreenSizeProvider$Props {
            screenSize?: any;
        }
        function ScreenSizeProvider(props: ScreenSizeProvider$Props): any;
        function useLanguage(): any;
        interface LanguageProvider$Props {
            initialLanguage?: string;
            onChange?(...args: any): any;
        }
        function LanguageProvider(props: LanguageProvider$Props): any;
        function useSession(): any;
        interface SessionProvider$session$initPromise {
        }
        interface SessionProvider$session {
            initComplete?: boolean;
            initPromise?: SessionProvider$session$initPromise;
            addListener?(...args: any): any;
            removeListener?(...args: any): any;
            getIdentity?(...args: any): any;
            isAuthenticated?(...args: any): any;
            isExpiring?(...args: any): any;
        }
        interface SessionProvider$Props {
            session: SessionProvider$session;
        }
        function SessionProvider(props: SessionProvider$Props): any;
        function useLevel(): any;
        interface LevelProvider$Props {
            level?: number;
        }
        function LevelProvider(props: LevelProvider$Props): any;
        function usePrint(): any;
        function useDevice(): any;
        interface DeviceProvider$Props {
            browserName?: string;
            platform?: string;
            hasTouch?: boolean;
            hasPointer?: boolean;
            orientation?: "portrait-primary" | "portrait-secondary" | "landscape-primary" | "landscape-secondary";
            isWebView?: boolean;
            isHeadless?: boolean;
        }
        function DeviceProvider(props: DeviceProvider$Props): any;
        function useLsi(lsi: any): any;
        function useLsiValues(lsi: any): any;
        interface useElementSize$0 {
            width?: any;
            height?: any;
            interval?: any;
        }
        function useElementSize(_?: useElementSize$0): any;
        function usePreviousValue(curValue: any, initialValue?: any): any;
        function useTimeZone(): any;
        interface TimeZoneProvider$Props {
            initialTimeZone?: string;
            onChange?(...args: any): any;
        }
        function TimeZoneProvider(props: TimeZoneProvider$Props): any;
        function useUnmountedRef(curValue: any, initialValue?: any): any;
        function withResize(Component: any, reserveSpace: any): any;
        function useCall(callFn: any): any;
        interface useListData$0 {
            onLoad?: any;
            onCreate?: any;
            onUpdate?: any;
            onDelete?: any;
            dtoIn?: any;
            data?: any;
        }
        function useListData(_?: useListData$0): any;
        interface useData$0 {
            onLoad?: any;
            onUpdate?: any;
            dtoIn?: any;
            data?: any;
            preserveOperations?: any;
        }
        function useData(_?: useData$0): any;
        interface usePagingListData$0 {
            pageSize?: any;
        }
        function usePagingListData(_?: usePagingListData$0): any;
        interface useDataObject$0 {
            initialData?: any;
            initialDtoIn?: any;
            handlerMap?: any;
        }
        function useDataObject(_?: useDataObject$0): any;
        interface useDataList$0 {
            initialData?: any;
            initialDtoIn?: any;
            pageSize?: any;
            itemIdentifier?: any;
            handlerMap?: any;
            itemHandlerMap?: any;
            skipInitialLoad?: any;
        }
        function useDataList(_?: useDataList$0): any;
        interface PagingAutoLoad$Props {
            distance?: number;
            data?: any[];
            pageSize: number;
            handleLoad?(...args: any): any;
            error?: ((...args: any)=>any) | any | any[];
            children?: ((...args: any)=>any) | any | any[];
        }
        function PagingAutoLoad(props: PagingAutoLoad$Props): any;
    }
}