import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import "./loading.less";

export const Loading = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ContentMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.Bricks.Loading",
    classNames: {
      main: "plus4u5-bricks-loading",
      inline: "plus4u5-bricks-loading-inline"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    inline: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      inline: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    const mainPropsToPass = this.getMainPropsToPass(["UU5.Common.BaseMixin", "UU5.Common.ElementaryMixin"]);
    if (this.props.inline) {
      mainPropsToPass.className += " " + this.getClassName("inline");
    }
    const content = this.props.content || this.props.children;
    let Component = this.props.inline ? UU5.Bricks.Span : UU5.Bricks.Div;

    return (
      <Component {...mainPropsToPass}>
        <UU5.Bricks.Loading inline={this.props.inline} colorSchema={this.props.colorSchema} />
        {content && <Component content={content} />}
      </Component>
    );
  }
  //@@viewOff:render
});

export default Loading;
