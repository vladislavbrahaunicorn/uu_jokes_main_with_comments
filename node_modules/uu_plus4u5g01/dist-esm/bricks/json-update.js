import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";

import "./json-update.css";

export const JsonUpdate = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.Bricks.JsonUpdate",
    nestingLevelMixin: "boxCollection",
    classNames: {
      main: "plus4u5-bricks-json-update"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.array]),
    onSave: UU5.PropTypes.func.isRequired,
    onSaveDone: UU5.PropTypes.func,
    onSaveFail: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    saveMessage: UU5.PropTypes.any,
    saveFailMessage: UU5.PropTypes.any,
    format: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: null,
      onSave: null,
      onSaveDone: null,
      onSaveFail: null,
      onCancel: null,
      saveMessage: null,
      saveFailMessage: null,
      format: "pretty"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _validate() {
    let input = this._jsonEditor;
    let value = input.getValue();
    let validFlag = true;
    this._formData = null;
    try {
      this._formData = value ? JSON.parse(value) : null;
    } catch (err) {
      validFlag = false;
    }

    return validFlag;
  },

  _save(opt, justSave) {
    if (this._validate()) {
      let dtoIn = {
        done: dtoOut => opt.component.saveDone(dtoOut, justSave),
        fail: dtoOut => opt.component.saveFail(dtoOut),
        data: this._formData
      };
      if (typeof this.props.onSave === "function") {
        this.props.onSave(dtoIn);
      } else if (typeof this.props.save === "function") {
        UU5.Common.Tools.warning("Property 'save' is deprecated! Use 'onSave' instead.");
        this.props.save(dtoIn);
      }
      this._form.getAlertBus().setAlert({
        content: this.props.saveMessage || <UU5.Bricks.Loading style={{ minWidth: "100px" }} />,
        colorSchema: "info"
      });
    }
  },

  _saveDone(dtoOut, justSave) {
    this._form.getAlertBus().clearAlerts();
    if (typeof this.props.onSaveDone === "function") {
      this.props.onSaveDone(dtoOut, justSave);
    } else if (typeof this.props.saveDone === "function") {
      UU5.Common.Tools.warning("Property 'saveDone' is deprecated! Use 'onSaveDone' instead.");
      this.props.saveDone(dtoOut, justSave);
    }
  },

  _saveFail(dtoErr) {
    if (typeof this.props.onSaveFail === "function") {
      this.props.onSaveFail(dtoErr);
    } else if (typeof this.props.saveFail === "function") {
      UU5.Common.Tools.warning("Property 'saveFail' is deprecated! Use 'onSaveFail' instead.");
      this.props.saveFail(dtoErr);
    }
    this._form.getAlertBus().setAlert({ content: this.props.saveFailMessage || "Save failed!", colorSchema: "danger" });
  },

  _reset() {
    this._form.getAlertBus().clearAlerts();
    this._jsonEditor.reset();
  },

  _cancel() {
    this._form.getAlertBus().clearAlerts();
    if (typeof this.props.onCancel === "function") {
      this.props.onCancel();
    } else if (typeof this.props.cancel === "function") {
      UU5.Common.Tools.warning("Property 'cancel' is deprecated! Use 'onCancel' instead.");
      this.props.cancel();
    }
  },

  _getMainProps() {
    let props = this.getMainPropsToPass();
    props.onSave = opt => this._save(opt);
    props.onSaveByKey = opt => this._save(opt, true);
    props.onSaveDone = opt => this._saveDone(opt);
    props.onSaveFail = opt => this._saveFail(opt);
    props.onCancel = this._cancel;
    props.onReset = this._reset;
    props.onValidate = this._validate;
    props.ref_ = form => (this._form = form);
    return props;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render

  render() {
    let jsonEditor = UU5.Common.Tools.findComponent("UU5.CodeKit.JsonEditor", {
      ref_: component => (this._jsonEditor = component),
      value: this.props.data,
      rows: 20,
      format: this.props.format,
      focus: true,
      name: this.getName(),
      disabled: this.isDisabled(),
      onValidate: () => {}
    });

    return (
      <UU5.Forms.Form {...this._getMainProps()}>
        {jsonEditor}
        <UU5.Forms.Controls />
      </UU5.Forms.Form>
    );
  }
  //@@viewOff:render
});

export default JsonUpdate;
