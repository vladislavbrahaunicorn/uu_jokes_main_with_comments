import UU5 from "uu5g04";
import "uu5g04-bricks";

import "./rich-image.less";

const RichImage = UU5.Common.VisualComponent.create({
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin],
  statics: {
    tagName: "Plus4U5.Bricks.RichImage",

    shapes: {
      default: {
        className: "plus4u5-rich-image-default"
      },
      rounded: {
        className: "plus4u5-rich-image-default " + "plus4u5-rich-image-shape-rounded"
      },
      square: {
        className: "plus4u5-rich-image-crop"
      },
      roundedSquare: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-shape-rounded"
      },
      circle: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-shape-circle"
      },
      rect: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43",
        x: 4,
        y: 3
      },
      rect4x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43",
        x: 4,
        y: 3
      },
      rect3x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect32",
        x: 3,
        y: 2
      },
      rect5x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect54",
        x: 5,
        y: 4
      },
      rect2x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect21",
        x: 2,
        y: 1
      },
      rect3x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect31",
        x: 3,
        y: 1
      },
      rect4x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect41",
        x: 4,
        y: 1
      },
      rect45x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect4510",
        x: 45,
        y: 10
      },
      rect16x9: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect169",
        x: 16,
        y: 9
      },
      rect16x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect1610",
        x: 16,
        y: 10
      },
      rect3x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect34",
        x: 3,
        y: 4
      },
      rect4x5: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect45",
        x: 4,
        y: 5
      },
      rect2x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect23",
        x: 2,
        y: 3
      },
      rect1x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect12",
        x: 1,
        y: 2
      }, //rounded starts here
      roundedRect: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 3
      },
      roundedRect4x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect43 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 3
      },
      roundedRect3x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect32 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 2
      },
      roundedRect5x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect54 " + "plus4u5-rich-image-shape-rounded",
        x: 5,
        y: 4
      },
      roundedRect2x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect21 " + "plus4u5-rich-image-shape-rounded",
        x: 2,
        y: 1
      },
      roundedRect3x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect31 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 1
      },
      roundedRect4x1: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect41 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 1
      },
      roundedRect45x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect4510 " + "plus4u5-rich-image-shape-rounded",
        x: 45,
        y: 10
      },
      roundedRect16x9: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect169 " + "plus4u5-rich-image-shape-rounded",
        x: 16,
        y: 9
      },
      roundedRect16x10: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect1610 " + "plus4u5-rich-image-shape-rounded",
        x: 16,
        y: 10
      },
      roundedRect3x4: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect34 " + "plus4u5-rich-image-shape-rounded",
        x: 3,
        y: 4
      },
      roundedRect4x5: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect45 " + "plus4u5-rich-image-shape-rounded",
        x: 4,
        y: 5
      },
      roundedRect2x3: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect23 " + "plus4u5-rich-image-shape-rounded",
        x: 2,
        y: 3
      },
      roundedRect1x2: {
        className: "plus4u5-rich-image-crop " + "plus4u5-rich-image-rect12 " + "plus4u5-rich-image-shape-rounded",
        x: 1,
        y: 2
      }
    },
    effects: {
      default: {
        className: "plus4u5-rich-image-effect-default"
      },
      zoom: {
        className: "plus4u5-rich-image-effect-zoom"
      },
      grayscale: {
        className: "plus4u5-rich-image-effect-grayscale"
      },
      blur: {
        className: "plus4u5-rich-image-effect-blur"
      },
      sepia: {
        className: "plus4u5-rich-image-effect-sepia"
      },
      invert: {
        className: "plus4u5-rich-image-effect-invert"
      },
      tilt: {
        className: "plus4u5-rich-image-effect-tilt"
      },
      morph: {
        className: "plus4u5-rich-image-effect-morph"
      }
    },
    classNames: {
      effectCaption: "plus4u5-rich-image-effect-caption",
      img: "plus4u5-rich-image-img",
      imgContainer: "plus4u5-rich-image-img-container",
      loadingAnimation: "plus4u5-rich-image-loading-animation",
      landscape: "plus4u5-rich-image-img-landscape",
      portrait: "plus4u5-rich-image-img-portrait",
      shadow: "plus4u5-rich-image-shadow",
      shadowCircle: "plus4u5-rich-image-shadow-circle",
      shadowRounded: "plus4u5-rich-image-shadow-rounded",
      imgLoading: "plus4u5-rich-image-img-loading"
    }
  },
  propTypes: {
    src: UU5.PropTypes.any,
    thumb: UU5.PropTypes.any,
    caption: UU5.PropTypes.any,
    effect: UU5.PropTypes.any, //zoom, popout, grayscale, blur, none
    shape: UU5.PropTypes.any, //square, circle, default
    orientation: UU5.PropTypes.any,
    crop: UU5.PropTypes.any, //left, top, bottom, right,
    width: UU5.PropTypes.any,
    height: UU5.PropTypes.any,
    shadow: UU5.PropTypes.bool,
    loadingImageSrc: UU5.PropTypes.string,
    errorImageSrc: UU5.PropTypes.string,
    authenticate: UU5.PropTypes.bool
  },

  getDefaultProps() {
    return {
      effect: "zoom",
      shape: "default",
      orientation: "landscape",
      shadow: false,
      authenticate: false
    };
  },

  getInitialState() {
    return {
      imgLoading: true,
      error: false
    };
  },

  componentWillMount() {
    let newState = {};
    let shape = this.props.shape || "default";
    if (shape.substr(0, 4) === "rect" || shape.substr(0, 11) === "roundedRect") shape = "rect";
    switch (shape) {
      case "square":
      case "roundedSquare":
      case "circle":
        newState.orientation = "landscape";
        break;
      case "rect":
        let s = this._getShape(this.props.shape);
        newState.orientation = s.x > s.y ? "landscape" : "portrait";
        break;
      default:
        newState.orientation = "default";
    }
    this.setState(newState);
  },

  componentWillReceiveProps(nextProps) {
    if (this._getSrc(nextProps) !== this._getSrc(this.props)) {
      this.setState({ imgLoading: true, error: false });
    }
  },

  _getSrc(props) {
    return props.thumb ? props.thumb : props.src;
  },

  _getShape(shape) {
    return this.constructor.shapes[shape] ? this.constructor.shapes[shape] : this.constructor.shapes["default"];
  },

  _getEffect(effect) {
    return this.constructor.effects[effect] ? this.constructor.effects[effect] : this.constructor.effects["default"];
  },

  _shadowShapeBorderRadius() {
    let shadowShapeBorderRadius;
    if (this.props.shape === "circle") {
      shadowShapeBorderRadius = " " + this.getClassName("shadowCircle");
    } else if (this.props.shape === "rounded") {
      shadowShapeBorderRadius = " " + this.getClassName("shadowRounded");
    } else {
      shadowShapeBorderRadius = "";
    }
    return shadowShapeBorderRadius;
  },

  _getFrameDiv(shape, effect, children) {
    let r;
    let mainAttrs = this.getMainAttrs();
    if (this.props.width || this.props.height) {
      mainAttrs.style = mainAttrs.style || {};
      if (this.props.width) mainAttrs.style.width = this.props.width;
      if (this.props.height) mainAttrs.style.height = this.props.height;
    }

    const shadowDiv = this.props.shadow ? (
      <div className={this.getClassName("shadow") + this._shadowShapeBorderRadius()} />
    ) : null;
    let loading =
      this.props.loadingImageSrc && this.state.imgLoading ? (
        <div className={this.getClassName("loadingAnimation")} />
      ) : null;

    switch (effect) {
      case "blur":
        r = (
          <UU5.Bricks.Div
            mainAttrs={mainAttrs}
            className={
              this.getClassName("imgContainer") +
              " " +
              this._getShape(this.props.shape).className +
              " " +
              this._getEffect(this.props.effect).className
            }
          >
            {shadowDiv}
            {loading}
            {children}
            <div className={this.getClassName().effectCaption}>{this.getLsiValue(this.props.caption)}</div>
          </UU5.Bricks.Div>
        );
        break;
      default:
        r = (
          <UU5.Bricks.Div
            mainAttrs={mainAttrs}
            className={
              this.getClassName("imgContainer") +
              " " +
              this._getShape(this.props.shape).className +
              " " +
              this._getEffect(this.props.effect).className
            }
          >
            {shadowDiv}
            {loading}
            {children}
          </UU5.Bricks.Div>
        );
    }
    return r;
  },

  _onLoad(e) {
    let newState = { imgLoading: false };
    if (this.state.orientation !== "default") {
      let s = this._getShape(this.props.shape);
      s.x = s.x || 1;
      s.y = s.y || 1;

      let img = { height: this._img.naturalHeight, width: this._img.naturalWidth };
      if (!img.width || !img.height) img = this._img.getBoundingClientRect();
      if (img.height / img.width >= s.y / s.x) {
        Object.assign(newState, { orientation: "portrait" });
      } else {
        Object.assign(newState, { orientation: "landscape" });
      }
    }
    this.setState(newState);
  },
  _onError(e) {
    this.setState({
      imgLoading: false,
      error: true
    });
  },

  render() {
    let src = this._getSrc(this.props);
    let className = "";
    switch (this.state.orientation) {
      case "portrait":
        className = this.getClassName().portrait;
        break;
      case "landscape":
        className = this.getClassName().landscape;
        break;
      default:
        className = this.getClassName().img;
    }
    let authenticate = this.state.error && this.props.errorImageSrc ? false : this.props.authenticate;

    return this._getFrameDiv(this.props.shape, this.props.effect, [
      this.state.imgLoading && this.props.loadingImageSrc && (
        <UU5.Bricks.Image key="loading" src={this.props.loadingImageSrc} className={className} />
      ),
      <UU5.Bricks.Image
        key="main"
        alt={this.state.imgLoading ? null : this.getName()}
        src={this.state.error && this.props.errorImageSrc ? this.props.errorImageSrc : src}
        ref_={img => (this._img = img.findDOMNode())}
        className={this.state.imgLoading && this.props.loadingImageSrc ? this.getClassName("imgLoading") : className}
        mainAttrs={{
          onLoad: this._onLoad,
          onError: this.state.error ? null : this._onError
        }}
        authenticate={authenticate}
      />
    ]);

    //{this.props.lightBox ?
    //  <UU5.Bricks.Link onClick={() => this.props.lightBox.show(this.state.index)}>
    //    <UU5.Bricks.Image src={this.props.thumb} />
    //  </UU5.Bricks.Link> :
  }
});

export default RichImage;
