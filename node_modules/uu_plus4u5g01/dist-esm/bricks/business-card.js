import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";
import Calls from "./calls.js";

import "./business-card.less";
import UserPhoto from "./user-photo.js";

export const BusinessCard = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.IdentityMixin,
    UU5.Common.ColorSchemaMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.Bricks.BusinessCard",
    nestingLevelList: UU5.Environment.getNestingLevelList("box", "inline"),
    classNames: {
      main: "plus4u5-bricks-business-card"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: UU5.PropTypes.string,
    type: UU5.PropTypes.oneOf([1, 2]),
    vertical: UU5.PropTypes.bool,
    visual: UU5.PropTypes.oneOf(["shortInfo", "fullInfo", "mini", "micro", "inline"]),
    bgStyle: UU5.PropTypes.oneOf(["outline", "filled", "transparent"]),
    hidePhoto: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps: function() {
    return {
      uuIdentity: null,
      type: 1,
      vertical: false,
      visual: undefined,
      bgStyle: "outline",
      hidePhoto: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    if (this.props.bgStyle === "outlined") {
      UU5.Common.Tools.warning('Value "outlined" of property "bgStyle" is deprecated! Use "outline" instead.');
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getUuIdentity(props) {
    props = props || this.props;
    return props.uuIdentity || (this.getIdentity() ? this.getIdentity().uuIdentity : null);
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let result;

    let nestingLevel = this.getNestingLevel();
    if (nestingLevel) {
      let { visual } = this.props;
      if (nestingLevel === "inline") visual = "inline";
      else if (!visual) visual = "shortInfo";

      result = this.isAuthenticated() ? (
        <BusinessCardBody
          {...this.props}
          {...this.getMainPropsToPass()}
          visual={visual}
          uuIdentity={this._getUuIdentity()}
        />
      ) : this.isPending() ? (
        <UU5.Bricks.Loading />
      ) : null;
    } else {
      result = null;
    }

    return result;
  }
  //@@viewOff:render
});

const BusinessCardBody = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.ScreenSizeMixin,
    UU5.Common.LoadMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.Bricks.BusinessCardBody",
    classNames: {
      main: "plus4u5-bricks-business-card-body",
      modal: "plus4u5-bricks-business-card-modal",
      modalHorizontal: "plus4u5-bricks-business-card-modal-horizontal",
      type: "plus4u5-bricks-business-card-type-",
      visual: "plus4u5-bricks-business-card-",
      bgStyle: "plus4u5-bricks-business-card-bg-",
      vertical: "plus4u5-bricks-business-card-vertical",
      horizontal: "plus4u5-bricks-business-card-horizontal",
      leftWrapper: "plus4u5-bricks-business-card-left-wrapper",
      rightWrapper: "plus4u5-bricks-business-card-right-wrapper",
      photo: "plus4u5-bricks-business-card-photo",
      name: "plus4u5-bricks-business-card-name",
      contacts: "plus4u5-bricks-business-card-contacts",
      contactsItem: "plus4u5-bricks-business-card-contacts-item",
      wrapText: "plus4u5-bricks-business-card-wrap-text",
      contactText: "plus4u5-bricks-business-card-contact-text",
      moreInfo: "plus4u5-bricks-business-card-more",
      icon: "plus4u5-bricks-business-card-icon uu5-common-text",
      inModal: "plus4u5-bricks-business-card-in-modal",
      hidePhoto: "plus4u5-bricks-business-card-hide-photo",
      loading: "plus4u5-bricks-business-card-loading",
      loadingPhoto: "plus4u5-bricks-business-card-loading-photo"
    },
    defaults: {
      googleMapsSearch: "https://www.google.cz/maps/search/?api=1&query="
    },
    calls: {
      onLoad: "loadPeopleCardAttributes"
    },
    lsi: () => Plus4U5.Environment.Lsi.Bricks.businessCard
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    uuIdentity: UU5.PropTypes.string,
    type: UU5.PropTypes.any,
    vertical: UU5.PropTypes.any,
    visual: UU5.PropTypes.any,
    bgStyle: UU5.PropTypes.any,
    hidePhoto: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.setCalls(Calls);
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.uuIdentity !== this.props.uuIdentity) {
      this.reload();
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      uuIdentity: props.uuIdentity
    };
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getName() {
    let dtoOut = this.getDtoOut();
    return dtoOut ? dtoOut.first_name + " " + dtoOut.surname : null;
  },

  _getContact(contact, i) {
    const item = {
      props: {
        content: contact.contact,
        className: this.getClassName("contactText")
      }
    };
    switch (contact.type) {
      case "phone":
        item.icon = "mdi-phone";
        item.props.href = "tel:" + contact.contact;
        break;
      case "email":
        item.icon = "mdi-email";
        item.props.href = "mailto:" + contact.contact;
        break;
      case "link":
        let re = RegExp("^https?://", "i");
        let cnt = re.test(contact.contact) ? contact.contact : "http://" + contact.contact;
        item.icon = "mdi-web";
        item.props.href = cnt;
        item.props.target = "_blank";
        break;
      case "address":
        item.icon = "mdi-map-marker";
        item.multiline = true;
        item.props.href = this.getDefault("googleMapsSearch") + contact.contact;
        item.props.target = "_blank";
        break;
      default:
        item.icon = "mdi-contact-mail";
        item.props.href = null;
    }

    let className = this.getClassName("contactsItem");
    if (!item.multiline) {
      className += " " + this.getClassName("wrapText");
      item.props.tooltip = contact.contact;
    }

    return (
      <UU5.Bricks.Span key={i} className={className}>
        <UU5.Bricks.Icon className={this.getClassName("icon")} icon={item.icon} />
        {this.props.visual !== "mini" && <UU5.Bricks.Link {...item.props} />}
      </UU5.Bricks.Span>
    );
  },

  _getContacts() {
    let data = this.getDtoOut();
    let contactList = (data && data.contact_list) || [];
    let mainContacts = {};
    const mainTypes = ["phone", "email", "address"];
    contactList.forEach(item => {
      if (mainTypes.indexOf(item.type) !== -1) {
        if (mainContacts[item.type]) {
          if (item.primary) mainContacts[item.type] = item;
        } else {
          mainContacts[item.type] = item;
        }
      }
    });

    const mainContactsList = [];
    mainContacts.phone && mainContactsList.push(mainContacts.phone);
    mainContacts.email && mainContactsList.push(mainContacts.email);
    mainContacts.address && mainContactsList.push(mainContacts.address);

    if (this.props.visual !== "fullInfo") {
      contactList = mainContactsList;
    } else {
      mainContactsList.forEach(item => {
        contactList.splice(contactList.indexOf(item), 1);
      });
      contactList.unshift(...mainContactsList);
    }

    return contactList.map((item, i) => {
      return this._getContact(item, i);
    });
  },

  _getMainAttrs() {
    const mainAttrs = this.getMainAttrs();
    delete mainAttrs.colorSchema;
    mainAttrs.bgStyle = null;

    let colorSchema = !!UU5.Environment.colorSchemaMap[this.props.colorSchema];

    if (colorSchema) {
      let colorSchemaKey = UU5.Environment.colorSchemaMap[this.props.colorSchema].color;
      let schemaIsRich = colorSchemaKey.match(/\w+-rich/) || false;
      colorSchemaKey = colorSchemaKey + (schemaIsRich ? "" : "-rich");
      let computedSchema = "color-schema-" + colorSchemaKey;
      if (!schemaIsRich) {
        UU5.Environment.getColorSchema(colorSchemaKey);
        mainAttrs.className = mainAttrs.className.replace(/color-schema-\w+/g, computedSchema);
      }
    }

    mainAttrs.elevation = this.props.bgStyle === "transparent" ? 0 : 2;
    mainAttrs.elevationHover = mainAttrs.elevation;

    mainAttrs.className += " " + this.getClassName("type") + this.props.type;
    mainAttrs.className += " " + this.getClassName(this.props.vertical ? "vertical" : "horizontal");
    mainAttrs.className += " " + this.getClassName("visual") + this.props.visual.toLowerCase();
    if (this.props.visual !== "inline" && this.props.visual !== "micro") {
      mainAttrs.className += " " + this.getClassName("bgStyle") + this.props.bgStyle;
    }
    if (this.props.hidePhoto) {
      mainAttrs.className += " " + this.getClassName("hidePhoto");
    }
    if (!this.isDisabled()) {
      if (this.props.visual === "mini" || this.props.visual === "micro" || this.props.visual === "inline") {
        mainAttrs.mainAttrs = {
          onClick: () => this._modal.open()
        };
      }
    }
    return mainAttrs;
  },

  _getChild() {
    let leftWrapperClassName = this.getClassName("leftWrapper");
    if (this.props.bgStyle === "filled" && this.props.visual !== "inline" && this.props.visual !== "micro") {
      leftWrapperClassName += " uu5-common-bg";
    }

    let rightWrapperClassName = this.getClassName("rightWrapper");
    if (this.props.bgStyle === "filled" && this.props.visual === "mini") {
      rightWrapperClassName += " uu5-common-bg";
    }

    let nameClassName = this.getClassName("name");
    if (this.props.visual !== "mini" && this.props.visual !== "inline" && this.props.visual !== "micro") {
      nameClassName += " uu5-common-text";
    }

    const nameInRightWrapper =
      (this.props.visual === "mini" && !this.props.vertical) ||
      this.props.visual === "inline" ||
      this.props.visual === "micro";

    let modalClassName = this.getClassName("modal");
    !this.props.vertical && (modalClassName += " " + this.getClassName("modalHorizontal"));

    let userPhotoWidth;
    if (this.props.visual === "inline") {
      userPhotoWidth = "1.0625em";
    } else if (this.props.visual === "micro") {
      userPhotoWidth = 32;
    } else {
      userPhotoWidth = 120;
    }

    return (
      <>
        <UU5.Bricks.Card {...this._getMainAttrs()}>
          <UU5.Bricks.Div className={leftWrapperClassName}>
            <UserPhoto
              uuIdentity={this.props.uuIdentity}
              className={this.getClassName("photo")}
              type="circle"
              width={userPhotoWidth}
              shadow
            />
            {!nameInRightWrapper ? (
              <UU5.Bricks.Span className={nameClassName}>{this._getName()}</UU5.Bricks.Span>
            ) : null}
          </UU5.Bricks.Div>

          <UU5.Bricks.Div className={rightWrapperClassName}>
            {nameInRightWrapper ? (
              this.props.visual === "inline" ? (
                <UU5.Bricks.Link className={nameClassName}>{this._getName()}</UU5.Bricks.Link>
              ) : (
                <UU5.Bricks.Span className={nameClassName}>{this._getName()}</UU5.Bricks.Span>
              )
            ) : null}

            {this.props.visual !== "inline" && this.props.visual !== "micro" ? (
              <UU5.Bricks.Div className={this.getClassName("contacts")}>{this._getContacts()}</UU5.Bricks.Div>
            ) : null}

            {this.props.visual === "shortInfo" ? (
              <UU5.Bricks.Button
                className={this.getClassName("moreInfo")}
                bgStyle="transparent"
                content={this.getLsiComponent("moreInfo")}
                onClick={() => this._modal.open()}
              />
            ) : null}
          </UU5.Bricks.Div>

          {this.getDisabledCover()}
        </UU5.Bricks.Card>

        {this.props.visual === "mini" ||
        this.props.visual === "shortInfo" ||
        this.props.visual === "micro" ||
        this.props.visual === "inline" ? (
          <UU5.Bricks.Modal
            className={modalClassName}
            ref_={item => (this._modal = item)}
            scrollableBackground
            header=" "
            content={
              <BusinessCardBody
                {...this.props}
                className={this.getClassName("inModal")}
                vertical={this.isXs() || this.props.vertical}
                bgStyle={this.props.bgStyle === "filled" ? "filled" : "transparent"}
                visual="fullInfo"
              />
            }
          />
        ) : null}
      </>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let children;

    switch (this.getLoadFeedback()) {
      case "loading":
        children =
          this.props.visual === "inline" ? (
            <UU5.Bricks.Span
              className={
                this.getClassName("loading") + (this.props.hidePhoto ? " " + this.getClassName("hidePhoto") : "")
              }
            >
              {this.props.hidePhoto ? null : (
                <UU5.Bricks.Image
                  className={this.getClassName("loadingPhoto")}
                  src={Plus4U5.Environment.basePath + "core/assets/img/anonymous.png"}
                />
              )}
              <UU5.Bricks.Loading inline />
            </UU5.Bricks.Span>
          ) : (
            <UU5.Bricks.Loading />
          );

        break;
      case "ready":
        children = this._getChild();
        break;
      case "error":
        children = <UU5.Common.Error>{this.getLsiComponent("error", "UU5.Common.LoadMixin")}</UU5.Common.Error>;
        break;
    }

    return children;
  }
  //@@viewOff:render
});

export default BusinessCard;
