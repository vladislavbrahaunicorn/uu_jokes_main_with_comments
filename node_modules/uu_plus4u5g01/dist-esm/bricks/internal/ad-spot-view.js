//@@viewOn:imports
import UU5, { createComponent } from "uu5g04";
import "uu5g04-bricks";
import Plus4U5 from "uu_plus4u5g01";
import Css from "./css";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: "Plus4U5.Bricks.AdSpotView"
};
//@@viewOff:statics

const CLASS_NAMES = {
  main: () => Css.css`
    display: inline-block;
    vertical-align: top;
  `,
  widths: ({ minWidth, maxWidth }) => Css.css`
    min-width: ${UU5.Common.Tools.fillUnit(minWidth)};
    max-width: ${UU5.Common.Tools.fillUnit(maxWidth)};
    overflow: hidden;
  `,
  items: () => Css.css`
    display: flex;
    flex-direction: column;
  `,
  item: ({ spaceBetween, color }) => Css.css`
    margin-bottom: ${UU5.Common.Tools.fillUnit(spaceBetween)};
    ${color ? `border: 1px solid ${color};` : ``}
  `,
  lastItem: () => Css.css`
    margin-bottom: 0;
  `,
  title: ({ color, spaceBetween }) => Css.css`
    ${color ? `color: ${color};` : ``}
    margin-bottom: ${UU5.Common.Tools.fillUnit(spaceBetween)};
  `
};

export const AdSpotView = createComponent({
  ...STATICS,

  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:propTypes
  propTypes: {
    title: UU5.PropTypes.any,
    color: UU5.PropTypes.string,
    spaceBetween: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    minWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    maxWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string])
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    title: undefined, // default is in code to evaluate Plus4U5.Environment.Bricks.Lsi... at render time, not definition time
    color: "#BDBDBD",
    spaceBetween: 8,
    minWidth: 208,
    maxWidth: 256
  },
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _renderItems(data, renderAsLinks = false) {
    let result = [];
    let renderableItems = Array.isArray(data)
      ? data.filter(item => item && item.component && typeof item.component === "string")
      : [];
    renderableItems.forEach((item, i, list) => {
      let { component, props, link, alt } = item;
      let renderedItem = renderAsLinks ? (link ? alt : null) : UU5.Common.Tools.findComponent(component, props);
      if (link && renderedItem) {
        renderedItem = (
          <UU5.Bricks.Link key={"i" + i} href={link} target="_blank">
            {renderedItem}
          </UU5.Bricks.Link>
        );
      }
      if (!renderAsLinks && renderedItem) {
        renderedItem = (
          <UU5.Bricks.Div
            key={"i" + i}
            className={
              CLASS_NAMES.item(this.props) + (i === list.length - 1 ? " " + CLASS_NAMES.lastItem(this.props) : "")
            }
          >
            {renderedItem}
          </UU5.Bricks.Div>
        );
      }
      if (renderedItem) {
        if (renderAsLinks && result.length) result.push(", ");
        result.push(renderedItem);
      }
    });
    return result;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { data, nestingLevel, title } = this.props;

    let result = null;
    let renderAsLinks = nestingLevel !== "box";
    let renderedItems = this._renderItems(data, renderAsLinks);
    if (renderedItems.length > 0) {
      if (!renderAsLinks) {
        let attrs = UU5.Common.VisualComponent.getAttrs(
          this.props,
          CLASS_NAMES.main(this.props) + " " + CLASS_NAMES.widths(this.props)
        );
        result = (
          <UU5.Bricks.Span {...attrs}>
            {title != null ? <UU5.Bricks.Div className={CLASS_NAMES.title(this.props)} content={title} /> : null}
            <UU5.Bricks.Div className={CLASS_NAMES.items(this.props)}>{renderedItems}</UU5.Bricks.Div>
          </UU5.Bricks.Span>
        );
      } else {
        let attrs = UU5.Common.VisualComponent.getAttrs(this.props);
        result = <UU5.Bricks.Span {...attrs}>{renderedItems}</UU5.Bricks.Span>;
      }
    }

    return result;
  }
  //@@viewOff:render
});
export default AdSpotView;
