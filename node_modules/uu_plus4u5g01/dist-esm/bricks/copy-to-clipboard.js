import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import Calls from "./calls.js";
import "./copy-to-clipboard.less";

export const CopyToClipboard = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.CallsMixin,
    UU5.Common.ContentMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.Bricks.CopyToClipboard",
    nestingLevel: "smallBox",
    classNames: {
      main: "plus4u5-bricks-copy-to-clipboard",
      icon: "plus4u5-bricks-copy-to-clipboard-icon",
      rotating: "plus4u5-bricks-copy-to-clipboard-icon-rotating"
    },
    defaults: {
      regexpIsUrl: /^(file|ftp|http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&\/=]*)/g
    },
    calls: {
      onLoad: "getData"
    },
    opt: {
      nestingLevelWrapper: true
    },
    errors: {
      loadingFailed: "Error occurred while loading data from given url."
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    src: UU5.PropTypes.string,
    onClickAfter: UU5.PropTypes.func,
    initialContent: UU5.PropTypes.string,
    loadingContent: UU5.PropTypes.string,
    readyContent: UU5.PropTypes.string,

    // button props
    size: UU5.PropTypes.string,
    displayBlock: UU5.PropTypes.bool,
    bgStyle: UU5.PropTypes.string,
    pressed: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      src: null,
      onClickAfter: null,
      initialContent: null,
      loadingContent: null,
      readyContent: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      state: "initial",
      dtoOut: null
    };
  },

  componentWillMount() {
    this.setCalls(Calls);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _isUrl() {
    return this.props.src && !!this.props.src.match(this.getDefault("regexpIsUrl"));
  },

  _getBasicButton() {
    return (
      <UU5.Bricks.Button
        {...this._getMainProps()}
        onClick={(button, e) => {
          UU5.Common.Tools.copyToClipboard(this.props.src);
          typeof this.props.onClickAfter === "function" && this.props.onClickAfter(e, this.props.src);
        }}
      />
    );
  },

  _getMainProps() {
    let props = this.getMainPropsToPass();

    props.size = this.props.size;
    props.displayBlock = this.props.displayBlock;
    props.bgStyle = this.props.bgStyle;
    props.pressed = this.props.pressed;

    return props;
  },

  _getUrlButton() {
    let buttonProps;
    switch (this.state.state) {
      case "initial":
        buttonProps = {
          content: [
            <UU5.Bricks.Icon key="icon" icon="mdi-download" className={this.getClassName("icon")} />,
            this.props.initialContent || this.getChildren()
          ],
          colorSchema: "primary",
          onClick: (button, e) => {
            this.setState({ state: "loading" }, () => {
              this.getCall("onLoad")({
                data: { src: this.props.src },
                done: dtoOut => {
                  this.setAsyncState({
                    state: "ready",
                    dtoOut: dtoOut
                  });
                },
                fail: dtoOut => {
                  // TODO
                  this.setAsyncState({
                    state: "ready",
                    dtoOut: dtoOut,
                    disabled: true
                  });
                  this.showError("loadingFailed");
                }
              });
            });
          }
        };
        break;
      case "loading":
        buttonProps = {
          content: [
            <UU5.Bricks.Icon
              key="icon"
              icon="mdi-refresh"
              className={this.getClassName("icon") + " " + this.getClassName("rotating")}
            />,
            this.props.loadingContent || this.getChildren()
          ],
          colorSchema: "primary"
        };
        break;
      case "ready":
        buttonProps = {
          content: [
            <UU5.Bricks.Icon key="icon" icon="mdi-content-copy" className={this.getClassName("icon")} />,
            this.props.readyContent || this.getChildren()
          ],
          colorSchema: "success",
          disabled: this.state.disabled,
          onClick: () => {
            UU5.Common.Tools.copyToClipboard(this.state.dtoOut);
            typeof this.props.onClickAfter === "function" && this.props.onClickAfter();
          }
        };
        break;
    }

    return <UU5.Bricks.Button {...this._getMainProps()} {...buttonProps} />;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? (this._isUrl() ? this._getUrlButton() : this._getBasicButton()) : null;
  }
  //@@viewOff:render
});

export default CopyToClipboard;
