import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";
import Calls from "../calls.js";
import "./image.css";

export const ImageLoader = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.LsiMixin, UU5.Common.LoadMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.UuBmlDraw.ImageLoader",
    classNames: {
      main: "plus4u5-uubmldraw-image",
      modal: "plus4u5-uubmldraw-image-modal",
      button: "plus4u5-uubmldraw-image-button uu5-elevation-2",
      inProgress: "plus4u5-uubmldraw-image-inprogress",
      img: "plus4u5-uubmldraw-image-img uu5-elevation-0",
      imageWrapper: "plus4u5-uubmldraw-image-image-wrapper"
    },
    defaults: {
      width: 250,
      height: 150,
      locked: "mdi-lock-outline",
      editable: "mdi-lead-pencil",
      inProgress: Plus4U5.Environment.basePath + "uubmldraw/assets/in-progress.png",
      placeholder: Plus4U5.Environment.basePath + "uubmldraw/assets/placeholder.png"
    },
    calls: {
      onLoad: "loadDiagram",
      lock: "lock"
    },
    lsi: {
      tooltip: {
        cs: "Editovat",
        en: "Edit"
      },
      lockedAlert: {
        cs: "Editor je uzamčen uživatelem %s (%s)",
        en: "The editor is currently locked by %s (%s)"
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    tidAwid: UU5.PropTypes.string.isRequired,
    code: UU5.PropTypes.string.isRequired,
    readOnly: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      tidAwid: null,
      readOnly: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillMount() {
    this.setCalls(Calls);
  },

  componentWillUnmount() {
    UU5.Environment.EventListener.removeWindowEvent("message", this.getId());
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  edit() {
    if (this.editor) {
      this.editor.focus();
    } else {
      this.getCall("lock")({
        tidAwid: this.props.tidAwid,
        data: {
          code: this.props.code
        },

        done: dtoOut => {
          this._handleLock(dtoOut);
          this.setState({ dtoOut: dtoOut });
        },

        fail: failDtoOut => {
          console.error(failDtoOut);
        }
      });
    }
    return this;
  },

  showAlert() {
    const dtoOut = this.getDtoOut();
    const lock = dtoOut.lock || {};
    this._alertBus.addAlert({
      content: this.getLsiComponent("lockedAlert", null, [lock.author, lock.uuIdentity]),
      colorSchema: "warning"
    });
    return this;
  },

  showImage() {
    this._modal.open({
      size: "auto",
      content: <UU5.Bricks.Image src={this._buildImgSrc()} />
    });
    return this;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  onLoadError_(dtoOut) {
    this.setState({ loadFeedback: "error" });
  },

  getOnLoadData_() {
    return {
      code: this.props.code,
      tidAwid: this.props.tidAwid
    };
  },

  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _receiveMessage(event) {
    // ((event.origin !== "http://localhost:6221"))
    if (event.origin !== "https://uuos9.plus4u.net") return event;
    try {
      const [code, message] = event.data.split(".");
      if (code === this.props.code) {
        switch (message) {
          case "unlock":
            this.editor = null;
            this.reload();
            UU5.Environment.EventListener.removeWindowEvent("message", this.getId());
        }
      }
    } catch (e) {
      console.error(e);
    }
  },

  _handleButtonClick() {
    this.edit();
  },

  _handleLock(dtoOut) {
    if (dtoOut.lock) {
      const url = Calls.getCommandUri("editor", this.props.tidAwid, {
        code: this.props.code,
        inProgress: (!!dtoOut.inProgress).toString(),
        image: (!!dtoOut.image).toString()
      }).toString();
      this.editor = window.open(url);
      UU5.Environment.EventListener.addWindowEvent("message", this.getId(), this._receiveMessage);
    } else {
      this.showAlert();
    }
  },

  _getButtonTooltip() {
    const lock = this.getDtoOut().lock || {};
    if (lock.uuIdentity) {
      return `${lock.author}\n${lock.uuIdentity}`;
    }
  },

  _getCorrectIcon() {
    const lock = this.getDtoOut().lock;
    const def = this.getDefault();
    return (!!lock && Object.keys(lock).length) > 0 ? def.locked : def.editable;
  },

  _buildButtonAttrs() {
    const attrs = {
      className: this.getClassName().button,
      hidden: true,
      size: "xl",
      ref_: button => (this._button = button),
      onClick: (button, e) => {
        e.stopPropagation();
        this.edit();
      }
    };
    const tooltip = this._getButtonTooltip();
    tooltip && (attrs.tooltip = tooltip);
    return attrs;
  },

  _buildModalAttrs() {
    return {
      header: this.getDtoOut().name || " ",
      className: this.getClassName().modal,
      ref_: modal => {
        this._modal = modal;
      }
    };
  },

  _buildImgSrc() {
    return this.getDtoOut().imgUrl || this.getDefault().placeholder;
  },

  _buildImageAttrs() {
    return {
      src: this._buildImgSrc(),
      className: this.getClassName().img,
      ref_: image => (this._image = image)
    };
  },

  _onMouseOverHandler() {
    !this.getDtoOut().readOnly && this._button.show();
  },

  _onMouseOutHandler() {
    this._button.hide();
  },

  _buildInProgressBar() {
    if (this.getDtoOut().inProgress) {
      return <UU5.Bricks.Image {...this._buildInProgressProps()} />;
    }
  },

  _buildInProgressProps() {
    return {
      className: this.getClassName().inProgress,
      src: this.getDefault().inProgress
    };
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getLoadFeedbackChildren(() => (
      <div
        {...this.getMainAttrs()}
        onMouseOver={() => this._onMouseOverHandler()}
        onMouseOut={() => this._onMouseOutHandler()}
      >
        <UU5.Bricks.Modal {...this._buildModalAttrs()} />
        <UU5.Bricks.AlertBus ref_={alert => (this._alertBus = alert)} />

        <div onClick={() => this.showImage()} className={this.getClassName().imageWrapper}>
          {this._buildInProgressBar()}
          <UU5.Bricks.Image {...this._buildImageAttrs()} />

          <UU5.Bricks.Button {...this._buildButtonAttrs()}>
            <UU5.Bricks.Icon icon={this._getCorrectIcon()} />
          </UU5.Bricks.Button>
        </div>
      </div>
    ));
  }
  //@@viewOff:render
});

export default ImageLoader;
