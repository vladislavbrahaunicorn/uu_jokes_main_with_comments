import { Session } from "uu_appg01_oidc";
import * as Plus4U5 from "uu_plus4u5g01";

let caches = {
  activities: { validityTime: 30 * 1000 }, // cache items get invalidated after time to allow reloading of data
  navigator: {}
};

let Calls = {
  loadActivities(dtoIn) {
    let { uuIdentity } = Session.currentSession.getIdentity() || {};
    let cache = caches["activities"];
    let cacheKey = uuIdentity;
    cachedLoad(cache, cacheKey, dtoIn, dtoIn => {
      Plus4U5.Common.Calls.getPersonalRoleUri(uri => {
        let commandUri =
          "https://api.plus4u.net/ues/wcp/ues/digitalworkspace/digitalworkspace/UESDigitalWorkspace/getActiveRecordList";
        Plus4U5.Common.Calls.call("get", commandUri, {
          data: { uesuri: uri, query: "isUnread=true AND pending=false" },
          done: dtoIn.done,
          fail: dtoIn.fail
        });
      }, dtoIn.fail);
    });
  },

  loadNavigator(dtoIn) {
    let { uuIdentity } = Session.currentSession.getIdentity() || {};
    let cache = caches["navigator"];
    let cacheKey = uuIdentity;
    cachedLoad(cache, cacheKey, dtoIn, dtoIn => {
      Plus4U5.Common.Calls.getPersonalRoleUri(
        uri => Plus4U5.Common.Calls.getPropertyValue(uri + "VAR.UES.COR.SYSTEM_NAVIGATOR", dtoIn.done, dtoIn.fail),
        dtoIn.fail
      );
    });
  },

  loadNavigationBar(dtoIn) {
    // we can get either direct link to navigationBarUri (simple navigation bar, only one row, on organizational units)
    if (dtoIn.data.navigationBarUri) {
      Plus4U5.Common.Calls.getPropertyValue(
        dtoIn.data.navigationBarUri,
        dtoOut => {
          if (!dtoOut.dataHandler) {
            dtoIn.done({ data: null });
          } else {
            typeof dtoIn.done === "function" &&
              dtoIn.done({ data: [Plus4U5.Common.Tools.base64DecodeUnicode(dtoOut.dataHandler).data] });
          }
        },
        dtoIn.fail
      );
    } else {
      let mainEntityUri = dtoIn.data.mainEntityUri;

      let territoryPart = mainEntityUri.split(":")[1];
      let acrUri = "ues:" + territoryPart + ":" + Session.currentSession.getIdentity().uuIdentity;

      let arrayOfProperties = [];
      if (dtoIn.data.plus4uBt) arrayOfProperties = ["UU.P4UNEWS/NAVIGATION_BAR_ONE", "UU.P4UNEWS/NAVIGATION_BAR_TWO"];
      else arrayOfProperties = ["UU.BEM/NAVIGATION_BAR_1/PORTAL", "UU.BEM/NAVIGATION_BAR_2/PORTAL"];

      let calls = arrayOfProperties.map(code => {
        return new Promise((resolve, reject) => {
          Plus4U5.Common.Calls.getPropertyValue(
            acrUri + ":" + code,
            value => resolve(Plus4U5.Common.Tools.base64DecodeUnicode(value.dataHandler).data),
            reject
          );
        });
      });

      Promise.all(calls).then(values => typeof dtoIn.done === "function" && dtoIn.done({ data: values }), dtoIn.fail);
    }
  },

  updateUserLanguage(dtoIn) {
    let personalCardCommandUri = "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/User/setLanguage/exec";
    Plus4U5.Common.Calls.call("post", personalCardCommandUri, {
      data: {
        ...dtoIn.data
      },
      done: dtoIn.done,
      fail: dtoIn.fail
    });
  },

  getPersonalCardList(dtoIn) {
    let commandUri;
    if (dtoIn.data.uuIdentity)
      commandUri =
        "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/PersonalCard/getCardList/exec?p4u_id=" + dtoIn.data.uuIdentity;
    else
      commandUri =
        "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/PersonalCard/getCardList/exec?name=" + dtoIn.data.name;
    dtoIn.data = {};
    Plus4U5.Common.Calls.call("get", commandUri, dtoIn);
  }
};

function cachedLoad(cache, cacheKey, dtoIn, doLoadFn) {
  if (!cache.data) cache.data = {};
  let data = cache.data[cacheKey];
  if (!data || (cache.validityTime && !data.pending && Date.now() - data.lastLoad > cache.validityTime)) {
    data = cache.data[cacheKey] = {
      result: null,
      lastLoad: Date.now(),
      pending: [dtoIn]
    };
    doLoadFn({
      ...dtoIn,
      done: result => {
        data.result = result;
        let pending = data.pending;
        delete data.pending;
        pending.forEach(dtoIn => typeof dtoIn.done === "function" && dtoIn.done(result));
      },
      fail: error => {
        data.error = error;
        let pending = data.pending;
        delete data.pending;
        pending.forEach(dtoIn => typeof dtoIn.fail === "function" && dtoIn.fail(error));
      }
    });
  } else if (data.pending) {
    data.pending.push(dtoIn);
  } else {
    if ("error" in data) typeof dtoIn.fail === "function" && dtoIn.fail(data.error);
    else typeof dtoIn.done === "function" && dtoIn.done(data.result);
  }
}

export default Calls;
