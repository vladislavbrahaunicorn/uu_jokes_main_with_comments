import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";
import Calls from "./calls.js";

export const NavigationBarLoader = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.LoadMixin,
    UU5.Common.LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.NavigationBarLoader",
    classNames: {
      main: "plus4u5-app-navigation-bar",
      welcome: "plus4u-app-navigation-welcome-row",
      singleRow: "plus4u-app-navigation-bar-single-line",
      line: "plus4u-app-navigation-bar-line",
      color: "plus4u5-app-navigator-",
      touchIcon: "plus4u5-app-navigator-ti",
      center: "plus4u5-app-navigation-bar-center",
      sides: "plus4u5-app-navigation-bar-sides"
    },
    calls: {
      onLoad: "loadNavigationBar"
    },
    navItemCodes: {
      terrPortal: "USER_ENTRY_TERRITORY_PORTAL",
      artPortal: "ARTIFACT_PORTAL"
    },
    errors: {
      notFound: "Data not found for component %s."
    },
    lsi: () => Plus4U5.Environment.Lsi.App.navigationBarLoader
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    mainEntityUri: UU5.PropTypes.string.isRequired,
    navigationBarUri: UU5.PropTypes.string,
    target: UU5.PropTypes.oneOf(["auto", "_blank", "blank", "_top", "top", "_self", "self", "_parent", "parent"]),
    uuIdentityName: UU5.PropTypes.string,
    plus4uBt: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      navigationBarUri: null,
      target: "_blank",
      uuIdentityName: "",
      plus4uBt: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      navigationData: null,
      secondNavigationData: null
    };
  },

  componentWillMount() {
    this.setCalls(Calls);
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      mainEntityUri: props.mainEntityUri,
      navigationBarUri: props.navigationBarUri,
      plus4uBt: props.plus4uBt
    };
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getItem(item, index) {
    let uriArray = item.iconUri.split("?");
    let urlArray = uriArray[0].split("/");

    // build classNames
    let classNames = this.getClassName("touchIcon");
    let colorSchema = this._getColor(UU5.Common.Tools.decodeQuery(uriArray[uriArray.length - 1]).color);
    classNames = classNames + " " + colorSchema;

    //build uri (there can be substitute codes)
    let tiUrl;
    if (item.code === this.constructor.navItemCodes.artPortal) {
      let tiUesUri = this.props.mainEntityUri + "?UC102011";
      tiUrl = Plus4U5.Common.Tools.getLegacyUrl(tiUesUri);
    } else if (item.code === this.constructor.navItemCodes.terrPortal) {
      let tiUesUri = this.props.mainEntityUri + "?UC10F012";
      tiUrl = Plus4U5.Common.Tools.getLegacyUrl(tiUesUri);
    } else if (!item.uri.match(/^https?:\/\//)) {
      tiUrl = Plus4U5.Common.Tools.getLegacyUrl(item.uri);
    } else {
      tiUrl = item.uri;
    }

    // build target
    let target;
    if (this.props.target === "auto") {
      switch (item.target) {
        case "SELF":
        case "CURRENT_WINDOW":
          target = "_parent";
          break;

        case "NEW":
        case "NEW_WINDOW":
          target = "_blank";
          break;

        default:
          target = null;
      }
    } else {
      target = this.props.target;
    }

    let tiProps = {
      className: classNames,
      icon: "plus4u-" + urlArray[urlArray.length - 1].replace(/_/g, "-").toLowerCase(),
      content: `<uu5string/>${item.text}`,
      tooltip: item.tooltip,
      target: target,
      href: tiUrl,
      key: (item.uri || item.code) + "-" + index
    };

    return <UU5.Bricks.TouchIcon {...tiProps} />;
  },

  _getColor(color) {
    return this.getClassName("color") + color;
  },

  isItemLeftAligned: function(item) {
    return (
      item.group === "up" ||
      item.group === "UP" ||
      item.code === this.constructor.navItemCodes.artPortal ||
      item.code === this.constructor.navItemCodes.terrPortal
    );
  },

  _getNavigationRow(navData) {
    let leftGroup = [];
    let rightGroup = [];
    navData.forEach(item => {
      if (this.isItemLeftAligned(item)) {
        leftGroup.push(item);
      } else {
        rightGroup.push(item);
      }
    });

    if (leftGroup.length === 0 || rightGroup.length === 0) {
      return (
        <UU5.Bricks.Div className={this.getClassName("center")}>
          {rightGroup.map((item, index) => {
            return this._getItem(item, index);
          })}
        </UU5.Bricks.Div>
      );
    } else {
      return (
        <UU5.Bricks.Div className={this.getClassName("sides")}>
          <UU5.Bricks.Div>
            {leftGroup.map((item, index) => {
              return this._getItem(item, index);
            })}
          </UU5.Bricks.Div>
          <UU5.Bricks.Div>
            {rightGroup.map((item, index) => {
              return this._getItem(item, index);
            })}
          </UU5.Bricks.Div>
        </UU5.Bricks.Div>
      );
    }
  },

  _prepareDataWithRightLanguage(navItemsObject) {
    if (navItemsObject && navItemsObject.localization) {
      let arrayByLanguage = this.getLsiItem(navItemsObject.localization);
      return navItemsObject.itemList.map(originalItem => {
        arrayByLanguage.forEach(itemByLanguage => {
          if (originalItem.code === itemByLanguage.code) {
            if (originalItem.tooltip && itemByLanguage.tooltip) originalItem.tooltip = itemByLanguage.tooltip;
            if (originalItem.text && itemByLanguage.text) originalItem.text = itemByLanguage.text;
          }
        });
        return originalItem;
      });
    } else {
      return navItemsObject.itemList;
    }
  },

  _getNavigationBar() {
    let { data } = this.state.dtoOut;
    if (data === null) {
      return <UU5.Common.Error>{this.getLsiComponent("data")}</UU5.Common.Error>;
    }
    let secondNavItems, navItems;
    if (data.length > 0) navItems = this._prepareDataWithRightLanguage(data[0]);
    if (data.length > 1) secondNavItems = this._prepareDataWithRightLanguage(data[1]);
    let welcomeText;
    if (data.length > 0 && data[0].welcomeText)
      welcomeText = (
        <UU5.Bricks.Div className={this.getClassName("welcome") + " " + this.getClassName("center")}>
          <strong>{this.props.uuIdentityName}</strong> {this.getLsiComponent("welcomeIn")} <strong>Plus4U</strong>
        </UU5.Bricks.Div>
      );

    let firstRow = navItems && this._getNavigationRow(navItems);

    let line = secondNavItems && <UU5.Bricks.Line size="s" className={this.getClassName("line")} />;

    let secondRow = secondNavItems && this._getNavigationRow(secondNavItems);

    let mainProps = this.getMainPropsToPass();
    if (this.props.navigationBarUri) {
      mainProps.className = mainProps.className + " " + this.getClassName("singleRow");
    }
    return (
      <UU5.Bricks.Div {...mainProps}>
        {welcomeText}
        {firstRow}
        {line}
        {secondRow}
      </UU5.Bricks.Div>
    );
  },
  _getNavigationBarFail() {
    let mainProps = this.getMainPropsToPass();
    if (this.props.navigationBarUri) {
      mainProps.className = mainProps.className + " " + this.getClassName("singleRow");
    }
    this.showError("notFound", ["Plus4U5.App.NavigationBar"]);
    return <UU5.Common.Error>{this.getLsiComponent("load")}</UU5.Common.Error>;
  },

  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getLoadFeedbackChildren(this._getNavigationBar, this._getNavigationBarFail);
  }
  //@@viewOff:render
});

export default NavigationBarLoader;
