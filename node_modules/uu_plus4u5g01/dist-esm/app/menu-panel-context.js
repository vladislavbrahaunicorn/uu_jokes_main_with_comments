//@@viewOn:imports
import React from "react";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Config from "./config/config.js"; //@@viewOff:imports

const MenuPanelContext = UU5.Common.Context.create();
const MenuPanelConsumer = MenuPanelContext.Consumer;
export const withMenuPanelContext = Component => {
  // disable context for jest tests - enzyme doesn't support React 16.3 Context API
  if (!UU5.Common.Context.isSupported() || process.env.NODE_ENV === "test") return Component;
  let forwardRef = React.forwardRef((props, ref) => {
    return <MenuPanelConsumer>
        {({
        setActiveItemId,
        activeItemId
      }) => <Component {...props} ref={ref} setActiveItemId={setActiveItemId} activeItemId={activeItemId} />}
      </MenuPanelConsumer>;
  });
  forwardRef.isUu5PureComponent = true;
  forwardRef.displayName = `forwardRef(${Component.displayName || Component.name || "Component"})`;
  forwardRef.tagName = Component.tagName;
  return forwardRef;
};
export const MenuPanelProvider = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "MenuPanelProvider"
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    activeItemId: UU5.PropTypes.string
  },

  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      activeItemId: undefined
    };
  },

  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      activeItemId: this.props.activeItemId
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.activeItemId !== this.props.activeItemId) {
      this.setState({
        activeItemId: nextProps.activeItemId
      });
    }
  },

  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _setActiveItemId(activeItemId) {
    this.setState({
      activeItemId
    });
  },

  //@@viewOff:private
  //@@viewOn:render
  render() {
    return <MenuPanelContext.Provider value={{
      setActiveItemId: this._setActiveItemId,
      activeItemId: this.state.activeItemId
    }}>
        {this.props.children}
      </MenuPanelContext.Provider>;
  } //@@viewOff:render


});
export default {
  MenuPanelProvider,
  withMenuPanelContext
};