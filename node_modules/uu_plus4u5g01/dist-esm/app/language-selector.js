import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Plus4U5 from "uu_plus4u5g01";
import Css from "./internal/css.js";

import Calls from "./calls.js";
import Language from "./language";

const storageKey = "plus4u5UserLanguage";

const saveLanguageToStorage = language => {
  if (language !== getLanguageFromStorage()) {
    if (language) localStorage.setItem(storageKey, language);
    else localStorage.removeItem(storageKey);
  }
};

const getLanguageFromStorage = () => {
  return localStorage.getItem(storageKey);
};

export const LanguageSelector = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.LanguageSelector",
    classNames: {
      main: "plus4u5-app-language-selector"
    },
    errors: {
      updateFailed: "Error occurred while setting a language."
    },
    lsi: () => Plus4U5.Environment.Lsi.App.languageSelector
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _setLanguage(language) {
    this._changeLanguage(language, false);
  },

  _changeLanguage(language, permanently) {
    if (permanently) {
      saveLanguageToStorage(language);
      this._updateIdentityByPerson(language);
    }
    UU5.Common.Tools.setLanguage(language);
  },

  _updateIdentityByPerson(language) {
    Calls.updateUserLanguage({
      data: { language },
      fail: () => {
        this.showError("updateFailed");
        saveLanguageToStorage(undefined);
      }
    });
  },

  _askToChangePermanently() {
    this._changePermanentlyConfirm.open();
  },
  _onChangePermanentlyConfirm() {
    let language = UU5.Common.Tools.getLanguage();
    this._changeLanguage(language, true);
  },
  _setChangePermanentlyConfirmRef(ref) {
    this._changePermanentlyConfirm = ref;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return (
      <UU5.Common.LsiMixin.Context.Provider value={{ setLanguage: this._setLanguage }}>
        <Language languages={this.props.displayedLanguages} />
        <UU5.Bricks.LanguageSelector {...this.props} defaultLanguage={getLanguageFromStorage()}>
          <UU5.Bricks.Dropdown.Item
            className={Css.css`border-top: 1px solid ${UU5.Environment.colors.grey.c400};`}
            content={
              <UU5.Bricks.Link
                className={Css.css`white-space: nowrap` + " uu5-bricks-dropdown-item-link"}
                colorSchema="custom"
                onClick={this._askToChangePermanently}
              >
                {this.getLsiComponent("changePermanently")}
              </UU5.Bricks.Link>
            }
          />
        </UU5.Bricks.LanguageSelector>
        <UU5.Bricks.ConfirmModal
          onConfirm={this._onChangePermanentlyConfirm}
          ref_={this._setChangePermanentlyConfirmRef}
          header={this.getLsiComponent("confirmChangePermanentlyHeader")}
          size="m"
          confirmButtonProps={{ content: this.getLsiComponent("confirm") }}
          refuseButtonProps={{ content: this.getLsiComponent("refuse") }}
        >
          {this.getLsiComponent("confirmChangePermanently")}
        </UU5.Bricks.ConfirmModal>
      </UU5.Common.LsiMixin.Context.Provider>
    );
  }
  //@@viewOff:render
});

export default LanguageSelector;
