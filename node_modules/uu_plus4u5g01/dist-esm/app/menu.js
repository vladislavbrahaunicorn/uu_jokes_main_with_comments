import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import "./menu.less";

export const Menu = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.PureRenderMixin, UU5.Common.ColorSchemaMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Menu",
    classNames: {
      main: "plus4u5-app-menu",
      link: "plus4u5-app-menu-link",
      pageLink: "plus4u5-app-go-to-page-link",
      icon: "plus4u5-app-menu-icon",
      linkMain: "plus4u5-app-menu-link-main",
      linkActive: "plus4u5-app-menu-link-active",
      linkDisabled: "plus4u5-app-menu-link-disabled",
      bgStylePrefix: "uu5-common-bg-style-",
      colorSchemaPrefix: "color-schema-",
      hover: "uu5-common-hover"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    activeCode: UU5.PropTypes.string,
    items: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        content: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.string]),
        code: UU5.PropTypes.string,
        itemList: UU5.PropTypes.array,
        expanded: UU5.PropTypes.bool,
        onlyExpandable: UU5.PropTypes.bool,
        indent: UU5.PropTypes.number,
        href: UU5.PropTypes.string
      })
    ),
    onClick: UU5.PropTypes.func,
    onCtrlClick: UU5.PropTypes.func,
    onWheelClick: UU5.PropTypes.func,
    colorSchemaActive: UU5.PropTypes.string,
    bgStyle: UU5.PropTypes.oneOf(["filled", "transparent"]),
    bgStyleActive: UU5.PropTypes.oneOf(["filled", "transparent"])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      activeCode: null,
      items: null,
      onClick: null,
      onCtrlClick: null,
      onWheelClick: null,
      colorSchemaActive: null,
      bgStyle: null,
      bgStyleActive: "filled"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    return {
      activeCode: this.props.activeCode,
      menuItems: this._formatData(this.props.items, this.props.activeCode, null, true)
    };
  },

  componentWillReceiveProps(nextProps) {
    if (nextProps.controlled) {
      this.setState({
        activeCode: nextProps.activeCode,
        menuItems: this._formatData(nextProps.items, nextProps.activeCode, this.state.menuItems)
      });
    }
    return this;
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  update(pageCode, setStateCallback) {
    let newState = {
      menuItems: this._formatData(this.state.menuItems, pageCode)
    };
    if (pageCode !== undefined && pageCode !== null) {
      newState.activeCode = pageCode;
    }
    this.setState(newState, setStateCallback);
    return this;
  },

  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _forEach(arr, itemToChange) {
    return arr.map(item => {
      return {
        code: item.code,
        href: item.href,
        content: item.content,
        expanded: item === itemToChange ? !item.expanded : item.expanded,
        itemList: Array.isArray(item.itemList) ? this._forEach(item.itemList, itemToChange) : null,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },

  _toggleExpanded(itemToChange) {
    this.setState({ menuItems: this._forEach(this.state.menuItems, itemToChange) });
  },

  _formatWithIndent(array, expandedCodes, activeCode) {
    let indent = 0;
    let indents = { 0: [] };
    let isOk = true;
    for (var index = 0; index < array.length; index++) {
      let item = array[index];

      if (item.indent > indent) {
        indents[item.indent] = [item];
      } else if (item.indent == indent) {
        indents[item.indent].push(item);
      } else {
        for (var i = indent; i > item.indent; i--) {
          if (!indents[i - 1]) {
            console.log(
              "The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point."
            );
            isOk = false;
            break;
          } else {
            indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
            indents[i] = null;
          }
        }
        indents[item.indent].push(item);
      }
      indent = item.indent;
    }
    if (!isOk) {
      return [];
    }
    for (var i = indent; i > 0; i--) {
      if (!indents[i - 1]) {
        console.log(
          "The Menu cannot be rendered because it contains invalid item indentation. Indentation may increase with each item by no more than 1 point."
        );
        return [];
      } else {
        indents[i - 1][indents[i - 1].length - 1].itemList = indents[i];
        indents[i] = null;
      }
    }
    return this._formatWithItemList(indents[0], expandedCodes, activeCode);
  },

  _formatWithItemList(arr, expandedCodes, activeCode, parent) {
    return (arr || []).map(item => {
      let formatData = item.itemList
        ? this._formatWithItemList(item.itemList, expandedCodes, activeCode, { item, parent: parent })
        : null;

      let isActive = activeCode && item.code === activeCode;
      if (isActive) {
        let ancestor = parent;
        while (ancestor && ancestor.item) {
          ancestor.item.expanded = true;
          ancestor = ancestor.parent;
        }
      }

      return {
        content: item.content,
        code: item.code,
        href: item.href,
        itemList: formatData,
        expanded: item.expanded || expandedCodes.indexOf(item.code) !== -1,
        onlyExpandable: item.code !== undefined && typeof item.onlyExpandable !== "boolean" ? item.onlyExpandable : true
      };
    });
  },

  _getExpandedItems(array, expandedItems) {
    expandedItems = expandedItems || [];
    array.forEach(item => {
      if (Array.isArray(item.itemList)) {
        this._getExpandedItems(item.itemList, expandedItems);
      }
      if (item.expanded) {
        expandedItems.push(item.code);
      }
    });
    return expandedItems;
  },

  _formatData(arr, activeCode, old_arr) {
    const expandedCodes = old_arr ? this._getExpandedItems(old_arr) : [];
    if (arr && arr[0] && typeof arr[0].indent === "number") {
      return this._formatWithIndent(arr, expandedCodes, activeCode);
    } else {
      return this._formatWithItemList(arr, expandedCodes, activeCode);
    }
  },

  _onClick(item, e) {
    if (item.code !== undefined) {
      if (!e.ctrlKey) {
        this.setState({ activeCode: item.code }, () => {
          typeof this.props.onClick === "function" && this.props.onClick(item, e);
        });
      }
    }
  },

  _onCtrlClick(item, e) {
    if (item.code !== undefined) {
      typeof this.props.onCtrlClick === "function" && this.props.onCtrlClick(item, e);
    }
  },

  _onWheelClick(item, e) {
    if (item.code !== undefined) {
      typeof this.props.onWheelClick === "function" && this.props.onWheelClick(item, e);
    }
  },

  _getMenuItems(menuItems, level) {
    let result = [];
    level = level + 1 || 1;

    menuItems &&
      menuItems.forEach((item, i) => {
        let className = this.getClassName().link;
        if (item.code === this.state.activeCode) {
          className += " " + this.getClassName().linkActive + " " + this.getClassName("hover");

          if (this.props.colorSchemaActive) {
            className +=
              " " +
              this.getClassName("colorSchemaPrefix") +
              UU5.Environment.getColorSchema(this.props.colorSchemaActive);
          }

          if (this.props.bgStyleActive) {
            className += " " + this.getClassName("bgStylePrefix") + this.props.bgStyleActive;
          }
        }
        if (level === 1) {
          className += " " + this.getClassName().linkMain;
        }
        if (this.isDisabled()) {
          className += " " + this.getClassName().linkDisabled;
        }
        const width = 32 + 24 * level;

        if (item.itemList && item.itemList.length > 0) {
          result.push(
            <div key={i}>
              <div className={className}>
                <UU5.Bricks.Link
                  style={{ minWidth: width + "px" }}
                  className={this.getClassName().icon}
                  onClick={() => this._toggleExpanded(item)}
                  disabled={this.isDisabled()}
                >
                  <UU5.Bricks.Icon icon={item.expanded ? "mdi-menu-down" : "mdi-menu-right"} />
                </UU5.Bricks.Link>
                <UU5.Bricks.Link
                  className={this.getClassName("pageLink")}
                  content={item.content}
                  onClick={(comp, e) => (item.onlyExpandable ? this._toggleExpanded(item) : this._onClick(item, e))}
                  onCtrlClick={(comp, e) =>
                    item.onlyExpandable ? this._toggleExpanded(item) : this._onCtrlClick(item, e)
                  }
                  onWheelClick={(comp, e) =>
                    item.onlyExpandable ? this._toggleExpanded(item) : this._onWheelClick(item, e)
                  }
                  href={item.onlyExpandable ? undefined : item.href}
                  disabled={this.isDisabled()}
                />
              </div>
              <div style={{ display: item.expanded ? "block" : "none" }}>
                {this._getMenuItems(item.itemList, level)}
              </div>
            </div>
          );
        } else {
          result.push(
            <div key={i} className={className}>
              <UU5.Bricks.Link
                style={{ paddingLeft: width + "px" }}
                className={this.getClassName("pageLink")}
                content={item.content}
                onClick={(comp, e) => this._onClick(item, e)}
                onCtrlClick={(comp, e) => this._onCtrlClick(item, e)}
                onWheelClick={(comp, e) => this._onWheelClick(item, e)}
                href={item.href}
                disabled={this.isDisabled()}
              />
            </div>
          );
        }
      });

    return result;
  },

  _getMainAttrs() {
    let attrs = this.getMainAttrs();

    if (this.props.bgStyle) {
      attrs.className += " " + this.getClassName("bgStylePrefix") + this.props.bgStyle;
    }

    return attrs;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return <div {...this._getMainAttrs()}>{this._getMenuItems(this.state.menuItems.slice())}</div>;
  }
  //@@viewOff:render
});

export default Menu;
