import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import "uu5g04-forms";
import * as Plus4U5 from "uu_plus4u5g01";
import Calls from "./calls.js";

import "./navigator.less";

const DTO_OUT_WITH_LOGOUT = {
  data: {
    itemList: [
      {
        text: "Odhlásit",
        tooltip: "Odhlásit se",
        iconUri: "ues:OT-BT:UU.OS/IMAGES:ICON/LOGOUT?&color=priorityLow",
        code: "logout",
        group: "SYSTEM"
      }
    ],
    localization: {
      cs: [
        {
          code: "logout",
          text: "Odhlásit",
          tooltip: "Odhlásit se"
        }
      ],
      en: [
        {
          code: "logout",
          text: "Logout",
          tooltip: "Logout"
        }
      ],
      es: [
        {
          code: "logout",
          text: "Salir",
          tooltip: "Salir"
        }
      ],
      sk: [
        {
          code: "logout",
          text: "Odhlásiť",
          tooltip: "Odhlásiť sa"
        }
      ],
      ru: [
        {
          code: "logout",
          text: "Bыйти",
          tooltip: "Bыйти"
        }
      ]
    }
  }
};

export const Navigator = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.LoadMixin,
    UU5.Common.LsiMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Navigator",
    classNames: {
      main: "plus4u5-app-navigator uu5-elevation-5",
      system: "plus4u5-app-navigator-system",
      divider: "plus4u5-app-navigator-divider",
      search: "plus4u5-app-navigator-search",
      personal: "plus4u5-app-navigator-personal",
      color: "plus4u5-app-navigator-",
      touchIcon: "plus4u5-app-navigator-ti",
      small: "plus4u5-app-navigator-small",
      content: "plus4u5-app-navigator-content"
    },
    calls: {
      onLoad: "loadNavigator",
      onReload: "loadNavigator"
    },
    defaults: {
      touchIconColor: "priorityLow",
      moreIcon: "mdi-apps",
      send: "mdi-share"
    },
    lsi: () => Plus4U5.Environment.Lsi.App.navigator,
    opt: {
      pureRender: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    small: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      small: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._nodeInited = false;
    return {
      menuHidden: this.props.small,
      contentWidth: "auto"
    };
  },

  componentWillMount() {
    this.setCalls(Calls);
  },

  // componentWillReceiveProps() {
  //   Calls[this.getCalls.onLoad];
  // },

  componentWillUnmount() {
    this._removeEvent();
  },

  componentDidMount() {
    this._fixItemsWrap();
    if (!this.props.hidden) {
      this._addEvent();
    }
  },

  componentDidUpdate(prevProps, prevState) {
    if (prevState.menuHidden !== this.state.menuHidden || !this._nodeInited) {
      this._fixItemsWrap();
    }

    if (!this.state.menuHidden) {
      if (prevState.loadFeedback == "loading" && this.state.loadFeedback == "ready") {
        this._addEvent();
        this._fixItemsWrap();
      } else if (prevState.hidden && !this.state.hidden) {
        this._addEvent();
        this._fixItemsWrap();
      } else if (!prevState.hidden && this.state.hidden) {
        this._removeEvent();
      }
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  getOnLoadData_(props) {
    return {
      uuIdentity: props.uuIdentity
    };
  },

  toggleHidden_(setStateCallback) {
    let callback = setStateCallback;
    if (this.state.hidden) {
      callback = () => {
        let input = document.getElementById(this.getId() + "-search-input");
        input && input.focus();
      };
    }

    this.setState(state => {
      return { hidden: !state.hidden, menuHidden: state.hidden && this.props.small };
    }, callback);
    return this;
  },

  onLoadError_(errorDtoOut) {
    let dtoOut = {
      ...DTO_OUT_WITH_LOGOUT,
      small: true
      // NOTE Commented out as the error is likely due to my territory being created and we don't want to show any error in such case.
      // error: this.getLsiComponent("loadError")
    };
    this.onLoadSuccessDefault(dtoOut);
  },
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _findTarget(item) {
    let result = false;
    let id = this.getId();

    if (item.id === id) {
      result = true;
    } else if (item.parentElement) {
      result = this._findTarget(item.parentElement);
    }

    return result;
  },

  _addEvent() {
    this._stopPropagation = true;
    if (!this.props.disableBackdrop) {
      UU5.Environment.EventListener.addWindowEvent("click", this.getId(), e => {
        let isTarget = this._findTarget(e.target);

        if (!this._stopPropagation && !isTarget && !this.isHidden()) {
          this.hide();
        } else {
          this._stopPropagation = false;
        }
      });

      UU5.Environment.EventListener.addWindowEvent("resize", this.getId(), () => {
        this._fixItemsWrap();
      });
    }
    return this;
  },

  _removeEvent() {
    if (!this.props.disableBackdrop) {
      UU5.Environment.EventListener.removeWindowEvent("click", this.getId());
      UU5.Environment.EventListener.removeWindowEvent("resize", this.getId());
    }
    return this;
  },

  _fixItemsWrap() {
    let navigatorRoot = this.findDOMNode();
    if (navigatorRoot) {
      this._nodeInited = true;
      let navigatorComputedStyle = getComputedStyle(navigatorRoot);
      let scrollbarWidth =
        navigatorRoot.offsetWidth -
        navigatorRoot.clientWidth -
        (parseFloat(navigatorComputedStyle.borderLeftWidth) + parseFloat(navigatorComputedStyle.borderRightWidth));
      let hasStyles = this.state.contentWidth !== "auto";
      if (window.innerWidth > 768 && (scrollbarWidth > 0 && !hasStyles)) {
        let navigatorWidth =
          navigatorRoot.clientWidth -
          (parseFloat(navigatorComputedStyle.paddingLeft) + parseFloat(navigatorComputedStyle.paddingRight));
        let contentWidth = navigatorWidth + scrollbarWidth;
        this.setState({ contentWidth: contentWidth + "px" });
      } else if ((window.innerWidth <= 768 && hasStyles) || (scrollbarWidth <= 0 && hasStyles)) {
        this.setState({ contentWidth: "auto" });
      }
    }
    return this;
  },

  _getItem(item, localization) {
    let uriArray = (localization.iconUri || item.iconUri).split("?");
    let urlArray = uriArray[0].split("/");
    let result;
    let props = {
      code: item.code,
      group: localization.group || item.group,
      icon: urlArray[urlArray.length - 1],
      color:
        localization.iconUri || item.iconUri
          ? this._getColor(UU5.Common.Tools.decodeQuery(uriArray[uriArray.length - 1]).color)
          : this.getClassName("color") + this.getDefault("touchIconColor"),
      text: localization.text || item.text,
      tooltip: localization.tooltip || item.tooltip,
      uri: localization.uri || item.uri
    };

    let tiProps = {
      content: props.text,
      className: this.getClassName("touchIcon") + " " + props.color,
      icon:
        (props.icon && "plus4u-" + props.icon.replace(/_/g, "-").toLocaleLowerCase()) ||
        this.getClassName("touchIcon") + "-empty",
      tooltip: props.tooltip
    };

    if (props.code === "logout" && props.group === "SYSTEM") {
      tiProps.onClick = () => this.getParent().logout();
    } else {
      tiProps.target = "_blank";
      if (props.uri.match(/^http/)) {
        tiProps.href = props.uri;
      } else {
        tiProps.href = Plus4U5.Common.Tools.getLegacyUrl(props.uri);
      }
    }

    result = <UU5.Bricks.TouchIcon {...tiProps} />;

    return result;
  },

  _getColor(color) {
    return this.getClassName("color") + color;
  },

  _search() {
    let value = this._input.getValue();

    if (value) {
      Plus4U5.Common.Calls.getPersonalRoleUri(uri => {
        let phraseUesuriValueEncoded = value.replace(/([\\[\]:@?&=#}$ ])/g, "\\$1");
        let sessFree = uri + "?UC10D100&phrase=" + phraseUesuriValueEncoded;
        window.open(Plus4U5.Common.Tools.getLegacyUrl(sessFree), "_blank");
      });
    }

    return this;
  },

  _getItemLocalization(item, localization) {
    let result;
    for (let i = 0; i < localization.length; i++) {
      if (item.code === localization[i].code) {
        result = localization[i];
        break;
      }
    }
    return result || [];
  },

  _getContent(dtoOut) {
    let children = [];
    let systemChildren = [];
    let logoutButton;
    let navItems;
    let small = dtoOut ? dtoOut.small : undefined;
    try {
      if (!dtoOut) navItems = { ...DTO_OUT_WITH_LOGOUT };
      else navItems = dtoOut.dataHandler ? Plus4U5.Common.Tools.base64DecodeUnicode(dtoOut.dataHandler) : dtoOut;
    } catch (e) {
      // base64 decoding with JSON parsing might have failed
      UU5.Common.Tools.error(e);
      navItems = {
        ...DTO_OUT_WITH_LOGOUT,
        error: this.getLsiComponent("dataError")
      };
    }
    if (navItems && navItems.data && Array.isArray(navItems.data.itemList)) {
      let itemLocalization;
      for (let i = 0; i < navItems.data.itemList.length; i++) {
        itemLocalization = this._getItemLocalization(
          navItems.data.itemList[i],
          this.getLsiItem(navItems.data.localization)
        );
        if ((this.props.small && this.state.menuHidden) || small) {
          if (navItems.data.itemList[i].code === "logout") {
            if (!small) {
              systemChildren.push(
                <UU5.Bricks.TouchIcon
                  onClick={() => {
                    this._stopPropagation = true;
                    this.setState({ menuHidden: false });
                  }}
                  icon={this.getDefault("moreIcon")}
                  content={this.getLsiItem(this.getLsi("more"))}
                  className={
                    this.getClassName("touchIcon") +
                    " " +
                    this.getClassName("color") +
                    this.getDefault("touchIconColor")
                  }
                />
              );
            }

            logoutButton = this._getItem(navItems.data.itemList[i], itemLocalization);
            systemChildren.push(logoutButton);

            break;
          }
        } else {
          if (navItems.data.itemList[i].group && navItems.data.itemList[i].group.toLocaleLowerCase() === "system") {
            systemChildren.push(this._getItem(navItems.data.itemList[i], itemLocalization));
          } else {
            children.push(this._getItem(navItems.data.itemList[i], itemLocalization));
          }
        }
      }
    }

    let output;
    if ((this.props.small && this.state.menuHidden) || small) {
      output = <UU5.Bricks.Div content={systemChildren} className={this.getClassName("system")} />;
    } else {
      output = [
        <UU5.Forms.TextIcon
          id={this.getId() + "-search"}
          key="search"
          className={this.getClassName("search")}
          icon={this.getDefault().send}
          onClick={this._search}
          ref_={input => (this._input = input)}
          inputAttrs={{
            onKeyDown: e => {
              if ((e.keyCode || e.which) === 13) {
                this._search();
              }
            }
          }}
        />,
        navItems && navItems.error ? (
          <UU5.Common.Error content={navItems.error} style={{ marginBottom: "32px" }} key="error" />
        ) : null,
        <UU5.Bricks.Div content={systemChildren} className={this.getClassName("system")} key="system" />,
        systemChildren.length && children.length ? (
          <UU5.Bricks.Line className={this.getClassName("divider")} colorSchema="grey-rich" size="s" key="sep" />
        ) : null,
        children.length ? (
          <UU5.Bricks.Div content={children} className={this.getClassName("personal")} key="personal" />
        ) : null
      ];
    }
    return output;
  },

  _getMainPropsToPass() {
    const mainProps = this.getMainPropsToPass();
    mainProps.id = this.getId();
    mainProps.parent = null;
    if ((this.props.small && this.state.menuHidden) || (this.getDtoOut() || {}).small) {
      mainProps.className += " " + this.getClassName("small");
    }

    return mainProps;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    let result = null;
    if (!this.isHidden()) {
      const content = this.getLoadFeedbackChildren(this._getContent);

      result = (
        <UU5.Bricks.Div {...this._getMainPropsToPass()}>
          <UU5.Bricks.Div
            className={this.getClassName().content}
            content={content}
            style={{ width: this.state.contentWidth }}
          />
        </UU5.Bricks.Div>
      );
    }
    return result;
  }
  //@@viewOff:render
});

export default Navigator;
