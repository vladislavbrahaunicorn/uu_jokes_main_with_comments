/**
 * Copyright (C) 2019 Unicorn a.s.
 *
 * This program is free software; you can use it under the terms of the UAF Open License v01 or
 * any later version. The text of the license is available in the file LICENSE or at www.unicorn.com.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE for more details.
 *
 * You may contact Unicorn a.s. at address: V Kapslovne 2767/2, Praha 3, Czech Republic or
 * at the email: info@unicorn.com.
 */

//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import memoizeOne from "memoize-one";
import AuthorizedItem from "./authorized-item.js";
//@@viewOff:imports

const ROLE_URI_REGEX = /^(?:ues:.+:.+|https:\/\/[^/]+\/[^/]+\/[^/]+\/[^?#]*?([?&](?:id|code)=[^&#]).*)$/;
const ID_REGEX = /[?&](id|code)=([^&#]+)/;
const BASE_URI_REGEX = /^(https:\/\/[^/]+\/[^/]+\/[^/]+\/).*/;

function isRoleUri(roleUri) {
  return roleUri && ROLE_URI_REGEX.test(roleUri);
}

function computeLoaderUesuriData(roleUri, uuIdentity) {
  let recursive = roleUri.split(":").pop() !== uuIdentity;
  return { uesuri: roleUri, castedSubjectUniverseId: uuIdentity, recursive };
}

function computeLoaderBtData(roleUri, uuIdentity) {
  let data = { sideBuuIdentity: uuIdentity };
  roleUri.replace(ID_REGEX, (m, k, v) => {
    data[k] = decodeURIComponent(v);
  });
  return data;
}

export const Authorized = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Authorized",
    errors: {
      roleNotFound: "Role %s does not exist.",
      roleUriInvalid: "Uri of role must be set in format 'ues:TERRITORY-CODE:ROLE_CODE' but was set '%s'."
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    roleGroupInterfaceUri: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      roleGroupInterfaceUri: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    if (!isRoleUri(this.props.roleGroupInterfaceUri || this.props.roleUri)) {
      this.showError("roleUriInvalid", this.props.roleGroupInterfaceUri || this.props.roleUri);
    }

    this._computeLoaderUesuriData = memoizeOne(computeLoaderUesuriData);
    this._computeLoaderBtData = memoizeOne(computeLoaderBtData);
    return {};
  },

  componentWillReceiveProps(nextProps) {
    if (!isRoleUri(nextProps.roleGroupInterfaceUri || nextProps.roleUri)) {
      this.showError("roleUriInvalid", nextProps.roleGroupInterfaceUri || nextProps.roleUri);
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  //@@viewOff:overriding

  //@@viewOn:private
  _getChildren(authorized) {
    let children, childItem;
    let opt = { authorized };

    if (typeof this.props.children === "function") {
      // fce
      children = this.props.children(opt);
    } else {
      let authProp = authorized === undefined ? "pending" : authorized === false ? "notAuthorized" : "authorized";
      let allChildren = this.getChildren();

      if (allChildren) {
        if (!Array.isArray(allChildren)) allChildren = [allChildren];

        children = allChildren.map(child => {
          let newChild = child;

          if (UU5.Common.Element.isValid(child)) {
            if (child.type && child.type.tagName === AuthorizedItem.tagName) {
              if (child.props[authProp]) {
                childItem = UU5.Common.Element.clone(child, opt);
              } else {
                newChild = null;
              }
            } else {
              // ...opt as props
              newChild = UU5.Common.Element.clone(child, opt);
            }
          }

          return newChild;
        });
      }
    }

    return childItem || children || null;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { roleGroupInterfaceUri, roleUri } = this.props;
    roleGroupInterfaceUri = roleGroupInterfaceUri || roleUri;
    return isRoleUri(roleGroupInterfaceUri) ? (
      <UU5.Common.Identity>
        {({ identity }) => {
          let result;

          if (identity) {
            if (roleGroupInterfaceUri.startsWith("ues:")) {
              result = (
                <UU5.Common.Loader
                  uri="https://api.plus4u.net/ues/wcp/ues/core/role/UESCast/exists"
                  data={this._computeLoaderUesuriData(roleGroupInterfaceUri, identity.uuIdentity)}
                  headers={{ accept: "application/json" }}
                  authenticate
                >
                  {({ isLoading, isError, data }) => {
                    let authorized;
                    if (!isLoading) {
                      if (isError) {
                        authorized = false;
                        if (!data || !data.data || data.data.code !== "UU.OS/E05401.M08") {
                          this.showError("roleNotFound", roleGroupInterfaceUri);
                        }
                      } else {
                        authorized = JSON.parse(data.data);
                      }
                    }
                    return this._getChildren(authorized);
                  }}
                </UU5.Common.Loader>
              );
            } else {
              let baseUri = roleGroupInterfaceUri.replace(BASE_URI_REGEX, "$1");
              let uri = baseUri + "uuRoleGroupIfc/listCastPath";
              let data = this._computeLoaderBtData(roleGroupInterfaceUri, identity.uuIdentity);
              result = (
                <UU5.Common.Loader uri={uri} data={data} headers={{ accept: "application/json" }} authenticate>
                  {({ isLoading, isError, data }) => {
                    let authorized;
                    if (!isLoading) authorized = !!(!isError && data && data.data && data.data.pathCount > 0);
                    return this._getChildren(authorized);
                  }}
                </UU5.Common.Loader>
              );
            }
          } else {
            result = this._getChildren(undefined);
          }

          return result;
        }}
      </UU5.Common.Identity>
    ) : null;
  }
  //@@viewOff:render
});

Authorized.Item = AuthorizedItem;
export default Authorized;
