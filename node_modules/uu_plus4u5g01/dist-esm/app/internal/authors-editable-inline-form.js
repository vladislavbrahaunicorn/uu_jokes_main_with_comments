import React from "react";
import createReactClass from "create-react-class";
import * as UU5 from "uu5g04";
import * as Plus4U5 from "uu_plus4u5g01";

import Cfg from "../config/config.js";
import "./authors-editable-inline-form.less";
import TextLanguage from "./text-language.js";
import SearchPerson from "./search-person.js";

export const AuthorsEditableInlineForm = createReactClass({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.CcrReaderMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "AuthorsEditableInlineForm",
    classNames: {
      main: Cfg.CSS + " " + Cfg.CSS + "authors-editable-inline-form"
    },
    lsi: () => Plus4U5.Environment.Lsi.App.authors
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {},
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.addFormActive !== this.props.addFormActive;
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private

  _openSearchPerson() {
    this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE) &&
      this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getModal() &&
      this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
        .getModal()
        .open({
          header: <UU5.Bricks.Div content={this.getLsiComponent("addAuthorModalHeader")} />,
          content: (
            <SearchPerson
              id={UU5.Common.Tools.generateUUID(16)}
              onSelectPerson={(uuIdentity, name) => {
                this._uuId.setValue(uuIdentity);
                this._authorName.setValue(name);
                this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE) &&
                  this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE).getModal() &&
                  this.getCcrComponentByKey(UU5.Environment.CCRKEY_PAGE)
                    .getModal()
                    .close();
              }}
              value={this._authorName.getValue() || null}
            />
          ),
          className: this.getClassName("modal"),
          size: "m"
        });
  },

  _getChild() {
    return (
      <UU5.Bricks.Panel {...this.getMainPropsToPass()} expanded={this.props.addFormActive}>
        <UU5.Forms.Form
          onSave={({ values, component }) => {
            this.props.onSave({ ...values, desc: this._desc && this._desc.getValue() }, this._controls);
          }}
          onCancel={() => {
            this.props.onClose();
          }}
        >
          <UU5.Forms.TextButton
            name="name"
            label={this.getLsiComponent("addAuthorName")}
            ref_={r => (this._authorName = r)}
            labelColWidth="xs12 s12 m4 l4 xl4"
            inputColWidth="xs12 s12 m7 l7 xl7"
            pattern="^.{0,4000}$"
            patternMessage={this.getLsiComponent("textTooLong4000")}
            required={true}
            buttons={[
              {
                icon: "mdi-magnify",
                onClick: this._openSearchPerson
              }
            ]}
            inputAttrs={{ autoComplete: "off" }}
          />
          <UU5.Forms.Text
            ref_={r => (this._uuId = r)}
            name="uuId"
            label={this.getLsiComponent("addAuthorUuId")}
            labelColWidth="xs12 s12 m4 l4 xl4"
            inputColWidth="xs12 s12 m7 l7 xl7"
            readOnly={true}
            inputAttrs={{ autoComplete: "off" }}
          />
          <UU5.Forms.Text
            name="role"
            label={this.getLsiComponent("addAuthorRole")}
            labelColWidth="xs12 s12 m4 l4 xl4"
            inputColWidth="xs12 s12 m7 l7 xl7"
            inputAttrs={{ autoComplete: "off" }}
            pattern="^.{0,4000}$"
            patternMessage={this.getLsiComponent("textTooLong4000")}
          />

          <TextLanguage
            ref_={r => (this._desc = r)}
            textArea
            label={this.getLsiComponent("addAuthorDesc")}
            languages={this.props.languages}
          />

          <UU5.Forms.File
            name="photo"
            label={this.getLsiComponent("addAuthorPhoto")}
            labelColWidth="xs12 s12 m4 l4 xl4"
            inputColWidth="xs12 s12 m7 l7 xl7"
            onChange={opt => {
              if (opt.value && (!opt.value.type || !opt.value.type.match(/image\//))) {
                opt.component.setFeedback("warning", this.getLsiComponent("authorsEditableInvalidImage"));
              } else {
                opt.component.onChangeDefault(opt);
              }
            }}
          />
          <UU5.Forms.Controls
            ref_={r => (this._controls = r)}
            buttonCancelProps={{
              content: this.getLsiComponent("buttonCancel")
            }}
            buttonSubmitProps={{
              content: this.getLsiComponent("buttonAdd")
            }}
          />
        </UU5.Forms.Form>
      </UU5.Bricks.Panel>
    );
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default AuthorsEditableInlineForm;
