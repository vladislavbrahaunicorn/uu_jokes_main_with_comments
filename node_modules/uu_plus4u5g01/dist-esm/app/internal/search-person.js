import React from "react";
import createReactClass from "create-react-class";
import * as UU5 from "uu5g04";
import * as Plus4U5 from "uu_plus4u5g01";
import "uu_plus4u5g01-bricks";
import Calls from "../calls.js";

import Cfg from "../config/config.js";

import "./search-person.less";

export const SearchPerson = createReactClass({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.CallsMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "SearchPerson",
    classNames: {
      main: Cfg.CSS + " " + Cfg.CSS + "search-person",
      peopleRow: Cfg.CSS + "search-person-people-row",
      peopleRowAttrs: Cfg.CSS + "search-person-people-row-attrs"
    },
    opt: {
      nestingLevelWrapper: true
    },
    calls: {
      getPersonalCardList: "getPersonalCardList"
    },
    lsi: () => Plus4U5.Environment.Lsi.App.authors
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {},
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return { value: this.props.value };
  },

  componentWillReceiveProps(nextProps) {
    this.setState({ value: nextProps.value });
  },

  componentWillMount() {
    this.setCalls(Calls);
  },

  componentDidMount() {
    setTimeout(() => this._formNameOrID.focus(), 200); // TODO Remove / lower timeout when UU5 fixes animation of modal.
    if (this.props.value && this.props.value.length >= 3) this._getPlus4PeopleList(this.props.value);
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _getPlus4PeopleList() {
    this._formNameOrID.setLoading("", this._formNameOrID.getValue());
    let value = this._formNameOrID.getValue();
    let nameOrID = /\d*-\d*/.test(value) ? { uuIdentity: value } : { name: value };
    let dtoIn = {
      done: this._getPlus4PeopleListDone,
      fail: this._getPlus4PeopleListFail,
      data: nameOrID
    };
    this.getCall("getPersonalCardList")(dtoIn);
  },

  _getPlus4PeopleListDone(doneDtoOut) {
    if (doneDtoOut.length !== 0) {
      this.setState(
        {
          value: this._formNameOrID.getValue(),
          isLoading: false,
          plus4uPeopleData: doneDtoOut
        },
        () => this._formNameOrID.setInitial("", this._formNameOrID.getValue())
      );
    } else {
      this.setState({ value: this._formNameOrID.getValue(), isLoading: false, plus4uPeopleData: null });
      this._formNameOrID.setFeedback(
        "error",
        this.getLsiComponent("searchAuthorNoResult"),
        this._formNameOrID.getValue()
      );
    }
  },

  _getPlus4PeopleListFail() {
    this.setState({ value: this._formNameOrID.getValue(), isLoading: false });
    this._formNameOrID.setFeedback(
      "error",
      this.getLsiComponent("searchAuthorNoResult"),
      this._formNameOrID.getValue()
    );
  },

  _getPeopleRow(obj, index) {
    return (
      <UU5.Bricks.Div
        key={index}
        className={this.getClassName("peopleRow")}
        mainAttrs={{
          onClick: () => this.props.onSelectPerson(obj.p4u_id, obj.name)
        }}
      >
        <Plus4U5.Bricks.UserPhoto uuIdentity={obj.p4u_id || "0-0"} type="circle" />
        <UU5.Bricks.Div className={this.getClassName("peopleRowAttrs")}>
          <UU5.Bricks.Div content={obj.name} />
          <UU5.Bricks.Div content={obj.p4u_id} />
        </UU5.Bricks.Div>
      </UU5.Bricks.Div>
    );
  },

  _getPeopleRows() {
    let rows = [];

    for (let i = 0; i < this.state.plus4uPeopleData.length; i++) {
      rows.push(this._getPeopleRow(this.state.plus4uPeopleData[i], i));
    }

    return <UU5.Bricks.Div>{rows}</UU5.Bricks.Div>;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <UU5.Bricks.Div {...this.getMainPropsToPass()}>
        <UU5.Bricks.Row>
          <UU5.Forms.TextButton
            ref_={item => (this._formNameOrID = item)}
            label={this.getLsiComponent("searchAuthorLabel")}
            name="uuIdentity"
            value={this.state.value ? this.state.value : ""}
            buttons={[
              {
                icon: "mdi-magnify",
                onClick: opt => {
                  if (opt.value.length >= 3) this._getPlus4PeopleList(opt.value);
                }
              }
            ]}
            message={this.getLsiComponent("searchAuthorHint")}
            pattern="^.{3,}$|^$"
            patternMessage={this.getLsiComponent("searchAuthorInvalidInput")}
            style={{ margin: "16px 0" }}
            labelColWidth="xs12 s12 m12 l12 xl12"
            inputColWidth="xs12 s12 m12 l12 xl12"
            inputAttrs={{ autoComplete: "off" }}
          />
        </UU5.Bricks.Row>
        {this.state.plus4uPeopleData && this._getPeopleRows()}
      </UU5.Bricks.Div>
    );
  }
  //@@viewOff:render
});

export default SearchPerson;
