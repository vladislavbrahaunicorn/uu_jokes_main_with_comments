import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";
import Css from "./css.js";
import AuthorsEditableList from "./authors-editable-list.js";

export const EditableAuthors = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Internal.EditableAuthors",
    lsi: () => Plus4U5.Environment.Lsi.App.authors,
    classNames: {
      section: () => {
        return Css.css`
          & > .uu5-richtext-editor,
          & > .uu5-bricks-loading,
          & > .uu5-bricks-editable-editation-panel > div:first-child > button:last-of-type, // color-schema toolbar button
          & > .uu5-bricks-editable-editation-panel > div:last-child > button:last-of-type { // settings button
            display: none;
          }
          & .uu5-bricks-header input {
            text-align: center;
          }
        `;
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    leadingAuthors: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        name: UU5.PropTypes.string.isRequired,
        content: UU5.PropTypes.string,
        uuIdentity: UU5.PropTypes.string,
        signature: UU5.PropTypes.string,
        role: UU5.PropTypes.any.isRequired
      })
    ),
    otherAuthors: UU5.PropTypes.arrayOf(
      UU5.PropTypes.shape({
        name: UU5.PropTypes.string,
        content: UU5.PropTypes.string,
        uuIdentity: UU5.PropTypes.string,
        signature: UU5.PropTypes.string,
        role: UU5.PropTypes.any
      })
    ),
    header: UU5.PropTypes.any,
    underline: UU5.PropTypes.bool,
    level: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", "6", 0, 1, 2, 3, 4, 5, 6]),
    onEndEditation: UU5.PropTypes.func,
    getPhotoSrc: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      leadingAuthors: [],
      otherAuthors: null,
      header: null,
      underline: false,
      onChange: null,
      getPhotoSrc: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    let { leadingAuthors, otherAuthors } = this.props;
    return {
      editState: { leadingAuthors, otherAuthors }
    };
  },

  componentDidMount() {
    this._section.startEditation(this._onSectionEndEditation);
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _onSectionEndEditation(component, newProps) {
    this.setState(
      state => ({ editState: { ...state.editState, ...newProps } }),
      () => {
        this._endEditation();
      }
    );
  },

  _finalizeAuthor(author) {
    let { getPhotoSrc } = this.props;
    let { src, ...auth } = author; // eslint-disable-line no-unused-vars
    if (typeof getPhotoSrc === "function") {
      auth.src = getPhotoSrc(auth);
    }
    return auth;
  },

  _endEditation() {
    let { onEndEditation } = this.props;
    if (typeof onEndEditation === "function") {
      let { leadingAuthors, otherAuthors, ...restState } = this.state.editState;
      otherAuthors = otherAuthors.map(this._finalizeAuthor);
      leadingAuthors = leadingAuthors.map(this._finalizeAuthor);
      onEndEditation({ leadingAuthors, otherAuthors, ...restState });
    }
  },

  _onLeadingAuthorsChange({ authors }) {
    this.setState(({ editState }) => ({
      editState: this._changeAuthors("leadingAuthors", authors, editState.otherAuthors)
    }));
  },
  _onOtherAuthorsChange({ authors }) {
    this.setState(({ editState }) => ({
      editState: this._changeAuthors("otherAuthors", authors, editState.leadingAuthors)
    }));
  },
  _changeAuthors(primaryAuthorsKey, primaryAuthors, secondaryAuthors) {
    // make sure all authors are not duplicated in union of the lists (and if they are
    // then preserve primarily the last one from primaryAuthors falling back to the last one from
    // secondaryAuthors)
    let allAuthors = {};
    let newPrimaryAuthors = [];
    for (let author of primaryAuthors.reverse()) {
      let id = author.uuIdentity || author.code;
      if (id in allAuthors) continue;
      allAuthors[id] = true;
      newPrimaryAuthors.unshift(author);
    }
    let newSecondaryAuthors = [];
    for (let author of secondaryAuthors.reverse()) {
      let id = author.uuIdentity || author.code;
      if (id in allAuthors) continue;
      allAuthors[id] = true;
      newSecondaryAuthors.unshift(author);
    }

    let secondaryAuthorsKey = primaryAuthorsKey === "leadingAuthors" ? "otherAuthors" : "leadingAuthors";
    return {
      [primaryAuthorsKey]: newPrimaryAuthors,
      [secondaryAuthorsKey]: newSecondaryAuthors
    };
  },

  _setSectionRef(ref) {
    this._section = ref;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let { header, level, underline } = this.props;
    let page = UU5.Environment.getPage();
    let languages = (page && page.props && page.props.displayedLanguages) || ["cs", "en"];

    return (
      <UU5.Common.Fragment>
        <UU5.Bricks.Section
          className={this.getClassName("section")}
          ref_={this._setSectionRef}
          header={header}
          underline={underline}
          level={level}
        />
        <UU5.Bricks.Section header={this.getLsiComponent("leadingAuthors")} level={6}>
          <AuthorsEditableList
            key="leading"
            authors={this.state.editState.leadingAuthors}
            onChange={this._onLeadingAuthorsChange}
            languages={languages}
          />
        </UU5.Bricks.Section>
        <UU5.Bricks.Section header={this.getLsiComponent("otherAuthors")} level={6}>
          <AuthorsEditableList
            key="other"
            authors={this.state.editState.otherAuthors}
            onChange={this._onOtherAuthorsChange}
            languages={languages}
            small
          />
        </UU5.Bricks.Section>
      </UU5.Common.Fragment>
    );
  }
  //@@viewOff:render
});

export default EditableAuthors;
