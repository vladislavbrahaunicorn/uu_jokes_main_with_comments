import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Css from "./css.js";
import { withMenuPanelContext } from "../menu-panel-context.js";

const ClassNames = UU5.Common.ClassNames;
const ITEM_COLOR_SCHEMA = "grey-rich";
const ITEM_COLOR_SCHEMA_ACTIVE = "blue-rich";

function getColorSchemaClassName(isActive) {
  let colorSchema = isActive
    ? UU5.Environment.getColorSchema(ITEM_COLOR_SCHEMA_ACTIVE)
    : UU5.Environment.getColorSchema(ITEM_COLOR_SCHEMA);

  if (colorSchema) {
    return `color-schema-${colorSchema}`;
  } else {
    return "";
  }
}

function hasAction(props) {
  return (typeof props.onClick === "function" || props.items) && props.type !== "checkbox" && !props.disabled;
}

export const TreeMenuItem = withMenuPanelContext(
  UU5.Common.VisualComponent.create({
    //@@viewOn:mixins
    mixins: [UU5.Common.BaseMixin, UU5.Common.ContentMixin],
    //@@viewOff:mixins

    //@@viewOn:statics
    statics: {
      tagName: Cfg.TAG + "TreeMenuItem",
      classNames: {
        main: Cfg.CSS + "tree-menu-item",
        icon: (props, state) => Css.css`
          ${!state.isActive ? "color: #616161" : ""};
          margin-right: 8px;
          font-size: 16px;
        `,
        submenuIndicatorIcon: (props, state) => Css.css`
          font-size: 16px;
          margin-right: 8px;
          ${!state.isActive ? "color: rgba(0,0,0,0.50)" : ""};
        `,
        submenuPanel: Css.css`
          & > .uu5-bricks-panel-header {
            display: none;
          }

          & > .uu5-bricks-panel-body > .uu5-bricks-panel-body-body {
            padding: 0;

            & > .plus4u5-menu-panel-list {
              padding: 0px;
            }
          }
        `,
        contentWrapper: Css.css`
          flex-grow: 1;
        `,
        styleWrapper: props => Css.css`
          display: flex;
          align-items: center;
          padding: 5px 12px 7px 12px;
          line-height: 20px;
          border-radius: 4px;
          ${!props.isActive ? "color: #757575" : ""};
          ${hasAction(props) ? "cursor: pointer" : "cursor: default"};
        `,
        switch: props => Css.css`
          ${props.disabled ? "pointer-events: none" : ""};
        `
      }
    },
    //@@viewOff:statics

    //@@viewOn:propTypes
    propTypes: {
      icon: UU5.PropTypes.string,
      type: UU5.PropTypes.oneOf(["text", "checkbox"]),
      onClick: UU5.PropTypes.func,
      items: UU5.PropTypes.arrayOf(UU5.PropTypes.object),
      setActiveItemId: UU5.PropTypes.func,
      activeItemId: UU5.PropTypes.string,
      disabled: UU5.PropTypes.bool
    },
    //@@viewOff:propTypes

    //@@viewOn:getDefaultProps
    getDefaultProps() {
      return {
        icon: undefined,
        type: "text",
        onClick: undefined,
        items: undefined,
        setActiveItemId: undefined,
        activeItemId: undefined,
        disabled: false
      };
    },
    //@@viewOff:getDefaultProps

    //@@viewOn:reactLifeCycle
    getInitialState() {
      return {
        isActive: this._willBeActive()
      };
    },

    componentWillReceiveProps(nextProps) {
      let isActive = this._willBeActive(nextProps);

      if (isActive !== this.state.isActive) {
        this.setState({ isActive });
      }
    },
    //@@viewOff:reactLifeCycle

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:overridingMethods
    //@@viewOff:overridingMethods

    //@@viewOn:private
    _registerSubmenuPanel(ref) {
      this._submenuPanel = ref;
    },

    _openSubmenu() {
      if (this._submenuPanel.isExpanded()) {
        this._submenuPanel.collapse();
      } else {
        this._submenuPanel.expand();
      }
    },

    _willBeActive(props = this.props) {
      if (props.activeItemId) {
        return props.activeItemId === this.getId();
      } else {
        return false;
      }
    },

    _setActive() {
      if (typeof this.props.setActiveItemId === "function") {
        this.props.setActiveItemId(this.getId());
      }
    },

    _toggleActive() {
      if (typeof this.props.setActiveItemId === "function") {
        this.props.setActiveItemId(this.state.isActive ? undefined : this.getId());
      }
    },

    _onPropClick(opt) {
      if (typeof this.props.onClick === "function") {
        opt = {
          ...opt,
          content: this.props.content,
          id: this.getId()
        };

        this.props.onClick(opt);
      }
    },

    _onClick(e) {
      this._onPropClick({ event: e });

      if (this.props.items) {
        this._openSubmenu(e);
      } else {
        this._setActive();
      }
    },

    _onClickSwitch(opt) {
      this._onPropClick({ event: opt.event, value: opt.switchedOn });
      this._toggleActive();
    },

    _getStyleClasses() {
      let classes = [];
      let hasActiveStyles = this.state.isActive && this.props.type === "text";

      if (this.props.type === "text") {
        classes.push(`${UU5.Common.ClassNames.hover} ${UU5.Common.ClassNames.focus}`);
      }

      if (hasActiveStyles) {
        classes.push(`${ClassNames.bg} ${ClassNames.filled} ${getColorSchemaClassName(hasActiveStyles)}`);
      } else {
        classes.push(`${ClassNames.transparent} ${getColorSchemaClassName(hasActiveStyles)}`);
      }

      return classes.join(" ");
    },

    _renderSubmenu() {
      const MenuPanelTree = UU5.Common.Tools.checkTag("Plus4U5.App.MenuPanelTree", false);

      return (
        <UU5.Bricks.Panel className={this.getClassName("submenuPanel")} ref_={this._registerSubmenuPanel}>
          <MenuPanelTree items={this.props.items} />
        </UU5.Bricks.Panel>
      );
    },

    _getSubmenuIcon() {
      if (this.props.items && this.props.type !== "checkbox") {
        return <UU5.Bricks.Icon icon="mdi-menu-right" className={this.getClassName("submenuIndicatorIcon")} />;
      } else {
        return null;
      }
    },

    _getCheckbox() {
      if (this.props.type === "checkbox") {
        return (
          <UU5.Bricks.Switch
            size="s"
            colorSchema="blue-rich"
            onChange={this._onClickSwitch}
            switchedOn={this.state.isActive}
            className={this.getClassName("switch")}
          />
        );
      } else {
        return null;
      }
    },

    _renderItemContent() {
      return (
        <span
          className={`${this.getClassName("styleWrapper")} ${this._getStyleClasses()}`}
          onClick={this.props.type === "text" ? this._onClick : null}
        >
          {this._getSubmenuIcon()}
          <span className={this.getClassName("contentWrapper")}>
            <>
              {this.props.icon ? (
                <UU5.Bricks.Icon icon={this.props.icon} className={this.getClassName("icon")} />
              ) : null}
              {this.getChildren()}
            </>
          </span>
          {this._getCheckbox()}
        </span>
      );
    },

    _getMainAttrs() {
      let mainAttrs = this.getMainAttrs();

      if (this.props.disabled) {
        mainAttrs.className += " uu5-common-disabled";
      }

      return mainAttrs;
    },
    //@@viewOff:private

    //@@viewOn:render
    render() {
      return (
        <li {...this._getMainAttrs()}>
          {this.props.items ? (
            <>
              {this._renderItemContent()}
              {this._renderSubmenu()}
            </>
          ) : (
            this._renderItemContent()
          )}
        </li>
      );
    }
    //@@viewOff:render
  })
);

export default TreeMenuItem;
