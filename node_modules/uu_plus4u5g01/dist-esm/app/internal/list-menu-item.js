import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Css from "./css.js";
import MenuPanelContextMenu from "./menu-panel-context-menu.js";

const ClassNames = UU5.Common.ClassNames;
const ITEM_COLOR_SCHEMA = "grey-rich";

function getColorSchemaClassName() {
  let colorSchema = UU5.Environment.getColorSchema(ITEM_COLOR_SCHEMA);

  if (colorSchema) {
    return `color-schema-${colorSchema}`;
  } else {
    return "";
  }
}

function hasAction(props) {
  return (typeof props.onClick === "function" || props.items) && props.type !== "checkbox" && !props.disabled;
}

export const ListMenuItem = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ListMenuItem",
    classNames: {
      main: Cfg.CSS + "list-menu-item",
      icon: props => Css.css`
        margin-right: 8px;
        font-size: 16px;
      `,
      submenuIndicatorIcon: Css.css`
        font-size: 16px;
        color: rgba(0,0,0,0.50);
      `,
      submenuPanel: Css.css`
        & > .uu5-bricks-panel-header {
          display: none;
        }

        & > .uu5-bricks-panel-body > .uu5-bricks-panel-body-body {
          padding: 0;

          & > .plus4u5-menu-panel-list {
            padding: 0px;
          }
        }
      `,
      contentWrapper: Css.css`
        flex-grow: 1;
      `,
      styleWrapper: props => Css.css`
        display: flex;
        align-items: center;
        padding: 5px 12px 7px 12px;
        line-height: 20px;
        border-radius: 4px;
        color: #757575;
        ${hasAction(props) ? "cursor: pointer" : "cursor: default"};
      `,
      switch: props => Css.css`
        ${props.disabled ? "pointer-events: none" : ""};
      `
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    icon: UU5.PropTypes.string,
    type: UU5.PropTypes.oneOf(["text", "checkbox"]),
    onClick: UU5.PropTypes.func,
    items: UU5.PropTypes.arrayOf(UU5.PropTypes.object),
    disabled: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      icon: undefined,
      type: "text",
      onClick: undefined,
      items: undefined,
      disabled: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _registerCtxMenu(ref) {
    this._ctxMenu = ref;
  },

  _openSubmenu(e) {
    let openSettings = {
      aroundElement: e.target,
      position: "right-bottom"
    };

    this._ctxMenu.isOpen() ? this._ctxMenu.close() : this._ctxMenu.open(openSettings);
  },

  _onPropClick(opt) {
    if (typeof this.props.onClick === "function") {
      opt = {
        ...opt,
        content: this.props.content,
        id: this.getId()
      };

      this.props.onClick(opt);
    }
  },

  _onClick(e) {
    this._onPropClick({ event: e });

    if (this.props.items) {
      this._openSubmenu(e);
    }
  },

  _onClickSwitch(opt) {
    this._onPropClick({ event: opt.event, value: opt.switchedOn });
    opt.component.onChangeDefault(opt);
  },

  _getStyleClasses() {
    let classes = [`${ClassNames.transparent} ${getColorSchemaClassName()}`];

    if (this.props.type === "text") {
      classes.push(`${UU5.Common.ClassNames.hover} ${UU5.Common.ClassNames.focus}`);
    }

    return classes.join(" ");
  },

  _renderSubmenu() {
    return <MenuPanelContextMenu ref_={this._registerCtxMenu} items={this.props.items} />;
  },

  _getIndicatorIcon() {
    if (this.props.type === "checkbox") {
      return (
        <UU5.Bricks.Switch
          size="s"
          colorSchema="blue-rich"
          onChange={this._onClickSwitch}
          className={this.getClassName("switch")}
        />
      );
    } else if (this.props.type === "text" && this.props.items) {
      return <UU5.Bricks.Icon icon="mdi-menu-right" className={this.getClassName("submenuIndicatorIcon")} />;
    } else {
      return null;
    }
  },

  _renderItemContent() {
    return (
      <span
        className={`${this.getClassName("styleWrapper")} ${this._getStyleClasses()}`}
        onClick={this.props.type === "text" ? this._onClick : null}
      >
        {this.props.icon ? <UU5.Bricks.Icon icon={this.props.icon} className={this.getClassName("icon")} /> : null}
        <span className={this.getClassName("contentWrapper")}>{this.getChildren()}</span>
        {this._getIndicatorIcon()}
      </span>
    );
  },

  _getMainAttrs() {
    let mainAttrs = this.getMainAttrs();

    if (this.props.disabled) {
      mainAttrs.className += " uu5-common-disabled";
    }

    return mainAttrs;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <li {...this._getMainAttrs()}>
        {this.props.items ? (
          <>
            {this._renderItemContent()}
            {this._renderSubmenu()}
          </>
        ) : (
          this._renderItemContent()
        )}
      </li>
    );
  }
  //@@viewOff:render
});

export default ListMenuItem;
