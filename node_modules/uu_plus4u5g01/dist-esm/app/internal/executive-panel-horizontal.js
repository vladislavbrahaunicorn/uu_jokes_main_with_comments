import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Css from "./css.js";
import MenuPanelContextMenu from "./menu-panel-context-menu.js";
import HorizontalPanelItem from "./horizontal-panel-item.js";

const ClassNames = UU5.Common.ClassNames;

const itemPropTypes = {
  icon: UU5.PropTypes.string,
  type: UU5.PropTypes.oneOf(["text", "checkbox"]),
  onClick: UU5.PropTypes.func,
  items: UU5.PropTypes.arrayOf(UU5.PropTypes.object),
  content: UU5.PropTypes.any
};

export const ExecutivePanelHorizontal = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ExecutivePanelHorizontal",
    classNames: {
      main: props => {
        let classNames = [Cfg.CSS + "executive-panel-horizontal"];

        classNames.push(Css.css`
          display: flex;
          justify-content: flex-end;
          padding 0 16px;
          ${props.borderRadius ? `border-radius: ${UU5.Common.Tools.fillUnit(props.borderRadius)};` : ""}
        `);

        return classNames.join(" ");
      },
      button: Css.css`
        color: #757575;
      `
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    settings: UU5.PropTypes.arrayOf(UU5.PropTypes.shape(itemPropTypes)),
    items: UU5.PropTypes.arrayOf(UU5.PropTypes.shape(itemPropTypes)),
    borderRadius: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      settings: undefined,
      items: undefined,
      borderRadius: undefined,
      elevation: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _registerCtxMenu(ref) {
    this._ctxMenu = ref;
  },

  _onClickSettingsDropdown(component) {
    let openSettings = {
      aroundElement: component,
      position: "bottom-right"
    };

    this._ctxMenu.isOpen() ? this._ctxMenu.close() : this._ctxMenu.open(openSettings);
  },

  _getContextMenu() {
    return <MenuPanelContextMenu ref_={this._registerCtxMenu} items={this.props.settings} />;
  },

  _getContent() {
    let result = this.props.items.map((item, index) => <HorizontalPanelItem {...item} key={index} />);

    if (this.props.settings) {
      result.push(
        <UU5.Bricks.Button
          key="settingsButton"
          onClick={this._onClickSettingsDropdown}
          bgStyle="transparent"
          colorSchema="custom"
          size="s"
          className={this.getClassName("button")}
        >
          <UU5.Bricks.Icon icon="mdi-dots-vertical" />
        </UU5.Bricks.Button>
      );
    }

    return result;
  },

  _getMainAttrs() {
    let attrs = { ...this.getMainAttrs() };

    if (this.props.elevation) {
      attrs.className += " " + ClassNames.elevation + this.props.elevation;
    }

    return attrs;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <>
        <div {...this._getMainAttrs()}>{this._getContent()}</div>
        {this.props.settings ? this._getContextMenu() : null}
      </>
    );
  }
  //@@viewOff:render
});

export default ExecutivePanelHorizontal;
