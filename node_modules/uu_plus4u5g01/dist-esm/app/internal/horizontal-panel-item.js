import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../config/config.js";
import Css from "./css.js";
import MenuPanelContextMenu from "./menu-panel-context-menu.js";

export const HorizontalPanelItem = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ContentMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "HorizontalPanelItem",
    classNames: {
      main: props => {
        let classNames = [Cfg.CSS + "horizontal-panel-item"];
        return classNames.join(" ");
      },
      button: Css.css`
        color: #757575;
      `,
      dropdownIcon: Css.css`
        margin-left: 8px;
      `
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    icon: UU5.PropTypes.string,
    type: UU5.PropTypes.oneOf(["text", "checkbox"]),
    onClick: UU5.PropTypes.func,
    items: UU5.PropTypes.arrayOf(UU5.PropTypes.object)
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      icon: undefined,
      type: "text",
      onClick: undefined,
      items: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _registerCtxMenu(ref) {
    this._ctxMenu = ref;
  },

  _registerButtonSwitch(ref) {
    this._buttonSwitch = ref;
  },

  _onPropClick(opt) {
    if (typeof this.props.onClick === "function") {
      opt = {
        ...opt,
        content: this.props.content,
        id: this.getId()
      };

      this.props.onClick(opt);
    }
  },

  _openSubmenu(e) {
    let openSettings = {
      aroundElement: e.target,
      position: "right-bottom"
    };

    this._ctxMenu.isOpen() ? this._ctxMenu.close() : this._ctxMenu.open(openSettings);
  },

  _onClick(component, event) {
    this._onPropClick({ event });

    if (this.props.items) {
      this._openSubmenu(event);
    }
  },

  _onSwitchClick(component, event) {
    this._onPropClick({ event, value: !this._buttonSwitch.isSwitchOn() });
    this._buttonSwitch.toggle();
  },

  _getButtonContent() {
    if (this.props.type === "checkbox") {
      if (this.props.icon) {
        return <UU5.Bricks.Icon icon={this.props.icon} />;
      } else {
        return <UU5.Bricks.Icon icon="mdi-blank" />;
      }
    } else {
      return (
        <>
          {this.props.icon ? <UU5.Bricks.Icon icon={this.props.icon} className={this.getClassName("icon")} /> : null}
          <span>{this.getChildren()}</span>
          {this.props.items ? (
            <UU5.Bricks.Icon icon={"mdi-menu-down"} className={this.getClassName("dropdownIcon")} />
          ) : null}
        </>
      );
    }
  },

  _getButton() {
    if (this.props.type === "checkbox") {
      let buttonProps = {
        onClick: this._onSwitchClick,
        colorSchema: "custom"
      };
      let onProps = {
        bgStyle: "filled"
      };
      let offProps = {
        bgStyle: "transparent"
      };
      return (
        <UU5.Bricks.ButtonSwitch
          {...this.getMainPropsToPass}
          props={buttonProps}
          content={this._getButtonContent()}
          className={this.getClassName("button")}
          ref_={this._registerButtonSwitch}
          onProps={onProps}
          offProps={offProps}
          tooltip={this.props.content}
        />
      );
    } else {
      return (
        <UU5.Bricks.Button
          {...this.getMainPropsToPass}
          onClick={this._onClick}
          content={this._getButtonContent()}
          bgStyle="transparent"
          colorSchema="custom"
          className={this.getClassName("button")}
        />
      );
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <>
        {this._getButton()}
        {this.props.items ? <MenuPanelContextMenu items={this.props.items} ref_={this._registerCtxMenu} /> : null}
      </>
    );
  }
  //@@viewOff:render
});

export default HorizontalPanelItem;
