import React from "react";
import createReactClass from "create-react-class";
import * as UU5 from "uu5g04";
import * as Plus4U5 from "uu_plus4u5g01";

import Cfg from "../config/config.js";

import "./text-language.less";

export const TextLanguage = createReactClass({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.ScreenSizeMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "TextLanguage",
    classNames: {
      main: Cfg.CSS + " " + Cfg.CSS + "text-language",
      label: Cfg.CSS + "text-language-label",
      inputRow: Cfg.CSS + "text-language-input-row",
      link: Cfg.CSS + "text-language-link"
    },
    opt: {
      nestingLevelWrapper: true
    },
    lsi: () => Plus4U5.Environment.Lsi.App.authors
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {},
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    let value = this._lsiToArray(this.props.value);

    return {
      value: value
    };
  },

  componentWillReceiveProps(nextProps) {
    let value = this._lsiToArray(nextProps.value);

    this.setState({
      value: value
    });
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  setValue(val) {
    let value = this._lsiToArray(val);

    this.setState({
      value: value
    });
  },

  getValue() {
    let ret;

    if (this.props.export === "obj") {
      ret = {};

      for (let i = 0; i < this.state.value.length; i++) {
        ret[this.state.value[i].language] = this.state.value[i].content.replace(/\n/g, "<br/>");
      }
    } else {
      ret = "";
      if (this.state.value.length > 0) {
        ret += "<uu5string/><UU5.Bricks.Lsi>";

        for (let i = 0; i < this.state.value.length; i++) {
          ret +=
            '<UU5.Bricks.Lsi.Item language="' +
            this.state.value[i].language +
            '">' +
            this.state.value[i].content.replace(/\n/g, "<br/>") +
            "</UU5.Bricks.Lsi.Item>";
        }

        ret += "</UU5.Bricks.Lsi>";
      }
    }

    return ret;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _lsiToArray(value) {
    let arr = [];

    if (typeof value === "string") {
      if (value && value.match(/^<uu5string\/>(\n|\s)*<UU5\.Bricks\.Lsi>.*<\/UU5\.Bricks\.Lsi>/)) {
        let lsiMatchs = value.match(/<UU5\.Bricks\.Lsi\.Item language=".{2}(-.{2})?">.*?<\/UU5\.Bricks\.Lsi\.Item>/g);

        for (let i = 0; i < lsiMatchs.length; i++) {
          let language = lsiMatchs[i].match(/<UU5\.Bricks\.Lsi\.Item language=".{2}(-.{2})?">/);
          language = language[0].match(/language=".{2}(-.{2})?/);
          language = language[0].replace('language="', "");
          let content = lsiMatchs[i].replace(/<UU5\.Bricks\.Lsi\.Item language=".{2}(-.{2})?">/, "");
          content = content.replace(/<\/UU5\.Bricks\.Lsi\.Item>/, "");
          content = content.replace(/<br\/>/g, "\n");

          arr.push({ content: content, language: language });
        }
      } else if (value) {
        let content = value.replace(/^<uu5string\/>/, "");
        arr.push({ content: content, language: UU5.Environment.languages[0].language });
      }
    } else {
      for (let key in value) {
        arr.push({
          content: value[key],
          language: key
        });
      }
    }

    return arr;
  },

  _renderInput(index, languages) {
    let dropdownItems = [];

    for (let i = 0; i < languages.length; i++) {
      dropdownItems.push(
        <UU5.Bricks.Dropdown.Item
          key={"lang_" + i}
          label={languages[i]}
          onClick={() => {
            let value = this.state.value;
            value[index].language = languages[i];
            this.setState(
              { value: value },
              () => this.props.onChange && this.props.onChange({ value: this.getValue() })
            );
          }}
          inputAttrs={{ autoComplete: "off" }}
        />
      );
    }

    return (
      <UU5.Bricks.Div key={"row" + index} className={this.getClassName("inputRow")}>
        {this.props.textArea ? (
          <UU5.Forms.TextArea
            rows={1}
            autoResize
            value={this.state.value[index].content}
            onChange={opt => {
              let value = this.state.value;
              value[index].content = opt.value;
              this.setState({ value: value });
            }}
            onBlur={() => this.props.onChange && this.props.onChange({ value: this.getValue() })}
          />
        ) : (
          <UU5.Forms.Text
            value={this.state.value[index].content}
            onChange={opt => {
              let value = this.state.value;
              value[index].content = opt.value;
              this.setState({ value: value });
            }}
            onBlur={() => this.props.onChange && this.props.onChange({ value: this.getValue() })}
          />
        )}
        <UU5.Bricks.Dropdown label={this.state.value[index].language} size="m" disabled={languages.length === 0}>
          {dropdownItems}
        </UU5.Bricks.Dropdown>
        <UU5.Bricks.Button
          onClick={() => {
            let value = this.state.value;
            value.splice(index, 1);
            this.setState(
              { value: value },
              () => this.props.onChange && this.props.onChange({ value: this.getValue() })
            );
          }}
        >
          <UU5.Bricks.Icon icon="mdi-close" />
        </UU5.Bricks.Button>
      </UU5.Bricks.Div>
    );
  },

  _renderInputs(languages) {
    let inputs = [];

    for (let i = 0; i < this.state.value.length; i++) {
      inputs.push(this._renderInput(i, languages));
    }

    return inputs;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let languages = [];
    for (let i = 0; i < this.props.languages.length; i++) {
      let available = true;
      for (let j = 0; j < this.state.value.length; j++) {
        if (this.props.languages[i] === this.state.value[j].language) {
          available = false;
        }
      }
      available && languages.push(this.props.languages[i]);
    }

    return (
      <UU5.Bricks.Row {...this.getMainPropsToPass()}>
        <UU5.Bricks.Column colWidth="xs12 s4" className={this.getClassName("label")}>
          <UU5.Bricks.Span content={this.props.label} />
        </UU5.Bricks.Column>
        <UU5.Bricks.Column colWidth="xs12 s7">
          {this._renderInputs(languages)}
          <UU5.Bricks.Link
            className={this.getClassName("link")}
            onClick={() => {
              let value = this.state.value;
              let language = languages.includes(UU5.Environment.languages[0].language)
                ? UU5.Environment.languages[0].language
                : languages[0];
              value.push({ language: language, content: "" });
              this.setState(
                { value: value },
                () => this.props.onChange && this.props.onChange({ value: this.getValue() })
              );
            }}
            disabled={this.props.languages.length <= this.state.value.length}
            content={this.getLsiComponent("textLanguageAdd")}
          />
        </UU5.Bricks.Column>
      </UU5.Bricks.Row>
    );
  }
  //@@viewOff:render
});

export default TextLanguage;
