import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Navigator from "./navigator.js";
import NotificationBadge from "./notification-badge.js";
import { AuthenticationService } from "uu_appg01_oidc";

import "./button.less";

export const Button = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.NestingLevelMixin,
    UU5.Common.IdentityMixin,
    UU5.Common.CcrReaderMixin
  ],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Button",
    nestingLevel: "smallBox",
    classNames: {
      main:
        "plus4u5-app-button uu5-noindex" +
        " " +
        UU5.Common.Css.css(`
        html.uu5-common-no-scroll &.plus4u5-app-button-fixed {
          padding-right: 17px;
        }
      `),
      authenticated: "plus4u5-app-button-authenticated",
      notAuthenticated: "plus4u5-app-button-not-authenticated",
      pending: "plus4u5-app-button-pending",
      fixed: "plus4u5-app-button-fixed",
      button: "plus4u5-app-button-button",
      navigator: "plus4u5-app-button-navigator",
      navigatorWrapper: "plus4u5-app-button-navigator-wrapper",
      notificationBadge: "plus4u5-app-button-notification-badge"
    },
    defaults: {
      plus4uIcon: "plus4u-plus4u"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    smallNav: UU5.PropTypes.bool,
    hideNotification: UU5.PropTypes.bool,
    authenticationContext: UU5.PropTypes.object,
    prompt: UU5.PropTypes.oneOf(["login", "registration"]),
    scope: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.arrayOf(UU5.PropTypes.string)]),
    usePopup: UU5.PropTypes.bool,
    acrValues: UU5.PropTypes.string,
    maxAge: UU5.PropTypes.number,
    language: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      smallNav: false,
      hideNotification: false,
      authenticationContext: undefined,
      prompt: undefined,
      scope: undefined,
      usePopup: undefined, // true
      acrValues: undefined,
      maxAge: undefined,
      language: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    let fixed, hidden, height;
    let pageTop = this.getCcrComponentByKey("UU5.Bricks.Page.Top");
    if (pageTop && typeof pageTop.getFixState === "function") {
      ({ fixed, hidden, height } = pageTop.getFixState());
    }

    return {
      topFixed: fixed,
      topHidden: hidden,
      topHeight: height
    };
  },

  componentDidMount() {
    UU5.Environment.EventListener.registerEvent("hidePageTop", this.getId(), this._onHidePageTop);
    UU5.Environment.EventListener.registerEvent("fixPageTop", this.getId(), this._onFixPageTop);

    let { topFixed, topHidden, topHeight } = this.state;
    if (topFixed != null || topHidden != null || topHeight != null) {
      this._updateFixPosition();
    } else {
      this._rememberNonFixedOffsets();
    }
  },

  componentDidUpdate(prevProps, prevState) {
    let { topFixed, topHidden, topHeight, identityFeedback } = this.state;
    // console.log({ topFixed, topHidden, topHeight, topLastHeight });
    if (
      prevState.topFixed !== topFixed ||
      prevState.topHidden !== topHidden ||
      prevState.topHeight !== topHeight ||
      prevState.identityFeedback !== identityFeedback
    ) {
      this._updateFixPosition();
    }
  },

  componentWillUnmount() {
    UU5.Environment.EventListener.unregisterEvent("hidePageTop", this.getId());
    UU5.Environment.EventListener.unregisterEvent("fixPageTop", this.getId());
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _updateFixPosition() {
    if (this._domNode && this._buttonNode) {
      let { topFixed, topHidden, topHeight, topLastHeight } = this.state;
      this._rememberNonFixedOffsets();
      let buttonRect = this._buttonNode.getBoundingClientRect();
      let offscreenHeight = Math.max(
        this._nonFixedOffsetTop + buttonRect.height + 10, // 10 is extra bottom margin so that box-shadow doesn't shine through top viewport edge
        topHeight || topLastHeight || 0
      );
      Object.assign(this._domNode.style, {
        marginTop: topFixed ? -offscreenHeight + "px" : "",
        transform: topFixed && !topHidden ? "translateY(" + offscreenHeight + "px)" : ""
      });
    }
  },

  _rememberNonFixedOffsets() {
    if (this._domNode && !this.state.topFixed) {
      let computedStyle = getComputedStyle(this._domNode);
      this._nonFixedOffsetTop = parseFloat(computedStyle.top);
      this._nonFixedOffsetRight = parseFloat(computedStyle.right);
    }
  },

  _onHidePageTop(hidden, height) {
    // console.log("onHidePageTop", { hidden, height });
    this.setState(state => {
      return { topHidden: hidden, topHeight: hidden ? 0 : height, topLastHeight: height || state.topLastHeight };
    });
  },

  _onFixPageTop(fixed, height) {
    // console.log("onFixPageTop", { fixed, height });
    this.setState(state => {
      return { topFixed: fixed, topHeight: height, topLastHeight: height || state.topLastHeight };
    });
  },

  _toggleNavigator() {
    this._navigator.toggleHidden();
  },

  _login() {
    let { authenticationContext, prompt, scope, usePopup, acrValues, maxAge, language } = this.props;
    language = language || UU5.Common.Tools.getLanguage();
    let loginOpts = { authenticationContext, prompt, usePopup, acrValues, maxAge, language };
    for (let k in loginOpts) if (loginOpts[k] == null) delete loginOpts[k];
    // NOTE Not using this.login() from IdentityMixin because it uses old Session.currentSession API
    // which doesn't recognize/pass "scope" => since we're in uu_plus4u5g01 which uses
    // uu_appg01_oidc directly, use new API (AuthenticationService.authenticate).
    AuthenticationService.authenticate(loginOpts, scope);
  },

  _setDomNodeRef(node) {
    this._domNode = node;
  },

  _setButtonRef(comp) {
    this._buttonNode = comp.findDOMNode();
  },

  _setNavigatorRef(comp) {
    this._navigator = comp;
  },

  _getChild() {
    let child;
    let identityFeedback = this.getIdentityFeedback();
    let mainAttrs = this.getMainAttrs();
    if (this.state.topFixed) mainAttrs.className += " " + this.getClassName("fixed");
    child = (
      <span {...mainAttrs} ref={this._setDomNodeRef}>
        <UU5.Bricks.Button
          className={this.getClassName("button") + " " + this.getClassName(identityFeedback)}
          parent={this}
          colorSchema="custom"
          onClick={
            identityFeedback === "authenticated"
              ? this._toggleNavigator
              : identityFeedback === "notAuthenticated"
              ? this._login
              : null
          }
          disabled={identityFeedback === "pending"}
          ref_={this._setButtonRef}
        >
          <UU5.Bricks.Icon icon={this.getDefault().plus4uIcon} />
        </UU5.Bricks.Button>
        {!this.props.hideNotification && <NotificationBadge className={this.getClassName("notificationBadge")} />}
        {identityFeedback === "authenticated" && (
          <span className={this.getClassName("navigatorWrapper")}>
            <Navigator
              parent={this}
              uuIdentity={this.getIdentity().uuIdentity}
              hidden
              small={this.props.smallNav}
              ref_={this._setNavigatorRef}
              className={this.getClassName("navigator")}
            />
          </span>
        )}
      </span>
    );
    return child;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getChild() : null;
  }
  //@@viewOff:render
});

export default Button;
