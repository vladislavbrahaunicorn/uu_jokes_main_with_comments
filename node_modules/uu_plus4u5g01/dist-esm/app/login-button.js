import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";
import { AuthenticationService } from "uu_appg01_oidc";

export const LoginButton = UU5.Common.VisualComponent.create({
  mixins: [
    UU5.Common.BaseMixin,
    UU5.Common.ElementaryMixin,
    UU5.Common.ContentMixin,
    UU5.Common.PureRenderMixin,
    UU5.Common.ColorSchemaMixin,
    UU5.Common.IdentityMixin
  ],

  statics: {
    tagName: "Plus4U5.App.LoginButton",
    classNames: {
      main: "plus4u5-app-login-button uu5-noindex"
    },
    lsi: () => Plus4U5.Environment.Lsi.App.loginButton,
    defaults: {
      regexpHash: /^#/,
      httpRegexp: /^(\/|[a-z0-9\-+.]+:)/
    }
  },

  propTypes: {
    size: UU5.PropTypes.string,
    displayBlock: UU5.PropTypes.bool,
    pressed: UU5.PropTypes.bool,
    onLogin: UU5.PropTypes.func,
    onLogout: UU5.PropTypes.func,
    href: UU5.PropTypes.string,
    authenticationContext: UU5.PropTypes.object,
    prompt: UU5.PropTypes.oneOf(["login", "registration"]),
    scope: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.arrayOf(UU5.PropTypes.string)]),
    usePopup: UU5.PropTypes.bool,
    acrValues: UU5.PropTypes.string,
    maxAge: UU5.PropTypes.number,
    language: UU5.PropTypes.string
  },

  getDefaultProps() {
    return {
      size: "m",
      displayBlock: false,
      pressed: false,
      onLogin: null,
      onLogout: null,
      href: undefined,
      authenticationContext: undefined,
      prompt: undefined,
      scope: undefined,
      usePopup: undefined, // true
      acrValues: undefined,
      maxAge: undefined,
      language: undefined
    };
  },

  onLoginDefault(opt = {}) {
    opt = { ...opt };
    this.props.authenticationContext &&
      (opt.authenticationContext = opt.authenticationContext || this.props.authenticationContext);
    this.props.prompt && (opt.prompt = opt.prompt || this.props.prompt);
    let scope = opt.scope != null ? opt.scope : this.props.scope;
    opt.language = opt.language || this.props.language || UU5.Common.Tools.getLanguage();
    opt.usePopup = opt.usePopup != null ? opt.usePopup : this.props.usePopup;
    opt.acrValues = opt.acrValues != null ? opt.acrValues : this.props.acrValues;
    opt.maxAge = opt.maxAge != null ? opt.maxAge : this.props.maxAge;
    for (let k in opt) if (opt[k] == null) delete opt[k];
    // NOTE Not using this.login() from IdentityMixin because it uses old Session.currentSession API
    // which doesn't recognize/pass "scope" => since we're in uu_plus4u5g01 which uses
    // uu_appg01_oidc directly, use new API (AuthenticationService.authenticate).
    return AuthenticationService.authenticate(opt, scope);
  },

  onLogoutDefault() {
    this.logout();
  },

  _startsWithHash(url) {
    return this.getDefault("regexpHash").test(url);
  },

  _isRoute() {
    return (
      this.props.href && !this.getDefault("httpRegexp").test(this.props.href) && !this._startsWithHash(this.props.href)
    );
  },

  _onClickFragment() {
    let id = this.props.href.replace("#", "");
    const foundElement = document.getElementById(id);

    if (!foundElement) {
      id = id.replace("-inner", "");
    }

    UU5.Common.Tools.scrollToTarget(id);
  },

  _redirect() {
    if (this._startsWithHash(this.props.href)) {
      this._onClickFragment();
    } else if (this._isRoute() && UU5.Environment.getRouter()) {
      let [base, ...fragmentParts] = this.props.href.split("#");
      let [path, ...queryParts] = base.split("?");
      let fragment = fragmentParts.join("#");
      let query = queryParts.join("?");
      let params = query ? UU5.Common.Url.decodeQuery("?" + query) : null;

      // e.preventDefault();

      let useCase = path || UU5.Common.Url.parse(location.href).useCase || "";
      UU5.Environment.setRoute(useCase, params, fragment);
    } else {
      window.open(this.props.href, "_self");
    }
  },

  _login() {
    let promise;

    if (typeof this.props.onLogin === "function") {
      promise = this.props.onLogin(this);
    } else {
      promise = this.onLoginDefault();
    }

    if (this.props.href && promise && typeof promise === "object" && typeof promise.then === "function") {
      promise.then(this._redirect);
    }
  },

  _logout() {
    if (typeof this.props.onLogout === "function") {
      this.props.onLogout(this);
    } else {
      this.onLogoutDefault();
    }
  },

  _getOffContent() {
    return this.props.content || this.props.children || this.getLsiComponent(this.props.prompt || "login");
  },

  render() {
    return (
      <UU5.Bricks.ButtonSwitch
        {...this.getMainPropsToPass()}
        props={{
          displayBlock: this.props.displayBlock,
          pressed: this.props.pressed,
          size: this.props.size,
          colorSchema: this.props.colorSchema
        }}
        switchedOn={this.isAuthenticated()}
        onProps={{ content: this.getLsiComponent("logout"), onClick: this._logout }}
        offProps={{ content: this._getOffContent(), onClick: this._login }}
      />
    );
  }
});

export default LoginButton;
