//@@viewOn:imports
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Config from "./config/config.js";
import { withSearchContext } from "./search-context";
import SearchInput from "./internal/search-input.js";
//@@viewOff:imports

export const Search = withSearchContext(
  UU5.Common.VisualComponent.create({
    //@@viewOn:mixins
    mixins: [UU5.Common.BaseMixin],
    //@@viewOff:mixins

    //@@viewOn:statics
    statics: {
      tagName: Config.TAG + "Search",
      classNames: {
        main: Config.CSS + "search"
      }
    },
    //@@viewOff:statics

    //@@viewOn:propTypes
    propTypes: {
      onSearch: UU5.PropTypes.func,
      setData: UU5.PropTypes.func,
      maxWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
      colorSchema: UU5.PropTypes.string,
      isOpen: UU5.PropTypes.bool,
      value: UU5.PropTypes.string
    },
    //@@viewOff:propTypes

    //@@viewOn:getDefaultProps
    getDefaultProps() {
      return {
        onSearch: undefined,
        setData: undefined,
        maxWidth: 232,
        colorSchema: undefined,
        isOpen: false,
        value: undefined
      };
    },
    //@@viewOff:getDefaultProps

    //@@viewOn:reactLifeCycle
    getInitialState() {
      return {
        isLoading: false
      };
    },

    componentWillReceiveProps(nextProps) {
      if (this.props.isOpen !== nextProps.isOpen) {
        this.setState({ isOpen: nextProps.isOpen });
      }
    },
    //@@viewOff:reactLifeCycle

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:overriding
    //@@viewOff:overriding

    //@@viewOn:private
    _onButtonClick() {
      this.setState(state => ({ isOpen: !state.isOpen }));
    },

    _onSearch(opt) {
      if (typeof this.props.onSearch === "function" && typeof this.props.setData === "function") {
        this.setState({ isLoading: true });

        this.props.onSearch(opt).then(result => {
          this.setState({ isLoading: false });
          this.props.setData(result);
        });
      }
    },
    //@@viewOff:private

    //@@viewOn:render
    render() {
      return (
        <SearchInput
          {...this.getMainPropsToPass()}
          isLoading={this.state.isLoading}
          isOpen={this.state.isOpen}
          colorSchema={this.props.colorSchema}
          maxWidth={this.props.maxWidth}
          onSearch={this._onSearch}
          onButtonClick={this._onButtonClick}
          value={this.props.value}
        />
      );
    }
    //@@viewOff:render
  })
);

export default Search;
