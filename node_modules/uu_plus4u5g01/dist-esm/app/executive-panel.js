import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "./config/config.js";

import ExecutivePanelVertical from "./internal/executive-panel-vertical.js";
import ExecutivePanelHorizontal from "./internal/executive-panel-horizontal.js";
import ExecutivePanelFloat from "./internal/executive-panel-float.js";

const itemPropTypes = {
  icon: UU5.PropTypes.string,
  type: UU5.PropTypes.oneOf(["text", "checkbox"]),
  onClick: UU5.PropTypes.func,
  items: UU5.PropTypes.arrayOf(UU5.PropTypes.object),
  content: UU5.PropTypes.any,
  disabled: UU5.PropTypes.bool
};

export const ExecutivePanel = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ExecutivePanel",
    classNames: {
      main: Cfg.CSS + "executive-panel"
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    settings: UU5.PropTypes.arrayOf(UU5.PropTypes.shape(itemPropTypes)),
    items: UU5.PropTypes.arrayOf(UU5.PropTypes.shape(itemPropTypes)),
    type: UU5.PropTypes.oneOf(["vertical", "horizontal", "float"]),
    borderRadius: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["0", "1", "2", "3", "4", "5", 0, 1, 2, 3, 4, 5]),
    header: UU5.PropTypes.any,
    floatPosition: UU5.PropTypes.string,
    floatWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    expanded: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      settings: undefined,
      items: undefined,
      type: "vertical",
      borderRadius: undefined,
      elevation: undefined,
      header: undefined,
      floatPosition: null,
      floatWidth: 184,
      expanded: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _getType() {
    let resultType;
    let commonProps = {
      settings: this.props.settings,
      items: this.props.items,
      borderRadius: this.props.borderRadius,
      elevation: this.props.elevation
    };

    if (this.props.type === "horizontal") {
      resultType = <ExecutivePanelHorizontal {...this.getMainPropsToPass()} {...commonProps} />;
    } else if (this.props.type === "float") {
      resultType = (
        <ExecutivePanelFloat
          {...this.getMainPropsToPass()}
          {...commonProps}
          width={this.props.floatWidth}
          position={this.props.floatPosition}
          header={this.props.header}
        />
      );
    } else {
      // vertical is default
      resultType = (
        <ExecutivePanelVertical
          {...this.getMainPropsToPass()}
          {...commonProps}
          expanded={this.props.expanded}
          header={this.props.header}
        />
      );
    }

    return resultType;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return this._getType();
  }
  //@@viewOff:render
});

export default ExecutivePanel;
