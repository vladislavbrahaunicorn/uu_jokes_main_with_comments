import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import * as Plus4U5 from "uu_plus4u5g01";

import "./technologies.less";

export const Technologies = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.SectionMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: "Plus4U5.App.Technologies",
    classNames: {
      main: "plus4u5-app-technologies",
      mainTechnologies: "plus4u5-app-technologies-main-technologies",
      row: "plus4u5-app-technologies-row",
      alignLeft: "plus4u5-app-technologies-align-left",
      alignCenter: "plus4u5-app-technologies-align-center"
    },
    lsi: () => Plus4U5.Environment.Lsi.App.technologies,
    opt: {
      dummyLevel: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    technologies: UU5.PropTypes.array,
    technologyType: UU5.PropTypes.oneOf(["library", "application"]),
    textAlign: UU5.PropTypes.oneOf(["left", "center"])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      technologies: [],
      technologyType: undefined,
      textAlign: "center"
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getTechnologies() {
    const technologies = this.props.technologies.map(item => item);
    if (technologies.length > 1)
      technologies.splice(technologies.length - 1, 0, this.getLsiComponent("technologiesAnd"));
    const retArr = [];
    technologies.forEach((item, i) => {
      retArr.push(item);
      if (i < technologies.length - 3) retArr.push(<span key={"comma_" + i}>, </span>);
      else if (i < technologies.length - 1) retArr.push(" ");
    });
    if (technologies.length > 0) retArr.push(".");
    return retArr;
  },

  _getRows() {
    if (!this.props.content) return;

    if (Array.isArray(this.props.content)) {
      return this.props.content.map((row, i) => {
        return <UU5.Bricks.P className={this.getClassName().row} key={i} content={row} />;
      });
    } else {
      return <UU5.Bricks.P className={this.getClassName().row} content={this.props.content} />;
    }
  },

  _getMainPropsToPass() {
    let props = this.getMainPropsToPass();

    if (this.props.textAlign === "left") {
      props.className += " " + this.getClassName("alignLeft");
    } else if (this.props.textAlign === "center") {
      props.className += " " + this.getClassName("alignCenter");
    }

    return props;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    const header = this.props.header ? this.props.header : this.getLsiComponent("header");

    return (
      <UU5.Bricks.Section {...this._getMainPropsToPass()} header={header} content={null} level={this.props.level || 4}>
        <UU5.Bricks.Div className={this.getClassName().mainTechnologies}>
          <UU5.Bricks.Span
            content={
              this.props.technologyType === "library"
                ? this.getLsiComponent("technologiesLibrary")
                : this.props.technologyType === "application"
                ? this.getLsiComponent("technologiesApplication")
                : this.getLsiComponent("technologies")
            }
          />
          <UU5.Bricks.Span content={this._getTechnologies()} />
        </UU5.Bricks.Div>
        {this._getRows()}
      </UU5.Bricks.Section>
    );
  }
  //@@viewOff:render
});

export default Technologies;
