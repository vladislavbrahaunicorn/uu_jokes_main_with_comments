//@@viewOn:imports
import React from "react";
import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Config from "./config/config.js"; //@@viewOff:imports

const SearchContext = UU5.Common.Context.create();
export const SearchConsumer = SearchContext.Consumer;
export const withSearchContext = Component => {
  // disable context for jest tests - enzyme doesn't support React 16.3 Context API
  if (!UU5.Common.Context.isSupported() || process.env.NODE_ENV === "test") return Component;
  let forwardRef = React.forwardRef((props, ref) => {
    return <SearchConsumer>
        {({
        setData
      }) => <Component {...props} ref={ref} setData={props.setData || setData} />}
      </SearchConsumer>;
  });
  forwardRef.isUu5PureComponent = true;
  forwardRef.displayName = `forwardRef(${Component.displayName || Component.name || "Component"})`;
  forwardRef.tagName = Component.tagName;
  return forwardRef;
};
export const SearchProvider = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "SearchProvider"
  },

  //@@viewOff:statics
  //@@viewOn:propTypes
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      data: null
    };
  },

  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _setData(data) {
    this.setState({
      data
    });
  },

  //@@viewOff:private
  //@@viewOn:render
  render() {
    return <SearchContext.Provider value={{
      data: this.state.data,
      setData: this._setData
    }}>
        {this.props.children}
      </SearchContext.Provider>;
  } //@@viewOff:render


});
export default {
  SearchProvider,
  SearchConsumer,
  withSearchContext
};