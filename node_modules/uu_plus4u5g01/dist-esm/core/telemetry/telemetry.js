import * as UU5 from "uu5g04";
import Calls from "../common/calls.js";

const INTERVAL = 5 * 60 * 1000;
const MAX_ITEMS = 1000;
const USE_CASE = "sys/logTelemetryData";

let telemetryInst;

class Base64 {
  static encode(string) {
    return btoa(unescape(encodeURIComponent(string)));
  }

  static decode(base64) {
    return decodeURIComponent(escape(atob(base64)));
  }
}

export class Telemetry {
  static _items = [];

  static init(opt = {}) {
    // must be Plus4U5 because of global setting of value
    if (Plus4U5.Environment.telemetry) {
      if (telemetryInst) {
        UU5.Common.Tools.warning("Telemetry was already initialized.");
      } else {
        telemetryInst = new Telemetry(opt);
      }
      return telemetryInst;
    }
  }

  static info(logType, params) {
    this._log("INFO", logType, params);
  }

  static warning(logType, params) {
    this._log("WARNING", logType, params);
  }

  static error(logType, params) {
    this._log("ERROR", logType, params);
  }

  static send(id, uri) {
    let session = UU5.Environment.getSession();

    if (Plus4U5.Environment.telemetry && Telemetry._items.length && session && session.getIdentity()) {
      let cmdUri = UU5.Common.Url.parse();
      cmdUri.useCase = telemetryInst ? telemetryInst.useCase : USE_CASE;

      let items = [...Telemetry._items];
      Telemetry._items.length = 0;

      let length = items.length;
      if (length > MAX_ITEMS) {
        UU5.Common.Tools.warning(`Data was cropped. Just last ${MAX_ITEMS} from ${length} items were saved.`);

        items = items.slice(length - MAX_ITEMS, length);
        items.push({
          severity: "INFO",
          typeCode: "MORE_DATA",
          time: new Date().toISOString(),
          data: {
            message: `Data was cropped. Just last ${MAX_ITEMS} from ${length} items were saved.`
          }
        });
      }

      let output = { telemetryId: id, entryPointUri: uri, eventList: items };

      if (telemetryInst && telemetryInst.includeLibraries) {
        let libraryMap = {};
        libraryMap[UU5.Environment.name] = UU5.Environment.version;
        let runtimeLibraries = UU5.Environment.getRuntimeLibraries();
        Object.keys(runtimeLibraries).forEach(key => {
          libraryMap[key] = runtimeLibraries[key].version;
        });
        output.libraryMap = libraryMap;
      }

      let data = Base64.encode(JSON.stringify(output));

      Calls.call("post", cmdUri.toString(), {
        data: { data },
        fail: e => {
          console.error("Telemetry error", e);
        }
      });
    }
  }

  static _log(severity, logType, logParams) {
    let data = {
      severity,
      typeCode: logType,
      time: new Date().toISOString()
    };

    if (logParams) {
      data.data = { ...logParams };
    }

    Telemetry._items.push(data);

    return data;
  }

  constructor({ interval = INTERVAL, useCase = USE_CASE, includeLibraries = true }) {
    this.id = UU5.Common.Tools.generateUUID();
    this.uri = location.href;
    this._intervalInst = setInterval(() => Telemetry.send(this.id, this.uri), interval);
    this.useCase = useCase;
    this.includeLibraries = includeLibraries;
  }

  stop() {
    this._intervalInst && clearInterval(this._intervalInst);
    Telemetry.send(this.id, this.uri);
  }
}

window.addEventListener("beforeunload", function() {
  telemetryInst && telemetryInst.stop();
});

export default Telemetry;
