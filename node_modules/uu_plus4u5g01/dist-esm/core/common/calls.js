import { Client } from "uu_appg01";
import { Session } from "uu_appg01_oidc";
import Tools from "./tools.js";

const caches = {
  personalRoleUris: {},
  peopleCardUris: {},
  peopleCardAttributes: {}
};

export const Calls = {
  call(method, url, dtoIn, clientOptions) {
    // prevent sending of authn token if we call URL that isn't "ours"
    let clientOpts = clientOptions || {};
    if (!Tools.canSendToken(url)) {
      if (!clientOpts.headers) clientOpts.headers = {};
      let hasExplicitAuth = Object.keys(clientOpts.headers).some(header => header.toLowerCase() === "authorization");
      if (!hasExplicitAuth) clientOpts.headers["authorization"] = null;
    }

    let result;
    if (typeof dtoIn.done === "function" || typeof dtoIn.fail === "function") {
      result = Client[method](url, dtoIn.data, clientOpts);
      result.then(
        response => typeof dtoIn.done === "function" && dtoIn.done(response.data),
        response => typeof dtoIn.fail === "function" && dtoIn.fail(response)
      );
    } else {
      result = Client[method](url, dtoIn, clientOpts);
    }
    return result;
  },

  getPersonalRoleUri(done, fail, uuIdentity) {
    if (!uuIdentity) {
      let identity = Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      let cacheData = caches.personalRoleUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);
      else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });
      else {
        caches.personalRoleUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        let commandUri = "https://api.plus4u.net/ues/wcp/ues/core/security/session/UESSession/getPersonalRole";
        Calls.call("get", commandUri, {
          done: dtoOut => {
            cacheData.result = dtoOut;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => (typeof it.done === "function" ? it.done(cacheData.result) : null));
          },
          fail: e => {
            cacheData.error = e;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => (typeof it.fail === "function" ? it.fail(cacheData.error) : null));
          }
        });
      }
    }
  },

  getPeopleCardUri(uuIdentity, done, fail) {
    if (!uuIdentity) {
      let identity = Session.currentSession.getIdentity();
      uuIdentity = identity ? identity.uuIdentity : null;
    }

    if (uuIdentity) {
      let cacheData = caches.peopleCardUris[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);
      else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });
      else {
        caches.peopleCardUris[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        let commandUri = "https://cmd.plus4u.net/PLUS4U-BT/uu-plus4uppl/PersonalCard/getCardList/exec";
        Calls.call("get", commandUri, {
          data: { p4u_id: uuIdentity },
          done: dtoOut => {
            cacheData.result = (dtoOut[0] || {}).uri;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => (typeof it.done === "function" ? it.done(cacheData.result) : null));
          },
          fail: e => {
            cacheData.error = e;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => (typeof it.fail === "function" ? it.fail(cacheData.error) : null));
          }
        });
      }
    }
  },

  getPeopleCardAttributes(uuIdentity, done, fail) {
    if (uuIdentity) {
      let cacheData = caches.peopleCardAttributes[uuIdentity] || {};
      if ("result" in cacheData) done(cacheData.result);
      else if (cacheData.callbacks) cacheData.callbacks.push({ done, fail });
      else {
        caches.peopleCardAttributes[uuIdentity] = cacheData;
        cacheData.callbacks = [{ done, fail }];

        Calls.getPeopleCardUri(
          uuIdentity,
          uri => {
            let commandUri = "https://cmd.plus4u.net/uu-plus4uppl/PersonalCard/getAttributes/exec";
            Calls.call("get", commandUri, {
              data: { uuUri: uri, public: true },
              done: attrs => {
                cacheData.result = attrs;
                let callbacks = cacheData.callbacks;
                delete cacheData.callbacks;
                callbacks.forEach(it => (typeof it.done === "function" ? it.done(cacheData.result) : null));
              },
              fail: e => {
                cacheData.error = e;
                let callbacks = cacheData.callbacks;
                delete cacheData.callbacks;
                callbacks.forEach(it => (typeof it.fail === "function" ? it.fail(cacheData.error) : null));
              }
            });
          },
          e => {
            cacheData.error = e;
            let callbacks = cacheData.callbacks;
            delete cacheData.callbacks;
            callbacks.forEach(it => (typeof it.fail === "function" ? it.fail(cacheData.error) : null));
          }
        );
      }
    }
  },

  getPropertyValue: (uri, done, fail) => {
    let commandUri = "https://api.plus4u.net/ues/wcp/ues/core/property/UESProperty/getValue";
    Calls.call("get", commandUri, { data: { uesuri: uri }, done, fail });
  }
};

export default Calls;
