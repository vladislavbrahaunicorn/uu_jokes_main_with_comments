import * as UU5 from "uu5g04";

export class Url {
  static parse(url) {
    let uu5Url = UU5.Common.Url.parse(url);
    let plus4u5Url = new Url(uu5Url);

    if (url && typeof url === "object") {
      url.product && (plus4u5Url.product = url.product);
      url.vendor && (plus4u5Url.vendor = url.vendor);
      url.app && (plus4u5Url.app = url.app);
      url.subApp && (plus4u5Url.subApp = url.subApp);
      url.workspace && (plus4u5Url.workspace = url.workspace);
      url.tid && (plus4u5Url.tid = url.tid);
      url.awid && (plus4u5Url.awid = url.awid);
      url.useCase && (plus4u5Url.useCase = url.useCase);
    }

    return plus4u5Url;
  }

  constructor(uu5Url) {
    this._uu5Url = uu5Url || new UU5.Common.Url();
  }

  get protocol() {
    return this._uu5Url.protocol;
  }

  set protocol(protocol) {
    this._uu5Url.protocol = protocol;
    return this;
  }

  get hostName() {
    return this._uu5Url.hostName;
  }

  set hostName(hostName) {
    this._uu5Url.hostName = hostName;
    return this;
  }

  get port() {
    return this._uu5Url.port;
  }

  set port(port) {
    this._uu5Url.port = port;
    return this;
  }

  get parameters() {
    return this._uu5Url._parameters;
  }

  set parameters(parameters) {
    this._uu5Url.parameters = parameters;
    return this;
  }

  get hash() {
    return this._uu5Url.hash;
  }

  set hash(hash) {
    this._uu5Url.hash = hash;
    return this;
  }

  get host() {
    return this._uu5Url.host;
  }

  get origin() {
    return this._uu5Url.origin;
  }

  get product() {
    return this._getPathNameParser().product;
  }

  set product(product) {
    this._setPathName({ product: product });
    return this;
  }

  get vendor() {
    return this._getPathNameParser().vendor;
  }

  set vendor(vendor) {
    this._setPathName({ vendor: vendor });
    return this;
  }

  get app() {
    return this._getPathNameParser().app;
  }

  set app(app) {
    this._setPathName({ app: app });
    return this;
  }

  get subApp() {
    return this._getPathNameParser().subApp;
  }

  set subApp(subApp) {
    this._setPathName({ subApp: subApp });
    return this;
  }

  get workspace() {
    return this._getPathNameParser().workspace;
  }

  set workspace(workspace) {
    this._setPathName({ workspace: workspace });
    return this;
  }

  get tid() {
    return this._getPathNameParser().tid;
  }

  set tid(tid) {
    this._setPathName({ tid: tid });
    return this;
  }

  get awid() {
    return this._getPathNameParser().awid;
  }

  set awid(awid) {
    this._setPathName({ awid: awid });
    return this;
  }

  get useCase() {
    return this._getPathNameParser().useCase;
  }

  set useCase(useCase) {
    this._setPathName({ useCase: useCase });
    return this;
  }

  set(params) {
    params.protocol !== undefined && (this.protocol = params.protocol);
    params.hostName !== undefined && (this.hostName = params.hostName);
    params.port !== undefined && (this.port = params.port);
    params.parameters !== undefined && (this.parameters = params.parameters);
    params.hash !== undefined && (this.hash = params.hash);

    params.product !== undefined && (this.product = params.product);
    params.vendor !== undefined && (this.vendor = params.vendor);
    params.app !== undefined && (this.app = params.app);
    params.subApp !== undefined && (this.subApp = params.subApp);
    params.workspace !== undefined && (this.workspace = params.workspace);
    params.tid !== undefined && (this.tid = params.tid);
    params.awid !== undefined && (this.awid = params.awid);
    params.useCase !== undefined && (this.useCase = params.useCase);

    return this;
  }

  toString() {
    return this._uu5Url.toString();
  }

  _getPathNameParser() {
    let parser = this._uu5Url.pathName.match(
      /^(([a-zA-Z0-9_]{1,32})-([a-zA-Z0-9_]{1,32})(?:-([a-zA-Z0-9_]{1,32}))?)\/((?:([a-zA-Z0-9_]{1,32})-)?([a-zA-Z0-9_]{1,32}))(?:\/([\w\.\-~\/]*))?$/
    );
    let result = {};

    if (parser) {
      result = {
        product: parser[1],
        vendor: parser[2],
        app: parser[3],
        subApp: parser[4],
        workspace: parser[5],
        tid: parser[6],
        awid: parser[7],
        useCase: parser[8]
      };
    }

    return result;
  }

  _setPathName(opt) {
    let parser = this._getPathNameParser();
    let result = "";

    result +=
      opt.product || [opt.vendor || parser.vendor, opt.app || parser.app, opt.subApp || parser.subApp].join("-");
    result += "/" + (opt.workspace || [opt.tid || parser.tid, opt.awid || parser.awid].filter(Boolean).join("-"));
    result += "/" + (opt.useCase || parser.useCase);

    this._uu5Url.pathName = result;

    return this;
  }
}

export default Url;
