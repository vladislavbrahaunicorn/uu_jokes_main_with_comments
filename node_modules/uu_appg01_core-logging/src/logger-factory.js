"use strict";

const Logger = require("./logger.js");
const { BaseError, Config } = require("uu_appg01_core-utils");

const loggers = {};

/**
 * @class UuApp.Logging.LoggerFactory
 * @classdesc
 * Factory class for getting access to loggers. See {@link UuApp.Logging.Logger Logger} for more information.
 */

/**
 * Returns an instance of the logger with given name. Settings of the logger are
 * taken from global configuration (see {@link UuApp.Util.Config.init Config.init}).
 * Default global logLevel is Logger.{@link UuApp.Logging.Logger.LEVEL_WARN LEVEL_WARN}.
 *
 * Successive calls with the same logger name return the same logger instance.
 *
 * @param {string} name The name of the logger. Typically, it's a fully-qualified name of
 *   the component that uses the logger, e.g. "My.Namespace.Component".
 * @param {boolean} hierarchical Whether the logger shall inherit settings from its parent
 *   package names, e.g. whether logger with name "My.Namespace" should inherit logLevel from "My"
 *   or from root (hierarchical = true, default) or only settings directly for "My.Namespace" apply
 *   (hierarchical = false). The parameter is used only during 1st invocation for given logger name,
 *   in successive calls it's ignored.
 * @return {UuApp.Logging.Logger} An instance of the logger with given name.
 * @method UuApp.Logging.LoggerFactory.get
 */
class LoggerFactory {
  static get(name, hierarchical = true) {
    if (typeof name != "string") {
      throw new BaseError("LoggerFactory.get() must be called with a string argument (logger name).");
    }
    let cname = name.toLowerCase();
    if (loggers[cname]) {
      return loggers[cname].logger;
    } else {
      let logger = new Logger(name);
      LoggerFactory.configure(logger, hierarchical);
      loggers[cname] = { logger: logger, hierarchical: hierarchical };
      return logger;
    }
  }

  static configure(logger, hierarchical) {
    let cname = logger
      .getName()
      .toString()
      .toLowerCase();
    let logSeverityLabels = Config.get(cname + ".log_severity_labels", hierarchical !== false);
    let logMessageFormat = Config.get(cname + ".log_message_format", hierarchical !== false);
    let logErrorFormat = Config.get(cname + ".log_error_format", hierarchical !== false);
    let logCauseFormat = Config.get(cname + ".log_cause_format", hierarchical !== false);
    let logLevel = Config.get(cname + ".log_level", hierarchical !== false);
    logger.setSeverityLabels(logSeverityLabels);
    logger.setMessageFormat(logMessageFormat);
    logger.setErrorFormat(logErrorFormat);
    logger.setCauseFormat(logCauseFormat);
    logger.setLevel(logLevel);
  }

  static configureAll() {
    Object.keys(loggers).map(function(name) {
      let reg = loggers[name];
      LoggerFactory.configure(reg.logger, reg.hirearchical);
    });
  }
}

module.exports = LoggerFactory;
