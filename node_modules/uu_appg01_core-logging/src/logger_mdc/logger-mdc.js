"use strict";

const { ContextStore } = require("uu_appg01_core-utils");

// environment specific implementations
const { getFactory, setFactory } = require("./get-set.js");

const CTX_STORE_NAME = "uuapp.logging";
const MDC_KEY = "mdc";

/**
 * Mapped diagnostic context.
 */
class LoggerMDC {
  /**
   * Initializes MDC
   * @param emitters Context emitters.
   * @param fn Function within which should be MDC available
   * @returns {*} Return value of invoked function.
   */
  static create(emitters = null, fn) {
    if (typeof emitters === "function") {
      fn = emitters;
      emitters = null;
    }
    return ContextStore.create(CTX_STORE_NAME, () => {
      let ctxStore = ContextStore.get(CTX_STORE_NAME);
      if (emitters) {
        emitters.forEach(e => ctxStore.bindEmitter(e));
      }
      return fn();
    });
  }

  /**
   * Stores context attribute.
   * @param key Context attribute name.
   * @param value Context attribute value.
   */
  static set(key, value) {
    // implementation available in get-set.js
    // due to environment differences
  }

  /**
   * Reads value of context attribute.
   * @param key Context attribute name.
   * @returns {*} Context attribute value.
   */
  static get(key) {
    // implementation available in get-set.js
    // due to environment differences
  }

  /**
   * Clears MDC in current context.
   */
  static clear() {
    let store = ContextStore.get(CTX_STORE_NAME);
    if (store) {
      store.set(MDC_KEY, {});
    }
  }

  /**
   * Serializes current state of MDC to JSON.
   * @returns {string} Serialized MDC
   */
  static toJson() {
    let store = ContextStore.get(CTX_STORE_NAME);
    if (store) {
      let mdc = store.get(MDC_KEY);
      if (mdc) {
        return JSON.stringify(mdc);
      }
    }
    return "{}";
  }
}

// remapping environment specific methods
LoggerMDC.set = setFactory(ContextStore, CTX_STORE_NAME, MDC_KEY);
LoggerMDC.get = getFactory(ContextStore, CTX_STORE_NAME, MDC_KEY);

module.exports = LoggerMDC;
