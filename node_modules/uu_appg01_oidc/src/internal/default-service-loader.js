"use strict";

const {Config, BaseError} = require("uu_appg01_core-utils");
const {AuthenticationService} = require("uu_appg01_core-authentication");

const BASE_CONFIG_PREFIX = "uu_app_oidc_providers_";
const DEFAULT_SERVICE_NAME = "oidcg01";
const DEFAULT_LEGACY_SERVICE_NAME = "uu_oidcg01_main";
const PRIMARY_PROVIDER_CFG = "uu_app_oidc_primary_provider";
const ALLOW_AUDIENCE_ALIAS_CFG = "uu_app_oidc_allow_audience_alias";

const OIDCG01_SERVICE_NAME = DEFAULT_SERVICE_NAME;
const OIDCG01_SERVICE_ENABLED = true;
const OIDCG01_SERVICE_BASE_URI = "https://oidc.plus4u.net/uu-oidcg01-main";
const OIDCG01_TENANT = "99923616732452117-4f06dafc03cb4c7f8c155aa53f0e86be";
const OIDCG01_VERIFY_AUDIENCE = false;
const OIDCG01_ACCESS_TOKEN_PATTERN = "^UUOIDCAT-.*";
const OIDCG01_REFRESH_TOKEN_PATTERN = "^UUOIDCRT-.*";

const OIDCG02_SERVICE_NAME = "oidcg02";
const OIDCG02_SERVICE_ENABLED = true;
const OIDCG02_SERVICE_URI = "https://uuidentity.plus4u.net/uu-oidc-maing02/bb977a99f4cc4c37a2afce3fd599d0a7/oidc";
const OIDCG02_VERIFY_AUDIENCE = true;
const OIDCG02_ACCESS_TOKEN_PATTERN = "^at.*";
const OIDCG02_REFRESH_TOKEN_PATTERN = "^rt.*";

class DefaultServiceLoader {

  static load(serviceClass, reconfigure = true) {
    if (reconfigure) {
      Object.keys(serviceClass._providers).forEach(name => {
        delete AuthenticationService._realizations[name];
      });
      delete AuthenticationService._realizations[DEFAULT_LEGACY_SERVICE_NAME];
      serviceClass._providers = {};
      serviceClass._primaryProvider = null;
    }
    // Declare default services (which will be also first to try)
    // Defaults to implicit configuration of uuOidcg01 and uuOidcg02
    this.loadOidcg01(serviceClass, reconfigure);
    this.loadOidcg02(serviceClass, reconfigure);
    // Register additional services based on configuration
    let configObject = null;
    if (typeof window == "undefined") {
      configObject = Config.toJSON();
    } else {
      // Workaround for IE where it is not possible to serialize UU5.Environment
      // into JSON (which is internally used for deep copy of configuration)
      // due to incompatible types (like regular expression) in configuration.
      // Since on browser the only configuration source is UUE.Environment
      // we can directly use its config source.
      let uu5EnvSource = Config.chain._sources[0];
      configObject = Object.assign(uu5EnvSource ? uu5EnvSource._data : {}, Config.chain._custom);
    }
    let keys = Object.keys(configObject);
    for (let i = 0; i < keys.length; i += 1) {
      let key = keys[i];
      let value = configObject[key];

      let matchResult = new RegExp(`^${BASE_CONFIG_PREFIX}(.*)_uri$`).exec(key);
      if (!matchResult) {
        continue;
      }

      let serviceName = matchResult[1];
      let configPrefix = `${BASE_CONFIG_PREFIX}${serviceName}`;
      if (serviceName === OIDCG01_SERVICE_NAME || serviceName === OIDCG02_SERVICE_NAME) {
        continue;
      }
      let enabled = Config.getBoolean(`${configPrefix}_enabled`, false);
      if (typeof enabled === "boolean" && !enabled) {
        continue;
      }
      serviceName = Config.getString(`${configPrefix}_name`, false) || serviceName;
      let opts = {
        serviceUri: value,
        verifySsl: Config.getBoolean(`${configPrefix}_verify_ssl`, false),
        accessTokenPattern: Config.getString(`${configPrefix}_access_token_pattern`, false),
        refreshTokenPattern: Config.getString(`${configPrefix}_refresh_token_pattern`, false),
        verifyAudience: Config.getBoolean(`${configPrefix}_verify_audience`, false),
        allowAudienceAlias: Config.getBoolean(ALLOW_AUDIENCE_ALIAS_CFG, false),
        tokenCacheSize: Config.getNumber(`${configPrefix}_token_cache_size`, false),
        tokenTimeLeeway: Config.getNumber(`${configPrefix}_token_time_leeway`, false),
        discoveryPath: Config.getNumber(`${configPrefix}_discovery_path`, false),
        discoveryCacheTtl: Config.getNumber(`${configPrefix}_discovery_cache_ttl`, false),
        jwksCacheTtl: Config.getNumber(`${configPrefix}_jwks_cache_ttl`, false),
        defaultScope: Config.getString(`${configPrefix}_default_scope`, false),
        perflogEnabled: Config.getBoolean(`${configPrefix}_perflog_enabled`, false),
        force: reconfigure
      };
      serviceClass.create(serviceName, opts);
    }
    let primaryProvider = Config.getString(PRIMARY_PROVIDER_CFG, false);
    if (primaryProvider) {
      if (!serviceClass._providers[primaryProvider]) {
        throw new BaseError(`Cannot set primary provider to ${primaryProvider}. Service does not exits or is not enabled.`)
      }
      serviceClass._primaryProvider = primaryProvider;
    }
  }

  /**
   * Loads uuOIDCg01
   */
  static loadOidcg01(serviceClass, force = false) {
    let configPrefix = `${BASE_CONFIG_PREFIX}${OIDCG01_SERVICE_NAME}`;
    let enabled = Config.getBoolean(`${configPrefix}_enabled`, false);
    if (typeof enabled !== "boolean") {
      enabled = OIDCG01_SERVICE_ENABLED;
    }
    if (!enabled) {
      return;
    }

    // Default service configuration might be overridden
    //(Try to load also legacy configuration params to maintain backward compatibility)
    let serviceUri = Config.getString(`${configPrefix}_uri`, false);
    if (!serviceUri) {
      serviceUri = Config.getString("uu_oidc_server_uri", false);
      if (!serviceUri) {
        serviceUri = Config.getString("uuoidc.serverUri", false);
        if (!serviceUri) {
          let tenant = Config.getString("uu_oidc_server_tenant_id", false);
          serviceUri = `${OIDCG01_SERVICE_BASE_URI}/${tenant ? tenant : OIDCG01_TENANT}`;
        }
      }
    }
    let verifySsl = Config.getBoolean(`${configPrefix}_verify_ssl`, false);
    if (verifySsl == null) {
      verifySsl = Config.getNumber("uu_oidc_client_ssl_verify_mode") !== 0;
    }
    let verifyAudience = Config.getBoolean(`${configPrefix}_verify_audience`, false);
    if (verifyAudience == null) {
      verifyAudience = Config.getBoolean("uu_oidc_session_verify_audience", false);
      if (verifyAudience == null) {
        verifyAudience = OIDCG01_VERIFY_AUDIENCE;
      }
    }
    let opts = {
      force,
      serviceUri: serviceUri,
      verifySsl: verifySsl,
      verifyAudience: verifyAudience,
      allowAudienceAlias: Config.getBoolean(ALLOW_AUDIENCE_ALIAS_CFG, false),
      accessTokenPattern: Config.getString(`${configPrefix}_access_token_pattern`, false) || OIDCG01_ACCESS_TOKEN_PATTERN,
      refreshTokenPattern: Config.getString(`${configPrefix}_refresh_token_pattern`, false) || OIDCG01_REFRESH_TOKEN_PATTERN,
      tokenCacheSize: Config.getNumber(`${configPrefix}_token_cache_size`, false),
      tokenTimeLeeway: Config.getNumber(`${configPrefix}_token_time_leeway`, false),
      discoveryCacheTtl: Config.getNumber(`${configPrefix}_discovery_cache_ttl`, false),
      jwksCacheTtl: Config.getNumber(`${configPrefix}_jwks_cache_ttl`, false),
      defaultScope: Config.getString(`${configPrefix}_default_scope`, false),
      perflogEnabled: Config.getBoolean(`${configPrefix}_perflog_enabled`, false)
    };

    serviceClass.create(OIDCG01_SERVICE_NAME, opts);
  }

  static loadOidcg02(serviceClass, force = false) {
    let configPrefix = `${BASE_CONFIG_PREFIX}${OIDCG02_SERVICE_NAME}`;
    let enabled = Config.getBoolean(`${configPrefix}_enabled`, false);
    if (typeof enabled !== "boolean") {
      enabled = OIDCG02_SERVICE_ENABLED;
    }
    if (!enabled) {
      return;
    }

    let serviceUri = Config.getString(`${configPrefix}_uri`, false);
    let verifyAudience = Config.getBoolean(`${configPrefix}_verify_audience`, false);
    if (verifyAudience === null || verifyAudience === undefined) {
      verifyAudience = OIDCG02_VERIFY_AUDIENCE;
    }
    let opts = {
      force,
      serviceUri: serviceUri || OIDCG02_SERVICE_URI,
      verifySsl: Config.getBoolean(`${configPrefix}_verify_ssl`, false),
      accessTokenPattern: Config.getString(`${configPrefix}_access_token_pattern`, false) || OIDCG02_ACCESS_TOKEN_PATTERN,
      refreshTokenPattern: Config.getString(`${configPrefix}_refresh_token_pattern`, false) || OIDCG02_REFRESH_TOKEN_PATTERN,
      verifyAudience: verifyAudience,
      allowAudienceAlias: Config.getBoolean(ALLOW_AUDIENCE_ALIAS_CFG, false),
      tokenCacheSize: Config.getNumber(`${configPrefix}_token_cache_size`, false),
      tokenTimeLeeway: Config.getNumber(`${configPrefix}_token_time_leeway`, false),
      discoveryCacheTtl: Config.getNumber(`${configPrefix}_discovery_cache_ttl`, false),
      jwksCacheTtl: Config.getNumber(`${configPrefix}_jwks_cache_ttl`, false),
      defaultScope: Config.getString(`${configPrefix}_default_scope`, false),
      perflogEnabled: Config.getBoolean(`${configPrefix}_perflog_enabled`, false)
    };

    serviceClass.create(OIDCG02_SERVICE_NAME, opts);
  }
}

module.exports = DefaultServiceLoader;
