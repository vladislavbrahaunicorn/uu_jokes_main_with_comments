"use strict";

const {AppClient} = require("uu_appg01_core-appclient");
const {BaseError} = require("uu_appg01_core-utils");
const {PerflogHandler, RemoteErrorHandler, TransformParametersHandler} = require("uu_appg01_core-appclient");
const Cache = require("./persistent-cache.js");

const APP_CLIENT_INTERCEPTORS = [PerflogHandler, RemoteErrorHandler, TransformParametersHandler];
const APP_CLIENT_INTERCEPTORS_NO_PERFLOG = [RemoteErrorHandler, TransformParametersHandler];

const OIDC_WELL_KNOWN_DISCOVERY_PATH = ".well-known/openid-configuration";
const DISCOVERY_CACHE_SIZE = 16;
const DEFAULT_DISCOVERY_CACHE_TTL = 60 * 60;

const DISCOVERY_CACHE = new Cache("discovery", {maxSize: DISCOVERY_CACHE_SIZE});

class Discovery {

  constructor(serviceUri, opts = {}) {
    if (!serviceUri) {
      throw new BaseError("Service URI must be defined");
    }
    let discoveryPath = opts.discoveryPath || OIDC_WELL_KNOWN_DISCOVERY_PATH;
    this._discoveryUri = `${serviceUri}/${discoveryPath.replace(/^\//, "")}`;
    this._discoveryCacheTtl = (opts.discoveryCacheTtl ? Number(opts.discoveryCacheTtl) : DEFAULT_DISCOVERY_CACHE_TTL) * 1000;
    let perflogEnabled = (typeof opts.perflogEnabled === "boolean") ? opts.perflogEnabled : true;
    let interceptors = perflogEnabled ? APP_CLIENT_INTERCEPTORS : APP_CLIENT_INTERCEPTORS_NO_PERFLOG;
    this._client = new AppClient(Object.assign(opts, {interceptors}));
  }

  async getMetadata(refresh = false) {
    let metadata = DISCOVERY_CACHE.get(this._discoveryUri);
    if (!metadata || refresh) {
      let result = await this._client.get(this._discoveryUri);
      metadata = result.data;
      DISCOVERY_CACHE.set(this._discoveryUri, metadata, this._discoveryCacheTtl);
    }
    return metadata;
  }
}

module.exports = Discovery;
