"use strict";

const {UriBuilder} = require("uu_appg01_core-uri");
const {BaseError} = require("uu_appg01_core-utils");
const Discovery = require("./discovery.js");
const http = require("http");
const url = require("url");
const opn = require("opn");
const {ContextStore} = require("uu_appg01_core-utils");
let UseCaseContext = null;
try {
  UseCaseContext = require("uu_appg01_core-appserver").UseCaseContext;
} catch (e) {
  UseCaseContext = null;
}

const OIDC_SHOW_ACESS_TOKEN_CODE_PATH = "showAccessTokenCode";
const OAUTH_CODE = "code";
const OAUTH_REDIRECT_URI = "redirect_uri";
const OAUTH_CLIENT_ID = "client_id";
const OAUTH_SCOPE = "scope";
const OAUTH_SCOPE_OPENID = "openid";
const OAUTH_RESPONSE_TYPE = "response_type";
const OAUTH_RESPONSE_TYPE_CODE = "code";
const OAUTH_ACR_VALUES = "acr_values";

class OAuthCode {

  constructor(serviceUri, opts = {}) {
    if (!serviceUri) {
      throw new BaseError("Service URI must be defined");
    }
    this._discovery = new Discovery(serviceUri, opts);
  }

  isSupported() {
    // Disable interactive login within request on app server
    return !(UseCaseContext && ContextStore.get("uuapp.server.endpoint"));
  }

  async get(clientId, scope = null) {
    // TODO Add some timeout for user login in browser
    // TODO Stop server in case browser cannot be opened
    let metadata = await this._discovery.getMetadata();
    return await new Promise(async (resolve, reject) => {
      // Start local server to handle auth callback
      let server = http.createServer((req, res) => {
        let query = url.parse(req.url, true).query;
        let code = query[OAUTH_CODE];
        let redirectUri = UriBuilder.parse(metadata.issuer);
        redirectUri.setUseCase(OIDC_SHOW_ACESS_TOKEN_CODE_PATH);
        if (code) {
          resolve({code: code, redirect_uri: `http://localhost:${server.address().port}`});
          redirectUri.setParameter(OAUTH_CODE, code);
          redirectUri.setParameter("message", "Access Token Code accepted by Client.");
          redirectUri.setParameter("close_page", "now");
          res.writeHead(302, {Location: redirectUri.toString()});
        } else {
          reject(new Error("No access token code returned from OIDC server."));
          redirectUri.setParameter("error", "No access token code returned from OIDC server.");
          res.writeHead(302, {Location: redirectUri.toString()});
        }
        res.end(() => {
          // Close server after response is handled
          server.close();
        });
      });
      server.listen(0);
      // Open browser to initialize auth process
      let redirectUri = `http://localhost:${server.address().port}`;
      let authzUri = await this.getAuthorizationUri(redirectUri, clientId, 1, scope);
      opn(authzUri);
    });
  }

  async getAuthorizationUri(redirectUri, clientId, acrValues, scope = null) {
    let metadata = await this._discovery.getMetadata();
    let authzUri = `${metadata.authorization_endpoint}?`;
    authzUri += `${OAUTH_RESPONSE_TYPE}=${OAUTH_RESPONSE_TYPE_CODE}&`;
    authzUri += `${OAUTH_REDIRECT_URI}=${encodeURIComponent(redirectUri)}&`;
    authzUri += `${OAUTH_CLIENT_ID}=${encodeURIComponent(clientId)}&`;
    if (Array.isArray(scope)) {
      scope = `${OAUTH_SCOPE_OPENID} ${scope.join(" ")}`;
    } else if (scope) {
      scope = `${OAUTH_SCOPE_OPENID} ${scope}`;
    } else {
      scope = OAUTH_SCOPE_OPENID;
    }
    authzUri += `${OAUTH_SCOPE}=${encodeURIComponent(scope)}`;
    if (acrValues) {
      let suportedValeus = metadata.acr_values_supported || [];
      let requestedValues = acrValues.toString().split(" ");
      let transformedValues = [];
      requestedValues.forEach(requestedValue => {
        if (suportedValeus.includes(requestedValue)) {
          transformedValues.push(requestedValue);
        } else {
          requestedValue = Number(requestedValue);
          if (suportedValeus.includes(requestedValue)) {
            transformedValues.push(requestedValue);
          } else {
            transformedValues.push(suportedValeus[requestedValue]);
          }
        }
      });
      transformedValues = transformedValues.filter(p => (p == null ? false : true));
      if (transformedValues.length > 0) {
        authzUri += `&${OAUTH_ACR_VALUES}=${encodeURIComponent(transformedValues.join(" "))}`;
      }
    }
    return authzUri;
  }

}

module.exports = OAuthCode;
