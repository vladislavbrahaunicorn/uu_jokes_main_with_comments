"use strict";

// polyfills for IE
if (!String.prototype.startsWith) {
  Object.defineProperty(String.prototype, 'startsWith', {
    value: function(search, pos) {
      pos = !pos || pos < 0 ? 0 : +pos;
      return this.substring(pos, pos + search.length) === search;
    }
  });
}

// FIXME Copy&pasted src/index.js because following doesn't work (cyclic warning):
// module.exports = require("../index.server.js"); // with "../index.server.js" remapped back to src/index.js in package.json ("browser" field)
let sessionWrapped = false;
module.exports = {
  get AuthenticationService() {
    return require("../authentication-service.js");
  },
  get Session() {
    let Session = require("../session.js");
    if (!sessionWrapped) {
      sessionWrapped = true;
      require("./internal/oidcg01-session-wrapper.js").wrapClass(Session, module.exports.AuthenticationService);
    }
    return Session;
  },
  // Legacy names for backward compatibility with uu_oidcg01
  get OidcAuthenticationService() {
    return this.AuthenticationService;
  },
  get OidcSession() {
    return this.Session;
  }
};

// export to legacy variable too
if (!window.UuOidc) window.UuOidc = { Session: module.exports.Session };

// bootstrap in browser
// extract access_token parameter and mask it in current URL (so that user does
// not accidentally copy&paste it to somebody else)
let callToken;
if (window.history && window.history.replaceState) {
  let accessTokenMatch = location.href.match(/[?&]?access_token=([^&#]+)/);
  if (accessTokenMatch) {
    callToken = accessTokenMatch[1];
    try {
      // NOTE Can't use native URL API because of IE 11...
      var maskedUrl = location.href.replace(/([?&])access_token=[^&#]*(&)?/, (m, g1, g2) => (g2 ? g1 : ""));
      if (maskedUrl !== location.href) {
        history.replaceState(history.state, "", maskedUrl);
      }
    } catch (e) {
      // replacing state can fail - ignore in such case (e.g. when in <iframe srcdoc="..."></iframe>)
    }
  }
}

// Initialize authentication service in order for interactive authentication to work
// (wait until DOM is ready because we need BODY element to be present due to how implicit flow works)
let domReadyPromise;
if (document.readyState === "interactive" || document.readyState === "complete") {
  domReadyPromise = Promise.resolve();
} else {
  domReadyPromise = new Promise(resolve => {
    document.addEventListener("DOMContentLoaded", resolve, false);
  });
}
domReadyPromise.then(() => {
  module.exports.AuthenticationService._onPageLoad(callToken);
});
