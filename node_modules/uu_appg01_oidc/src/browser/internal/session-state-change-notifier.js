"use strict";

const { LoggerFactory } = require("uu_appg01_core-logging");

class SessionStateChangeNotifier {

  constructor(authnFlow, sessionCheckInterval, clientId, getSessionStateFn) {
    this._authnFlow = authnFlow;
    this._enabled = true;
    this._sessionCheckInterval = sessionCheckInterval;
    this._clientId = clientId;
    this._getSessionStateFn = getSessionStateFn;

    this._listeners = [];
    this._unknownStateListeners = [];
    this._notifyUnknownState = true;
    this._logger = LoggerFactory.get("uuapp.oidc.internal.SessionStateChangeNotifier");
    // start checking
    this._stateCheckInterval = setInterval(this._checkState.bind(this), this._sessionCheckInterval * 1000);
  }

  enable() {
    this._enabled = true;
  }

  disable() {
    this._enabled = false;
  }

  onStateChange(listenerFn) {
    this._listeners.push(listenerFn);
    return () => { // return function for unregistering
      var idx = this._listeners.indexOf(listenerFn);
      if (idx != -1) this._listeners.splice(idx, 1);
      return idx != -1;
    };
  }

  onStateUnknown(listenerFn) {
    this._unknownStateListeners.push(listenerFn);
    return () => { // return function for unregistering
      var idx = this._unknownStateListeners.indexOf(listenerFn);
      if (idx != -1) this._unknownStateListeners.splice(idx, 1);
      return idx != -1;
    };
  }

  destroy() {
    if (this._destroyed) return;
    this._destroyed = true;
    if (this._stateCheckInterval) clearInterval(this._stateCheckInterval);
    delete this._stateCheckInterval;
    this._listeners = [];
    this._unknownStateListeners = [];
    this._notifyUnknownState = true;
  }

  async _checkState() {
    if (!this._enabled) {
      return;
    }
    let sessionState = this._getSessionStateFn();
    // skip if:
    // a) we have no session state (and we don't really need to get info that the user became logged in due to login in different tab)
    // b) unknown session state (e.g. current token was provided directly, instead of via login in browser tab)
    if (!sessionState) {
      return;
    }

    let query = this._clientId + " " + sessionState;
    this._logger.debug(`Checking session state.`);
    let sessionStateResult = await this._authnFlow.checkSession(query);
    if (sessionStateResult === "changed") {
      this._logger.debug(`Received session state change notification (message: '${sessionStateResult}').`);
      this._notifyUnknownState = true;
      this._listeners.forEach(fn => fn());
    } else if (sessionStateResult === "unknown") {
      this._logger.debug(`Received session state change notification (message: '${sessionStateResult}').`);
      if (this._notifyUnknownState) {
        this._logger.debug(`Propagating info about '${sessionStateResult}' session state.`);
        this._unknownStateListeners.forEach(fn => fn());
        this._notifyUnknownState = false;
      }
    } else {
      this._notifyUnknownState = true;
    }
  }

}

module.exports = SessionStateChangeNotifier;
