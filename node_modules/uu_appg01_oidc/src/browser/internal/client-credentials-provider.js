"use strict";

const {Config, BaseError} = require("uu_appg01_core-utils");
const {AppClient, PerflogHandler, RemoteErrorHandler, TransformParametersHandler, ApplicationError} = require("uu_appg01_core-appclient");
const Cache = require("../../internal/persistent-cache.js");
const Digest = require("../../internal/digest.js");
const SyncCallNotPossible = require("../../internal/sync-call-not-possible.js");

const BASE_ELEMENT = document.querySelector("base");
const APP_BASE_URI = location.protocol + "//" + location.host + (BASE_ELEMENT && BASE_ELEMENT.getAttribute("data-uu-app-base")) || "/";
const APP_CLIENT_INTERCEPTORS = [PerflogHandler, RemoteErrorHandler, TransformParametersHandler];

const CLIENT_ID_CACHE_SIZE = 256;
const CLIENT_ID_CACHE_TTL = 60 * 60 * 1000;
const CLIENT_ID_CACHE = new Cache("client_id", {maxSize: CLIENT_ID_CACHE_SIZE, maxAge: CLIENT_ID_CACHE_TTL});

const CONFIG_PREFIX = "uu_app_oidc_providers_";
const UNREGISTERED_CLIENT_ID_PREFIX = "uu-oidc:unregistered-client:";

// TODO Generate default client name based on fingerprint
const DEFAULT_CLIENT_NAME = Math.random().toString(16).substring(2, 10);

/**
 * Browser implementation of client credentials provider allowing of
 * dynamically loading client credentials (client_id) from backend.
 */
class ClientCredentialsProvider {

  /**
   * Returns OIDC client credentials for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static async getClientCredentials(serviceName) {
    let cacheKey = Digest.sha1(`${APP_BASE_URI}:${serviceName}`);
    let clientId = CLIENT_ID_CACHE.get(cacheKey);
    if (!clientId) {
      if (Config.getBoolean("uu_app_oidc_backend_available")) {
        // Try to read client credentials from backend
        // (possible in case backend is using uu_appg01_oidc library)
        let result = null;
        try {
          let dtoIn = {serviceName: serviceName};
          let opts = {interceptors: APP_CLIENT_INTERCEPTORS};
          result = await AppClient.get(`${APP_BASE_URI}oidc/getClientId`, dtoIn, opts);
          clientId = result.data.clientId;
        } catch (e) {
          if (e instanceof ApplicationError && e.status === 404) {
            // We are probably using legacy backend without new endpoint.
          } else {
            throw e;
          }
        }
      }
      // If not provided by server, read client_id from configuration
      let clientCredentials;
      if (!clientId && (clientCredentials = Config.get(`${CONFIG_PREFIX}${serviceName}_client_credentials`))) {
        clientId = clientCredentials.client_id || clientCredentials.clientId;
      }
      if (!clientId) {
        // Configuration which might be propagated from older java backend library
        clientId = Config.get(`${CONFIG_PREFIX}${serviceName}_client_id`)
      }
      if (!clientId) {
        // Read client_id from legacy configuration
        clientId = Config.get("uuoidc.clientId");
      }
      if (!clientId) {
        // Provide default credentials of unregistered client
        clientId = Config.get(`${CONFIG_PREFIX}${serviceName}_unregistered_client_id`) || `${UNREGISTERED_CLIENT_ID_PREFIX}${DEFAULT_CLIENT_NAME}`;
      }
      CLIENT_ID_CACHE.set(cacheKey, clientId);
    }
    // Static cache is used to allow eviction of standard cache while
    // allow calling of getClientCredentialsSync in case cache was
    // evicted between asynchronous and synchronous invocation.
    this._clientIds[cacheKey] = clientId;
    return {client_id: clientId, client_secret: null};
  }

  /**
   * Returns OIDC client credentials for given service.
   * @param serviceName Name of registered authentication service.
   * @returns {Object} Client credentials
   */
  static getClientCredentialsSync(serviceName) {
    let cacheKey = Digest.sha1(`${APP_BASE_URI}:${serviceName}`);
    let clientId = this._clientIds[cacheKey];
    if (!clientId) {
      throw new SyncCallNotPossible("Asynchronous method getClientCredentials must be invoked prior to synchronous invocation");
    }
    return {client_id: clientId, client_secret: null};
  }

}

// Static "cache" for sync method
ClientCredentialsProvider._clientIds = {};

module.exports = ClientCredentialsProvider;
