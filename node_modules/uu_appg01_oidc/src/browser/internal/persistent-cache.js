"use strict";

const Cache = require("../../internal/cache.js");

/**
 * Frontend implementation of persistent case using
 * browser local store to keep data across reloads.
 */
class PersistentCache extends Cache {

  /**
   * Creates new instance of cache.
   * @param name Cache name (for identification in persistent store)
   * @param {Object|null} opts Cache options
   * @param {number} opts.maxSize Maximal number of items to be stored
   * @param {number} opts.maxAge How long (in milliseconds) should items be stored
   */
  constructor(name, opts = {}) {
    super(opts);
    this._name = `uu_app_oidc_cache_${name}`;
    let existing = localStorage.getItem(this._name);
    if (existing) {
      this.fromJSON(existing);
    }
    localStorage.setItem(this._name, JSON.stringify(this));
  }

  /**
   * Stores value into cache.
   * @param key Key to access cached value
   * @param value Value to be cached
   * @param maxAge How long (in milliseconds) should item be stored (available only if global maxAge is set)
   * @returns {*} Value previously stored under this key (or null if none)
   */
  set(key, value, maxAge = null) {
    this.fromJSON(localStorage.getItem(this._name));
    let result = super.set(key, value, maxAge);
    localStorage.setItem(this._name, JSON.stringify(this));
    return result;
  }

  /**
   * Returns value from cache.
   * @param key Key of cached value
   * @returns {*} Cached value (or null)
   */
  get(key) {
    this.fromJSON(localStorage.getItem(this._name));
    let result = super.get(key);
    localStorage.setItem(this._name, JSON.stringify(this));
    return result;
  }

  /**
   * Deletes value from cache.
   * @param key Key of cached value
   * @returns {*} Cached value (or null)
   */
  delete(key) {
    this.fromJSON(localStorage.getItem(this._name));
    let result = super.delete(key);
    localStorage.setItem(this._name, JSON.stringify(this));
    return result;
  }

  /**
   * Clears cache.
   */
  clear() {
    let result = super.clear();
    localStorage.setItem(this._name, JSON.stringify(this));
    return result;
  }

}

module.exports = PersistentCache;
