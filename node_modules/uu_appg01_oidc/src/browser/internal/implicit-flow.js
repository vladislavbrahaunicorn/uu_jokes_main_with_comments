"use strict";

const { AuthenticationError } = require("uu_appg01_core-authentication");
const AbstractAuthzFlow = require("./abstract-authorization-flow.js");

class ImplicitFlow extends AbstractAuthzFlow {

  constructor(oauthClient, serviceName, redirectUri, appBaseUri) {
    super(oauthClient, serviceName, redirectUri);
    this._oauthClient = oauthClient;
    this._serviceName = serviceName;
  }

  authenticate(options, scope = null) {
    let promise = super.authenticate(options, "id_token token", scope);
    let result = promise.then(({ authResponse, state, nonce, scope, acrValues, maxAge, clientId }) => {
      return this._processAuthResponse(authResponse, state, nonce, scope, acrValues, maxAge, clientId);
    });
    result.uiComponent = promise.uiComponent;
    return result;
  }

  /**
   * @param {*} aLoginCallbackResult
   * @returns OpenID Authentication Response with fields such as id_token, token_type, issued_at, ...
   */
  getAuthResponseFromCallback(aLoginCallbackResult) {
    // extract login token
    // example of successful aLoginCallbackResult: "...#access_token=UUOIDCAT-27a13a6e626a40c49e036cbab55f3e27&id_token=eyJ0eXAiOi...&token_type=Bearer&expires_in=7200&scope=openid"
    // example of error aLoginCallbackResult:      "...#error=server_error&error_description=Interaction+required+to+authenticate+user%2C+but+parameter+%27prompt%3Dnone%27+specified+by+client%2C+so+interaction+is+not+possible.&uu_oidc_error_id=047a06f806d1b13-6f55e2af8c2ff99d&uu_oidc_error_code=UU.OIDC-SERVER%2FE000_UNEXPECTED_ERROR"
    let authResponse = {};
    aLoginCallbackResult.replace(/^[^#]*#?/, "").split(/&/).forEach(it => {
      let eqlIdx = it.indexOf("=");
      let key = decodeURIComponent((eqlIdx == -1 ? it.substr(0) : it.substr(0, eqlIdx)).replace(/\+/g, " "));
      let value = decodeURIComponent((eqlIdx == -1 ? "" : it.substr(eqlIdx+1)).replace(/\+/g, " "));
      authResponse[key] = value;
    });
    return authResponse;
  }

  getEndSessionUri() {
    return this._oauthClient.getEndSessionUriSync();
  }

  // ======================== Protected methods ================================

  async _processAuthResponse(authResponse, state, nonce, scope, acrValues, maxAge, clientId) {
    // NOTE Used from Os8Flow too.
    let authResponseTime = Date.now();
    let claims = await this._validateAuthResponse(authResponse, state, nonce);

    let { id_token, access_token, session_expires_in, session_state } = authResponse;
    let globalSessionExpiresAt = session_expires_in ? authResponseTime + 1000 * session_expires_in : null;
    let authenticationContext = sessionStorage.getItem("uu_app_oidc_auth_ctx");
    if (authenticationContext) {
      authenticationContext = JSON.parse(authenticationContext);
      sessionStorage.removeItem("uu_app_oidc_auth_ctx");
    }

    return {
      claims: claims,
      idToken: id_token,
      accessToken: access_token,
      authenticationContext: authenticationContext,
      globalSessionExpiresAt: globalSessionExpiresAt,
      globalSessionState: session_state,
      clientId: clientId,
      scope: scope,
      acrValues: acrValues,
      maxAge: maxAge
    };
  }

  // ======================== Private methods ================================

  async _validateAuthResponse(authResponse, state, nonce) {
    // ImplicitFlow response validation: http://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthResponseValidation
    // 1. process only recognized fields in response (id_token, expires_in, ...)
    // 2. validate implicit flow callback response ("state", expiration)
    // 3. validate id_token with nonce => http://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDTValidation
    //      i. validate as authorization code flow - http://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation
    //     ii. validate signature
    //    iii. validate nonce
    // 4. validate access_token (if present)

    // 2.i. validate state
    if (state && authResponse.state !== state) {
      throw new AuthenticationError("Invalid 'state' in received authorization response. Expected " + state + " but got " + authResponse.state + ". Response: " + JSON.stringify(authResponse));
    }

    // 2.ii. validate expiration
    if (this._isAuthResponseExpired(authResponse)) {
      throw new AuthenticationError("Token expired " + JSON.stringify(authResponse));
    }

    // 3. validate id_token with nonce => http://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDTValidation
    //      i. validate as authorization code flow - http://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation
    //         1. -Decrypt JWE - not supported.
    //         2. +REQUIRED validate 'iss'
    //         3. +REQUIRED validate 'aud'
    //         4. -SHOULD validate multiple 'aud' vs. 'azp'
    //         5. -SHOULD validate 'azp'
    //         6. -REQUIRED <applicable only for token_endpoint, not for implicit flow>
    //         7. -SHOULD validate 'alg' in header vs. 'alg' sent during client registration
    //         8. -REQUIRED <for MAC-based algos> - not supported (we use RSA)
    //         9. +REQUIRED current time < 'exp'
    //        10. +CAN check 'iat'
    //        11. +REQUIRED (for implicit flow) validate nonce
    //        12. -SHOULD check if 'acr' is appropriate
    //        13. -SHOULD check if 'auth_time' was requested.
    //     ii. validate signature
    //    iii. validate nonce

    // FIXME Verify audience 3.i.3.?
    // FIXME Validate iat claim 3.i.10. (send maxAge to Jwt.verify).
    // FIXME Turn on following 2 validations.
    // if (!jwtHeader.alg || !jwtHeader.alg.match(/^RS\d+$/)) throw new Error("Invalid token. Only RSA signature is supported, but token uses algorithm '" + jwtHeader.alg + "'. Token: " + token);
    // var keyType = "RSA";

    // // check algorithm in token (whether it's really supported by the server)
    // var supportedAlgs = metadata.id_token_signing_alg_values_supported || [];
    // if (supportedAlgs.indexOf(jwtHeader.alg) == -1) throw new Error("Invalid token. Token was signed using algorithm '" + jwtHeader.alg + "' but the OIDC server '" + serverUri + "' supports only " + JSON.stringify(supportedAlgs) + ". Token: " + token);

    let claims = await this._oauthClient.parseToken(authResponse.id_token);

    // 3.i.11., 3.iii. validate nonce
    if (nonce && claims.nonce !== nonce) {
      throw new AuthenticationError("Invalid nonce in ID token claims. Expected " + nonce + " but got " + claims.nonce);
    }

    return claims;
  }

  _isAuthResponseExpired(authResponse) {
    var now = new Date().getTime() / 1000;
    var leeway = 60;
    var expired = false;
    if (!authResponse.issued_at) authResponse.issued_at = now;
    if (authResponse.expires_at) expired = expired || (authResponse.expires_at < now - leeway);
    if (authResponse.expires_in && authResponse.issued_at) expired = expired || (Number(authResponse.expires_in) + Number(authResponse.issued_at) < now - leeway);
    return expired;
  }

}

module.exports = ImplicitFlow;
