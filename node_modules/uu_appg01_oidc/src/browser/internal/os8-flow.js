"use strict";

const { AuthenticationError } = require("uu_appg01_core-authentication");
const ClientCredentialsProvider = require("./client-credentials-provider.js");
const ImplicitFlow = require("./implicit-flow.js");

/**
 * Requires os8Token when authenticating, the token is sent to special endpoint and otherwise it's
 * exactly the same as ImplicitFlow.
 */
class Os8Flow extends ImplicitFlow {

  constructor(oauthClient, serviceName, redirectUri) {
    super(oauthClient, serviceName, redirectUri, null);
  }

  async authenticate(options, scope = null) {
    let { os8Token } = options;
    if (!os8Token) throw new AuthenticationError("Authentication using Os8Flow requires option 'os8Token' passed to the authentication call.");

    let clientCredentials = await ClientCredentialsProvider.getClientCredentials(this._serviceName);
    let clientId = clientCredentials.client_id;
    let urlParams = {
      subject_token: os8Token,
      response_type: "id_token",
      client_id: clientId,
      redirect_uri: this._redirectUri
    };
    let urlParamsParts = Object.keys(urlParams)
      .filter(k => urlParams[k] != null)
      .map(k => encodeURIComponent(k) + "=" + encodeURIComponent(urlParams[k] + ""));
    let authUri = this._oauthClient.getServiceUri().replace(/\/*$/, "/") + "exchangeOs8Token" + "?" + urlParamsParts.join("&");

    let authResponse = await this.sendRequest(authUri);
    return await this._processAuthResponse(authResponse, null, null, scope, null, null, clientId);
  }

}

module.exports = Os8Flow;
