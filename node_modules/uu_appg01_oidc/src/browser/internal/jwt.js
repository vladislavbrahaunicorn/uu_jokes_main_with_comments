"use strict";

const Base64 = require("../../internal/base64.js");
const {BaseError} = require("uu_appg01_core-utils");
const {KJUR, KEYUTIL} = require("jsrsasign");

class Jwt {

  static async decode(token, opts = {}) {
    opts = opts || {};
    let [header, payload, signature] = token.split('.');
    payload = Base64.urlSafeDecode(payload);
    payload = JSON.parse(payload);
    if (opts.complete === true) {
      header = Base64.urlSafeDecode(header);
      header = JSON.parse(header);
      return {header, payload, signature};
    } else {
      return payload;
    }
  }

  static async verify(token, publicKeyData, opts = {}) {
    opts = opts || {};
    let verifyOpts = {};
    if (opts.algorithms) {
      verifyOpts.alg = Array.isArray(opts.algorithms) ? opts.algorithms : [opts.algorithms];
    }
    if (opts.audience) {
      verifyOpts.aud = Array.isArray(opts.audience) ? opts.audience : [opts.audience];
    }
    if (opts.issuer) {
      verifyOpts.iss = Array.isArray(opts.issuer) ? opts.issuer : [opts.issuer];
    }
    if (opts.subject) {
      verifyOpts.sub = Array.isArray(opts.subject) ? opts.subject : [opts.subject];
    }
    if (opts.clockTolerance) {
      verifyOpts.gracePeriod = opts.clockTolerance;
    }
    let publicKey = KEYUTIL.getKey(publicKeyData);
    let isValid = false;
    try {
      isValid = KJUR.jws.JWS.verifyJWT(token, publicKey, verifyOpts);
    } catch (e) {
      throw new BaseError(`Verification failed: ${e.message || e}`);
    }
    if (!isValid) {
      throw new BaseError("Token is not valid or is expired.");
    }
  }

}

module.exports = Jwt;
