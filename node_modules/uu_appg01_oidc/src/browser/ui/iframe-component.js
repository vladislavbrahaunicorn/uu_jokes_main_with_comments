const CallbackHandler = require("./callback-handler.js");

/**
 * Visual component for attempting user login/logout on a background in an iframe. Usable only for prompt="none" cases.
 * After login/logout initAttrs.onResult(authResultUrl) is called as callback. In case of an error, an error instance
 * is passed to the callback.
 *
 * @param initAttrs.url The URL to be called on OpenID Connect Server for user authentication.
 * @param initAttrs.onResult The callback to call after login/logout finishes.
 * @param initAttrs.timeout Seconds to wait after which consider the attempt unsuccessful, resulting in an error result.
 */
var IframeComponent = function (initAttrs) {
  var attrs = Object.assign({}, initAttrs);
  var state = {
    iframe: null
  };
  Object.defineProperty(state, "loginWindow", {
    get: function () {
      try { // needs try-catch depending on which phase we're being asked (might be during redirect, ..., which can be cross-domain)
        return (state.iframe != null ? state.iframe.contentWindow : null);
      } catch (e) {
        // ignore
      }
      return null;
    }
  });

  // add self to the list of openend loginWindows
  CallbackHandler.registerForCallback(this, state);

  // finalization callback (for this component instance) called after login from redirect_uri page
  this.finalize = function (aLoginResult) {
    // cleanup & do the callback
    this.finalize = function () {};
    this.destroy();
    if (attrs.onResult) attrs.onResult(aLoginResult);
  }.bind(this);

  this.render = function () {
    if (!state.iframe) {
      let callbackError = new Error("Server did not provide expected callback HTML page. Check if requested URL " + attrs.url + " contains proper redirect parameter. If so, look also into network console for possible callback response error.");
      state.iframe = document.createElement("iframe");
      state.iframe.style.cssText = "position: absolute;top: -300px; left: -300px; width: 200px; height: 200px; opacity: 0;";
      state.iframe.src = attrs.url;
      state.iframe.onload = () => this.finalize(callbackError); // proper callback page will perform callback prior to onload event
      state.iframe.onerror = () => this.finalize(callbackError);
      document.body.appendChild(state.iframe);
      if (attrs.timeout) this._timeout = setTimeout(() => {
        this.finalize(new Error("OIDC iframe didn't receive callback within " + attrs.timeout + "s."));
      }, attrs.timeout * 1000);
    }
  };

  this.destroy = function () {
    if (state.iframe && state.iframe.parentNode) state.iframe.parentNode.removeChild(state.iframe);
    this.destroy = function () {};
    if (this._timeout) clearTimeout(this._timeout);
    CallbackHandler.unregisterForCallback(this);
  };
};

module.exports = IframeComponent;
