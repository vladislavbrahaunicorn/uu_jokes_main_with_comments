// login callback handling
var VC_CALLBACK_FN_NAME = "uuOidcCallbackFn"; // !!! Must be in sync with the one in callbacks/oidc-callback.html.

// make sure that callback works correctly even if multiple invocations using visual component below were
// done (e.g. user clicked 2 different buttons for command invocations which each opened a login popup
// and are now displayed both)
if (typeof window != "undefined" && !window[VC_CALLBACK_FN_NAME]) {
  window[VC_CALLBACK_FN_NAME] = function (aLoginResult, aSourceWindow, aAuthCtx) {
    var loginWindows = window[VC_CALLBACK_FN_NAME].loginWindows;
    // received callback from a popup => find out which component is using the source window and notify it
    for (var i = 0; i < loginWindows.length; ++i) {
      var p = loginWindows[i];
      if (p.state.loginWindow == aSourceWindow) {
        if (aAuthCtx) {
          sessionStorage.setItem("uu_app_oidc_auth_ctx", typeof aAuthCtx === "object" ? JSON.stringify(aAuthCtx) : aAuthCtx);
        }
        p.component.finalize(aLoginResult);
        return;
      }
    }
    console.warn("[" + new Date().toISOString() +"]  WARN uuapp.oidc.CallbackHandler: Received unexpected callback from window", aSourceWindow, "Passed result was:", aLoginResult, "Ignoring the callback.");
  };
  window[VC_CALLBACK_FN_NAME].loginWindows = [];
}

module.exports = {
  registerForCallback(component, state) {
    window[VC_CALLBACK_FN_NAME].loginWindows.push({component: component, state: state});
  },

  unregisterForCallback(component) {
    var loginWindows = window[VC_CALLBACK_FN_NAME].loginWindows;
    for (var i=0; i<loginWindows.length; ++i) { // remove self from opened loginWindows
      if (loginWindows[i].component === component) {
        loginWindows.splice(i, 1);
        break;
      }
    }
  }
};
