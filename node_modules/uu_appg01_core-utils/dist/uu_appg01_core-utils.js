/*!
 * Copyright (c) 2019 Unicorn a.s.
 * All rights reserved.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("module"));
	else if(typeof define === 'function' && define.amd)
		define("uu_appg01_core-utils", ["module"], factory);
	else if(typeof exports === 'object')
		exports["uu_appg01_core-utils"] = factory(require("module"));
	else
		root["UuApp"] = root["UuApp"] || {}, root["UuApp"]["Utils"] = factory(root["undefined"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE__2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var mod = __webpack_require__(2);

var isDoc = typeof document !== "undefined";
var uri = ((mod ? mod.uri : isDoc && (document.currentScript || Array.prototype.slice.call(document.getElementsByTagName("script"), -1)[0] || {}).src) || "").toString();
uri = uri.split(/\//).slice(0, -1).join("/") + "/"; // runtime publicPath configuration required for proper linking of styles, background images, ...

var floatingVersion = "/4.0.0/";
if (uri.substr(-floatingVersion.length) === floatingVersion) uri = uri.substr(0, uri.length - floatingVersion.length) + "/4.7.2/";
__webpack_require__.p = uri;
module.exports = __webpack_require__(3);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  get BaseError() {
    return __webpack_require__(4);
  },

  get Config() {
    return __webpack_require__(5);
  },

  get NameConverter() {
    return __webpack_require__(16);
  },

  get Loader() {
    return __webpack_require__(12);
  },

  get ValueConverter() {
    return __webpack_require__(11);
  },

  get OptsReader() {
    return __webpack_require__(17);
  },

  get ContextStore() {
    return __webpack_require__(18);
  },

  get GlobalStore() {
    return __webpack_require__(20);
  },

  get Histogram() {
    return __webpack_require__(22);
  },

  get DuplicateLibraryValidator() {
    return __webpack_require__(23);
  },

  get Finder() {
    return __webpack_require__(24);
  },

  get Digest() {
    return __webpack_require__(25);
  },

  get Mutex() {
    return __webpack_require__(28);
  },

  get LruCache() {
    return __webpack_require__(30);
  },

  get Base64() {
    return __webpack_require__(31);
  }

};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Ancestor of all errors raised by UAF. Extends standard
 * JavaScript error by unique error id, timestamp and also
 * option to provide error cause.
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BaseError = /*#__PURE__*/function (_Error) {
  _inherits(BaseError, _Error);

  var _super = _createSuper(BaseError);

  /**
   * Creates new instance of error
   * @param message Error message
   * @param cause Error cause
   */
  function BaseError(message) {
    var _this;

    var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, BaseError);

    if (message instanceof Error) {
      cause = message;
      message = null;
    }

    _this = _super.call(this, message ? message.toString() : "");
    _this._id = "00000000000000000000000000000000".replace(/0/g, function () {
      return (~~(Math.random() * 16)).toString(16);
    });
    _this._timestamp = new Date();
    _this._cause = cause;
    _this._name = _this.constructor.name;
    return _this;
  }
  /**
   * Returns unique error ID (helps with lookup of error in logs).
   * @returns {string} Unique error ID
   */


  _createClass(BaseError, [{
    key: "id",
    get: function get() {
      return this._id;
    }
    /**
     * Sets error id.
     * @param {string} id error ID
     */
    ,
    set: function set(id) {
      this._id = id;
    }
    /**
     * Returns timestamp of error instantiation (may differ from error log time).
     * @returns {Date} Timestamp of error instantiation
     */

  }, {
    key: "timestamp",
    get: function get() {
      return this._timestamp;
    }
    /**
     * Returns error cause
     * @returns {Error|null} Error cause
     */

  }, {
    key: "cause",
    get: function get() {
      return this._cause;
    }
    /**
     * Sets error cause.
     * @param {Error|null} error Error cause
     */
    ,
    set: function set(error) {
      this._cause = error;
    }
    /**
     * Returns error name
     * @return {string} Error name
     */

  }, {
    key: "name",
    get: function get() {
      return this._name;
    }
  }]);

  return BaseError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

module.exports = BaseError;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, process) {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ConfigSource = __webpack_require__(8);

var ConfigChain = __webpack_require__(10);

if (typeof window == "undefined") {
  var DupValidator = __webpack_require__(13);

  DupValidator.ensureSingleVersion(module);

  var path = __webpack_require__(14);

  var fs = __webpack_require__(9);

  var os = __webpack_require__(15);
}
/**
 * Main class for working with configuration (reading, updating, source registration)
 */


var Config = /*#__PURE__*/function () {
  function Config() {
    _classCallCheck(this, Config);
  }

  _createClass(Config, null, [{
    key: "registerImplicitSource",

    /**
     * Allows to provide default configuration of library or application.
     * @param {string|RegExp|Object} source
     */
    value: function registerImplicitSource(source) {
      Config.implicitSources.push(new ConfigSource(source));
      var profiles = Config.activeProfiles;

      if (profiles && profiles.length > 0) {
        Config.activateProfiles(profiles);
      }
    }
    /**
     * Allows registration of additional configuration source
     * @param {String} profile
     * @param {string|RegExp|Object} source
     * @param {Number} ttl
     */

  }, {
    key: "registerSource",
    value: function registerSource(profile, source, ttl) {
      var profileSources = Config.sources[profile];

      if (profileSources) {
        profileSources.push(new ConfigSource(source, ttl));
      } else {
        Config.sources[profile] = [new ConfigSource(source, ttl)];
      }

      var profiles = Config.activeProfiles;

      if (profiles.includes(profile)) {
        Config.activateProfiles(profiles);
      }
    }
  }, {
    key: "atProfileActivation",
    value: function atProfileActivation(funktion) {
      for (var _len = arguments.length, profiles = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        profiles[_key - 1] = arguments[_key];
      }

      Config.callbacks.push([funktion, profiles]);
    }
    /**
     * Activates given set of configuration profiles
     * @param {...profiles} profiles
     */

  }, {
    key: "activateProfiles",
    value: function activateProfiles() {
      for (var _len2 = arguments.length, profiles = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        profiles[_key2] = arguments[_key2];
      }

      var sources = [];

      if (typeof window == "undefined") {
        // 1) registered sources
        profiles.forEach(function (profile) {
          var profileSources = Config.sources[profile] || [];
          profileSources.reverse();
          sources.push.apply(sources, _toConsumableArray(profileSources));
          profileSources.reverse();
        }); // 2) "legacy" source for backward compatibility with C3

        sources.push(new ConfigSource("env://SERVER_CFG")); // 3) configuration from environment

        sources.push(new ConfigSource(/.*/)); // 4) configuration files

        var cfgDir = Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["CONFIG_DIR"] || Config._getDefaultConfigDir();

        var sysCfgDir = Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["SYS_CONFIG_DIR"] || Config._getDefaultSysConfigDir();

        profiles.forEach(function (profile) {
          var profileCfgPropertiesFile = path.join(cfgDir, profile.toLowerCase() + ".properties");
          var profileCfgJsonFile = path.join(cfgDir, profile.toLowerCase() + ".json");
          var sysProfileCfgPropertiesFile = path.join(sysCfgDir, profile.toLowerCase() + ".properties");
          var sysProfileCfgJsonFile = path.join(sysCfgDir, profile.toLowerCase() + ".json");
          if (fs.existsSync(sysProfileCfgJsonFile)) sources.push(new ConfigSource("file://" + sysProfileCfgJsonFile, 0));
          if (fs.existsSync(profileCfgJsonFile)) sources.push(new ConfigSource("file://" + profileCfgJsonFile, 0));
          if (fs.existsSync(sysProfileCfgPropertiesFile)) sources.push(new ConfigSource("file://" + sysProfileCfgPropertiesFile, 0));
          if (fs.existsSync(profileCfgPropertiesFile)) sources.push(new ConfigSource("file://" + profileCfgPropertiesFile, 0));
        }); // 5) default configuration

        sources.push.apply(sources, _toConsumableArray(Config.implicitSources));
      } else {
        var uu5 = window["UU5"];
        var env = (uu5 ? uu5["Environment"] : null) || {};
        sources.push(new ConfigSource(env));
      } // create the chain


      var chain = new ConfigChain(sources, profiles); // Copy custom configuration added to config from previously
      // activated profiles (so runtime configuration is not lost)

      if (Config.chain) chain._custom = JSON.parse(JSON.stringify(Config.chain._custom));
      Config.chain = chain; // Force load of all configs, fail on errors (Configuration must be
      // complete at least on profile activation which is expected during
      // environment initialization)

      chain.load(true); // Invoke profile activation callbacks

      Config.callbacks.forEach(function (entry) {
        var cb = entry[0];
        var cbProfiles = entry[1];
        if (!Config._doArraysIntersect(profiles, cbProfiles)) cb.call();
      });
      Config.activeProfiles = Array.from(new Set([].concat(_toConsumableArray(Config.activeProfiles), profiles))); // TODO log it (when logging gets standardised)
      // console.log('\nProfile(s) ' + chain.activeProfiles() +  ' activated. Effective configuration:\n', chain.toJSON(),'\n')
    }
    /**
     * Checks if given profile(s) is(are) active.
     * @param {...profiles} profiles
     * @returns {boolean}
     */

  }, {
    key: "isProfileActive",
    value: function isProfileActive() {
      var activeProfiles = Config.activeProfiles;
      if (!activeProfiles) return false;

      for (var _len3 = arguments.length, profiles = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        profiles[_key3] = arguments[_key3];
      }

      return Config._doArraysIntersect(activeProfiles, profiles);
    }
    /**
     * Returns value of the given configuration parameter
     * @param {string} name
     * @param {Boolean} recursive
     * @returns {*}
     */

  }, {
    key: "get",
    value: function get(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().get(name, recursive);
    }
    /**
     * Returns parameter value transformed to string using .toString().
     * @param {String} name
     * @param {boolean} recursive
     * @returns {String}
     */

  }, {
    key: "getString",
    value: function getString(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getString(name, recursive);
    }
    /**
     * Returns parameter value transformed to number (if possible, else raises error).
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Number}
     */

  }, {
    key: "getNumber",
    value: function getNumber(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getNumber(name, recursive);
    }
    /**
     * Returns parameter value transformed to boolean (if possible, else raises error).
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Boolean}
     */

  }, {
    key: "getBoolean",
    value: function getBoolean(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getBoolean(name, recursive);
    }
    /**
     * Returns parameter value transformed to a Date object using its constructor or raises error.
     * @param {String} name
     * @param {boolean} recursive
     * @returns {Date}
     */

  }, {
    key: "getTime",
    value: function getTime(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().getTime(name, recursive);
    }
    /**
     * Returns parameter value transformed to a class if possible, else raises error.
     * Source path needs to be provided, which is the path to the module that exports the requested class.
     * @param {String} name
     * @param {String} sourcePath
     * @param {boolean} recursive
     * @returns {Function}
     */

  }, {
    key: "getClass",
    value: function getClass(name, sourcePath) {
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return Config._getChain().getClass(name, sourcePath, recursive);
    }
    /**
     * Returns parameter value transformed to array of given types
     * @param {String} name
     * @param {String} type
     * @param {Boolean} recursive
     * @returns {Array}
     */

  }, {
    key: "getArray",
    value: function getArray(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return Config._getChain().getArray(name, type, recursive, sourcePath);
    }
    /**
     * Sets configuration parameter with highest priority (overrides value of any existing source).
     * @param {String} name
     * @param {*} value
     */

  }, {
    key: "set",
    value: function set(name, value) {
      Config._getChain().set(name, value);
    }
    /**
     * Deletes explicitly set configuration parameter.
     * @param {String} name
     */

  }, {
    key: "delete",
    value: function _delete(name) {
      Config._getChain().delete(name);
    }
    /**
     * Checks if configuration provides parameter of given name.
     * Returns false for undefined values and true for null values.
     * @param {String} name
     * @param {Boolean} recursive
     * @returns {*|Boolean|boolean}
     */

  }, {
    key: "hasKey",
    value: function hasKey(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return Config._getChain().hasKey(name, recursive);
    }
    /**
     * Returns Object containing effective configuration.
     * @param {boolean} failOnError
     * @returns {*}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return Config._getChain().toJSON(failOnError);
    }
    /**
     * Forces reload of all configuration sources related to activated profiles.
     * @param {boolean} failOnError
     */

  }, {
    key: "reload",
    value: function reload() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      Config._getChain().load(failOnError);
    }
    /**
     * Clears all configuration.
     */

  }, {
    key: "clear",
    value: function clear() {
      Config.activeProfiles = [];
      Config.callbacks = [];
      Config.implicitSources = [];
      Config.sources = {};
      Config.chain = null;
    }
  }, {
    key: "_getChain",
    value: function _getChain() {
      var chain = Config.chain;

      if (!chain) {
        var actProf = Config.activeProfiles;

        if (actProf.length === 0) {
          var envProfiles = Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})["CONFIG_PROFILE"] || "development";

          if (envProfiles) {
            var arr = envProfiles.split(",");
            actProf = [];
            arr.forEach(function (profile) {
              actProf.push(profile.trim());
            });
            Config.activateProfiles.apply(Config, _toConsumableArray(actProf));
          } else {
            actProf = "production";
            Config.activateProfiles(actProf);
          }
        }

        chain = Config.chain;
      }

      return chain;
    } // TODO move this function to some more appropriate place?

  }, {
    key: "_doArraysIntersect",
    value: function _doArraysIntersect(arr1, arr2) {
      var doTheyIntersect = false;
      arr1.forEach(function (el1) {
        if (arr2.includes(el1)) doTheyIntersect = true;
      });
      return doTheyIntersect;
    }
  }, {
    key: "_getDefaultConfigDir",
    value: function _getDefaultConfigDir() {
      var configPath = path.join(process.cwd(), "env");

      if (!fs.existsSync(configPath)) {
        configPath = path.join(process.cwd(), "config");
      }

      return configPath;
    }
  }, {
    key: "_getDefaultSysConfigDir",
    value: function _getDefaultSysConfigDir() {
      var configPath = path.join(os.homedir(), ".uu", "env");

      if (!fs.existsSync(configPath)) {
        configPath = path.join(os.homedir(), ".uu", "config");
      }

      return configPath;
    }
  }]);

  return Config;
}();

Config.activeProfiles = [];
Config.callbacks = [];
Config.implicitSources = [];
Config.sources = {};
Config.chain = null;
module.exports = Config;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(6)(module), __webpack_require__(7)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

if (typeof window == "undefined") {
  var fs = __webpack_require__(9);
}

var ConfigSource = /*#__PURE__*/function () {
  function ConfigSource(source) {
    var ttl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

    _classCallCheck(this, ConfigSource);

    this._ttl = ttl;

    if (typeof source === "string" || source instanceof String) {
      var match = /^file:\/\/(.*)/i.exec(source);

      if (match !== null) {
        if (typeof window != "undefined") throw new TypeError("Unable to use " + source + " as configuration source in browser environment.");
        this._fileSrc = match[1];
      } else {
        match = /^env:\/\/([a-z_][a-z0-9_]*)/i.exec(source);

        if (match !== null) {
          this._senvSrc = match[1];
        } else {
          throw new TypeError("unable to use " + source + " as configuration source");
        }
      }
    } else if (source instanceof RegExp) {
      this._menvSrc = source;
    } else if (source && _typeof(source) === "object") {
      this._data = source;
    } else {
      throw new TypeError("unable to use " + _typeof(source.constructor) + " as configuration source");
    }
  }

  _createClass(ConfigSource, [{
    key: "load",
    value: function load() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var loadedSrc;

      try {
        if (this._fileSrc !== undefined && this._fileSrc) {
          loadedSrc = this._fileSrc;
          var data = fs.readFileSync(this._fileSrc, "utf8");
          this._data = this._parse(data);
        } else if (this._senvSrc !== undefined && this._senvSrc) {
          loadedSrc = this._senvSrc;

          var _data = Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})[this._senvSrc] || "";

          this._data = this._parse(_data);
        } else if (this._menvSrc !== undefined && this._menvSrc) {
          loadedSrc = this._menvSrc;
          var regex = this._menvSrc;
          var envKeys = Object.keys(Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"}));
          var result = {};
          envKeys.forEach(function (key) {
            if (regex.test(key)) {
              result[key.toLowerCase()] = Object({"NAME":"uu_appg01_core-utils","VERSION":"4.7.2","OUTPUT_NAME":"uu_appg01_core-utils","NODE_ENV":"development","TARGET_ENVIRONMENT":"browser"})[key];
            }
          });
          this._data = result;
        }

        this._loaded = new Date();
      } catch (err) {
        var errMsg = "Loading of configuration from source [".concat(loadedSrc, "] failed: ").concat(err.toString());

        if (failOnError) {
          throw new Error(errMsg);
        } else {
          console.log(errMsg);
        }
      }
    }
  }, {
    key: "get",
    value: function get(name) {
      if (this._reload()) this.load();
      return this._data[name];
    }
  }, {
    key: "setTtl",
    value: function setTtl(ttl) {
      this._ttl = ttl;
    }
  }, {
    key: "hasKey",
    value: function hasKey(name) {
      if (this._reload()) this.load();
      return this._data[name] !== undefined;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (this._reload()) this.load(failOnError);
      return JSON.parse(JSON.stringify(this._data));
    }
  }, {
    key: "_parse",
    value: function _parse(sourceData) {
      if (/^[\r\n\t ]*{[\s\S]*}[\r\n\t ]*$/.test(sourceData)) {
        return JSON.parse(sourceData);
      } else {
        var result = {};
        sourceData = sourceData.replace(/\r\n?/g, "\n");
        var splitData = sourceData.split("\n");
        splitData.forEach(function (line) {
          line = line.trim();
          if (/^[#!]/.test(line)) return;
          var splitLine = line.split(/[=:](.*)/, 2);
          var name = splitLine[0];
          var value = splitLine[1];
          if (name === null) return;
          name = name.trim();
          if (name.length === 0) return;

          if (value === undefined) {
            value = null;
          } else {
            value = value.trimLeft();

            try {
              value = JSON.parse(value.trim());
            } catch (err) {// do nothing
            }
          }

          result[name] = value;
        });
        return result;
      }
    }
  }, {
    key: "_reload",
    value: function _reload() {
      if (!this._loaded) return true;
      if (this._ttl < 0) return false;
      var t = new Date();
      var reload = t.getTime() > this._loaded.getTime() + this._ttl * 1000;

      if (this._fileSrc) {
        var stats = fs.statSync(this._fileSrc);

        if (stats.isFile()) {
          var mTime = new Date(stats["mtime"]);
          return reload && mTime.getTime() > this._loaded.getTime();
        } else {
          return reload;
        }
      } else {
        return reload;
      }
    }
  }]);

  return ConfigSource;
}();

module.exports = ConfigSource;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BaseError = __webpack_require__(4);

var ValueConverter = __webpack_require__(11);

var expression = /(?:^|[^\\])(\${([\w_.]+)(?::([^}]*))?}|#{([^}]+)})/;

var ConfigChain = /*#__PURE__*/function () {
  function ConfigChain(sources, profiles) {
    _classCallCheck(this, ConfigChain);

    this._sources = sources;
    this._profiles = profiles;
    this._custom = {};
  }

  _createClass(ConfigChain, [{
    key: "activeProfiles",
    value: function activeProfiles() {
      return JSON.parse(JSON.stringify(this._profiles));
    }
  }, {
    key: "get",
    value: function get(name) {
      var _this = this;

      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var loopCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var result;
      var self = this;

      if (recursive) {
        var parts = name.split(".");

        var _loop = function _loop() {
          var name = parts.join(".");
          if (_this._custom[name] !== undefined) return {
            v: _this._custom[name]
          };

          _this._sources.forEach(function (source) {
            var value = source.get(name);
            if (value !== undefined && result === undefined) result = self._resolve(value, loopCheck);
          });

          if (result !== undefined) return {
            v: result
          };
          var length = parts.length;
          var idx = length === 1 ? 0 : length - 2;
          parts.splice(idx, 1);
        };

        while (parts.length > 0) {
          var _ret = _loop();

          if (_typeof(_ret) === "object") return _ret.v;
        }
      } else {
        if (this._custom[name] !== undefined) return this._custom[name];

        this._sources.forEach(function (source) {
          var value = source.get(name);
          if (value !== undefined && result === undefined) result = self._resolve(value, loopCheck);
        });

        if (result !== undefined) return result;
      }

      return result;
    }
  }, {
    key: "getString",
    value: function getString(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toString(value);
    }
  }, {
    key: "getNumber",
    value: function getNumber(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toNumber(value);
    }
  }, {
    key: "getBoolean",
    value: function getBoolean(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toBoolean(value);
    }
  }, {
    key: "getTime",
    value: function getTime(name) {
      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var value = this.get(name, recursive);
      return ValueConverter.toTime(value);
    }
  }, {
    key: "getClass",
    value: function getClass(name, sourcePath) {
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var value = this.get(name, recursive);
      sourcePath = !sourcePath ? this._serverSourcePath() : sourcePath;
      return ValueConverter.toClass(value, sourcePath);
    }
  }, {
    key: "getArray",
    value: function getArray(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var recursive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var value = this.get(name, recursive);
      sourcePath = !sourcePath ? this._serverSourcePath() : sourcePath;
      return ValueConverter.toArray(value, type, sourcePath);
    }
  }, {
    key: "set",
    value: function set(name, value) {
      this._custom[name] = value;
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      delete this._custom[name];
    }
  }, {
    key: "hasKey",
    value: function hasKey(name) {
      var _this2 = this;

      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var hasKey = false;

      if (recursive) {
        var parts = name.split(".");

        var _loop2 = function _loop2() {
          var name = parts.join(".");
          if (_this2._custom[name] !== undefined) return {
            v: true
          };

          _this2._sources.forEach(function (source) {
            if (!hasKey && source.hasKey(name)) hasKey = true;
          });

          if (hasKey) {
            return {
              v: hasKey
            };
          }

          var length = parts.length;
          var idx = length === 1 ? 0 : length - 2;
          parts.splice(idx, 1);
        };

        while (parts.length > 0) {
          var _ret2 = _loop2();

          if (_typeof(_ret2) === "object") return _ret2.v;
        }
      } else {
        if (this._custom[name] !== undefined) return true;

        this._sources.forEach(function (source) {
          if (source.hasKey(name)) {
            hasKey = true;
          }
        });
      }

      return hasKey;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var result = {};

      var resolver = this._resolve.bind(this);

      this._sources.reverse();

      this._sources.forEach(function (source) {
        var sourceJson = source.toJSON();
        var keys = Object.keys(sourceJson);
        keys.forEach(function (key) {
          result[key] = resolver(sourceJson[key]);
        });
      });

      this._sources.reverse();

      var keys = Object.keys(this._custom);
      var custom = this._custom;
      keys.forEach(function (key) {
        result[key] = resolver(custom[key]);
      });
      return result;
    }
  }, {
    key: "load",
    value: function load() {
      var failOnError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      this._sources.reverse();

      this._sources.forEach(function (source) {
        source.load(failOnError);
      });

      this._sources.reverse();
    }
  }, {
    key: "_resolve",
    value: function _resolve(value) {
      var loopCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!!value && value.constructor === Object) {
        var newObject = {};

        for (var _i = 0, _Object$keys = Object.keys(value); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          newObject[key] = this._resolve(value[key]);
        }

        return newObject;
      }

      if (!(typeof value === "string") && !(value instanceof String)) return value;
      var matchResult = value.match(expression);

      if (!matchResult) {
        return value;
      } else {
        var _expression = matchResult[1];
        var _key = matchResult[2];
        var defolt = matchResult[3];
        var prog = matchResult[4];

        if (prog) {
          value = eval(prog);
          return this._resolve(value);
        } else {
          if (loopCheck.includes(_key)) throw new BaseError("endless configuration loop caused by [" + loopCheck + "]");
          loopCheck.push(_key);
          var resolved = this.get(_key, true, loopCheck);
          if (!resolved) resolved = defolt;
          value = value.replace(new RegExp(_expression.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&"), "g"), resolved);
          return this._resolve(value);
        }
      }
    }
  }, {
    key: "_serverSourcePath",
    value: function _serverSourcePath() {
      return this.get("server_root");
    }
  }]);

  return ConfigChain;
}();

module.exports = ConfigChain;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BaseError = __webpack_require__(4);

var Loader = __webpack_require__(12);

var INVALID_DATE = new Date("foo");
/**
 * Helper for converting values to different basic types.
 */

var ValueConverter = /*#__PURE__*/function () {
  function ValueConverter() {
    _classCallCheck(this, ValueConverter);
  }

  _createClass(ValueConverter, null, [{
    key: "toString",

    /**
     * Converts value to string.
     * @param value Value to be converted.
     * @returns {String} Converted value.
     */
    value: function toString(value) {
      if (value === null || value === undefined) {
        return null;
      } else {
        return value.toString();
      }
    }
    /**
     * Converts value to number.
     * @param value Value to be converted.
     * @returns {Number} Converted value.
     */

  }, {
    key: "toNumber",
    value: function toNumber(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "number") {
        return value;
      } else if (typeof value === "string") {
        if (/^[+-]?[\d]+(\.[\d]+)?([eE][+-]?[\d]+)?$/.test(value)) {
          return Number(value);
        } else {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to number"));
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to number"));
      }
    }
    /**
     * Converts value to boolean.
     * @param value Value to be converted.
     * @returns {Boolean} Converted value.
     */

  }, {
    key: "toBoolean",
    value: function toBoolean(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "boolean") {
        return value;
      } else if (typeof value === "number") {
        return value !== 0;
      } else if (typeof value === "string") {
        if (/^(false|0)$/i.test(value)) {
          return false;
        } else if (/^(true|1)$/i.test(value)) {
          return true;
        } else {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to boolean"));
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to boolean"));
      }
    }
    /**
     * Converts value to time.
     * @param value Value to be converted.
     * @returns {Date} Converted value.
     */

  }, {
    key: "toTime",
    value: function toTime(value) {
      if (value === null || value === undefined) {
        return null;
      } else if (value instanceof Date) {
        return value;
      } else if (typeof value === "number") {
        return new Date(value);
      } else if (typeof value === "string") {
        var date = new Date(value);

        if (date.toString() === INVALID_DATE.toString()) {
          throw new BaseError("No implicit conversion of \"".concat(value, "\" to time"));
        } else {
          return date;
        }
      } else {
        throw new BaseError("No implicit conversion of \"".concat(_typeof(value), "\" to time"));
      }
    }
    /**
     * Converts value to class.
     * @param value Value to be converted.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class.
     * @returns {Function} Converted value.
     */

  }, {
    key: "toClass",
    value: function toClass(value, sourcePath) {
      if (value === null || value === undefined) {
        return null;
      } else if (typeof value === "function") {
        // TODO Check that function is constructor
        return value;
      } else if (typeof value === "string") {
        if (sourcePath === null || sourcePath === undefined) {
          throw new BaseError("Parameter sourcePath is required to resolve class from string");
        }

        return Loader.loadRealization(sourcePath, value, false);
      } else {
        return value.constructor;
      }
    }
    /**
     * Converts value to array of given types.
     * @param value Value to be converted.
     * @param type If set, all array items will be converted to
     *   given type (one of "string", "number", "boolean", "time", "class")
     * @param sourcePath Path to app/library source folder (app|src) from where to load class
     *   Required for "class" conversion.
     * @returns {Array} Converted value.
     */

  }, {
    key: "toArray",
    value: function toArray(value) {
      var _this = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var sourcePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var arr = null;

      if (value === null || value === undefined) {
        return null;
      } else if (value instanceof Array) {
        arr = value;
      } else if (typeof value === "string") {
        arr = value.split(/[ ]*,[ ]*/);
      } else {
        arr = [value];
      }

      switch (type) {
        case null:
        case undefined:
          // No conversion
          break;

        case "string":
          arr = arr.map(function (item) {
            return _this.toString(item);
          });
          break;

        case "number":
          arr = arr.map(function (item) {
            return _this.toNumber(item);
          });
          break;

        case "boolean":
          arr = arr.map(function (item) {
            return _this.toBoolean(item);
          });
          break;

        case "time":
          arr = arr.map(function (item) {
            return _this.toTime(item);
          });
          break;

        case "class":
          arr = arr.map(function (item) {
            return _this.toClass(item, sourcePath);
          });
          break;

        default:
          throw new BaseError("Unknown conversion type \"".concat(type, "\""));
      }

      return arr;
    }
  }]);

  return ValueConverter;
}();

module.exports = ValueConverter;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 13 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 14 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 15 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 16 */
/***/ (function(module, exports) {

/**
 * Convert nameSpace to file path
 * @param str
 * @returns {string|string}
 * @constructor
 */
function NameConverter(str) {
  var REGEX = /^([_]*[$@#]?)?(?:[a-zA-Z0-9]+(?:[_]+[a-zA-Z0-9]+)?)*([_]+)?$/;

  function _scan(s, re) {
    if (!re.global) throw "Name Converter Error";
    var m = re.exec(s),
        r = [];

    while (m) {
      m.shift();
      r.push(m);
      m = re.exec(s);
    }

    return r;
  }

  var strings = [];
  var result = "";
  str.match(REGEX);
  var prefix = str.match(/^[_]*/)[0];
  str = str.substring(prefix.length, str.length);
  var postfix = str.match(/[_]*$/)[0];
  str = str.substring(0, str.length - postfix.length);
  var befIndex = 0;

  _scan(str, /[a-z]+|[A-Z]+|[0-9]+/g).forEach(function (val) {
    var index = val["index"];
    strings.push(str.substring(befIndex, index));
    befIndex = index;
  });

  strings.push(str.substring(befIndex));
  if (strings[0] === "/" || strings[0] === "\\") strings.shift();

  for (var i = 0; i < strings.length; i += 1) {
    var act = strings[i];
    var nxt = strings[i + 1];

    if (act.match(/^[a-z]+|[0-9]+$/)) {
      result += act;
      result += nxt !== undefined ? "-" : "";
    } else if (act.match(/^[A-Z]$/)) {
      result += act.toLowerCase();
    } else if (act.match(/^[A-Z]+$/)) {
      if (nxt === undefined || nxt.match(/^[0-9]+$/)) {
        result += act.toLowerCase();
        result += nxt !== undefined ? "-" : "";
      } else {
        result += act.substring(0, act.length - 1).toLowerCase();
        result += "-";
        result += act[act.length - 1].toLowerCase();
      }
    }
  }

  result = prefix + result + postfix;
  return result;
}

module.exports = NameConverter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Config = __webpack_require__(5);

var ValueConverter = __webpack_require__(11);
/**
 * Component for reading option from multiple option
 * sources with support for providing default values
 * and basic type conversions.
 * Example:
 *   reader = new OptsReader(opts1, opts2, Config);
 *   anyType = reader.get("opt_key")
 *   number = reader.getNumber("opt_key", 42)
 */


var OptsReader = /*#__PURE__*/function () {
  /**
   * Creates new instance of options reader.
   * @param opts List of option sources to be read
   *   (ordered by priority from highest to lowest).
   */
  function OptsReader() {
    _classCallCheck(this, OptsReader);

    for (var _len = arguments.length, opts = new Array(_len), _key = 0; _key < _len; _key++) {
      opts[_key] = arguments[_key];
    }

    this._optList = opts;
  }
  /**
   * Returns option with given name or default value
   * if none of option sources provide required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {*}
   */


  _createClass(OptsReader, [{
    key: "get",
    value: function get(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = null;

      var _iterator = _createForOfIteratorHelper(this._optList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var opts = _step.value;

          if (opts === Config) {
            if (opts.hasKey(key, false)) {
              value = opts.get(key, false);
            }
          } else if (opts) {
            if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
              value = opts[key];
            }
          }

          if (value != null) {
            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (value == null) {
        value = defaultValue;
      }

      return value;
    }
    /**
     * Checks if any of option sources provide
     * option with given name.
     * @param key Option name.
     * @returns {Boolean} True if option exists.
     */

  }, {
    key: "hasKey",
    value: function hasKey(key) {
      var _iterator2 = _createForOfIteratorHelper(this._optList),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var opts = _step2.value;

          if (opts === Config) {
            if (opts.hasKey(key)) {
              return true;
            }
          } else if (opts) {
            if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
              return true;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return false;
    }
    /**
     * Returns string value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {String}
     */

  }, {
    key: "getString",
    value: function getString(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toString(value);
    }
    /**
     * Returns number value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Number}
     */

  }, {
    key: "getNumber",
    value: function getNumber(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toNumber(value);
    }
    /**
     * Returns boolean value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Boolean}
     */

  }, {
    key: "getBoolean",
    value: function getBoolean(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toBoolean(value);
    }
    /**
     * Returns time value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param defaultValue Default options value.
     * @returns {Date}
     */

  }, {
    key: "getTime",
    value: function getTime(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toTime(value);
    }
    /**
     * Returns class value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class.
     * @param defaultValue Default options value.
     * @returns {Function}
     */

  }, {
    key: "getClass",
    value: function getClass(key, sourcePath) {
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toClass(value, sourcePath);
    }
    /**
     * Returns array value created from option with given
     * name or default value if none of options sources provide
     * required option.
     * @param key Option name.
     * @param type If set, all array items will be converted to
     *   given type (one of "string", "number", "boolean", "time", "class")
     * @param defaultValue Default options value.
     * @param sourcePath Path to app/library source folder (app|src) from where to load class
     *   Required for "class" conversion.
     * @returns {Array}
     */

  }, {
    key: "getArray",
    value: function getArray(key) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var sourcePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var value = this.get(key, defaultValue);
      return ValueConverter.toArray(value, type, sourcePath);
    }
  }]);

  return OptsReader;
}();

module.exports = OptsReader;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CLS = __webpack_require__(19);

var BaseError = __webpack_require__(4);
/**
 * ThreadLocal alike context store.
 */


var ContextStore = /*#__PURE__*/function () {
  _createClass(ContextStore, [{
    key: "set",

    /**
     * Stores context attribute.
     * @param key Context attribute name.
     * @param value Context attribute value.
     */
    value: function set(key, value) {
      this._namespace.set(key, value);
    }
    /**
     * Returns context attribute.
     * @param key Context attribute name.
     * @returns {*} Context attribute value.
     */

  }, {
    key: "get",
    value: function get(key) {
      return this._namespace.get(key);
    }
    /**
     * Forks context and runs given function.
     * @param fn Function to be invoked.
     * @returns {*} Return value of invoked function.
     */

  }, {
    key: "fork",
    value: function fork(fn) {
      var result;

      this._namespace.run(function () {
        result = fn();
      });

      return result;
    }
  }], [{
    key: "create",

    /**
     * Creates new context store
     * @param ctxName Context store name.
     * @param fn Function to which should context store be bound.
     * @returns {*} Return value of invoked function.
     */
    value: function create(ctxName, fn) {
      var namespace = CLS.getNamespace(ctxName);

      if (namespace) {
        if (namespace.active) {
          throw new BaseError("Context \"".concat(ctxName, "\" is already created."));
        }
      } else {
        namespace = CLS.createNamespace(ctxName);
      }

      var result;
      namespace.run(function () {
        result = fn();
      });
      return result;
    }
    /**
     * Returns context store bound to current context.
     * @param ctxName Context store name.
     * @returns {ContextStore} Instance of context store or null.
     */

  }, {
    key: "get",
    value: function get(ctxName) {
      var namespace = CLS.getNamespace(ctxName);

      if (namespace && namespace.active) {
        return new ContextStore(namespace);
      } else {
        return null;
      }
    }
  }]);

  function ContextStore(namespace) {
    _classCallCheck(this, ContextStore);

    this._namespace = namespace;
  }

  _createClass(ContextStore, [{
    key: "bindEmitter",
    value: function bindEmitter(emitter) {
      this._namespace.bindEmitter(emitter);
    }
  }]);

  return ContextStore;
}();

module.exports = ContextStore;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NAMESPACES = {};

var ClsHooked = /*#__PURE__*/function () {
  function ClsHooked() {
    _classCallCheck(this, ClsHooked);
  }

  _createClass(ClsHooked, null, [{
    key: "getNamespace",
    value: function getNamespace(name) {
      return NAMESPACES[name];
    }
  }, {
    key: "createNamespace",
    value: function createNamespace(name) {
      var namespace = new Namespace();
      NAMESPACES[name] = namespace;
      return namespace;
    }
  }]);

  return ClsHooked;
}();

var Namespace = /*#__PURE__*/function () {
  function Namespace() {
    _classCallCheck(this, Namespace);

    this.active = {};
  }

  _createClass(Namespace, [{
    key: "set",
    value: function set(name, value) {
      this.active[name] = value;
    }
  }, {
    key: "get",
    value: function get(name) {
      return this.active[name];
    }
  }, {
    key: "run",
    value: function run(fn) {
      fn();
      return this;
    }
  }, {
    key: "bindEmitter",
    value: function bindEmitter(emitter) {// Empty mock method.
    }
  }]);

  return Namespace;
}();

module.exports = ClsHooked;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

if (!global._uuAppGlobals) {
  global._uuAppGlobals = {};
}
/**
 * Global storage allowing to share objects accross multiple modules in various versions.
 */


var GlobalStore = /*#__PURE__*/function () {
  _createClass(GlobalStore, [{
    key: "set",

    /**
     * Stores global attribute.
     * @param key Global attribute name.
     * @param value Global attribute value.
     */
    value: function set(key, value) {
      this._attributes[key] = value;
    }
    /**
     * Returns global attribute.
     * @param key Global attribute name.
     * @returns {*} Global attribute value.
     */

  }, {
    key: "get",
    value: function get(key) {
      return this._attributes[key];
    }
    /**
     * Creates new instance of global store.
     * @private
     */

  }], [{
    key: "get",

    /**
     * Returns global store with given name.
     * @param storeName Global store name.
     * @returns {GlobalStore} Instance of global store.
     */
    value: function get(storeName) {
      var store = global._uuAppGlobals[storeName];

      if (!store) {
        store = global._uuAppGlobals[storeName] = new GlobalStore();
      }

      return store;
    }
  }]);

  function GlobalStore() {
    _classCallCheck(this, GlobalStore);

    this._attributes = {};
  }

  return GlobalStore;
}();

module.exports = GlobalStore;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(21)))

/***/ }),
/* 21 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 23 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 24 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _sha = __webpack_require__(26);

var Digest = /*#__PURE__*/function () {
  function Digest() {
    _classCallCheck(this, Digest);
  }

  _createClass(Digest, null, [{
    key: "sha1",
    value: function sha1(value) {
      return _sha(value);
    }
  }]);

  return Digest;
}();

module.exports = Digest;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*
 * [js-sha1]{@link https://github.com/emn178/js-sha1}
 *
 * @version 0.6.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2014-2017
 * @license MIT
 */
/*jslint bitwise: true */
(function() {
  'use strict';

  var root = typeof window === 'object' ? window : {};
  var NODE_JS = !root.JS_SHA1_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  }
  var COMMON_JS = !root.JS_SHA1_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD =  true && __webpack_require__(27);
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  var createOutputMethod = function (outputType) {
    return function (message) {
      return new Sha1(true).update(message)[outputType]();
    };
  };

  var createMethod = function () {
    var method = createOutputMethod('hex');
    if (NODE_JS) {
      method = nodeWrap(method);
    }
    method.create = function () {
      return new Sha1();
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type);
    }
    return method;
  };

  var nodeWrap = function (method) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash('sha1').update(message, 'utf8').digest('hex');
      } else if (message.constructor === ArrayBuffer) {
        message = new Uint8Array(message);
      } else if (message.length === undefined) {
        return method(message);
      }
      return crypto.createHash('sha1').update(new Buffer(message)).digest('hex');
    };
    return nodeMethod;
  };

  function Sha1(sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    this.h0 = 0x67452301;
    this.h1 = 0xEFCDAB89;
    this.h2 = 0x98BADCFE;
    this.h3 = 0x10325476;
    this.h4 = 0xC3D2E1F0;

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
  }

  Sha1.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString = typeof(message) !== 'string';
    if (notString && message.constructor === root.ArrayBuffer) {
      message = new Uint8Array(message);
    }
    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if(notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha1.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
      blocks[4] = blocks[5] = blocks[6] = blocks[7] =
      blocks[8] = blocks[9] = blocks[10] = blocks[11] =
      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha1.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
    var f, j, t, blocks = this.blocks;

    for(j = 16; j < 80; ++j) {
      t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];
      blocks[j] =  (t << 1) | (t >>> 31);
    }

    for(j = 0; j < 20; j += 5) {
      f = (b & c) | ((~b) & d);
      t = (a << 5) | (a >>> 27);
      e = t + f + e + 1518500249 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | ((~a) & c);
      t = (e << 5) | (e >>> 27);
      d = t + f + d + 1518500249 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | ((~e) & b);
      t = (d << 5) | (d >>> 27);
      c = t + f + c + 1518500249 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | ((~d) & a);
      t = (c << 5) | (c >>> 27);
      b = t + f + b + 1518500249 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | ((~c) & e);
      t = (b << 5) | (b >>> 27);
      a = t + f + a + 1518500249 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 40; j += 5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = t + f + e + 1859775393 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = t + f + d + 1859775393 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = t + f + c + 1859775393 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = t + f + b + 1859775393 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = t + f + a + 1859775393 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 60; j += 5) {
      f = (b & c) | (b & d) | (c & d);
      t = (a << 5) | (a >>> 27);
      e = t + f + e - 1894007588 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = (a & b) | (a & c) | (b & c);
      t = (e << 5) | (e >>> 27);
      d = t + f + d - 1894007588 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = (e & a) | (e & b) | (a & b);
      t = (d << 5) | (d >>> 27);
      c = t + f + c - 1894007588 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = (d & e) | (d & a) | (e & a);
      t = (c << 5) | (c >>> 27);
      b = t + f + b - 1894007588 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = (c & d) | (c & e) | (d & e);
      t = (b << 5) | (b >>> 27);
      a = t + f + a - 1894007588 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    for(; j < 80; j += 5) {
      f = b ^ c ^ d;
      t = (a << 5) | (a >>> 27);
      e = t + f + e - 899497514 + blocks[j] << 0;
      b = (b << 30) | (b >>> 2);

      f = a ^ b ^ c;
      t = (e << 5) | (e >>> 27);
      d = t + f + d - 899497514 + blocks[j + 1] << 0;
      a = (a << 30) | (a >>> 2);

      f = e ^ a ^ b;
      t = (d << 5) | (d >>> 27);
      c = t + f + c - 899497514 + blocks[j + 2] << 0;
      e = (e << 30) | (e >>> 2);

      f = d ^ e ^ a;
      t = (c << 5) | (c >>> 27);
      b = t + f + b - 899497514 + blocks[j + 3] << 0;
      d = (d << 30) | (d >>> 2);

      f = c ^ d ^ e;
      t = (b << 5) | (b >>> 27);
      a = t + f + a - 899497514 + blocks[j + 4] << 0;
      c = (c << 30) | (c >>> 2);
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
  };

  Sha1.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

    return HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
           HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
           HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
           HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
           HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
           HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
           HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
           HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
           HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
           HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
           HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
           HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
           HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
           HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
           HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
           HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
           HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
           HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
           HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
           HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F];
  };

  Sha1.prototype.toString = Sha1.prototype.hex;

  Sha1.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;

    return [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF
    ];
  };

  Sha1.prototype.array = Sha1.prototype.digest;

  Sha1.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(20);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    return buffer;
  };

  var exports = createMethod();

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha1 = exports;
    if (AMD) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return exports;
      }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7), __webpack_require__(21)))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Digest = __webpack_require__(25);

var toPrunedJson = __webpack_require__(29);
/**
 * Component providing synchronization methods
 * for running asynchronous functions.
 */


var Mutex = /*#__PURE__*/function () {
  _createClass(Mutex, null, [{
    key: "sleep",

    /**
     * Allows to suspend processing of method for given time. Returns the actual
     * number of milliseconds the processing was suspended, which is typically
     * slightly higher than given time (due to delay of callback invocation).
     * @param ms Number of milliseconds to sleep
     * @returns {Promise<number>} Number of milliseconds actually slept
     */
    value: function () {
      var _sleep = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ms) {
        var initiated;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                initiated = Date.now();
                return _context.abrupt("return", new Promise(function (resolve) {
                  setTimeout(function () {
                    return resolve(Date.now() - initiated);
                  }, ms);
                }));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function sleep(_x) {
        return _sleep.apply(this, arguments);
      }

      return sleep;
    }()
  }, {
    key: "yield",

    /**
     * Allows to split long running functions to multiple segments in order to prevent
     * blocking of thread by long running operations (e.g. it can be called in each loop).
     * @returns {Promise<number>} Number of milliseconds how long function was interrupted
     */
    value: function () {
      var _yield2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var initiated, interrupt;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                initiated = Date.now();
                interrupt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2);
                }))();
                return _context3.abrupt("return", interrupt.then(function () {
                  return Date.now() - initiated;
                }));

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function _yield() {
        return _yield2.apply(this, arguments);
      }

      return _yield;
    }()
    /**
     * Creates new instance of Mutex.
     */

  }]);

  function Mutex() {
    _classCallCheck(this, Mutex);

    this._promises = {};
  }
  /**
   * Ensures given functionality is invoked only once at a time. Method internally
   * computes functionality invocation signature (or used given one) and in case
   * functionality with same signature as already running one is requested, it does
   * not perform new invocation but returns result of previous one.
   * @param sig Invocation signature which should be unique for given function
   *   and/or function argument values. If not given, default signature is
   *   computed as "${fn.name}:${sha1(JSON.stringify(args))}"
   * @param fn Function to be invoked
   * @param args Function arguments
   * @returns {Promise<*>} Result of invoked function
   */


  _createClass(Mutex, [{
    key: "runOneAtTime",
    value: function runOneAtTime() {
      var _this = this;

      var sig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fn = arguments.length > 1 ? arguments[1] : undefined;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (typeof sig === "function") {
        args.unshift(fn);
        fn = sig;
        sig = null;
      }

      var signature = sig || this._getSignature.apply(this, [fn].concat(args));

      var promise = this._promises[signature];

      if (!promise || promise._finished) {
        promise = this._invokeFn.apply(this, [fn].concat(args));
        promise._finished = false;
        this._promises[signature] = promise;

        var finalize = function finalize() {
          promise._finished = true;
          delete _this._promises[signature];
        };

        promise.then(finalize, finalize);
      }

      return promise;
    }
    /**
     * Ensures given functionality is invoked after previously given one is finished.
     * @param fn Function to be invoked
     * @param args Function arguments
     * @returns {PromiseLike<*>} Result of invoked function
     */

  }, {
    key: "runInBand",
    value: function runInBand(fn) {
      var _this2 = this;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var prevPromise = this._promises["runInBand"];
      var nextPromise;

      if (!prevPromise || prevPromise._finished) {
        nextPromise = this._invokeFn.apply(this, [fn].concat(args));
      } else {
        var runNext = function runNext() {
          return _this2._invokeFn.apply(_this2, [fn].concat(args));
        };

        nextPromise = prevPromise.then(runNext, runNext);
      }

      nextPromise._finished = false;
      this._promises["runInBand"] = nextPromise;

      var finalize = function finalize() {
        nextPromise._finished = true;
      };

      nextPromise.then(finalize, finalize);
      return nextPromise;
    }
  }, {
    key: "_getSignature",
    value: function _getSignature(fn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      var argsString = toPrunedJson(args, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      var argsHash = Digest.sha1(argsString);
      return "".concat(fn.name, ":").concat(argsHash);
    }
  }, {
    key: "_invokeFn",
    value: function _invokeFn(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }

      if (fn.constructor.name === 'AsyncFunction') {
        return fn.apply(void 0, args);
      } else {
        var asyncWrapper = /*#__PURE__*/function () {
          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    return _context4.abrupt("return", fn.apply(void 0, args));

                  case 1:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          return function asyncWrapper() {
            return _ref2.apply(this, arguments);
          };
        }();

        return asyncWrapper();
      }
    }
  }]);

  return Mutex;
}();

module.exports = Mutex;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

// JSON.prune : a function to stringify any object without overflow
// two additional optional parameters :
//   - the maximal depth (default : 6)
//   - the maximal length of arrays (default : 50)
// You can also pass an "options" object.
// examples :
//   var json = JSON.prune(window)
//   var arr = Array.apply(0,Array(1000)); var json = JSON.prune(arr, 4, 20)
//   var json = JSON.prune(window.location, {inheritedProperties:true})
// Web site : http://dystroy.org/JSON.prune/
// JSON.prune on github : https://github.com/Canop/JSON.prune
// This was discussed here : http://stackoverflow.com/q/13861254/263525
// The code is based on Douglas Crockford's code : https://github.com/douglascrockford/JSON-js/blob/master/json2.js
// No effort was done to support old browsers. JSON.prune will fail on IE8.
(function () {
	'use strict';

	var DEFAULT_MAX_DEPTH = 6;
	var DEFAULT_ARRAY_MAX_LENGTH = 50;
	var DEFAULT_PRUNED_VALUE = '"-pruned-"';
	var seen; // Same variable used for all stringifications
	var iterator; // either forEachEnumerableOwnProperty, forEachEnumerableProperty or forEachProperty
	
	// iterates on enumerable own properties (default behavior)
	var forEachEnumerableOwnProperty = function(obj, callback) {
		for (var k in obj) {
			if (Object.prototype.hasOwnProperty.call(obj, k)) callback(k);
		}
	};
	// iterates on enumerable properties
	var forEachEnumerableProperty = function(obj, callback) {
		for (var k in obj) callback(k);
	};
	// iterates on properties, even non enumerable and inherited ones
	// This is dangerous
	var forEachProperty = function(obj, callback, excluded) {
		if (obj==null) return;
		excluded = excluded || {};
		Object.getOwnPropertyNames(obj).forEach(function(k){
			if (!excluded[k]) {
				callback(k);
				excluded[k] = true;
			}
		});
		forEachProperty(Object.getPrototypeOf(obj), callback, excluded);
	};

	Object.defineProperty(Date.prototype, "toPrunedJSON", {value:Date.prototype.toJSON});

	var	cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
		meta = {	// table of character substitutions
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		};

	function quote(string) {
		escapable.lastIndex = 0;
		return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
			var c = meta[a];
			return typeof c === 'string'
				? c
				: '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
		}) + '"' : '"' + string + '"';
	}


	var prune = function (value, depthDecr, arrayMaxLength) {
		var prunedString = DEFAULT_PRUNED_VALUE;
		var replacer;
		if (typeof depthDecr == "object") {
			var options = depthDecr;
			depthDecr = options.depthDecr;
			arrayMaxLength = options.arrayMaxLength;
			iterator = options.iterator || forEachEnumerableOwnProperty;
			if (options.allProperties) iterator = forEachProperty;
			else if (options.inheritedProperties) iterator = forEachEnumerableProperty
			if ("prunedString" in options) {
				prunedString = options.prunedString;
			}
			if (options.replacer) {
				replacer = options.replacer;
			}
		} else {
			iterator = forEachEnumerableOwnProperty;
		}
		seen = [];
		depthDecr = depthDecr || DEFAULT_MAX_DEPTH;
		arrayMaxLength = arrayMaxLength || DEFAULT_ARRAY_MAX_LENGTH;
		function str(key, holder, depthDecr) {
			var i, k, v, length, partial, value = holder[key];

			if (value && typeof value === 'object' && typeof value.toPrunedJSON === 'function') {
				value = value.toPrunedJSON(key);
			}
			if (value && typeof value.toJSON === 'function') {
				value = value.toJSON(); 
			}

			switch (typeof value) {
			case 'string':
				return quote(value);
			case 'number':
				return isFinite(value) ? String(value) : 'null';
			case 'boolean':
			case 'null':
				return String(value);
			case 'object':
				if (!value) {
					return 'null';
				}
				if (depthDecr<=0 || seen.indexOf(value)!==-1) {
					if (replacer) {
						var replacement = replacer(value, prunedString, true);
						return replacement===undefined ? undefined : ''+replacement;
					}
					return prunedString;
				}
				seen.push(value);
				partial = [];
				if (Object.prototype.toString.apply(value) === '[object Array]') {
					length = Math.min(value.length, arrayMaxLength);
					for (i = 0; i < length; i += 1) {
						partial[i] = str(i, value, depthDecr-1) || 'null';
					}
					v = '[' + partial.join(',') + ']';
					if (replacer && value.length>arrayMaxLength) return replacer(value, v, false);
					return v;
				}
				iterator(value, function(k) {
					try {
						v = str(k, value, depthDecr-1);
						if (v) partial.push(quote(k) + ':' + v);
					} catch (e) { 
						// this try/catch due to forbidden accessors on some objects
					}				
				});
				return '{' + partial.join(',') + '}';
			case 'function':
			case 'undefined':
				return replacer ? replacer(value, undefined, false) : undefined;
			}
		}
		return str('', {'': value}, depthDecr);
	};
	
	prune.log = function() {
		console.log.apply(console, Array.prototype.map.call(arguments, function(v) {
			return JSON.parse(JSON.prune(v));
		}));
	};
	prune.forEachProperty = forEachProperty; // you might want to also assign it to Object.forEachProperty

	if (true) module.exports = prune;
	else {}
}());


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var localStorageAvailable;

try {
  var check = localStorage;
  localStorageAvailable = !!check;
} catch (e) {
  localStorageAvailable = false;
}
/**
 * Cache item.
 * @private
 */


var Item = /*#__PURE__*/function () {
  /**
   * Creates new instance of cache item.
   * @param key Item name
   * @param value Item value
   * @param exp Item expiration
   */
  function Item(key, value, exp) {
    _classCallCheck(this, Item);

    this.key = key;
    this.value = value;
    this.exp = exp;
    this.next = null;
    this.prev = null;
  }
  /**
   * Checks if item is expired.
   * @returns {boolean} True if item is expired
   */


  _createClass(Item, [{
    key: "isExpired",
    value: function isExpired() {
      return this.exp > -1 && this.exp <= Date.now();
    }
    /**
     * Returns object representation of cache item.
     * @returns {*[]} Array containing key, value end expiration (in this order)
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return [this.key, this.value, this.exp];
    }
  }]);

  return Item;
}();
/**
 * Browser friendly implementation of LRU cache with support of persisting
 * cache to browser local storage.
 */


var LruCache = /*#__PURE__*/function () {
  /**
   * Creates new instance of cache.
   * @param {Object|null} opts Cache options
   * @param {number} opts.maxSize Maximal number of items to be stored
   * @param {number} opts.maxAge How long (in milliseconds) should items be stored
   * @param {String} opts.localStorageKey If set, cache will be persisted to browser
   *   local storage. Local storage key should contain product identification to
   *   avoid conflicting names between various components.
   */
  function LruCache() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LruCache);

    if (typeof opts.maxSize === 'number') {
      this._maxSize = opts.maxSize;
    } else {
      this._maxSize = -1;
    }

    if (typeof opts.maxAge === 'number') {
      this._maxAge = opts.maxAge;
    } else {
      this._maxAge = -1;
    }

    this._name = opts.localStorageKey;
    this._size = 0;
    this._items = {};
    this._first = null;
    this._last = null;

    this._loadFromStorage();

    this._storeToStorage();
  }
  /**
   * Stores value into cache.
   * @param key Key to access cached value
   * @param value Value to be cached
   * @param maxAge How long (in milliseconds) should this value be stored (overrides global maxAge)
   * @returns {*} Value previously stored under this key (or null if none)
   */


  _createClass(LruCache, [{
    key: "set",
    value: function set(key, value) {
      var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      this._loadFromStorage();

      var origValue = null;
      maxAge = typeof maxAge === "number" ? maxAge : this._maxAge;
      var exp = maxAge > -1 ? maxAge + Date.now() : -1;
      var newItem = new Item(key, value, exp);

      if (this._items[key]) {
        origValue = this.delete(key);
      } else {
        // If cache is full we have to prune it
        if (this._maxSize > -1 && this._size >= this._maxSize) {
          this._prune(1);
        }
      } // Set new item to front of list


      this._push(newItem);

      this._storeToStorage(); // Return original value (if any)


      return origValue;
    }
    /**
     * Check if a key is in the cache, without updating the recent-ness or deleting it for being stale.
     * @param {Check} key Key of cached value
     * @returns {boolean} True if key is in cache, else false
     */

  }, {
    key: "has",
    value: function has(key) {
      this._loadFromStorage();

      var item = this._items[key];
      return item && !item.isExpired();
    }
    /**
     * Returns value from cache.
     * @param key Key of cached value
     * @returns {*} Cached value (or null)
     */

  }, {
    key: "get",
    value: function get(key) {
      this._loadFromStorage();

      var item = this._items[key];
      var value = null;

      if (item) {
        if (item.isExpired()) {
          // It item is expired, just delete it
          this._remove(item);
        } else {
          value = item.value;

          this._touch(item);
        }
      }

      this._storeToStorage();

      return value;
    }
    /**
     * Deletes value from cache.
     * @param key Key of cached value
     * @returns {*} Cached value (or null)
     */

  }, {
    key: "delete",
    value: function _delete(key) {
      this._loadFromStorage();

      var value = null;

      if (this._items[key]) {
        var item = this._items[key];

        if (!item.isExpired()) {
          // In case item is not expired, return value of deleted item
          value = item.value;
        }

        this._remove(item);
      }

      this._storeToStorage();

      return value;
    }
    /**
     * Clears cache.
     */

  }, {
    key: "clear",
    value: function clear() {
      this._size = 0;
      this._items = {};
      this._first = null;
      this._last = null;

      this._storeToStorage();
    }
    /**
     * Returns actual cache size.
     * @returns {number}
     */

  }, {
    key: "getSize",
    value: function getSize() {
      return this._size;
    }
    /**
     * Returns object representation of cache item.
     * @returns {Array} List of cached items
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var items = []; // Serialize from last to ensure correct order on restore

      var item = this._last;

      while (item) {
        items.push(item.toJSON());
        item = item.prev;
      }

      return [this._maxSize, this._maxAge, items];
    }
    /**
     * Initializes cache from serialized value (clears any existing data).
     * @param json Serialized cache
     */

  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      this.clear();

      if (typeof json === "string") {
        json = JSON.parse(json);
      }

      var _json = json,
          _json2 = _slicedToArray(_json, 3),
          maxSize = _json2[0],
          maxAge = _json2[1],
          items = _json2[2];

      this._maxSize = maxSize;
      this._maxAge = maxAge;

      var _iterator = _createForOfIteratorHelper(items),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 3),
              key = _step$value[0],
              value = _step$value[1],
              exp = _step$value[2];

          this._push(new Item(key, value, exp));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * Return an array of the keys in the cache.
     * @return {Array} List of the keys in the cache.
     */

  }, {
    key: "keys",
    value: function keys() {
      this._loadFromStorage();

      var result = [];
      var item = this._first;

      while (item) {
        if (!item.isExpired()) {
          result.push(item.key);
        }

        item = item.next;
      }
    }
    /**
     * Return an array of the values in the cache.
     * @return {Array} List of the values in the cache.
     */

  }, {
    key: "values",
    value: function values() {
      this._loadFromStorage();

      var result = [];
      var item = this._first;

      while (item) {
        if (!item.isExpired()) {
          result.push(item.value);
        }

        item = item.next;
      }
    }
    /**
     * Iterates through cached items (from newest to oldest)
     * @param callback Function receiving two parameters - item key and value.
     *    Function may return false to stop the loop.
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      if (typeof callback !== 'function') {
        throw new BaseError("Parameter must be function");
      }

      this._loadFromStorage();

      var item = this._first;

      while (item) {
        var doNext = null;

        if (!item.isExpired()) {
          doNext = callback(item.key, item.value);
        }

        if (typeof doNext === 'boolean' && !doNext) {
          break;
        } else {
          item = item.next;
        }
      }
    }
    /**
     * Pushes new item to cache.
     * @param item Cached item
     * @private
     */

  }, {
    key: "_push",
    value: function _push(item) {
      // Set previous first item after new item
      item.next = this._first;
      item.prev = null;

      if (this._first) {
        this._first.prev = item;
      } // Set new item to first place


      this._first = item;

      if (!this._last) {
        // If case was emtpy, first item is also last
        this._last = item;
      } // Store the item


      this._items[item.key] = item;
      this._size++;
    }
    /**
     * Moves item to fist position.
     * @param item Touched item
     * @private
     */

  }, {
    key: "_touch",
    value: function _touch(item) {
      // If item is already first do nothing
      if (item.prev) {
        // Link previous item with next of moved item
        item.prev.next = item.next;

        if (item.next) {
          // Link next item with prev of moded item
          item.next.prev = item.prev;
        } else {
          // In case we are moving last item, update tail
          this._last = item.prev;
        } // Set previous first item after moved item


        item.next = this._first;
        item.prev = null;

        if (this._first) {
          this._first.prev = item;
        } // Set moved item to first place


        this._first = item;
      }
    }
    /**
     * Removes item from cache.
     * @param item Item to be removed
     * @private
     */

  }, {
    key: "_remove",
    value: function _remove(item) {
      if (item.prev) {
        // Link previous item with next of deleted item
        item.prev.next = item.next;
      } else {
        // In case we are deleting first item, update head
        this._first = item.next;
      }

      if (item.next) {
        // Link next item with prev of deleted item
        item.next.prev = item.prev;
      } else {
        // In case we are deleting last item, update tail
        this._last = item.prev;
      } // Delete the item


      delete this._items[item.key];
      this._size--;
    }
    /**
     * Prune at least specified number of items, first delete
     * expired ones, then delete from last item until given
     * number of items to be deleted is reached.
     * @param atLeast Number of items to be removed
     * @private
     */

  }, {
    key: "_prune",
    value: function _prune() {
      var atLeast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var deleted = 0; // Delete all expired items first

      var item = this._last;

      while (item) {
        if (item.isExpired()) {
          this._remove(item);

          deleted++;
        }

        item = item.prev;
      } // Delete remaining number of items


      if (deleted < atLeast) {
        var _item = this._last;

        for (var i = 0; i < atLeast - deleted; i++) {
          this._remove(_item);

          _item = _item.prev; // Break in case all items are gone

          if (!_item) {
            break;
          }
        }
      }
    }
    /**
     * If available, deserializes cache content from browser local storage.
     * @private
     */

  }, {
    key: "_loadFromStorage",
    value: function _loadFromStorage() {
      if (localStorageAvailable && this._name) {
        var persistedCache = localStorage.getItem(this._name);

        if (persistedCache) {
          this.fromJSON(persistedCache);
        }
      }
    }
    /**
     * If available, serilalizes cache content to browser local storage.
     * @private
     */

  }, {
    key: "_storeToStorage",
    value: function _storeToStorage() {
      if (localStorageAvailable && this._name) {
        localStorage.setItem(this._name, JSON.stringify(this));
      }
    }
  }]);

  return LruCache;
}();

module.exports = LruCache;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Base64 = /*#__PURE__*/function () {
  function Base64() {
    _classCallCheck(this, Base64);
  }

  _createClass(Base64, null, [{
    key: "encode",
    value: function encode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      return Buffer.from(value, encoding).toString('base64');
    }
  }, {
    key: "decode",
    value: function decode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var rawData = Buffer.from(value, 'base64');

      if (encoding === "binary") {
        return rawData;
      } else {
        return rawData.toString(encoding);
      }
    }
  }, {
    key: "urlSafeEncode",
    value: function urlSafeEncode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var noPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (typeof encoding === "boolean") {
        noPadding = encoding;
        encoding = "utf8";
      }

      var base64 = this.encode(value, encoding);
      base64 = base64.replace(/\+/g, '-').replace(/\//g, '_');

      if (noPadding) {
        base64 = base64.replace(/=/g, '');
      }

      return base64;
    }
  }, {
    key: "urlSafeDecode",
    value: function urlSafeDecode(value) {
      var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "utf8";
      var base64 = value.replace(/-/g, '+').replace(/_/g, '/');
      return this.decode(base64, encoding);
    }
  }]);

  return Base64;
}();

module.exports = Base64;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(32).Buffer))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(33)
var ieee754 = __webpack_require__(34)
var isArray = __webpack_require__(35)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(21)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),
/* 34 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 35 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ })
/******/ ]);
});