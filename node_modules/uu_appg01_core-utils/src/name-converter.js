/**
 * Convert nameSpace to file path
 * @param str
 * @returns {string|string}
 * @constructor
 */
function NameConverter(str) {
  const REGEX = /^([_]*[$@#]?)?(?:[a-zA-Z0-9]+(?:[_]+[a-zA-Z0-9]+)?)*([_]+)?$/;

  function _scan(s, re) {
    if (!re.global) throw "Name Converter Error";
    let m = re.exec(s),
      r = [];
    while (m) {
      m.shift();
      r.push(m);
      m = re.exec(s);
    }
    return r;
  }

  let strings = [];
  let result = "";

  str.match(REGEX);
  let prefix = str.match(/^[_]*/)[0];
  str = str.substring(prefix.length, str.length);
  let postfix = str.match(/[_]*$/)[0];
  str = str.substring(0, str.length - postfix.length);

  let befIndex = 0;
  _scan(str, /[a-z]+|[A-Z]+|[0-9]+/g).forEach(val => {
    let index = val["index"];
    strings.push(str.substring(befIndex, index));
    befIndex = index;
  });
  strings.push(str.substring(befIndex));
  if (strings[0] === "/" || strings[0] === "\\") strings.shift();

  for (let i = 0; i < strings.length; i += 1) {
    let act = strings[i];
    let nxt = strings[i + 1];

    if (act.match(/^[a-z]+|[0-9]+$/)) {
      result += act;
      result += nxt !== undefined ? "-" : "";
    } else if (act.match(/^[A-Z]$/)) {
      result += act.toLowerCase();
    } else if (act.match(/^[A-Z]+$/)) {
      if (nxt === undefined || nxt.match(/^[0-9]+$/)) {
        result += act.toLowerCase();
        result += nxt !== undefined ? "-" : "";
      } else {
        result += act.substring(0, act.length - 1).toLowerCase();
        result += "-";
        result += act[act.length - 1].toLowerCase();
      }
    }
  }

  result = prefix + result + postfix;

  return result;
}

module.exports = NameConverter;
