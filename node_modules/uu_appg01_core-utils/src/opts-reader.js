"use strict";

const Config = require("./config/config.js");
const ValueConverter = require("./value-converter.js");

/**
 * Component for reading option from multiple option
 * sources with support for providing default values
 * and basic type conversions.
 * Example:
 *   reader = new OptsReader(opts1, opts2, Config);
 *   anyType = reader.get("opt_key")
 *   number = reader.getNumber("opt_key", 42)
 */
class OptsReader {
  /**
   * Creates new instance of options reader.
   * @param opts List of option sources to be read
   *   (ordered by priority from highest to lowest).
   */
  constructor(...opts) {
    this._optList = opts;
  }

  /**
   * Returns option with given name or default value
   * if none of option sources provide required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {*}
   */
  get(key, defaultValue = null) {
    let value = null;
    for (let opts of this._optList) {
      if (opts === Config) {
        if (opts.hasKey(key, false)) {
          value = opts.get(key, false);
        }
      } else if (opts) {
        if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
          value = opts[key];
        }
      }
      if (value != null) {
        break;
      }
    }
    if (value == null) {
      value = defaultValue;
    }
    return value;
  }

  /**
   * Checks if any of option sources provide
   * option with given name.
   * @param key Option name.
   * @returns {Boolean} True if option exists.
   */
  hasKey(key) {
    for (let opts of this._optList) {
      if (opts === Config) {
        if (opts.hasKey(key)) {
          return true;
        }
      } else if (opts) {
        if (opts.hasOwnProperty(key) && opts[key] !== undefined) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Returns string value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {String}
   */
  getString(key, defaultValue = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toString(value);
  }

  /**
   * Returns number value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {Number}
   */
  getNumber(key, defaultValue = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toNumber(value);
  }

  /**
   * Returns boolean value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {Boolean}
   */
  getBoolean(key, defaultValue = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toBoolean(value);
  }

  /**
   * Returns time value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param defaultValue Default options value.
   * @returns {Date}
   */
  getTime(key, defaultValue = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toTime(value);
  }

  /**
   * Returns class value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param sourcePath Path to app/library source folder (app|src) from where to load class.
   * @param defaultValue Default options value.
   * @returns {Function}
   */
  getClass(key, sourcePath, defaultValue = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toClass(value, sourcePath);
  }

  /**
   * Returns array value created from option with given
   * name or default value if none of options sources provide
   * required option.
   * @param key Option name.
   * @param type If set, all array items will be converted to
   *   given type (one of "string", "number", "boolean", "time", "class")
   * @param defaultValue Default options value.
   * @param sourcePath Path to app/library source folder (app|src) from where to load class
   *   Required for "class" conversion.
   * @returns {Array}
   */
  getArray(key, type = null, defaultValue = null, sourcePath = null) {
    let value = this.get(key, defaultValue);
    return ValueConverter.toArray(value, type, sourcePath);
  }
}

module.exports = OptsReader;
