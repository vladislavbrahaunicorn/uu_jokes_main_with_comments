"use strict";

const BaseError = require("./base-error.js");
const Loader = require("./loader.js");

const INVALID_DATE = new Date("foo");

/**
 * Helper for converting values to different basic types.
 */
class ValueConverter {
  /**
   * Converts value to string.
   * @param value Value to be converted.
   * @returns {String} Converted value.
   */
  static toString(value) {
    if (value === null || value === undefined) {
      return null;
    } else {
      return value.toString();
    }
  }

  /**
   * Converts value to number.
   * @param value Value to be converted.
   * @returns {Number} Converted value.
   */
  static toNumber(value) {
    if (value === null || value === undefined) {
      return null;
    } else if (typeof value === "number") {
      return value;
    } else if (typeof value === "string") {
      if (/^[+-]?[\d]+(\.[\d]+)?([eE][+-]?[\d]+)?$/.test(value)) {
        return Number(value);
      } else {
        throw new BaseError(`No implicit conversion of "${value}" to number`);
      }
    } else {
      throw new BaseError(`No implicit conversion of "${typeof value}" to number`);
    }
  }

  /**
   * Converts value to boolean.
   * @param value Value to be converted.
   * @returns {Boolean} Converted value.
   */
  static toBoolean(value) {
    if (value === null || value === undefined) {
      return null;
    } else if (typeof value === "boolean") {
      return value;
    } else if (typeof value === "number") {
      return value !== 0;
    } else if (typeof value === "string") {
      if (/^(false|0)$/i.test(value)) {
        return false;
      } else if (/^(true|1)$/i.test(value)) {
        return true;
      } else {
        throw new BaseError(`No implicit conversion of "${value}" to boolean`);
      }
    } else {
      throw new BaseError(`No implicit conversion of "${typeof value}" to boolean`);
    }
  }

  /**
   * Converts value to time.
   * @param value Value to be converted.
   * @returns {Date} Converted value.
   */
  static toTime(value) {
    if (value === null || value === undefined) {
      return null;
    } else if (value instanceof Date) {
      return value;
    } else if (typeof value === "number") {
      return new Date(value);
    } else if (typeof value === "string") {
      let date = new Date(value);
      if (date.toString() === INVALID_DATE.toString()) {
        throw new BaseError(`No implicit conversion of "${value}" to time`);
      } else {
        return date;
      }
    } else {
      throw new BaseError(`No implicit conversion of "${typeof value}" to time`);
    }
  }

  /**
   * Converts value to class.
   * @param value Value to be converted.
   * @param sourcePath Path to app/library source folder (app|src) from where to load class.
   * @returns {Function} Converted value.
   */
  static toClass(value, sourcePath) {
    if (value === null || value === undefined) {
      return null;
    } else if (typeof value === "function") {
      // TODO Check that function is constructor
      return value;
    } else if (typeof value === "string") {
      if (sourcePath === null || sourcePath === undefined) {
        throw new BaseError("Parameter sourcePath is required to resolve class from string");
      }
      return Loader.loadRealization(sourcePath, value, false);
    } else {
      return value.constructor;
    }
  }

  /**
   * Converts value to array of given types.
   * @param value Value to be converted.
   * @param type If set, all array items will be converted to
   *   given type (one of "string", "number", "boolean", "time", "class")
   * @param sourcePath Path to app/library source folder (app|src) from where to load class
   *   Required for "class" conversion.
   * @returns {Array} Converted value.
   */
  static toArray(value, type = null, sourcePath = null) {
    let arr = null;
    if (value === null || value === undefined) {
      return null;
    } else if (value instanceof Array) {
      arr = value;
    } else if (typeof value === "string") {
      arr = value.split(/[ ]*,[ ]*/);
    } else {
      arr = [value];
    }
    switch (type) {
      case null:
      case undefined:
        // No conversion
        break;
      case "string":
        arr = arr.map(item => {
          return this.toString(item);
        });
        break;
      case "number":
        arr = arr.map(item => {
          return this.toNumber(item);
        });
        break;
      case "boolean":
        arr = arr.map(item => {
          return this.toBoolean(item);
        });
        break;
      case "time":
        arr = arr.map(item => {
          return this.toTime(item);
        });
        break;
      case "class":
        arr = arr.map(item => {
          return this.toClass(item, sourcePath);
        });
        break;
      default:
        throw new BaseError(`Unknown conversion type "${type}"`);
    }
    return arr;
  }
}

module.exports = ValueConverter;
