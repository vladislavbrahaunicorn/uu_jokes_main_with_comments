"use strict";

/**
 * Ancestor of all errors raised by UAF. Extends standard
 * JavaScript error by unique error id, timestamp and also
 * option to provide error cause.
 */
class BaseError extends Error {
  /**
   * Creates new instance of error
   * @param message Error message
   * @param cause Error cause
   */
  constructor(message, cause = null) {
    if (message instanceof Error) {
      cause = message;
      message = null;
    }
    super(message ? message.toString() : "");
    this._id = "00000000000000000000000000000000".replace(/0/g, function() {
      return (~~(Math.random() * 16)).toString(16);
    });
    this._timestamp = new Date();
    this._cause = cause;
    this._name = this.constructor.name;
  }

  /**
   * Returns unique error ID (helps with lookup of error in logs).
   * @returns {string} Unique error ID
   */
  get id() {
    return this._id;
  }

  /**
   * Sets error id.
   * @param {string} id error ID
   */
  set id(id) {
    this._id = id;
  }

  /**
   * Returns timestamp of error instantiation (may differ from error log time).
   * @returns {Date} Timestamp of error instantiation
   */
  get timestamp() {
    return this._timestamp;
  }

  /**
   * Returns error cause
   * @returns {Error|null} Error cause
   */
  get cause() {
    return this._cause;
  }

  /**
   * Sets error cause.
   * @param {Error|null} error Error cause
   */
  set cause(error) {
    this._cause = error;
  }

  /**
   * Returns error name
   * @return {string} Error name
   */
  get name() {
    return this._name;
  }
}

module.exports = BaseError;
