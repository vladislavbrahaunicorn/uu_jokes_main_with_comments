//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useState } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import Css from "./internal/css";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Links.FileLinkView"),
  nestingLevel: UU5.Environment.getNestingLevelList("smallBox", "inline"),
  classNames: {
    inlineBlock: () => Css.css`display: inline-block;`
  }
};

//@@viewOff:statics

function getCode(code) {
  code && code.match(UU5.Common.REGEXP.uu5data) && (code = UU5.Common.Tools.parseFromUu5Data(code));
  return code;
}

function getLink(props, content, getBinaryDataUri) {
  return (
    <UU5.Bricks.Link
      {...UU5.Common.VisualComponent.getAttrs(props)}
      authenticate
      target={props.target}
      href={props.code ? getBinaryDataUri(getCode(props.code), props.contentDisposition) : undefined}
      content={content || props.fileName || "link"}
      colorSchema={props.colorSchema}
    />
  );
}

function getButton(props, content, href) {
  let commonProps = UU5.Common.VisualComponent.getAttrs(props);
  props.width && (commonProps.className += " " + Css.css`width: ${UU5.Common.Tools.fillUnit(props.width)};`);
  return (
    <UU5.Bricks.Button
      {...commonProps}
      target={props.target}
      bgStyle={props.bgStyle}
      colorSchema={props.colorSchema}
      elevation={props.elevation}
      borderRadius={UU5.Common.Tools.fillUnit(props.borderRadius)}
      href={href}
    >
      {props.icon && <UU5.Bricks.Icon icon={props.icon} />}
      {content || (props.icon ? "" : props.fileName) || (props.icon ? "" : "link")}
    </UU5.Bricks.Button>
  );
}

function getTouchIcon(props, content, href) {
  let commonProps = UU5.Common.VisualComponent.getAttrs(props);
  props.width && (commonProps.className += " " + Css.css`width: ${UU5.Common.Tools.fillUnit(props.width)};`);
  return (
    <div className={STATICS.classNames.inlineBlock()}>
      <UU5.Bricks.TouchIcon
        {...commonProps}
        icon={props.icon}
        href={href}
        content={content}
        target={props.target}
        bgStyle={props.bgStyle}
        colorSchema={props.colorSchema}
      />
    </div>
  );
}

function getHref(code, token, setToken, getBinaryDataUri) {
  let src;
  if (code) {
    src = getBinaryDataUri(getCode(code)) + (token ? "&access_token=" + token : "");
    if (!token) {
      UU5.Common.Tools.getCallToken(src, UU5.Environment.getSession()).then(setToken);
    }
  }
  return src;
}

const FileLinkView = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    colorSchema: UU5.PropTypes.string,
    content: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]),
    fileName: UU5.PropTypes.string,
    type: UU5.PropTypes.oneOf(["link", "button", "touchIcon"]),

    bgStyle: UU5.PropTypes.oneOf(["filled", "outline", "transparent", "underline"]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    borderRadius: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    width: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    icon: UU5.PropTypes.string,

    contentDisposition: UU5.PropTypes.oneOf(["inline", "attachment"]),
    target: UU5.PropTypes.oneOf(["_blank", "_parent", "_top", "_self"])
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: null,
    colorSchema: undefined,
    content: "",
    fileName: undefined,
    type: "link",

    bgStyle: "filled",
    elevation: 0,
    borderRadius: "2px",
    width: null,
    icon: null,

    contentDisposition: "attachment",
    target: "_self"
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    const [token, setToken] = useState();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let content = props.content;
    if (content && content.type && content.type.tagName === "UuDcc.Bricks.Placeholder") {
      content = "";
    }
    //@@viewOff:private

    //@@viewOn:render
    const currentNestingLevel = UU5.Utils.NestingLevel.getNestingLevel(props, STATICS);

    let child;
    if (currentNestingLevel === "inline" || props.type === "link") {
      child = getLink(props, content, getBinaryDataUri);
    } else if (props.type === "button") {
      child = getButton(props, content, getHref(props.code, token, setToken, getBinaryDataUri));
    } else if (props.type === "touchIcon") {
      child = getTouchIcon(props, content, getHref(props.code, token, setToken, getBinaryDataUri));
    }
    return child;
    //@@viewOff:render
  }
});

export default FileLinkView;
