//@@viewOn:imports
import UU5 from "uu5g04";
import { createVisualComponent, useState } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import Lsi, { PLACEHOLDERS } from "../config/lsi.js";
import Css from "./internal/css.js";

import FileLinkView from "./file-link-view.js";
import ImagePreview from "../editable/image-preview";
import imagePlaceholderUrl from "../assets/image-placeholder-08.jpg";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Links.FileBlockLinkView"),
  nestingLevel: UU5.Environment.getNestingLevelList("smallBox", "inline"),
  classNames: {
    preview: type => Css.css`
      text-align: center;
      display: -webkit-box;
      display: flex;
      -webkit-box-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      align-items: center;
      overflow: hidden;
      ${type === "vertical" && "border-bottom: 1px solid rgba(0,0,0,.12);"}
      ${type === "horizontal" && "border-right: 1px solid rgba(0,0,0,.12);"}
    `,
    previewIcon: type => Css.css`
      padding: 8px;
      width: ${type === "horizontal" ? "100px;" : "100%;"}
      .uu5-bricks-icon {
        font-size: 64px;
      }
    `,
    previewImage: () => Css.css`
      width: 50%;
      min-width: 50%;
      height: 100%;
      width: 100%;
    `,
    contain: () => Css.css`
      & .uu5-bricks-image {
        margin: 0 auto;
        height: 100%;
        object-fit: contain;
        border: 8px solid transparent;
      }
    `,
    cover: () => Css.css`
      & .uu5-bricks-image {
        height: 100%;
        width: 100%;
        object-fit: cover;
      }
    `,
    info: (type, isPlaceholder) => Css.css`
      padding: 8px;
      width: ${type === "horizontal" ? "50%" : "100%"};
      ${isPlaceholder ? "flex-grow: 1; display: flex; align-items: center;" : ""}
    `,
    ellipsis: () => Css.css`
      display: block;
      text-overflow: ellipsis;
      overflow: hidden;
    `,
    secondaryAttribute: () => Css.css`font-size: 12px;`,
    inlineBlock: verticalAlign => Css.css`display: inline-block; vertical-align: ${verticalAlign};`
  }
};

//@@viewOff:statics

function getTypeAndIcon(binary) {
  let icon;
  let type;

  if (binary && binary.contentType) {
    if (binary.contentType.match(/\/svg/)) {
      icon = "mdi-file-image";
      type = "svg";
    } else if (binary.contentType.match(/image\//)) {
      icon = "mdi-file-image";
      type = "image";
    } else if (binary.contentType.match(/\/pdf/)) {
      icon = "mdi-file-pdf";
    } else if (binary.contentType.match(/(\/html)|(\/xml)/)) {
      icon = "mdi-file-xml";
    } else if (binary.contentType.match(/(\/text$)|(^text\/)/)) {
      icon = "mdi-file-document";
    } else if (binary.contentType.match(/\/json/)) {
      icon = "mdi-json";
    } else if (binary.filename && binary.filename.match(/(\.rar$)|(\.zip$)|(\.7z$)|(\.tgz$)|(\.tar$)|(\.tar\.gz$)/)) {
      icon = "mdi-package";
    } else {
      icon = "mdi-file";
    }
  }

  return { icon, type };
}

function getCode(code) {
  code && code.match(UU5.Common.REGEXP.uu5data) && (code = UU5.Common.Tools.parseFromUu5Data(code));
  return code;
}

function getHeight(aspectRatio, width) {
  let splitWidth = width.split(/(\d+)/).filter(Boolean);
  let splitAspectRatio = aspectRatio.split(":");
  return `${Math.round((splitWidth[0] / splitAspectRatio[0]) * splitAspectRatio[1])}${
    splitWidth[1] ? splitWidth[1] : ""
  }`;
}

function getCommonProps(props, isPlaceholder) {
  let commonProps = { ...UU5.Common.VisualComponent.getAttrs(props) };
  let configAspectRatio;
  let aspectRatio;

  if (props.type === "horizontal") {
    configAspectRatio = Cfg.ASPECT_RATIO_HORIZONTAL;
    aspectRatio = props.aspectRatio ? props.aspectRatio : "3:1";
  } else {
    configAspectRatio = Cfg.ASPECT_RATIO_VERTICAL;
    aspectRatio = props.aspectRatio ? props.aspectRatio : "16:9";
  }

  let width = props.width ? props.width : configAspectRatio[aspectRatio];
  width += "";
  let styles = `
    overflow: hidden;
    width: ${UU5.Common.Tools.fillUnit(width)};
    height: ${UU5.Common.Tools.fillUnit(aspectRatio === "custom" ? props.height : getHeight(aspectRatio, width))};
    ${!isPlaceholder ? "&:hover {cursor: pointer}" : ""}

    display: flex;
    flex-direction: column;
    -webkit-box-align: stretch;
    align-items: stretch;
  `;
  props.type === "horizontal" && (styles += ` flex-direction: row; align-items: center; `);
  props.borderRadius && (styles += ` border-radius: ${UU5.Common.Tools.fillUnit(props.borderRadius)};`);
  styles && (commonProps.className += " " + Css.css`${styles}`);

  props.colorSchema &&
    (commonProps.className += " uu5-common-text color-schema-" + UU5.Environment.getColorSchema(props.colorSchema));
  props.elevation && (commonProps.className += ` uu5-common-elevation-${props.elevation}`);
  props.bgStyle && (commonProps.className += ` uu5-common-bg-style-${props.bgStyle}`);

  return commonProps;
}

function getBlockContent(props, content, data, getBinaryDataUri, token, setToken) {
  let commonProps = getCommonProps(props);
  let { icon, type } = getTypeAndIcon(data);
  if (props.previewSrc) {
    icon = props.previewSrc;
  }

  // because of deprecated prop showPreview
  let preview = props.preview;
  if (props.hasOwnProperty("showPreview")) {
    preview = props.showPreview ? "contain" : "icon";
  }

  let previewChild;
  if (preview !== "icon" && (type === "image" || type === "svg" || props.previewSrc)) {
    let classNames = STATICS.classNames.preview(props.type) + " " + STATICS.classNames.previewImage();
    preview === "contain" && (classNames += " " + STATICS.classNames.contain());
    preview === "cover" && (classNames += " " + STATICS.classNames.cover());
    previewChild = (
      <div className={classNames}>
        {props.previewSrc ? <UU5.Bricks.Image src={getBinaryDataUri(props.previewSrc)} authenticate/> : <ImagePreview code={props.code} />}
      </div>
    );
  } else {
    previewChild = (
      <div
        className={
          STATICS.classNames.preview(props.type) + " uu5-common-text " + STATICS.classNames.previewIcon(props.type)
        }
      >
        <UU5.Bricks.Icon icon={icon} />
      </div>
    );
  }

  let fileUri = getBinaryDataUri(getCode(data.code), props.contentDisposition);
  if (!token) {
    UU5.Common.Tools.getCallToken(fileUri, UU5.Environment.getSession()).then(setToken);
  }
  return (
    <div {...commonProps} onClick={() => window.open(fileUri + (token ? "&access_token=" + token : ""))}>
      {previewChild}
      <div className={STATICS.classNames.info(props.type)}>
        {props.showLink && (
          <UU5.Bricks.Link
            className={STATICS.classNames.ellipsis() + " uu5-common-text"}
            content={content || data.filename}
          />
        )}
        {props.showCode && (
          <span
            className={STATICS.classNames.ellipsis() + " uu5-common-text " + STATICS.classNames.secondaryAttribute()}
          >
            {data.code}
          </span>
        )}
        {props.showDate && data.sys && (
          <span className={STATICS.classNames.secondaryAttribute() + " uu5-common-text"}>
            {new Date(data.sys.mts).toLocaleString().slice(0, -3)}
          </span>
        )}
      </div>
    </div>
  );
}

function getBlockPlaceholder(props) {
  let classNames =
    STATICS.classNames.preview(props.type) + " " + STATICS.classNames.previewImage() + STATICS.classNames.contain();
  return (
    <div {...getCommonProps(props, true)}>
      <div className={classNames}>
        <UU5.Bricks.Image src={imagePlaceholderUrl} />
      </div>
      <div className={STATICS.classNames.info(props.type, true)}>
        <span className={STATICS.classNames.ellipsis() + " uu5-common-text " + STATICS.classNames.secondaryAttribute()}>
          {PLACEHOLDERS.fileBlockLink.text}
        </span>
      </div>
    </div>
  );
}

function getBlock(props, content, getBinaryDataUri, callBinaryGetBinary, token, setToken) {
  return (
    <div className={STATICS.classNames.inlineBlock(props.verticalAlign)}>
      {props.code ? (
        <UU5.Common.Loader onLoad={callBinaryGetBinary} data={{ code: getCode(props.code) }}>
          {({ isLoading, isError, data }) => {
            if (data && typeof data.headers === "function") {
              data = data.data;
            }
            if (isLoading) {
              return data && data.sys && !isError ? (
                getBlockContent(props, content, data, getBinaryDataUri, token, setToken)
              ) : (
                <UU5.Bricks.Loading />
              );
            } else if (isError) {
              return <UU5.Common.Error content={<UU5.Bricks.Lsi lsi={Lsi.loadFileDataFailed} />} />;
            } else {
              return getBlockContent(props, content, data, getBinaryDataUri, token, setToken);
            }
          }}
        </UU5.Common.Loader>
      ) : (
        getBlockPlaceholder(props)
      )}
    </div>
  );
}

const FileBlockLinkView = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    colorSchema: UU5.PropTypes.string,
    content: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]),
    type: UU5.PropTypes.oneOf(["vertical", "horizontal"]),

    bgStyle: UU5.PropTypes.oneOf(["filled", "outline", "transparent", "underline"]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    borderRadius: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    aspectRatio: UU5.PropTypes.oneOf([
      "1:1",
      "4:3",
      "16:9",
      "3:2",
      "5:4",
      "2:1",
      "3:1",
      "4:1",
      "45:10",
      "16:10",
      "3:4",
      "2:3",
      "1:2",
      "custom"
    ]),
    width: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    height: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    verticalAlign: UU5.PropTypes.oneOf(["top", "middle", "bottom"]),

    preview: UU5.PropTypes.oneOf(["contain", "cover", "icon"]),
    previewSrc: UU5.PropTypes.string,
    contentDisposition: UU5.PropTypes.oneOf(["inline", "attachment"]),
    showLink: UU5.PropTypes.bool,
    showCode: UU5.PropTypes.bool,
    showDate: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: null,
    colorSchema: undefined,
    content: "",
    type: "vertical",

    bgStyle: "filled",
    elevation: 0,
    borderRadius: "2px",
    aspectRatio: "16:9",
    width: null,
    height: null,
    verticalAlign: "middle",

    preview: "contain",
    previewSrc: "",
    contentDisposition: "attachment",
    showLink: true,
    showCode: true,
    showDate: true,
    contentEditable: false
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri, callBinaryGetBinary } = useBinary();
    const [token, setToken] = useState();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let content = props.content;
    if (content && content.type && content.type.tagName === "UuDcc.Bricks.Placeholder") {
      content = "";
    }
    //@@viewOff:private

    //@@viewOn:render
    const currentNestingLevel = UU5.Utils.NestingLevel.getNestingLevel(props, STATICS);

    return currentNestingLevel === "inline" ? (
      <FileLinkView {...props} content={content} />
    ) : (
      getBlock(props, content, getBinaryDataUri, callBinaryGetBinary, token, setToken)
    );
    //@@viewOff:render
  }
});

export default FileBlockLinkView;
