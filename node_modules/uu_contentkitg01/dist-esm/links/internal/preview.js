//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";
import Css from "./css";

import InfoMessage from "../../editable/info-message.js";
import FileManager from "../../editable/file-manager";
import IconPickerInput from "../../editable/icon-picker-input";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.Preview"),
  classNames: {
    marginBottom: () => Css.css` &.uu5-forms-input { margin-bottom: 0; }`,
    marginRow: () => Css.css`margin: 0px -8px;`
  }
};
//@@viewOff:statics
const Preview = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    // because of deprecated prop showPreview
    let preview = props.componentProps.preview;
    if (!preview && props.componentProps.hasOwnProperty("showPreview")) {
      preview = props.componentProps.showPreview ? "contain" : "icon";
    }
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        <UU5.Forms.SwitchSelector
          label={Lsi.previewImage}
          value={preview}
          onChange={opt => props.onChangeProps({ preview: opt.value, showPreview: undefined })}
          items={[{ value: "contain" }, { value: "cover" }, { value: "icon" }]}
        />
        <InfoMessage message={Lsi.help.previewImage} />
        {props.componentProps.preview === "icon" ? (
          <IconPickerInput {...props} iconProps="previewSrc" />
        ) : (
          <FileManager {...props} propName="previewSrc" listOnlyImages />
        )}
      </>
    );
    //@@viewOff:render
  }
});

export default Preview;
