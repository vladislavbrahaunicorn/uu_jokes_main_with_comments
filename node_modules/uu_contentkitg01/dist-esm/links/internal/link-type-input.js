//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";

import BgStyleInput from "../../editable/bg-style-input";
import ElevationInput from "../../editable/elevation-input";
import BorderRadiusInput from "../../editable/border-radius-input";
import WidthInput from "../../editable/width-input";
import Css from "./css";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.LinkTypeInput"),
  classNames: {
    marginBottom: () => Css.css` &.uu5-forms-input { margin-bottom: 0; }`,
    marginRow: () => Css.css`margin: 0px -8px;`
  }
};
//@@viewOff:statics

function generateOptionsItems() {
  return UU5.Environment.colorSchema.map(colorSchema => {
    return <UU5.Forms.Select.Option key={colorSchema} value={colorSchema} />;
  });
}

const LinkTypeInput = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    const disabled = props.componentProps.type === "link";
    return [
      <UU5.Forms.SwitchSelector
        key="type"
        label={Lsi.type}
        value={props.componentProps.type}
        onChange={opt => props.onChangeProps({ type: opt.value })}
        items={[
          { value: "link", content: Lsi.linkSmall },
          { value: "button", content: Lsi.buttonSmall },
          { value: "touchIcon", content: Lsi.touchIcon }
        ]}
      />,
      <UU5.Bricks.Row className={STATICS.classNames.marginRow()} key="row">
        <UU5.Bricks.Column colWidth="xs-12 s-6">
          <UU5.Forms.Select
            className={STATICS.classNames.marginBottom()}
            label={Lsi.color}
            value={props.componentProps.colorSchema}
            onChange={opt => props.onChangeProps({ colorSchema: opt.value })}
            inputColWidth="xs-12"
          >
            {generateOptionsItems()}
          </UU5.Forms.Select>
        </UU5.Bricks.Column>
        <UU5.Bricks.Column colWidth="xs-12 s-6">
          <UU5.Forms.IconPicker
            className={STATICS.classNames.marginBottom()}
            key="icon"
            size="m"
            label={Lsi.icon}
            value={props.componentProps.icon}
            onChange={opt => props.onChangeProps({ icon: opt.value })}
            disabled={props.componentProps.type === "link"}
            categories={["mdi", "glyphicon", "fa", "uu5", "plus4u5"]}
          />
        </UU5.Bricks.Column>
      </UU5.Bricks.Row>,
      <BgStyleInput
        key="bgStyle"
        label={Lsi.bgStyleButton}
        disabled={props.componentProps.type === "link"}
        componentProps={props.componentProps}
        onChangeProps={props.onChangeProps}
        items={
          props.componentProps.type === "touchIcon" ? [
            { value: "filled", content: Lsi.filled },
            { value: "transparent", content: Lsi.transparent }
          ] : undefined
        }
      />,
      <ElevationInput
        key="elevation"
        disabled={props.componentProps.type === "link" || props.componentProps.type === "touchIcon"}
        componentProps={props.componentProps}
        onChangeProps={props.onChangeProps}
      />,
      <BorderRadiusInput
        key="borderRadius"
        disabled={props.componentProps.type === "link" || props.componentProps.type === "touchIcon"}
        componentProps={props.componentProps}
        onChangeProps={props.onChangeProps}
      />,
      <WidthInput
        key="width"
        disabled={disabled}
        componentProps={props.componentProps}
        onChangeProps={props.onChangeProps}
        inputColWidth="xs-5 s-4"
      />
    ];
    //@@viewOff:render
  }
});

export default LinkTypeInput;
