//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";
import Css from "./css";

import InfoMessage from "../../editable/info-message.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.AspectRatioInput"),
  classNames: {
    marginBottom: () => Css.css` &.uu5-forms-input { margin-bottom: 0; }`,
    marginRow: () => Css.css`margin: 0px -8px;`
  }
};
//@@viewOff:statics

function getSwitchSelectItems(type) {
  let keys;
  if (type === "horizontal") {
    keys = Object.keys(Cfg.ASPECT_RATIO_HORIZONTAL);
  } else {
    keys = Object.keys(Cfg.ASPECT_RATIO_VERTICAL);
  }

  return keys.map(key => {
    return { value: key, content: key === "custom" && Lsi.custom };
  });
}

const AspectRatioInput = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    let width = UU5.Common.Tools.fillUnit(props.componentProps.width);
    let configAspectRation =
      props.componentProps.type === "horizontal" ? Cfg.ASPECT_RATIO_HORIZONTAL : Cfg.ASPECT_RATIO_VERTICAL;

    !width && (width = configAspectRation[props.componentProps.aspectRatio]);
    return (
      <div {...UU5.Common.VisualComponent.getAttrs(props)}>
        <UU5.Forms.SwitchSelector
          label={Lsi.arrangement}
          value={props.componentProps.type}
          onChange={({ value }) => {
            let changePropsData = { type: value };
            if (value !== props.componentProps.type) {
              if (value === "horizontal") {
                changePropsData.aspectRatio = "3:1";
                changePropsData.width = "432px";
              } else if (value === "vertical") {
                changePropsData.aspectRatio = "16:9";
                changePropsData.width = "448px";
              }
            }
            props.onChangeProps(changePropsData);
          }}
          items={[{ value: "vertical", content: Lsi.vertical }, { value: "horizontal", content: Lsi.horizontal }]}
        />
        <UU5.Forms.SwitchSelector
          label={Lsi.aspectRatio}
          value={`${props.componentProps.aspectRatio}`}
          onChange={({ value }) => {
            if (!width || configAspectRation[props.componentProps.aspectRatio] === width) {
              width = configAspectRation[value];
            }
            props.onChangeProps({ aspectRatio: value, width: width });
          }}
          items={getSwitchSelectItems(props.componentProps.type)}
        />
        {props.componentProps.aspectRatio === "custom" ? (
          <UU5.Bricks.Row key="row" className={STATICS.classNames.marginRow()}>
            <UU5.Bricks.Column colWidth="xs-6">
              <UU5.Forms.Text
                className={STATICS.classNames.marginBottom()}
                label={Lsi.width}
                value={width}
                onBlur={({ value }) => props.onChangeProps({ width: value })}
                inputColWidth="xs-12"
              />
            </UU5.Bricks.Column>
            <UU5.Bricks.Column colWidth="xs-6">
              <UU5.Forms.Text
                className={STATICS.classNames.marginBottom()}
                label={Lsi.height}
                value={props.componentProps.height}
                onBlur={({ value }) => props.onChangeProps({ height: value })}
                inputColWidth="xs-12"
              />
            </UU5.Bricks.Column>
          </UU5.Bricks.Row>
        ) : (
          <UU5.Forms.Text
            key="width"
            label={Lsi.width}
            value={width}
            onBlur={({ value }) => props.onChangeProps({ width: value })}
            inputColWidth="xs-5"
          />
        )}
        <InfoMessage message={Lsi.help.units} />
      </div>
    );
    //@@viewOff:render
  }
});

export default AspectRatioInput;
