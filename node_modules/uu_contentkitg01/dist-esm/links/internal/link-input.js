//@@viewOn:imports
import UU5 from "uu5g04";
import { createVisualComponent } from "uu5g04-hooks";
import { useRouter } from "uu_plus4u5g01-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.LinkInput")
};
//@@viewOff:statics

function getLsiValue(value) {
  if (value) {
    return typeof value === "string" ? value : UU5.Common.Tools.getLsiValueByLanguage(value);
  } else {
    return "";
  }
}

function generateOptionsItems(routeList, value) {
  let options = [];
  if (Cfg.urlRegex.test(value)) {
    options.push({
      value: value
    });
  }
  routeList.forEach(route => {
    options.push({
      value: route.code || route.useCase + UU5.Common.Url.encodeQuery(route.params),
      content: getLsiValue(route.name) + ` (${route.code || route.useCase})`
    });
  });

  return options;
}

function getWholeValue(code, routeList) {
  for (let route of routeList) {
    if (route.code === code) {
      return route.code;
    } else if (route.useCase === code) {
      return route.useCase + UU5.Common.Url.encodeQuery(route.params);
    }
  }
  return code;
}

function getSelectCodeInput(props, routeList) {
  return (
    <UU5.Forms.TagSelect
      label={Lsi.link}
      value={getWholeValue(props.componentProps.code, routeList)}
      allowCustomTags
      availableTags={generateOptionsItems(routeList, props.componentProps.code)}
      placeholder={Lsi.linkPlaceholder}
      onChange={opt => {
        let value = opt.value && opt.value[0];

        if (Cfg.urlRegex.test(value)) {
          let data = { code: value };
          !Cfg.urlRegex.test(props.componentProps.code) && (data.target = "_blank");
          opt.component.onChangeDefault(opt, props.onChangeProps(data));
        } else if (!/\s/.test(value) && /\./.test(value)) {
          let data = { code: "http://" + value };
          !Cfg.urlRegex.test(props.componentProps.code) && (data.target = "_blank");
          opt.component.onChangeDefault(opt, props.onChangeProps(data));
        } else {
          let notUserInput = false;
          let routeName;
          for (let route of routeList) {
            let name = getLsiValue(route.name);
            if (name === props.componentProps.content) {
              notUserInput = true;
            }
            if (
              (route.code && route.code === value) ||
              route.useCase + UU5.Common.Url.encodeQuery(route.params) === value
            ) {
              routeName = name;
            }
          }
          if (routeName) {
            let data = { code: value };
            Cfg.urlRegex.test(props.componentProps.code) && (data.target = "_self");
            opt.component.onChangeDefault(opt, props.onChangeProps(data));
          } else {
            // FIXME if we set feedback value it will cause error
            opt.component.setFeedback("error", Lsi.tagSelectError);
          }
        }
      }}
    />
  );
}

const LinkInput = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { routeList } = useRouter();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        {getSelectCodeInput(props, routeList || [])}
        <UU5.Forms.Text
          label={Lsi.text}
          value={getLsiValue(props.componentProps.content)}
          onBlur={({ value }) => props.onChangeProps({ content: value })}
        />
      </>
    );
    //@@viewOff:render
  }
});

export default LinkInput;
