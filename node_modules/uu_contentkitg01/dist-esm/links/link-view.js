//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";
import { useRouter } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import Css from "./internal/css.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Links.Link.View"),
  nestingLevel: UU5.Environment.getNestingLevelList("smallBox", "inline"),
  classNames: {
    inlineBlock: () => Css.css`display: inline-block;`
  }
};
//@@viewOff:statics

function getLsiValue(value) {
  return typeof value === "string" ? value : UU5.Common.Tools.getLsiValueByLanguage(value);
}

function getHref(code, fragment, route) {
  if (!route) {
    return `${code}${fragment || ""}`;
  } else {
    return `${(route.useCase || "") + UU5.Common.Url.encodeQuery(route.params)}${fragment || ""}`;
  }
}

function getTouchIcon(props, commonProps, content, route) {
  props.width && (commonProps.className += " " + Css.css`width: ${UU5.Common.Tools.fillUnit(props.width)};`);
  return (
    <div className={STATICS.classNames.inlineBlock()}>
      <UU5.Bricks.TouchIcon
        {...commonProps}
        icon={props.icon}
        bgStyle={props.bgStyle}
        content={getValueFromRoute(route, props, content)}
      />
    </div>
  );
}

function getButton(props, commonProps, content, route) {
  props.width && (commonProps.className += " " + Css.css`width: ${UU5.Common.Tools.fillUnit(props.width)};`);
  return (
    <UU5.Bricks.Button
      {...commonProps}
      bgStyle={props.bgStyle}
      elevation={props.elevation}
      borderRadius={UU5.Common.Tools.fillUnit(props.borderRadius)}
    >
      {props.icon && <UU5.Bricks.Icon icon={props.icon} />}
      {getValueFromRoute(route, props, content)}
    </UU5.Bricks.Button>
  );
}

function getLink(props, commonProps, content, route) {
  return <UU5.Bricks.Link {...commonProps} content={getValueFromRoute(route, props, content) || "link"} />;
}

function getValueFromRoute(route, props, content) {
  if (!content) {
    if (route && route.name) {
      return getLsiValue(route.name);
    } else {
      return props.icon && props.type === "button" ? "" : props.code;
    }
  } else {
    return content;
  }
}

function getRouteFromRouteList(routeList, code) {
  return routeList && routeList.find(route => {
      if (route.code && route.code === code) {
        return true;
      } else if (code) {
        let useCase = code.replace(/\?.*/, "");
        let index = code.indexOf("?");
        if (route.useCase === useCase && index === -1) {
          return true;
        } else if (code.substring(index, code.length) === UU5.Common.Url.encodeQuery(route.params)) {
          return true;
        }
      }
      return false;
    });
}

const LinkView = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    fragment: UU5.PropTypes.string,
    colorSchema: UU5.PropTypes.string,
    content: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]),
    target: UU5.PropTypes.oneOf(["_blank", "_parent", "_top", "_self"]),
    type: UU5.PropTypes.oneOf(["link", "button"]),

    bgStyle: UU5.PropTypes.oneOf(["filled", "outline", "transparent", "underline"]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    borderRadius: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    width: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    icon: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: null,
    fragment: null,
    colorSchema: undefined,
    content: "",
    target: "_self",
    type: "link",

    bgStyle: "filled",
    elevation: "0",
    borderRadius: "2px",
    width: null,
    icon: null
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { routeList } = useRouter();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let content = props.content;
    if (content && content.type && content.type.tagName === "UuDcc.Bricks.Placeholder") {
      content = "";
    }
    let route = getRouteFromRouteList(routeList, props.code);
    let commonProps = {
      ...UU5.Common.VisualComponent.getAttrs(props), // { id, className, style, disabled, hidden }
      href: getHref(props.code, props.fragment, route) || null,
      colorSchema: props.colorSchema,
      target: props.target
    };
    //@@viewOff:private

    //@@viewOn:render
    const currentNestingLevel = UU5.Utils.NestingLevel.getNestingLevel(props, STATICS);

    let child;
    if (currentNestingLevel === "inline" || props.type === "link") {
      child = getLink(props, commonProps, content, route);
    } else if (props.type === "button") {
      child = getButton(props, commonProps, content, route);
    } else if (props.type === "touchIcon") {
      child = getTouchIcon(props, commonProps, content, route);
    }
    return child;
    //@@viewOff:render
  }
});

export default LinkView;
