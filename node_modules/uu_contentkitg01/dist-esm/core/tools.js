import * as UU5 from "uu5g04";

function _isFalsy(elem) {
  switch (elem) {
    case null:
      return true;
    case undefined:
      return true;
    case "":
      return true;
    case 0:
      return true;
    default:
      if (Tools.assertType(elem, Array) && elem.length === 0) return true;
      return false;
  }
}

/**
 * document.caretRangeFromPoint with fallback to document.caretPositionFromPoint (with fallback to returning null)
 */
let caretRangeFromPoint = document.caretRangeFromPoint ? document.caretRangeFromPoint.bind(document) : null;
if (!caretRangeFromPoint && document.caretPositionFromPoint) {
  // FF
  caretRangeFromPoint = function(x, y) {
    let r = document.caretPositionFromPoint(x, y);
    if (r) {
      let range = document.createRange();
      range.setStart(r.offsetNode, r.offset);
      range.setEnd(r.offsetNode, r.offset);
      return range;
    }
    return null;
  };
}
if (!caretRangeFromPoint) caretRangeFromPoint = function() {};

let Tools = {
  caretRangeFromPoint,

  deepArrayCopy(array) {
    if (array === null) return null;
    if (Tools.assertType(array, Object)) return UU5.Common.Tools.mergeDeep({}, array);

    let copy = [];

    if (Tools.assertType(array, Array)) {
      for (let i = 0; i < array.length; ++i) copy[i] = this.deepArrayCopy(array[i]);
    } else {
      return array;
    }

    return copy;
  },

  assertType(obj, type) {
    if (obj) {
      return obj.constructor === type;
    }
  },

  isUriValid(uri) {
    if (!uri) return false;
    const urlSchema = /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)/;
    return urlSchema.test(uri);
  },

  getEditableComponent(name, component) {
    return UU5.Common.Tools.findComponent(name, {
      ref_: ref => (component._component = ref),
      component: component
    });
  },

  checkValues(prev, next) {
    let workField = this.deepArrayCopy(next);
    for (let elem in workField) {
      if (next[elem] === prev[elem] || (_isFalsy(workField[elem]) && _isFalsy(prev[elem]))) {
        delete workField[elem];
      }
    }
    return workField;
  }
};

export default Tools;
