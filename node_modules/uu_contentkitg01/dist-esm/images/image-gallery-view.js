//@@viewOn:imports
import UU5 from "uu5g04";
import { createComponent } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import "uu5imagingg01";
import imagePlaceholderUrl1 from "../assets/image-placeholder-03.jpg";
import imagePlaceholderUrl2 from "../assets/image-placeholder-09.jpg";
import imagePlaceholderUrl3 from "../assets/image-placeholder-10.jpg";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImageGallery")
};
//@@viewOff:statics

const ImageGalleryView = createComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.arrayOf(
      UU5.PropTypes.oneOfType([
        UU5.PropTypes.string,
        UU5.PropTypes.shape({
          src: UU5.PropTypes.string.isRequired,
          thumb: UU5.PropTypes.string
        })
      ])
    ).isRequired,
    mode: UU5.PropTypes.oneOf(["default", "track"]),
    colWidth: UU5.PropTypes.string,
    shape: UU5.PropTypes.string,
    effect: UU5.PropTypes.string,
    lightbox: UU5.PropTypes.oneOf(["local", "global", "none"]),
    rowMaxHeight: UU5.PropTypes.number,
    rowMinHeight: UU5.PropTypes.number,
    lastRowMaxHeight: UU5.PropTypes.number
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    data: [],
    mode: "track",
    colWidth: "xs-6 s-3 m-2 l-1 xl-1",
    shape: "default",
    effect: "none",
    lightbox: "local",
    rowMaxHeight: 160,
    rowMinHeight: 100,
    lastRowMaxHeight: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let { data, id, ...otherProps } = props;
    let editedData = data.map(image => {
      let parsedImage = {
        id: image.id,
        alt: image.alt
      };
      parsedImage.src = !Cfg.urlRegex.test(image.src) ? getBinaryDataUri(image.src) : image.src;
      if (image.thumb)
        parsedImage.thumb = !Cfg.urlRegex.test(image.thumb) ? getBinaryDataUri(image.thumb) : image.thumb;

      return parsedImage;
    });

    if (editedData.length === 0) {
      editedData = [{ src: imagePlaceholderUrl1 }, { src: imagePlaceholderUrl2 }, { src: imagePlaceholderUrl3 }];
    }
    //@@viewOff:private

    //@@viewOn:render
    return (
      <UU5.Imaging.ThumbnailList
        {...otherProps}
        data={editedData}
        authenticate
      />
    );
    //@@viewOff:render
  }
});

export default ImageGalleryView;
