//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";

import Cfg from "../core/_config.js";
import Css from "./internal/css.js";
import ComponentHelper from "./internal/component-helper.js";
import { useBinary } from "uu_plus4u5g01-hooks";
import "uu5imagingg01";
import imagePlaceholderUrl from "../assets/image-placeholder-01.jpg";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.Image"),
  nestingLevel: UU5.Environment.getNestingLevelList("bigBoxCollection", "inline"),
  classNames: {
    inlineBlock: () => Css.css`display: inline-block;`,
    icon: (width, height) => Css.css`
      font-size: 64px;
      display: flex;
      justify-content: center;
      align-items: center;
      width: ${UU5.Common.Tools.fillUnit(width)};
      height: ${UU5.Common.Tools.fillUnit(height)};
    `,
    alignment: alignment => Css.css`text-align: ${alignment}`,
    alignmentIcon: alignment => Css.css`
      display: flex;
      justify-content: ${alignment};
    `
  }
};
//@@viewOff:statics

function getCode(code) {
  code && code.match(UU5.Common.REGEXP.uu5data) && (code = UU5.Common.Tools.parseFromUu5Data(code));
  return code;
}

function getImage(props, commonProps, getBinaryDataUri) {
  let { code, thumbCode, alt, caption, fit, effect, shape, width, height, onClick, lightbox } = props;

  if (!code) {
    width = props.width ? props.width : Cfg.ASPECT_RATIO_VERTICAL["4:3"];
  }

  let image = (
    <UU5.Imaging.Image
      {...commonProps}
      key={UU5.Common.Tools.generateUUID()}
      src={code ? getBinaryDataUri(getCode(code)) : imagePlaceholderUrl}
      thumb={code && thumbCode && getBinaryDataUri(getCode(thumbCode))}
      alt={code && alt}
      caption={code && caption}
      fit={fit}
      effect={code && effect}
      shape={shape}
      width={width}
      height={height}
      onClick={code && onClick}
      lightbox={code ? lightbox : "none"}
      authenticate={!!code}
    />
  );

  if (props.alignment === "none") {
    return image;
  } else {
    return (
      <div key={UU5.Common.Tools.generateUUID()} className={STATICS.classNames.alignment(props.alignment)}>
        {image}
      </div>
    );
  }
}

const ImageView = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    thumbCode: UU5.PropTypes.string,
    alt: UU5.PropTypes.string,
    caption: UU5.PropTypes.string,
    alignment: UU5.PropTypes.oneOf(["none", "left", "center", "right"]),
    fit: UU5.PropTypes.oneOf(["default", "coverNoScaleUp"]),
    effect: UU5.PropTypes.oneOf(["none", "zoom", "grayscale", "blur", "sepia", "invert", "tilt", "morph"]),
    shape: UU5.PropTypes.oneOf([
      "default",
      "rounded",
      "square",
      "roundedSquare",
      "circle",
      "rect",
      "rect4x3",
      "rect3x2",
      "rect5x4",
      "rect2x1",
      "rect3x1",
      "rect4x1",
      "rect45x10",
      "rect16x9",
      "rect16x10",
      "rect3x4",
      "rect4x5",
      "rect2x3",
      "rect1x2",
      "roundedRect",
      "roundedRect4x3",
      "roundedRect3x2",
      "roundedRect5x4",
      "roundedRect2x1",
      "roundedRect3x1",
      "roundedRect4x1",
      "roundedRect45x10",
      "roundedRect16x9",
      "roundedRect16x10",
      "roundedRect3x4",
      "roundedRect4x5",
      "roundedRect2x3",
      "roundedRect1x2"
    ]),
    width: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    height: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    lightbox: UU5.PropTypes.oneOfType([UU5.PropTypes.bool, UU5.PropTypes.string]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    margin: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number, UU5.PropTypes.object])
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: "",
    thumbCode: "",
    alt: "",
    caption: "",
    alignment: "none",
    fit: "default",
    effect: "none",
    shape: "default",
    width: null,
    height: null,
    lightbox: true,
    elevation: 0,
    margin: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    const commonProps = UU5.Common.VisualComponent.getAttrs(props);
    props.elevation && (commonProps.className += ` uu5-common-elevation-${props.elevation}`);
    const inlineBlockClassName = STATICS.classNames.inlineBlock();
    commonProps.className += " " + inlineBlockClassName;
    commonProps.className += " " + ComponentHelper.getScreenSizeDependentClassName(props.margin, "margin");
    //@@viewOff:private

    //@@viewOn:render
    const currentNestingLevel = UU5.Utils.NestingLevel.getNestingLevel(props, STATICS);
    let child;
    if (props.code && currentNestingLevel === "inline") {
      child = <UU5.Bricks.LinkModal children={props.alt} component={getImage(props, commonProps, getBinaryDataUri)} />;
    } else {
      child = getImage(props, commonProps, getBinaryDataUri);
    }
    return child;
    //@@viewOff:render
  }
});

export default ImageView;
