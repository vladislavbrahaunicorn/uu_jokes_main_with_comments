//@@viewOn:imports
import UU5 from "uu5g04";
import { createComponent, useMemo, useRef } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import "uu5imagingg01";
import imagePlaceholderUrl1 from "../assets/image-placeholder-05.jpg";
import imagePlaceholderUrl2 from "../assets/image-placeholder-06.jpg";
import imagePlaceholderUrl3 from "../assets/image-placeholder-07.jpg";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.Carousel")
};
//@@viewOff:statics

const ImageRowView = createComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.arrayOf(
      UU5.PropTypes.oneOfType([
        UU5.PropTypes.string,
        UU5.PropTypes.shape({
          src: UU5.PropTypes.string.isRequired,
          thumb: UU5.PropTypes.string
        })
      ])
    ).isRequired,
    effect: UU5.PropTypes.string,
    lightbox: UU5.PropTypes.oneOf(["local", "global", "none"]),
    minWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    maxWidth: UU5.PropTypes.oneOfType([UU5.PropTypes.number, UU5.PropTypes.string]),
    alignment: UU5.PropTypes.oneOf(["block", "left", "center", "right"]),
    randomOrder: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    data: [],
    effect: "none",
    lightbox: "local",
    minHeight: 60,
    maxHeight: 100,
    alignment: "left",
    randomOrder: false
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    let { data, id, ...otherProps } = props;
    let placeholderDisplayedRef = useRef(false);
    const editedData = useMemo(() => {
      let parsedData = data.map(image => {
        let parsedImage = {
          id: image.id,
          alt: image.alt
        };
        parsedImage.src = !Cfg.urlRegex.test(image.src) ? getBinaryDataUri(image.src) : image.src;
        if (image.thumb)
          parsedImage.thumb = !Cfg.urlRegex.test(image.thumb) ? getBinaryDataUri(image.thumb) : image.thumb;

        return parsedImage;
      });

      if (props.randomOrder && parsedData) {
        for (let i = parsedData.length - 1; i > 0; i--) {
          let j = Math.floor(Math.random() * (i + 1));
          let temp = parsedData[i];
          parsedData[i] = parsedData[j];
          parsedData[j] = temp;
        }
      }

      if (parsedData.length === 0) {
        parsedData = [{ src: imagePlaceholderUrl1 }, { src: imagePlaceholderUrl2 }, { src: imagePlaceholderUrl3 }];
        placeholderDisplayedRef.current = true;
      }

      return parsedData;
    }, [props.data]);
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <UU5.Imaging.ImageRow
        {...otherProps}
        data={editedData}
        authenticate
        lightbox={placeholderDisplayedRef.current ? "none" : "local"}
      />
    );
    //@@viewOff:render
  }
});

export default ImageRowView;
