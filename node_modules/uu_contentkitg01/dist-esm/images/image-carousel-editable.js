//@@viewOn:imports
import UU5, { createVisualComponent, createHoc } from "uu5g04";
import "uu5g04-bricks";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";
import Css from "./internal/css.js";

import ImageCarouselView from "./image-carousel-view.js";
import ImageListEditable from "./internal/image-list-editable.js";
import IconPickerInput from "../editable/icon-picker-input";
import DisplayedImagesInput from "./internal/displayed-images-input.js";
import NumberInput from "../editable/number-input";
//@@viewOff:imports

const NextIconPicker = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.nextIcon,
      iconProps: "nextIcon"
    };
  },
  component: IconPickerInput
});

const PreviousIconPicker = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.previousIcon,
      iconProps: "prevIcon"
    };
  },
  component: IconPickerInput
});

const Interval = createHoc({
  getProps(props) {
    return {
      ...props,
      className: Css.css`@media screen and (min-width: 480px) { padding-right: 8px; }`,
      propName: "interval",
      message: Lsi.help.interval,
      numberProps: {
        label: Lsi.interval,
        min: 0,
        step: 500
      }
    };
  },
  component: NumberInput
});

const Width = createHoc({
  getProps(props) {
    return {
      ...props,
      propName: "width",
      message: Lsi.help.carouselWidth,
      numberProps: {
        label: Lsi.width,
        buttonHidden: true
      }
    };
  },
  component: NumberInput
});

const Height = createHoc({
  getProps(props) {
    return {
      ...props,
      propName: "height",
      message: Lsi.help.carouselHeight,
      numberProps: {
        label: Lsi.height,
        buttonHidden: true
      }
    };
  },
  component: NumberInput
});

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImageCarouselEditable")
};

const componentProperties = {
  name: Lsi.componentProperties,
  setup: [
    {
      name: "type",
      type: "switchSelector",
      label: Lsi.type,
      getProps: () => ({
        items: [
          { value: "circular", content: Lsi.circular },
          { value: "final", content: Lsi.final },
          { value: "rewind", content: Lsi.rewind }
        ]
      })
    },
    [
      Interval,
      {
        name: "colorSchema",
        type: "colorSchemaPicker",
        label: Lsi.color
      }
    ],
    [Width, Height],
    DisplayedImagesInput
  ]
};

const componentPropsForm = [
  componentProperties,
  {
    name: Lsi.iconSettings,
    setup: [
      [PreviousIconPicker, NextIconPicker],
      [
        {
          name: "hideControls",
          type: "bool",
          label: Lsi.hideControls
        },
        {
          name: "hideIndicators",
          type: "bool",
          label: Lsi.hideIndicators
        }
      ]
    ]
  }
];

const componentPropsFormSmall = [
  componentProperties,
  {
    name: Lsi.iconSettings,
    setup: [
      PreviousIconPicker,
      NextIconPicker,
      [
        {
          name: "hideControls",
          type: "bool",
          label: Lsi.hideControls
        },
        {
          name: "hideIndicators",
          type: "bool",
          label: Lsi.hideIndicators
        }
      ]
    ]
  }
];

//@@viewOff:statics
const ImageCarouselEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(ImageCarouselView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    saveEditation: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      data: this.props.props.data || []
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getPropsToSave() {
    return this._editRef ? this._editRef.getPropsToSave() : undefined;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _ref(ref) {
    this._editRef = ref;
  },
  //@@viewOff:private

  render() {
    //@@viewOn:render
    return (
      <UU5.Bricks.ScreenSize>
        {({ screenSize }) => {
          return (
            <ImageListEditable
              ref={this._ref}
              props={this.props.props}
              onClose={this.props.onClose}
              saveEditation={this.props.saveEditation}
              componentName={this.props.componentName}
              header={Lsi.editation.imageCarousel}
              componentPropsForm={
                screenSize === "xs" || screenSize === "s" ? componentPropsFormSmall : componentPropsForm
              }
            />
          );
        }}
      </UU5.Bricks.ScreenSize>
    );
    //@@viewOff:render
  }
});

export default ImageCarouselEditable;
