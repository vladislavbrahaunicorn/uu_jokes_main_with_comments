//@@viewOn:imports
import UU5 from "uu5g04";
import { createComponent } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import "uu5imagingg01";
import imagePlaceholderUrl1 from "../assets/image-placeholder-01.jpg";
import imagePlaceholderUrl2 from "../assets/image-placeholder-07.jpg";
import imagePlaceholderUrl3 from "../assets/image-placeholder-09.jpg";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImageCarouselView")
};
//@@viewOff:statics

const ImageCarouselView = createComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.arrayOf(
      UU5.PropTypes.oneOfType([
        UU5.PropTypes.string,
        UU5.PropTypes.shape({
          src: UU5.PropTypes.string.isRequired,
          thumb: UU5.PropTypes.string
        })
      ])
    ).isRequired,
    width: UU5.PropTypes.number,
    height: UU5.PropTypes.number,
    hideControls: UU5.PropTypes.bool,
    hideIndicators: UU5.PropTypes.bool,
    activeIndex: UU5.PropTypes.number,
    nextIcon: UU5.PropTypes.string,
    prevIcon: UU5.PropTypes.string,
    displayedItems: UU5.PropTypes.number,
    type: UU5.PropTypes.oneOf(["circular", "final", "rewind"]),
    interval: UU5.PropTypes.number,
    stepByOne: UU5.PropTypes.bool,
    colorSchema: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    data: [],
    width: null,
    height: 500,
    hideControls: false,
    hideIndicators: false,
    activeIndex: 0,
    nextIcon: "mdi-chevron-right",
    prevIcon: "mdi-chevron-left",
    displayedItems: 1,
    type: "final",
    interval: 5000,
    stepByOne: false,
    colorSchema: "white"
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let data = props.data.map(image => {
      let parsedImage = {
        id: image.id,
        alt: image.alt
      };
      parsedImage.src = !Cfg.urlRegex.test(image.src) ? getBinaryDataUri(image.src) : image.src;
      if (image.thumb)
        parsedImage.thumb = !Cfg.urlRegex.test(image.thumb) ? getBinaryDataUri(image.thumb) : image.thumb;

      return parsedImage;
    });

    if (data.length === 0) {
      data = [{ src: imagePlaceholderUrl1 }, { src: imagePlaceholderUrl2 }, { src: imagePlaceholderUrl3 }];
    }

    let commonProps = UU5.Common.VisualComponent.getAttrs(props);
    if (props.colorSchema) {
      UU5.Environment.getColorSchema(props.colorSchema);
      let colorSchemaColor = UU5.Environment.colorSchemaMap[props.colorSchema].color;
      commonProps.className =
        (commonProps.className ? commonProps.className + " " : "") + `color-schema-${colorSchemaColor}`;
    }
    //@@viewOff:private

    //@@viewOn:render
    return <UU5.Imaging.Carousel {...commonProps} data={data} authenticate />;
    //@@viewOff:render
  }
});

export default ImageCarouselView;
