//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useState } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../../core/_config.js";
import Css from "./css.js";
import imagePlaceholderUrl from "../../assets/image-placeholder-04.jpg";
import ComponentHelper from "./component-helper.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImagePanelBody"),
  classNames: {
    main: () => Css.css`
       width: 100%;
       display: flex;
       overflow: hidden;

       @media (max-width: 768px) {
          display: block;
       }
      `,
    textContainer: () => Css.css`
      text-align: center;
      padding: 24px;
      width: 100%;
      .uu5-bricks-header {
        margin: 0 0 24px 0;
      }
    `,
    textColumn: () => Css.css`justify-content: flex-start;`,
    leftColumn: () => Css.css`padding: 0; display: flex; justify-content: center; align-items: center;`,
    rightColumn: () => Css.css`padding: 0; display: flex; justify-content: center; align-items: center;`,
    buttonMargin: () => Css.css` &.uu5-bricks-button {
        margin: 24px 0 8px 0;
    }`,
    image: () => Css.css`
      visibility: hidden;
      max-width: 100%;
    `
  }
};

//@@viewOff:statics

function getImagePosition(structure, imagePosition, screenSize) {
  if ((screenSize === "xs" || screenSize === "s") && structure) {
    return RegExp("^image-text").test(structure) ? "left" : "right";
  } else {
    return imagePosition;
  }
}

function getJustifyContentValue(textAlignment) {
  let justifyContent;
  switch (textAlignment) {
    case "left":
      justifyContent = "flex-start";
      break;
    case "center":
      justifyContent = "center";
      break;
    case "right":
      justifyContent = "flex-end";
      break;
  }
  return justifyContent;
}

function getImageComp(src, imageSize, imageAlignment, alt, displayPlaceholder) {
  let imageComp = null;
  if (src || displayPlaceholder) {
    if (!src) src = imagePlaceholderUrl;
    let imageClass = () => Css.css`
        background-image: url(${src});
        background-repeat: no-repeat;
        background-size: ${imageSize === "cover" ? "cover" : "auto"};
        background-position: ${
          imageAlignment && imageSize === "original" ? imageAlignment.replace("-", " ") : "center"
        };
        `;
    imageComp = (
      <div className={imageClass()}>
        <UU5.Bricks.Image className={STATICS.classNames.image()} src={src} alt={alt} />
      </div>
    );
  }
  return imageComp;
}

function getLsi(value) {
  return typeof value === "string" || Array.isArray(value) ? value : <UU5.Bricks.Lsi lsi={value} />;
}

function getMainProps(commonProps, elevation, bgStyle, borderRadius, colorSchema, marginTop, marginBottom) {
  let mainProps = { ...commonProps };
  mainProps.className += " " + STATICS.classNames.main();
  elevation && (mainProps.className += ` uu5-common-elevation-${elevation}`);
  bgStyle && (mainProps.className += ` uu5-common-bg-style-${bgStyle}`);

  !mainProps.style && (mainProps.style = {});
  colorSchema && (mainProps.className += " color-schema-" + UU5.Environment.getColorSchema(colorSchema));
  borderRadius && (mainProps.style.borderRadius = UU5.Common.Tools.fillUnit(borderRadius));

  marginTop && (mainProps.className += " " + ComponentHelper.getScreenSizeDependentClassName(marginTop, "margin-top"));
  marginBottom &&
    (mainProps.className += " " + ComponentHelper.getScreenSizeDependentClassName(marginBottom, "margin-bottom"));
  return mainProps;
}

const ImagePanelBody = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.oneOfType([
      UU5.PropTypes.string,
      UU5.PropTypes.shape({
        xs: UU5.PropTypes.string.isRequired,
        s: UU5.PropTypes.string,
        m: UU5.PropTypes.string,
        l: UU5.PropTypes.string,
        xl: UU5.PropTypes.string
      })
    ]),
    imageSize: UU5.PropTypes.string,
    header: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.string]),
    headerLevel: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    content: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.string, UU5.PropTypes.array]),

    buttonHref: UU5.PropTypes.string,
    buttonContent: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.object]),
    buttonSize: UU5.PropTypes.oneOf(["s", "m", "l", "xl"]),
    buttonColorSchema: UU5.PropTypes.string,
    buttonBorderRadius: UU5.PropTypes.string,
    buttonTarget: UU5.PropTypes.oneOf(["_blank", "_parent", "_top", "_self"]),

    imagePosition: UU5.PropTypes.oneOf(["left", "right"]),
    textAlignment: UU5.PropTypes.oneOf(["left", "right", "center"]),
    imageAlignment: UU5.PropTypes.oneOf([
      "top",
      "bottom",
      "left",
      "center",
      "right",
      "top-left",
      "top-right",
      "bottom-left",
      "bottom-right"
    ]),
    borderRadius: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    bgStyle: UU5.PropTypes.oneOf(["filled", "outline", "transparent", "underline"]),
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    structure: UU5.PropTypes.string,
    noSpacing: UU5.PropTypes.bool,
    alt: UU5.PropTypes.string,
    colorSchema: UU5.PropTypes.string,
    textColumnContent: UU5.PropTypes.object,

    marginTop: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number, UU5.PropTypes.object]),
    marginBottom: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number, UU5.PropTypes.object])
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: "",
    header: "",
    headerLevel: "1",
    content: "",

    buttonHref: null,
    buttonContent: null,
    buttonSize: "m",
    buttonColorSchema: undefined,
    buttonBorderRadius: "2px",
    buttonTarget: "_self",

    imageSize: "cover",
    imagePosition: "left",
    imageAlignment: "center",
    textAlignment: "center",
    borderRadius: "0",
    colorSchema: "default",
    bgStyle: "filled",
    elevation: 0,
    structure: "",
    alt: "",

    noSpacing: true,
    textColumnContent: undefined,

    marginTop: undefined,
    marginBottom: undefined
  },
  //@@viewOff:defaultProps
  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    const [token, setToken] = useState({ token: undefined, tokenSet: false });
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let {
      code,
      buttonHref,
      buttonContent,
      buttonSize,
      buttonColorSchema,
      buttonBorderRadius,
      buttonTarget,
      imagePosition,
      imageAlignment,
      imageSize,
      textAlignment,
      borderRadius,
      bgStyle,
      elevation,
      structure,
      noSpacing,
      alt,
      colorSchema,
      marginTop,
      marginBottom
    } = props;

    let textColumn = (
      <div className={STATICS.classNames.textContainer()} style={{ textAlign: textAlignment }}>
        {props.textColumnContent}
        {buttonContent && (
          <UU5.Bricks.Button
            className={STATICS.classNames.buttonMargin()}
            content={getLsi(buttonContent)}
            size={buttonSize}
            href={buttonHref}
            target={buttonTarget}
            colorSchema={buttonColorSchema}
            borderRadius={UU5.Common.Tools.fillUnit(buttonBorderRadius)}
          />
        )}
      </div>
    );

    let textColumnStyle = { justifyContent: getJustifyContentValue(textAlignment) };

    let src;
    if (props.code) {
      if (Cfg.urlRegex.test(props.code)) {
        src = props.code;
      } else if (token.tokenSet) {
        src = getBinaryDataUri(props.code) + (token.token ? "&access_token=" + token.token : "");
      } else {
        UU5.Common.Tools.getCallToken(getBinaryDataUri(props.code), UU5.Environment.getSession()).then(result =>
          setToken({ token: result, tokenSet: true })
        );
      }
    }

    let imageComp = getImageComp(src, imageSize, imageAlignment, alt, !props.code);
    //@@viewOff:private

    //@@viewOn:render
    return (
      <UU5.Bricks.Row
        {...getMainProps(
          UU5.Common.VisualComponent.getAttrs(props),
          elevation,
          bgStyle,
          borderRadius,
          colorSchema,
          marginTop,
          marginBottom
        )}
        noSpacing={noSpacing}
      >
        <UU5.Bricks.ScreenSize>
          {({ screenSize }) => {
            let imageLeft = getImagePosition(structure, imagePosition, screenSize) === "left";
            let leftColumn = (
              <UU5.Bricks.Column
                key="leftColumn"
                colWidth={{ m: 6 }}
                className={STATICS.classNames.leftColumn() + " " + (imageLeft ? "" : STATICS.classNames.textColumn())}
                style={imageLeft ? "" : textColumnStyle}
              >
                {imageLeft ? imageComp : textColumn}
              </UU5.Bricks.Column>
            );
            let rightColumn = (
              <UU5.Bricks.Column
                key="rightColumn"
                colWidth={{ m: 6 }}
                className={STATICS.classNames.rightColumn() + " " + (imageLeft ? STATICS.classNames.textColumn() : "")}
                style={imageLeft ? textColumnStyle : ""}
              >
                {imageLeft ? textColumn : imageComp}
              </UU5.Bricks.Column>
            );
            return [leftColumn, rightColumn];
          }}
        </UU5.Bricks.ScreenSize>
      </UU5.Bricks.Row>
    );
    //@@viewOff:render
  }
});

export default ImagePanelBody;
