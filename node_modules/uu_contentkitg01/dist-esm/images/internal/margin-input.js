//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useState } from "uu5g04-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";
import Css from "./css";

import InfoMessage from "../../editable/info-message.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.ScreenSizeDependentPropTypeInput"),
  classNames: {
    marginBottom: () => Css.css`
      &.uu5-forms-input { margin-bottom: 0; }
      &.uu5-forms-input.uu5-forms-text,
      &.uu5-forms-input.uu5-forms-select {
        { margin-top: 4px; }
      }
    `
  }
};
//@@viewOff:statics

function getInput(propName, type, props, screenSize, setScreenSize) {
  if (type === "all") {
    return (
      <UU5.Forms.Text
        label={" "}
        className={STATICS.classNames.marginBottom()}
        value={typeof props.componentProps[propName] === "string" ? props.componentProps[propName] : ""}
        onBlur={({ value }) => {
          props.onChangeProps({ [propName]: value });
        }}
      />
    );
  } else {
    return (
      <UU5.Bricks.Row>
        <UU5.Bricks.Column noSpacing colWidth="xs-3">
          <UU5.Forms.Select
            label={" "}
            className={STATICS.classNames.marginBottom()}
            inputColWidth="xs-11"
            value={screenSize}
            onChange={({ value }) => setScreenSize(value)}
          >
            {Cfg.SCREEN_SIZES.map(screenSize => (
              <UU5.Forms.Select.Option value={screenSize} key={screenSize} />
            ))}
          </UU5.Forms.Select>
        </UU5.Bricks.Column>
        <UU5.Bricks.Column noSpacing colWidth="xs-9">
          <UU5.Forms.Text
            label={" "}
            className={STATICS.classNames.marginBottom()}
            value={props.componentProps[propName] ? props.componentProps[propName][screenSize] : ""}
            onBlur={({ value }) => {
              let propValue = props.componentProps[propName];
              if (!propValue || typeof propValue === "string") {
                propValue = {};
              }
              propValue[screenSize] = value;
              props.onChangeProps({ [propName]: propValue });
            }}
          />
        </UU5.Bricks.Column>
      </UU5.Bricks.Row>
    );
  }
}

const ScreenSizeDependentPropTypeInput = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func,
    propName: UU5.PropTypes.string.isRequired,
    label: UU5.PropTypes.object,
    helpMessage: UU5.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined,
    propName: undefined,
    label: undefined,
    helpMessage: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    let [screenSize, setScreenSize] = useState("xs");
    let isString = !props.componentProps[props.propName] || typeof props.componentProps[props.propName] === "string";
    let [type, setType] = useState(isString ? "all" : "different");
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <div {...UU5.Common.VisualComponent.getAttrs(props)}>
        <UU5.Forms.SwitchSelector
          label={props.label}
          value={type}
          items={[{ value: "all", content: Lsi.all }, { value: "different", content: Lsi.different }]}
          onChange={({ value }) => setType(value)}
        />
        {getInput(props.propName, type, props, screenSize, setScreenSize)}
        <InfoMessage message={props.helpMessage} />
      </div>
    );
    //@@viewOff:render
  }
});

export const MarginInput = props => (
  <ScreenSizeDependentPropTypeInput {...props} propName="margin" helpMessage={Lsi.help.margin} label={Lsi.margin} />
);
export const MarginTopInput = props => (
  <ScreenSizeDependentPropTypeInput
    {...props}
    propName="marginTop"
    helpMessage={Lsi.help.marginOneSide}
    label={Lsi.marginTop}
  />
);
export const MarginBottomInput = props => (
  <ScreenSizeDependentPropTypeInput
    {...props}
    propName="marginBottom"
    helpMessage={Lsi.help.marginOneSide}
    label={Lsi.marginBottom}
  />
);

export default MarginInput;
