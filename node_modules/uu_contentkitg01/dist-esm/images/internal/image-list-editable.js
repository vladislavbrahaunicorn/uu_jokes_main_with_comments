//@@viewOn:imports
import UU5, { createVisualComponent } from "uu5g04";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";

import GalleryFileManager from "./gallery-file-manager.js";
import ImageList from "./image-list.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.ImageListEditable")
};

const addComponentPropsForm = [
  {
    name: Lsi.setFile,
    setup: [GalleryFileManager]
  }
];

const urlComponentPropsForm = [
  {
    name: Lsi.setFile,
    setup: [
      {
        name: "url",
        type: "text",
        label: Lsi.imageUrl
      }
    ]
  }
];

//@@viewOff:statics
const ImageListEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.object.isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    saveEditation: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired,
    header: UU5.PropTypes.object,
    componentPropsForm: UU5.PropTypes.array
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      data: this.props.props.data || []
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  setData(data, add = false, callback) {
    if (add) {
      data = data.concat(this.state.data);
    }

    this.setState({ data }, callback);
  },

  setAlt(id, alt) {
    let index = this.state.data.findIndex(item => item.id === id);
    this.setState(prevState => {
      prevState.data[index].alt = alt;
      return { data: prevState.data };
    });
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  getPropsToSave() {
    return { data: this.state.data };
  },

  _ref(modal) {
    this._modalRef = modal;
  },

  _openEditModal(type) {
    this.setState({ editModalOpen: true, type });
  },

  _getToolbarItems() {
    return [
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen && this.state.type === "settings",
            icon: "mdi-settings",
            onClick: () => this._openEditModal("settings"),
            tooltip: Lsi.gallerySettings
          };
        }
      },
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen && this.state.type === "add",
            icon: "mdi-image-plus",
            onClick: () => this._openEditModal("add"),
            tooltip: Lsi.addImagesNoComp
          };
        }
      },
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen && this.state.type === "url",
            icon: "mdi-web",
            onClick: () => this._openEditModal("url"),
            tooltip: Lsi.addImagesUrl
          };
        }
      }
    ];
  },

  _onCloseEditationModal(newProps, saveEditation) {
    if (newProps) {
      this.setState({ ...newProps, editModalOpen: false }, () => saveEditation(newProps));
    } else {
      this.setState({ editModalOpen: false });
    }
  },

  _getThumbnail(code) {
    let thumbCode = code;
    thumbCode = thumbCode.length > 61 ? thumbCode.substr(0, 61) : thumbCode;
    return thumbCode + "_th";
  },

  _getModalSize() {
    switch (this.state.type) {
      case "add":
        return "max";
      case "settings":
        return "l";
      case "url":
        return "m";
      default:
        return "l";
    }
  },

  _getModalPropsForm() {
    switch (this.state.type) {
      case "add":
        return addComponentPropsForm;
      case "settings":
        return this.props.componentPropsForm;
      case "url":
        return urlComponentPropsForm;
      default:
        return [
          {
            name: "default",
            setup: []
          }
        ];
    }
  },
  //@@viewOff:private

  render() {
    //@@viewOn:render
    return (
      <>
        <UU5.BricksEditable.Toolbar
          onClose={() => this.props.onClose({ data: this.state.data })}
          items={this._getToolbarItems()}
        >
          <ImageList
            setData={this.setData}
            setAlt={this.setAlt}
            data={this.state.data}
            shape={this.props.props.shape}
            effect={this.props.props.effect}
          />
        </UU5.BricksEditable.Toolbar>
        {this.state.editModalOpen ? (
          <UU5.BricksEditable.Modal
            shown
            size={this._getModalSize()}
            header={this.props.header}
            onClose={newProps => {
              if (this.state.type === "add") {
                let data =
                  newProps &&
                  newProps.newData &&
                  newProps.newData.map(file => {
                    return {
                      id: UU5.Common.Tools.generateUUID(),
                      src: file.code,
                      thumb: file.thumbnailType === "thumbnail" ? this._getThumbnail(file.code) : null
                    };
                  });
                this._onCloseEditationModal(
                  data ? { data: data.concat(this.state.data) } : undefined,
                  this.props.saveEditation
                );
              } else {
                if (newProps) {
                  if (this.state.type === "url") {
                    if (newProps.url) {
                      let data = [
                        {
                          id: UU5.Common.Tools.generateUUID(),
                          src: newProps.url
                        }
                      ];
                      this._onCloseEditationModal({ data: data.concat(this.state.data) }, this.props.saveEditation);
                    } else {
                      this.setState({ editModalOpen: false });
                    }
                  } else {
                    this._onCloseEditationModal(newProps, this.props.saveEditation);
                  }
                } else {
                  this.setState({ editModalOpen: false });
                }
              }
            }}
            componentProps={this.props.props}
            componentName={this.props.componentName}
            componentPropsForm={this._getModalPropsForm()}
            saveButtonProps={this.state.type === "add" ? { content: Lsi.addButton } : undefined}
            menuWidth="250px"
            ref_={this._ref}
          />
        ) : null}
      </>
    );
    //@@viewOff:render
  }
});

export default ImageListEditable;
