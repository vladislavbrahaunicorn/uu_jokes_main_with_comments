//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5imagingg01";
import { createVisualComponent, useRef } from "uu5g04-hooks";
import { useSubApp, useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";

import ImageTile from "./image-tile.js";

import LazyLibraries from "../../core/lazy-libraries";
const Plus4U5Files = LazyLibraries["uu_plus4u5filesg01"];
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.ImageListEditable")
};
//@@viewOff:statics

function getBulkActions(props, listController) {
  return [
    {
      content: Lsi.delete,
      active: true,
      onClick: () => {
        let selectedItemsId = listController.current.getSelectedItemList().map(item => {
          return item.id;
        });
        let data = props.data.filter(image => !selectedItemsId.includes(image.id));
        props.setData(data);
        listController.current.clearSelected();
      }
    }
  ];
}

function adjustImage(imageData) {
  return UU5.Imaging.Adjustment.resizeMax(imageData, 1500, 1500).then(imageData =>
    UU5.Imaging.Adjustment.changeType(imageData.imageFile, "jpg")
  );
}

function adjustImageToThumbnail(imageData) {
  return UU5.Imaging.Adjustment.resizeMax(imageData, 512, 512).then(imageData => {
    let splits = imageData.imageFile.name.split(".");
    imageData.imageFile.name = `${splits[0]}_th.${splits[1]}`;
    return UU5.Imaging.Adjustment.changeType(imageData.imageFile, "jpg", 0.85);
  });
}

function createThumbnail(dtoOut, data, callBinaryCreate, resolve) {
  adjustImageToThumbnail(data)
    .then(adjustedData => {
      let code = dtoOut.code;
      code = `${code.length > 61 ? code.substr(0, 61) : code}_th`;
      let dtoIn = {
        data: {
          code: code,
          data: adjustedData.imageFile
        },
        done: thumbDtoOut => {
          dtoOut.thumb = thumbDtoOut.code;
          resolve(dtoOut);
        },
        fail: failDtoOut => {
          console.error(failDtoOut);
          resolve(dtoOut);
        }
      };
      callBinaryCreate(dtoIn);
    })
    .catch(() => resolve(dtoOut));
}

const ImageListEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    setData: UU5.PropTypes.func.isRequired,
    setAlt: UU5.PropTypes.func.isRequired,
    data: UU5.PropTypes.array,
    shape: UU5.PropTypes.string,
    effect: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    data: [],
    shape: undefined,
    effect: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const listController = useRef();
    const uploader = useRef();
    const { basePath } = useSubApp();
    const { callBinaryCreate } = useBinary();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let tileHeight = 178;
    let tileMinWidth = 192;
    let tileMaxWidth = 280;

    const screenSize = UU5.Common.Tools.getScreenSize();
    if (screenSize === "xs" || screenSize === "s") {
      tileMinWidth = 232;
      tileMaxWidth = 540;
      tileHeight = 216;
    }
    //@@viewOff:private

    //@@viewOn:render
    return (
      <div>
        <Plus4U5Files.FileUploader
          ref_={uploader}
          baseUri={basePath}
          lsiLabels={{
            placeholder: Lsi.fileUploaderPH
          }}
          uuCmdCreateBinary={data => {
            let promise = new Promise((resolve, reject) => {
              if (data.type.match(/\/svg/) || data.type.match(/image\//)) {
                adjustImage(data)
                  .then(adjustedData => {
                    let dtoIn = {
                      data: { data: adjustedData.imageFile },
                      done: dtoOut => createThumbnail(dtoOut, data, callBinaryCreate, resolve),
                      fail: dtoOut => reject({ data, error: { ...dtoOut } })
                    };
                    callBinaryCreate(dtoIn);
                  })
                  .catch(() =>
                    reject({
                      data: data,
                      error: "Failed to adjust image."
                    })
                  );
              } else {
                reject({
                  data: data,
                  error: "It is not a image!"
                });
              }
            });
            return promise
              .then(dtoOut => {
                props.setData(
                  [
                    {
                      id: UU5.Common.Tools.generateUUID(),
                      src: dtoOut.code,
                      thumb: dtoOut.thumb
                    }
                  ],
                  true
                );
                return dtoOut;
              })
              .then()
              .catch(failDtoOut => {
                console.error(failDtoOut.error);
                uploader.setProgress({ name: failDtoOut.data.name, state: "failed" });
                return failDtoOut;
              });
          }}
        />
        <UU5.Tiles.ListController
          {...UU5.Common.VisualComponent.getAttrs(props)}
          data={props.data}
          draggable
          padding="none"
          ref_={listController}
          onChange={opt => {
            props.setData(opt.data);
          }}
        >
          <UU5.Tiles.BulkActionBar actions={getBulkActions(props, listController)} />
          <UU5.Tiles.List
            overscanRowCountBackward={3}
            tileHeight={tileHeight}
            tileMinWidth={tileMinWidth}
            tileMaxWidth={tileMaxWidth}
            tileSpacing={8}
            rowSpacing={8}
            tileElevation={0}
            tileJustify="space-between"
            tileElevationHover={1}
            tileBorder
            tileStyle={{ borderRadius: 4 }}
            scrollElement={window}
            tile={<ImageTile setAlt={props.setAlt} shape={props.shape} effect={props.effect} />}
          />
        </UU5.Tiles.ListController>
      </div>
    );
    //@@viewOff:render
  }
});

export default ImageListEditable;
