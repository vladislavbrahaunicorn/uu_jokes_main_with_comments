//@@viewOn:imports
import UU5 from "uu5g04";
import { createVisualComponent } from "uu5g04-hooks";
import { useSubApp, useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../../core/_config.js";
import Css from "./css.js";

import LazyLibraries from "../../core/lazy-libraries";
const Plus4U5Files = LazyLibraries["uu_plus4u5filesg01"];
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.FileManager"),
  classNames: {
    buttonFix: () => Css.css`.uu5-tiles-action-bar-buttonsbox { align-items: flex-end;}`
  }
};

function promiseCall(data, call) {
  let dtoIn = { data };
  return new Promise((resolve, reject) => {
    dtoIn.done = resolve;
    dtoIn.fail = reject;
    call(dtoIn);
  });
}
//@@viewOff:statics
const FileManager = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func,
    data: UU5.PropTypes.array
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined,
    data: []
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { basePath } = useSubApp();
    const {
      callBinaryCreate,
      callBinaryUpdate,
      callBinaryDelete,
      callBinaryList,

      getBinaryDataUri
    } = useBinary();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <Plus4U5Files.FileManager
        {...UU5.Common.VisualComponent.getAttrs(props, STATICS.classNames.buttonFix())}
        selectable="multi"
        lsiLabels={{ header: null }}
        headerHidden
        baseUri={basePath}
        thumbnailStrategy="createNew"
        uuCmdListBinaries={data => {
          let dtoIn = { data };
          let promise = new Promise((resolve, reject) => {
            dtoIn.done = dtoOut => resolve({ ...dtoOut });
            dtoIn.fail = reject;
            callBinaryList(dtoIn);
          });
          return promise.then(dtoOut => {
            dtoOut.itemList = dtoOut.itemList.filter(
              file => file.contentType.match(/\/svg/) || file.contentType.match(/image\//)
            );
            return dtoOut;
          });
        }}
        uuCmdCreateBinary={data => promiseCall(data, callBinaryCreate)}
        uuCmdUpdateBinaryData={data => promiseCall(data, callBinaryUpdate)}
        uuCmdDeleteBinary={data => promiseCall(data, callBinaryDelete)}
        uuCmdGetBinaryDataUri={(binary, download) => {
          if (download) {
            return getBinaryDataUri(binary.code, "attachment");
          } else {
            return getBinaryDataUri(binary.code);
          }
        }}
        fileTypeFilters={null}
        onFileClick={() => {}}
        ignoreTags={["sys"]}
        fileButtons={{ itemList: ["download", "update", "delete"] }}
        onSelect={({ selected }) => {
          props.onChangeProps({ newData: selected });
        }}
      />
    );
    //@@viewOff:render
  }
});

export default FileManager;
