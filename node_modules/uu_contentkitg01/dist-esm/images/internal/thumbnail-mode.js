//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent } from "uu5g04-hooks";

import Cfg from "../../core/_config.js";
import Lsi from "../../config/lsi.js";
import Css from "./css.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Bricks.ThumbnailMode"),
  classNames: {
    selectorWidth: () => Css.css` & .uu5-bricks-switch-selector { width: 100%; }`,
    marginRow: () => Css.css`margin: 0px -8px; & .uu5-forms-input { margin-bottom: 0; }`
  }
};
//@@viewOff:statics

function generateOptionsItems() {
  return Cfg.SHAPE.map(shape => {
    return <UU5.Forms.Select.Option key={shape} value={shape} />;
  });
}

const ThumbnailMode = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        <UU5.Forms.SwitchSelector
          label={Lsi.mode}
          value={props.componentProps.mode}
          className={STATICS.classNames.selectorWidth()}
          onChange={opt => props.onChangeProps({ mode: opt.value })}
          items={[{ value: "default" }, { value: "track" }]}
          message={Lsi.help.thumbMode}
        />
        <UU5.Bricks.Row className={STATICS.classNames.marginRow()}>
          <UU5.Bricks.Column colWidth="xs-6">
            <UU5.Forms.Select
              label={Lsi.imageShape}
              value={props.componentProps.shape}
              disabled={props.componentProps.mode === "track"}
              onChange={opt => props.onChangeProps({ shape: opt.value })}
              inputColWidth="xs-12"
            >
              {generateOptionsItems()}
            </UU5.Forms.Select>
            <UU5.Forms.Text
              label={Lsi.colWidthImage}
              value={props.componentProps.colWidth}
              disabled={props.componentProps.mode === "track"}
              onBlur={opt => props.onChangeProps({ colWidth: opt.value })}
              inputColWidth="xs-12"
            />
          </UU5.Bricks.Column>
          <UU5.Bricks.Column colWidth="xs-6">
            <UU5.Forms.Number
              label={Lsi.rowMinHeight}
              disabled={props.componentProps.mode === "default"}
              value={props.componentProps.rowMinHeight}
              onBlur={({ value }) => props.onChangeProps({ rowMinHeight: !value ? null : +value })}
              inputColWidth="xs-12"
              buttonHidden
            />
            <UU5.Forms.Number
              label={Lsi.rowMaxHeight}
              disabled={props.componentProps.mode === "default"}
              value={props.componentProps.rowMaxHeight}
              onBlur={({ value }) => props.onChangeProps({ rowMaxHeight: !value ? null : +value })}
              inputColWidth="xs-12"
              buttonHidden
            />
            <UU5.Forms.Number
              label={Lsi.lastRowMaxHeight}
              disabled={props.componentProps.mode === "default"}
              value={props.componentProps.lastRowMaxHeight}
              onBlur={({ value }) => props.onChangeProps({ lastRowMaxHeight: !value ? null : +value })}
              inputColWidth="xs-12"
              buttonHidden
            />
          </UU5.Bricks.Column>
        </UU5.Bricks.Row>
      </>
    );
    //@@viewOff:render
  }
});

export default ThumbnailMode;
