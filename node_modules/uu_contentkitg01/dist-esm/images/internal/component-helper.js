import UU5 from "uu5g04";
import Css from "./css.js";

const FILTER_PROPERTY = ["grayscale", "blur", "brightness", "contrast", "invert", "opacity"];

const ComponentHelper = {
  getScreenSizeDependentClassName(styleValue, styleName) {
    let className = "";
    if (styleName && styleValue) {
      if (typeof styleValue === "string") {
        return Css.css`${styleName}: ${UU5.Common.Tools.fillUnit(styleValue)}`;
      } else {
        let styles = "";
        if (styleValue.xs) {
          styles += ` @media screen and (max-width: 480px) { ${styleName}: ${UU5.Common.Tools.fillUnit(
            styleValue.xs
          )}; }`;
        }
        if (styleValue.s) {
          styles += ` @media screen and (min-width: 481px) and (max-width: 768px) { ${styleName}: ${UU5.Common.Tools.fillUnit(
            styleValue.s
          )};}`;
        }
        if (styleValue.m) {
          styles += ` @media screen and (min-width: 769px) and (max-width: 992px) { ${styleName}: ${UU5.Common.Tools.fillUnit(
            styleValue.m
          )};}`;
        }
        if (styleValue.l) {
          styles += ` @media screen and (min-width: 993px) and (max-width: 1360px) { ${styleName}: ${UU5.Common.Tools.fillUnit(
            styleValue.l
          )};}`;
        }
        if (styleValue.xl) {
          styles += ` @media screen and (min-width: 1361px) { ${styleName}: ${UU5.Common.Tools.fillUnit(
            styleValue.xl
          )};}`;
        }

        return Css.css`${styles}`;
      }
    }
    return className;
  },

  getPaddingStyles(contentPadding) {
    let styles = "";
    if (contentPadding) {
      let numberPattern = /\d+/g;
      let array = contentPadding.split(" ");
      let xs = array.find(value => /xs/.test(value));
      let s = array.find(value => /^s/.test(value));
      let m = array.find(value => /m/.test(value));
      let l = array.find(value => /^l/.test(value));
      let xl = array.find(value => /xl/.test(value));
      let foundMatch;
      if (xs) {
        styles += ` @media screen and (max-width: 480px) { padding: 0 ${xs.match(numberPattern)}px; }`;
      }
      foundMatch = s || xs;
      if (foundMatch) {
        styles += ` @media screen and (min-width: 481px) and (max-width: 768px) { padding: 0 ${foundMatch.match(
          numberPattern
        )}px;}`;
      }
      foundMatch = m || s || xs;
      if (foundMatch) {
        styles += ` @media screen and (min-width: 769px) and (max-width: 992px) { padding: 0 ${foundMatch.match(
          numberPattern
        )}px;}`;
      }
      foundMatch = l || m || s || xs;
      if (foundMatch) {
        styles += ` @media screen and (min-width: 993px) and (max-width: 1360px) { padding: 0 ${foundMatch.match(
          numberPattern
        )}px;}`;
      }
      foundMatch = xl || l || m || s || xs;
      if (foundMatch) {
        styles += ` @media screen and (min-width: 1361px) { padding: 0 ${foundMatch.match(numberPattern)}px;}`;
      }
    }

    return styles;
  },

  getFilter(props) {
    let filter = "";
    FILTER_PROPERTY.forEach(key => {
      (props[key] || props[key] === 0) && (filter += `${key}(${props[key]})`);
    });
    return filter;
  },

  getMaxWidth(maxWidth) {
    let style = "";
    if (maxWidth) {
      maxWidth = maxWidth.match(UU5.Common.REGEXP.uu5data) ? UU5.Common.Tools.parseFromUu5Data(maxWidth) : maxWidth;
      if (/^[0-9]+$/.test(maxWidth)) {
        maxWidth = `${maxWidth}px`;
      }
      maxWidth && (style = ` max-width: ${maxWidth}; margin: 0 auto;`);
    }
    return style;
  }
};

export default ComponentHelper;
