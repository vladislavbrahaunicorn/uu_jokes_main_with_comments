//@@viewOn:imports
import UU5, { createHoc, createVisualComponent } from "uu5g04";
import "uu5g04-bricks";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";
import Css from "./internal/css.js";

import ImagePanelView from "./image-panel-view.js";
import FileManager from "../editable/file-manager.js";
import ElevationInput from "../editable/elevation-input.js";
import ImagePanelBody from "./internal/image-panel-body.js";
import ImageSizeInput from "./internal/image-size-input.js";
import { MarginTopInput, MarginBottomInput } from "./internal/margin-input.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImagePanelEditable"),
  classNames: {
    floatLeft: () => Css.css`float: left;`
  }
};

const HocFileManager = createHoc({
  getProps(props) {
    return {
      ...props,
      fileTypeFilters: {},
      codePreviewLsi: Lsi.imageCodeSelected,
      noSelectedLsi: Lsi.noImageSelected,
      listOnlyImages: true
    };
  },
  component: FileManager
});

const componentPropsForm = [
  {
    name: Lsi.setImage,
    setup: [HocFileManager]
  },
  {
    name: Lsi.imageSettings,
    setup: [
      {
        name: "alt",
        type: "text",
        label: Lsi.alt,
        getProps: () => ({ message: Lsi.help.alt })
      },
      ImageSizeInput
    ]
  },
  {
    name: Lsi.buttonSettings,
    setup: [
      {
        name: "buttonColorSchema",
        type: "colorSchemaPicker",
        label: Lsi.color,
        getProps: () => ({ inputColWidth: "xs-12 s-5" })
      },
      {
        name: "buttonContent",
        type: "text",
        label: Lsi.buttonText
      },
      {
        name: "buttonHref",
        type: "text",
        label: Lsi.buttonHref
      },
      {
        name: "buttonBorderRadius",
        type: "switchSelector",
        label: Lsi.borderRadius,
        getProps: () => ({
          items: [
            { value: "0", content: Lsi.none },
            { value: "2px" },
            { value: "4px" },
            { value: "8px" },
            { value: "16px" },
            { value: "50%", content: Lsi.rounded }
          ]
        })
      },
      {
        name: "buttonSize",
        type: "switchSelector",
        label: Lsi.buttonSize,
        getProps: () => ({
          items: [{ value: "s" }, { value: "m" }, { value: "l" }, { value: "xl" }]
        })
      },
      {
        name: "buttonTarget",
        type: "switchSelector",
        label: Lsi.target,
        getProps: () => ({
          items: [{ value: "_blank", content: Lsi.blank }, { value: "_self", content: Lsi.self }]
        })
      }
    ]
  },
  {
    name: Lsi.display,
    setup: [
      {
        name: "colorSchema",
        type: "colorSchemaPicker",
        label: Lsi.color,
        getProps: () => ({ inputColWidth: "xs-12 s-5" })
      },
      {
        name: "structure",
        type: "switchSelector",
        label: Lsi.arrangementMobile,
        getProps: () => ({
          items: [
            { value: "", content: Lsi.none },
            { value: "image-text", content: Lsi.arrangementImageText },
            { value: "text-image", content: Lsi.arrangementTextImage }
          ]
        })
      },
      Cfg.bgStyle,
      ElevationInput,
      Cfg.borderRadius,
      MarginTopInput,
      MarginBottomInput
    ]
  },
  {
    name: Lsi.advance,
    setup: [
      {
        name: "className",
        type: "text",
        label: Lsi.className
      },
      {
        name: "style",
        type: "text",
        label: Lsi.style
      }
    ]
  }
];

//@@viewOff:statics
const ImagePanel = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(ImagePanelView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired,
    saveEditation: UU5.PropTypes.func.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      props: this.props.props
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getPropsToSave() {
    return { ...this.state.props };
  },

  setProps(newProps, callback) {
    let props = { ...this.state.props, ...newProps };
    this.setState({ props }, callback);
  },
  //@@viewOff:interface

  //@@viewOn:private
  _openEditModal() {
    this.setState({ editModalOpen: true });
  },

  _getToolbarItems() {
    return [
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen,
            icon: "mdi-settings",
            onClick: () => this._openEditModal(),
            tooltip: Lsi.imagePanelSettings,
            className: STATICS.classNames.floatLeft()
          };
        }
      },
      {
        type: "dropdown",
        props: () => {
          return {
            value: this.state.props.imagePosition,
            label: Lsi.imagePosition,
            onClick: value => this.setProps({ imagePosition: value }),
            items: [{ value: "left", content: Lsi.left }, { value: "right", content: Lsi.right }],
            className: STATICS.classNames.floatLeft()
          };
        }
      },
      {
        type: "dropdown",
        props: () => {
          return {
            value: this.state.props.textAlignment,
            label: Lsi.textAlignment,
            onClick: value => this.setProps({ textAlignment: value }),
            items: [
              { value: "left", content: Lsi.left },
              { value: "center", content: Lsi.center },
              { value: "right", content: Lsi.right }
            ],
            className: STATICS.classNames.floatLeft()
          };
        }
      }
    ];
  },

  _getHeaderToolbarItems(headerLevel, setProps) {
    let levelItems = [1, 2, 3, 4, 5, 6].map(level => ({
      content: [Lsi.level, " " + level],
      value: `${level}`
    }));

    return [
      {
        type: "dropdown",
        props: () => {
          return {
            value: headerLevel,
            label: [Lsi.level, " " + headerLevel],
            onClick: value => setProps({ headerLevel: value }),
            tooltip: Lsi.headerLevelTooltip,
            items: levelItems,
            className: STATICS.classNames.floatLeft()
          };
        }
      }
    ];
  },

  _getLsi(value) {
    return typeof value === "string" || Array.isArray(value) ? value : <UU5.Bricks.Lsi lsi={value} />;
  },
  //@@viewOff:private

  render() {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let { header, headerLevel, content } = this.state.props;

    let textColumnContent = (
      <>
        <UU5.BricksEditable.Input
          value={header}
          placeholder={Lsi.headerPH}
          toolbarItems={this._getHeaderToolbarItems(headerLevel, this.setProps)}
          key="headerInput"
          onChange={({ value }) => this.setProps({ header: value })}
        >
          {({ children }) => <UU5.Bricks.Header level={headerLevel}>{children}</UU5.Bricks.Header>}
        </UU5.BricksEditable.Input>
        <UU5.RichText.EditorInput
          inputColWidth={{ xs: 12 }}
          value={this._getLsi(content)}
          onBlur={({ value }) => this.setProps({ content: value })}
        />
      </>
    );
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        <UU5.BricksEditable.Toolbar
          onClose={() => this.props.onClose({ ...this.state.props })}
          items={this._getToolbarItems()}
        >
          <ImagePanelBody {...this.state.props} textColumnContent={textColumnContent} />
        </UU5.BricksEditable.Toolbar>
        {this.state.editModalOpen && (
          <UU5.BricksEditable.Modal
            shown
            onClose={newProps => {
              if (newProps) {
                let props = { ...this.state.props, ...newProps };
                this.setState({ props, editModalOpen: false }, () => this.props.saveEditation(newProps));
              } else {
                this.setState({ editModalOpen: false });
              }
            }}
            componentProps={this.props.props}
            componentName={this.props.componentName}
            componentPropsForm={componentPropsForm}
            menuWidth="250px"
            header={Lsi.editation.imagePanel}
          />
        )}
      </>
    );
    //@@viewOff:render
  }
});

export default ImagePanel;
