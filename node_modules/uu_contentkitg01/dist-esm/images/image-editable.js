//@@viewOn:imports
import UU5, { createHoc, createVisualComponent } from "uu5g04";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";

import ImageView from "./image-view.js";
import EffectCaptionSelect from "./internal/effect-caption-select.js";
import FileManager from "../editable/file-manager.js";
import MarginInput from "./internal/margin-input.js";
import InfoMessage from "../editable/info-message.js";
import ElevationInput from "../editable/elevation-input";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Images.ImageEditable")
};

const HocFileManager = createHoc({
  getProps(props) {
    return {
      ...props,
      fileTypeFilters: {},
      codePreviewLsi: Lsi.imageCodeSelected,
      noSelectedLsi: Lsi.noImageSelected,
      listOnlyImages: true
    };
  },
  component: FileManager
});

const HocInfoMessage = createHoc({
  getProps(props) {
    return {
      ...props,
      message: Lsi.help.units
    };
  },
  component: InfoMessage
});

const componentPropsForm = [
  {
    name: Lsi.setImage,
    setup: [
      {
        name: "alt",
        type: "text",
        label: Lsi.alt,
        getProps: () => ({ message: Lsi.help.alt })
      },
      HocFileManager
    ]
  },
  {
    name: Lsi.display,
    setup: [
      EffectCaptionSelect,
      MarginInput,
      {
        name: "alignment",
        type: "switchSelector",
        label: Lsi.alignment,
        getProps: () => ({
          items: [
            { value: "none", content: Lsi.noneAlign },
            { value: "left", content: Lsi.left },
            { value: "center", content: Lsi.center },
            { value: "right", content: Lsi.right }
          ]
        })
      },
      [
        {
          name: "width",
          type: "text",
          label: Lsi.width,
          getProps: () => ({ inputColWidth: "xs-12" })
        },
        {
          name: "height",
          type: "text",
          label: Lsi.height,
          getProps: () => ({ inputColWidth: "xs-12" })
        }
      ],
      HocInfoMessage,
      ElevationInput
    ]
  },
  {
    name: Lsi.advance,
    setup: [
      // {
      //   name: "fit",
      //   type: "switchSelector",
      //   label: Lsi.fit,
      //   getProps: () => ({
      //     items: [
      //       { value: "default", content: Lsi.stretch },
      //       { value: "coverNoScaleUp", content: Lsi.defaultSize }
      //     ]
      //   })
      // },
      {
        name: "lightbox",
        type: "bool",
        label: Lsi.lightbox,
        getProps: () => ({
          message: Lsi.help.lightbox
        })
      }
    ]
  }
];
//@@viewOff:statics
const ImageEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(ImageView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  getPropsToSave() {
    return this._modalRef ? this._modalRef.getPropsToSave() : undefined;
  },

  _ref(modal) {
    this._modalRef = modal;
  },

  render() {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <UU5.BricksEditable.Modal
        shown
        header={Lsi.editation.image}
        onClose={this.props.onClose}
        componentProps={this.props.props}
        componentName={this.props.componentName}
        componentPropsForm={componentPropsForm}
        menuWidth="250px"
        ref_={this._ref}
      />
    );
    //@@viewOff:render
  }
});

export default ImageEditable;
