//@@viewOn:imports
import UU5, { createHoc, createVisualComponent } from "uu5g04";
import "uu5g04-bricks";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";
import Css from "./internal/css";

import BackgroundImageView from "./background-image-view.js";
import ImageSizeInput from "./internal/image-size-input";
import FileManager from "../editable/file-manager";
import SliderInput from "../editable/slider-input";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Layout.BackgroundImageEditable"),
  classNames: {
    floatLeft: () => Css.css`float: left;`,
    richTextToolbar: () => Css.css`
      display: inline-block;
      border: none;
      width: 100%;
      min-width: 32px;
      max-width: Calc(100% - 180px);
      float: left;
    `
  }
};

const HocFileManager = createHoc({
  getProps(props) {
    return {
      ...props,
      fileTypeFilters: {},
      codePreviewLsi: Lsi.imageCodeSelected,
      noSelectedLsi: Lsi.noImageSelected,
      listOnlyImages: true
    };
  },
  component: FileManager
});

const Blur = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.blur,
      propName: "blur",
      min: 0,
      max: 20,
      step: 1
    };
  },
  component: SliderInput
});

const Grayscale = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.grayscale,
      propName: "grayscale"
    };
  },
  component: SliderInput
});

const Brightness = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.brightness,
      propName: "brightness"
    };
  },
  component: SliderInput
});

const Contrast = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.contrast,
      propName: "contrast"
    };
  },
  component: SliderInput
});

const Invert = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.invert,
      propName: "invert"
    };
  },
  component: SliderInput
});

const Opacity = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.opacity,
      propName: "opacity"
    };
  },
  component: SliderInput
});

const setImagePropsForm = [
  {
    name: Lsi.setImage,
    setup: [HocFileManager]
  }
];

const componentPropsForm = [
  {
    name: Lsi.componentProperties,
    setup: [
      ImageSizeInput,
      {
        name: "imageAlignment",
        type: "switchSelector",
        label: Lsi.imageAlignment,
        getProps: () => ({
          items: [
            { value: "top" },
            { value: "bottom" },
            { value: "left" },
            { value: "center" },
            { value: "right" },
            { value: "left top" },
            { value: "right top" },
            { value: "left bottom" },
            { value: "right bottom" }
          ]
        })
      },
      {
        name: "parallax",
        type: "bool",
        label: Lsi.parallax,
        getProps: () => ({
          message: Lsi.help.parallax
        })
      }
    ]
  },
  {
    name: Lsi.display,
    setup: [
      Cfg.borderRadius,
      [
        Blur,
        Grayscale
      ],
      [
        Brightness,
        Contrast
      ],
      [
        Invert,
        Opacity
      ]
    ]
  },
  {
    name: Lsi.advance,
    setup: [
      {
        name: "gradient",
        type: "text",
        label: "Gradient",
        getProps: () => ({
          message: Lsi.help.gradient,
          placeholder: "linear-gradient(-135deg, #008BA1 0%, #00AFCB 100%)"
        })
      },
      {
        name: "className",
        type: "text",
        label: Lsi.className
      },
      {
        name: "style",
        type: "text",
        label: Lsi.style
      }
    ]
  }
];

//@@viewOff:statics
const BackgroundImageEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(BackgroundImageView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    saveEditation: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      props: this.props.props
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getPropsToSave() {
    return { ...this.state.props };
  },

  setProps(newProps, callback) {
    let props = { ...this.state.props, ...newProps };
    this.setState({ props }, callback);
  },
  //@@viewOff:interface

  //@@viewOn:private
  _openEditModal(type) {
    this.setState({ editModalOpen: true, type });
  },

  _getToolbarItems() {
    return [
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen && this.state.type === "settings",
            icon: "mdi-settings",
            onClick: () => this._openEditModal("settings"),
            tooltip: Lsi.imagePanelSettings,
            className: STATICS.classNames.floatLeft()
          };
        }
      },
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen && this.state.type === "setImage",
            icon: "mdi-image-plus",
            onClick: () => this._openEditModal("setImage"),
            tooltip: Lsi.setImagePlain,
            className: STATICS.classNames.floatLeft()
          };
        }
      },
      <UU5.RichText.Toolbar ref_={ref => (this._toolbar = ref)} className={STATICS.classNames.richTextToolbar()} />
    ];
  },
  //@@viewOff:private

  render() {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        <UU5.BricksEditable.Toolbar
          onClose={() => this.props.onClose({ ...this.state.props })}
          items={this._getToolbarItems()}
        >
          <BackgroundImageView {...this.state.props}>
            {this.props.component.getChildren()}
          </BackgroundImageView>
        </UU5.BricksEditable.Toolbar>
        {this.state.editModalOpen && (
          <UU5.BricksEditable.Modal
            shown
            size={this.state.type === "setImage" ? "max" : "l"}
            onClose={newProps => {
              if (newProps) {
                delete newProps.children;
                let props = { ...this.state.props, ...newProps };
                this.setState({ props, editModalOpen: false }, () => this.props.saveEditation(newProps));
              } else {
                this.setState({ editModalOpen: false });
              }
            }}
            componentProps={this.props.props}
            componentName={this.props.componentName}
            componentPropsForm={this.state.type === "settings" ? componentPropsForm : setImagePropsForm}
            menuWidth="250px"
            header={Lsi.editation.backgroundImage}
          />
        )}
      </>
    );
    //@@viewOff:render
  }
});

export default BackgroundImageEditable;
