//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useState, useMemo } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Editable.ImagePreview")
};

function getThumbCode(code) {
  let thumbCode = code;
  thumbCode && thumbCode.match(UU5.Common.REGEXP.uu5data) && (thumbCode = UU5.Common.Tools.parseFromUu5Data(code));
  return (thumbCode.length > 61 ? thumbCode.substr(0, 61) : thumbCode) + "_th";
}

//@@viewOff:statics
const ImagePreview = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    alt: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: null,
    alt: null
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri, callBinaryGetData } = useBinary();
    const [image, setImageUrl] = useState();

    useMemo(() => {
      callBinaryGetData({ code: getThumbCode(props.code) })
        .then(dtoOut => {
          let blob = new Blob([dtoOut.data.buffer], { type: dtoOut.contentType || "application/octet-stream" });
          setImageUrl(URL.createObjectURL(blob));
        })
        .catch(() => {
          setImageUrl(getBinaryDataUri(props.code));
        });
    }, [props.code]);
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private

    //@@viewOff:private

    //@@viewOn:render
    if (image) {
      return (
        <UU5.Bricks.Image
          {...UU5.Common.VisualComponent.getAttrs(props)}
          src={image}
          alt={props.alt}
          authenticate
        />
      );
    } else {
      return <div {...UU5.Common.VisualComponent.getAttrs(props)} />;
    }

    //@@viewOff:render
  }
});

export default ImagePreview;
