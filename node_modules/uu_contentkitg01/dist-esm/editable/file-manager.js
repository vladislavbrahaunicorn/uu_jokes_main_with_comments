//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useRef, useEffect, useState } from "uu5g04-hooks";
import { useSubApp, useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";
import Css from "./css.js";

import ImagePreview from "./image-preview";
import LazyLibraries from "../core/lazy-libraries";
const Plus4U5Files = LazyLibraries["uu_plus4u5filesg01"];
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Editable.FileManager"),
  classNames: {
    buttonFix: () => Css.css`.uu5-tiles-action-bar-buttonsbox { align-items: flex-end;}`,
    preview: () => Css.css`
      height: 80px;
      width: 100px;
      min-width: 100px;
      text-align: center;
      display: -webkit-box;
      display: flex;
      -webkit-box-pack: center;
      justify-content: center;
      -webkit-box-align: center;
      align-items: center;
      overflow: hidden;
      padding: 8px;

    `,
    previewIcon: () => Css.css`
      width: 100px;
      .uu5-bricks-icon {
        font-size: 64px;
      }
    `,
    ellipsis: () => Css.css`
      display: block;
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
    `,
    secondaryAttribute: () => Css.css`font-size: 12px;`,
    previewLsi: () => Css.css`
      font-size: 14px;
      color: rgba(0, 0, 0, 0.54);
      font-weight: 400;
    `,
    previewDiv: () => Css.css`
      display: flex;
      align-items: center;
      justify-content: space-between;
    `,
    previewInnerDiv: () => Css.css`
      display: flex;
      align-items: center;
      width: calc(100% - 48px);
    `,
    margin: () => Css.css`margin-top: 16px;`
  }
};
//@@viewOff:statics

function getPreview(props, fileManager, getBinaryDataUri, fileData, setFileData, code) {
  if (code) {
    let preview;
    if (fileData.type === "image" || fileData.type === "svg") {
      preview = (
        <div className={STATICS.classNames.preview()}>
          <ImagePreview code={fileData.code} />
        </div>
      );
    } else {
      preview = (
        <div className={STATICS.classNames.preview() + " uu5-common-text " + STATICS.classNames.previewIcon()}>
          {fileData.icon && <UU5.Bricks.Icon icon={fileData.icon} />}
        </div>
      );
    }

    return (
      <div className={STATICS.classNames.margin()}>
        <UU5.Bricks.Lsi className={STATICS.classNames.previewLsi()} lsi={props.codePreviewLsi} />
        <div className={STATICS.classNames.previewDiv()}>
          <div className={STATICS.classNames.previewInnerDiv()}>
            {preview}
            <div className={STATICS.classNames.ellipsis()}>
              <span className={STATICS.classNames.ellipsis()}>{fileData.filename}</span>
              <span className={STATICS.classNames.ellipsis() + " " + STATICS.classNames.secondaryAttribute()}>
                {fileData.code}
              </span>
            </div>
          </div>
          <UU5.Bricks.Button
            onClick={() => {
              if (fileManager && fileManager.current && fileManager.current._listController) {
                fileManager.current.customRemoveSelectedItem(code);
              }
              props.onChangeProps({ [props.propName]: null });
              setFileData({});
            }}
          >
            <UU5.Bricks.Icon icon="mdi-close" />
          </UU5.Bricks.Button>
        </div>
        {props.showWarning && props.showWarning(fileData)}
      </div>
    );
  } else {
    return (
      <div className={STATICS.classNames.margin()}>
        <UU5.Bricks.Lsi lsi={props.noSelectedLsi} />
      </div>
    );
  }
}

function listImages(data, callBinaryList) {
  let dtoIn = { data };
  let promise = new Promise((resolve, reject) => {
    dtoIn.done = dtoOut => resolve({ ...dtoOut });
    dtoIn.fail = reject;
    callBinaryList(dtoIn);
  });
  return promise.then(dtoOut => {
    dtoOut.itemList = dtoOut.itemList.filter(
      file => file.contentType.match(/\/svg/) || file.contentType.match(/image\//)
    );
    return dtoOut;
  });
}

function changeItem(props, itemProps) {
  props.onChangeItems(
    props.items.map(item => {
      if (item.id === props.editedItemId) {
        return { id: item.id, props: { ...item.props, ...itemProps } };
      } else {
        return item;
      }
    })
  );
}

function getItemCode(props) {
  let item = props.items.find(item => item.id === props.editedItemId);
  return item.props[props.propName];
}

function promiseCall(data, call) {
  let dtoIn = { data };
  return new Promise((resolve, reject) => {
    dtoIn.done = resolve;
    dtoIn.fail = reject;
    call(dtoIn);
  });
}

const FileManager = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    componentProps: UU5.PropTypes.object,
    onChangeProps: UU5.PropTypes.func,
    onChangeItems: UU5.PropTypes.func,
    items: UU5.PropTypes.array,
    editedItemId: UU5.PropTypes.string,
    listOnlyImages: UU5.PropTypes.bool,
    fileTypeFilters: UU5.PropTypes.object,
    codePreviewLsi: UU5.PropTypes.object,
    isItem: UU5.PropTypes.bool,
    propName: UU5.PropTypes.string,
    showWarning: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    componentProps: undefined,
    onChangeProps: undefined,
    onChangeItems: undefined,
    items: undefined,
    editedItemId: undefined,
    listOnlyImages: false,
    fileTypeFilters: {
      image: { label: { cs: "Obrázky", en: "Images" }, active: false, types: ["image", "svg"] },
      text: { label: { cs: "Dokumenty", en: "Documents" }, active: false, types: ["text", "xml", "pdf"] },
      other: { label: { cs: "Ostatní", en: "Other" }, active: false, types: ["other", "archive", "json"] }
    },
    codePreviewLsi: Lsi.fileCodeSelected,
    noSelectedLsi: Lsi.noFileSelected,
    propName: "code",
    isItem: false,
    showWarning: undefined
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { basePath } = useSubApp();
    const [fileData, setFileData] = useState({});
    const {
      callBinaryCreate,
      callBinaryUpdate,
      callBinaryDelete,
      callBinaryList,

      getBinaryDataUri
    } = useBinary();
    const fileManager = useRef();
    let code = props.isItem ? getItemCode(props) : props.componentProps[props.propName];

    //we can not select item until all data are loaded and reference to listController exist
    useEffect(() => {
      const intervalId = setInterval(() => {
        if (fileManager && fileManager.current && fileManager.current._listController) {
          fileManager.current.customAddSelectedItem(code);
          clearInterval(intervalId);
        }
      }, 500);

      return () => {
        clearInterval(intervalId);
      };
    }, [props.editedItemId]);

    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <div {...UU5.Common.VisualComponent.getAttrs(props)}>
        {getPreview(props, fileManager, getBinaryDataUri, fileData, setFileData, code)}
        <Plus4U5Files.FileManager
          ref_={fileManager}
          className={STATICS.classNames.buttonFix()}
          selectable="single"
          lsiLabels={{ header: null }}
          headerHidden
          baseUri={basePath}
          thumbnailStrategy="createNew"
          uuCmdListBinaries={data => {
            return props.listOnlyImages ? listImages(data, callBinaryList) : promiseCall(data, callBinaryList);
          }}
          uuCmdCreateBinary={data => promiseCall(data, callBinaryCreate)}
          uuCmdUpdateBinaryData={data => promiseCall(data, callBinaryUpdate)}
          uuCmdDeleteBinary={data => promiseCall(data, callBinaryDelete)}
          uuCmdGetBinaryDataUri={(binary, download) => {
            if (download) {
              return getBinaryDataUri(binary.code, "attachment");
            } else {
              return getBinaryDataUri(binary.code);
            }
          }}
          fileTypeFilters={props.fileTypeFilters}
          fileButtons={{ itemList: ["download", "update", "delete"] }}
          onFileClick={() => {}}
          ignoreTags={["sys"]}
          onSelect={({ selected }) => {
            let selectedFile = selected[0];
            if (selectedFile) {
              if (props.isItem) {
                changeItem(props, { [props.propName]: selectedFile.code, fileName: selectedFile.filename });
              } else {
                props.onChangeProps({ [props.propName]: selectedFile.code, fileName: selectedFile.filename });
              }
            } else {
              if (props.isItem) {
                changeItem(props, { [props.propName]: undefined, fileName: undefined });
              } else {
                props.onChangeProps({ [props.propName]: undefined, fileName: undefined });
              }
            }
            setFileData(selectedFile || {});
          }}
        />
      </div>
    );
    //@@viewOff:render
  }
});

export default FileManager;
