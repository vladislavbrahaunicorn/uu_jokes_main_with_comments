//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useScreenSize, useState, useEffect, useMemo } from "uu5g04-hooks";

import Cfg from "../core/_config.js";
import Css from "./internal/css.js";

import BackgroundImageView from "../layout/background-image-view";
import imagePlaceholderUrl1 from "../assets/image-placeholder-02.jpg";
import imagePlaceholderUrl2 from "../assets/image-placeholder-05.jpg";
import imagePlaceholderUrl3 from "../assets/image-placeholder-09.jpg";
import { PLACEHOLDERS } from "../config/lsi.js";
import InfoCarouselItem from "./info-carousel-item";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Grids.InfoCarouselView"),
  defaults: {
    childTagName: "UuContentKit.Grids.InfoCarousel.Item"
  },
  classNames: {
    main: borderRadius => Css.css`
      overflow: hidden;
      border-radius: ${UU5.Common.Tools.fillUnit(borderRadius)};
    `,
    smallMain: width => Css.css`
      @media screen and (min-width: 769px) and (max-width: 992px) {
        display: flex;

        & .uu5-bricks-carousel {
          width: calc(100% - ${UU5.Common.Tools.fillUnit(width)});
        }
      }
    `,
    height: height => Css.css`height: ${UU5.Common.Tools.fillUnit(height)};`,
    childDivLarge: (alignment, width) => Css.css`
      position: absolute;
      ${alignment === "right" ? "right: 0;" : "left: 0;"}
      top: 0;
      width: ${UU5.Common.Tools.fillUnit(width)};
      height: 100%;
      padding: 24px 32px;
    `,
    childDivSmall: width => Css.css`
      width: 100%;
      padding: 8px 16px 16px;

      @media screen and (min-width: 769px) and (max-width: 992px) {
        width: ${UU5.Common.Tools.fillUnit(width)};
      }
    `,
    pagination: (alignment, width) => Css.css`
      position: absolute;
      ${alignment}: ${UU5.Common.Tools.fillUnit(width)};
      display: flex;
      flex-direction: column;
      height: 100%;
      align-items: ${alignment === "right" ? "flex-end" : "flex-start"};

      & > div:not(:first-child) {
        margin: 1px 0 0 0;
      }
    `,
    item: () => Css.css`
      transition: background-color .2s ease-in,width .2s ease-in;
      display: flex;
      width: 75%;
      align-items: center;
      cursor: pointer;
      height: 100%;
      padding-left: 1.35em;
      padding-right: 1.6em;
      font-size: 16px;
      cursor: pointer;
    `,
    activeItem: () => Css.css`
      width: 100%;
    `,
    backgroundColor: color => Css.css`
      background-color: ${color} !important;
    `
  }
};
//@@viewOff:statics
let direction = 1;
let intervalId;

const placeholderChildren = [
  <InfoCarouselItem key="placeholder_image_1" contentEditable src={imagePlaceholderUrl1} />,
  <InfoCarouselItem key="placeholder_image_2" contentEditable src={imagePlaceholderUrl2} />,
  <InfoCarouselItem key="placeholder_image_3" contentEditable src={imagePlaceholderUrl3} />
];

function hexToRgba(hex, opacity) {
  if (hex) {
    let bigint = parseInt(hex.replace("#", ""), 16);
    let r = (bigint >> 16) & 255;
    let g = (bigint >> 8) & 255;
    let b = bigint & 255;

    return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
  } else {
    return hex;
  }
}

function getColor(inputColorSchema, opacity) {
  if (inputColorSchema === "black") {
    return `rgba(0, 0, 0, ${opacity})`;
  } else if (inputColorSchema === "white") {
    return `rgba(255, 255, 255, ${opacity})`;
  }

  let colors = UU5.Environment.colors[inputColorSchema.replace("-rich", "")];
  if (!colors) {
    let colorSchema = UU5.Environment.getColorSchema(inputColorSchema);
    if (colorSchema === "black") {
      return `rgba(0, 0, 0, ${opacity})`;
    } else if (colorSchema === "white") {
      return `rgba(255, 255, 255, ${opacity})`;
    }

    colors = UU5.Environment.colors[colorSchema.replace("-rich", "")];
    if (colors) {
      let isRich = colorSchema.includes("-rich");
      return isRich ? hexToRgba(colors.c900, opacity) : hexToRgba(colors.c300, opacity);
    }
  } else {
    let isRich = inputColorSchema.includes("-rich");
    return isRich ? hexToRgba(colors.c900, opacity) : hexToRgba(colors.c300, opacity);
  }
}

function validateChildren(children) {
  return UU5.Common.Children.map(children, child => {
    if (UU5.Common.Element.isValid(child)) {
      if (child.type && child.type.displayName === STATICS.defaults.childTagName) {
        return child;
      }
    }
  });
}

function getPagination(props, length, activeIndex, setActiveIndex, classNames, activeColor, inactiveColor) {
  let items = [];
  for (let i = 0; i < length; i++) {
    let className = STATICS.classNames.item();
    if (activeIndex === i) {
      className += " " + STATICS.classNames.activeItem() + " " + STATICS.classNames.backgroundColor(activeColor);
    } else {
      className += " " + STATICS.classNames.backgroundColor(inactiveColor);
    }
    items.push(
      <div key={i} className={className + " " + classNames} onClick={() => setActiveIndex(i)}>
        <UU5.Bricks.Text content={(i + 1).toString()} />
      </div>
    );
  }
  return (
    <div className={STATICS.classNames.pagination(props.alignment, props.width)}>
      {items}
    </div>
  )
}

function getLarge(props, commonProps, activeIndex, setActiveIndex, checkedChildren) {
  let child = checkedChildren[activeIndex];
  commonProps.mainAttrs = {
    onMouseOver: stopAutoSlide,
    onMouseLeave: () => startAutoSlide(props, setActiveIndex, checkedChildren)
  };

  props.elevation && (commonProps.className += ` uu5-common-elevation-${props.elevation}`);
  commonProps.className += " " + STATICS.classNames.main(props.borderRadius);
  commonProps.className += " " + STATICS.classNames.height(props.height);

  let activeColor = getColor(props.colorSchema, props.opacity);
  let inactiveColor = getColor(props.colorSchema, props.opacity / 1.7);
  let classNames = "";
  classNames += " uu5-common-text color-schema-" + UU5.Environment.getColorSchema(props.colorSchema);
  classNames += ` uu5-common-bg-style-filled`;
  let paginationClassNames = classNames;
  classNames += ` ${STATICS.classNames.backgroundColor(activeColor)}`;

  return (
    <BackgroundImageView
      {...commonProps}
      code={child && child.props.code}
      src={child && child.props.src}
    >
      <div className={STATICS.classNames.childDivLarge(props.alignment, props.width) + " " + classNames}>
        {child}
      </div>
      {getPagination(
        props,
        checkedChildren.length,
        activeIndex,
        setActiveIndex,
        paginationClassNames,
        activeColor,
        inactiveColor
      )}
    </BackgroundImageView>
  );
}

function getImages(checkedChildren, heightClassName) {
  return checkedChildren.map((child, index) => {
    return (
      <UU5.Bricks.Carousel.Item key={index}>
        <BackgroundImageView code={child.props.code} className={heightClassName} />
      </UU5.Bricks.Carousel.Item>
    );
  });
}

function getSmall(props, commonProps, activeIndex, setActiveIndex, checkedChildren) {
  let child = checkedChildren[activeIndex];
  props.elevation && (commonProps.className += ` uu5-common-elevation-${props.elevation}`);
  commonProps.className += " uu5-common-text color-schema-" + UU5.Environment.getColorSchema(props.colorSchema);
  commonProps.className += ` uu5-common-bg-style-filled`;
  commonProps.className += " " + STATICS.classNames.main(props.borderRadius);
  commonProps.className += " " + STATICS.classNames.smallMain(props.width);
  let heightClassName = STATICS.classNames.height(props.height);
  let color = getColor(props.colorSchema, props.opacity);

  let panel = (
    <div className={STATICS.classNames.childDivSmall(props.width) + " " + STATICS.classNames.backgroundColor(color) + " " + heightClassName}>
      {child}
    </div>
  );
  return (
    <div
      {...commonProps}
      onMouseOver={stopAutoSlide}
      onMouseLeave={() => startAutoSlide(props, setActiveIndex, checkedChildren)}
    >
      {props.alignment === "left" && panel}
      <UU5.Bricks.Carousel
        activeIndex={activeIndex}
        interval={0}
        prevIcon={props.prevIcon}
        nextIcon={props.nextIcon}
        onIndexChange={({ activeIndex }) => {
          stopAutoSlide();
          setActiveIndex(activeIndex);
          startAutoSlide(props, setActiveIndex, checkedChildren);
        }}
      >
        {getImages(checkedChildren, heightClassName)}
      </UU5.Bricks.Carousel>
      {props.alignment === "right" && panel}
    </div>
  );
}

function getInterval(type, setActiveIndex, length, intervalId) {
  if (type === "final") {
    setActiveIndex(activeIndex => {
      if (activeIndex === length) {
        clearInterval(intervalId);
        return activeIndex;
      }
      return activeIndex + 1;
    });
  } else if (type === "circular") {
    setActiveIndex(activeIndex => {
      if (activeIndex === length) {
        return 0;
      }
      return activeIndex + 1;
    });
  } else if (type === "rewind") {
    setActiveIndex(activeIndex => {
      if (activeIndex === 0) {
        direction = 1;
      } else if (activeIndex === length) {
        direction = -1;
      }

      return activeIndex + direction;
    });
  }
}

function startAutoSlide(props, setActiveIndex, checkedChildren) {
  if (props.interval > 0 && checkedChildren.length > 1) {
    intervalId = setInterval(() => {
      getInterval(props.type, setActiveIndex, checkedChildren.length - 1, intervalId);
    }, props.interval);

    return () => {
      stopAutoSlide(intervalId);
      setActiveIndex(0);
    };
  }
}

function stopAutoSlide() {
  clearInterval(intervalId);
}

const InfoCarouselView = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    height: UU5.PropTypes.number,
    interval: UU5.PropTypes.number,
    type: UU5.PropTypes.oneOf(["circular", "final", "rewind"]),
    prevIcon: UU5.PropTypes.string,
    nextIcon: UU5.PropTypes.string,
    alignment: UU5.PropTypes.oneOf(["left", "right"]),

    colorSchema: UU5.PropTypes.string,
    elevation: UU5.PropTypes.oneOf(["-1", "0", "1", "2", "3", "4", "5", -1, 0, 1, 2, 3, 4, 5]),
    borderRadius: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    opacity: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number]),
    width: UU5.PropTypes.string
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    height: 460,
    interval: 5000,
    type: "final",
    prevIcon: "mdi-chevron-left",
    nextIcon: "mdi-chevron-right",
    alignment: "right",

    colorSchema: "grey-rich",
    elevation: 0,
    borderRadius: 0,
    opacity: 0.85,
    width: "40%"
  },
  //@@viewOff:defaultProps
  render(props) {
    //@@viewOn:hooks
    const checkedChildren = useMemo(() => {
      let children = validateChildren(props.children);
      return children && children.length ? children : placeholderChildren;
    }, [props.children]);
    const [activeIndex, setActiveIndex] = useState(0);
    useEffect(() => {
      stopAutoSlide();
      startAutoSlide(props, setActiveIndex, checkedChildren);
    }, [props.children]);

    const screenSize = useScreenSize();
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let commonProps = { ...UU5.Common.VisualComponent.getAttrs(props) };
    let isLarge = screenSize === "l" || screenSize === "xl";
    //@@viewOff:private

    //@@viewOn:render
    return isLarge ?
      getLarge(props, commonProps, activeIndex, setActiveIndex, checkedChildren) :
      getSmall(props, commonProps, activeIndex, setActiveIndex, checkedChildren);
    //@@viewOff:render
  }
});

export default InfoCarouselView;
