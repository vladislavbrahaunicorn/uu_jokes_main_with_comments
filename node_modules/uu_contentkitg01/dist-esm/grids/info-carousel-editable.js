//@@viewOn:imports
import UU5, { createHoc, createVisualComponent } from "uu5g04";
import "uu5g04-bricks";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";

import InfoCarouselView from "./info-carousel-view.js";
import FileManager from "../editable/file-manager.js";
import ElevationInput from "../editable/elevation-input.js";
import NumberInput from "../editable/number-input";
import IconPickerInput from "../editable/icon-picker-input";
import SliderInput from "../editable/slider-input";
import WidthInput from "../editable/width-input";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Grids.InfoCarouselEditable")
};

const getEditableItemLabel = (itemProps, itemIndex) => {
  return `Image ${itemIndex + 1}`;
};

const newEditableItem = {
  tagName: "UuContentKit.Grids.InfoCarousel.Item",
  isElement: true,
  props: {
    contentEditable: true,
    children: '<uu5string/><UU5.Bricks.Section level=1 contentEditable />'
  }
};

const HocFileManager = createHoc({
  getProps(props) {
    return {
      ...props,
      fileTypeFilters: {},
      codePreviewLsi: Lsi.imageCodeSelected,
      noSelectedLsi: Lsi.noImageSelected,
      listOnlyImages: true,
      isItem: true
    };
  },
  component: FileManager
});

const Opacity = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.opacity,
      propName: "opacity"
    };
  },
  component: SliderInput
});

const NextIconPicker = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.nextIcon,
      iconProps: "nextIcon"
    };
  },
  component: IconPickerInput
});

const PreviousIconPicker = createHoc({
  getProps(props) {
    return {
      ...props,
      label: Lsi.previousIcon,
      iconProps: "prevIcon"
    };
  },
  component: IconPickerInput
});

const Interval = createHoc({
  getProps(props) {
    return {
      ...props,
      propName: "interval",
      message: Lsi.help.interval,
      numberProps: {
        label: Lsi.interval,
        min: 0,
        step: 500
      }
    };
  },
  component: NumberInput
});

const Height = createHoc({
  getProps(props) {
    return {
      ...props,
      propName: "height",
      message: Lsi.help.infoCarouselHeight,
      numberProps: {
        label: Lsi.height,
        buttonHidden: true
      }
    };
  },
  component: NumberInput
});

const componentPropsForm = [
  {
    name: Lsi.componentProperties,
    setup: [
      {
        name: "type",
        type: "switchSelector",
        label: Lsi.type,
        getProps: () => ({
          items: [
            { value: "circular", content: Lsi.circular },
            { value: "final", content: Lsi.final },
            { value: "rewind", content: Lsi.rewind }
          ]
        })
      },
      [Interval, Height],
      [PreviousIconPicker, NextIconPicker]
    ]
  },
  {
    name: Lsi.display,
    setup: [
      [
        {
          name: "colorSchema",
          type: "colorSchemaPicker",
          label: Lsi.color
        },
        WidthInput
      ],
      {
        name: "alignment",
        type: "switchSelector",
        label: Lsi.alignment,
        getProps: () => ({
          items: [
            { value: "left", content: Lsi.left },
            { value: "right", content: Lsi.right },
          ]
        })
      },
      Opacity,
      ElevationInput,
      {
        name: "borderRadius",
        type: "switchSelector",
        label: Lsi.borderRadius,
        getProps: () => ({
          items: [
            { value: "0", content: Lsi.none },
            { value: "2px" },
            { value: "4px" },
            { value: "8px" },
            { value: "16px" }
          ]
        })
      }
    ]
  }
];

const editableItemPropsSetup = {
  setup: [
    HocFileManager
  ]
};

//@@viewOff:statics
const InfoCarousel = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(InfoCarouselView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      props: this.props.props
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getPropsToSave() {
    return this._modalRef ? this._modalRef.getPropsToSave() : undefined;
  },
  //@@viewOff:interface

  //@@viewOn:private
  _ref(modal) {
    this._modalRef = modal;
  },
  //@@viewOff:private

  render() {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <UU5.BricksEditable.Modal
        shown
        onClose={this.props.onClose}
        componentProps={this.props.props}
        componentName={this.props.componentName}
        componentPropsForm={componentPropsForm}
        menuWidth="250px"
        header={Lsi.editation.infoCarousel}

        itemName={"UuContentKit.Grids.InfoCarousel.Item"}
        itemPropsForm={editableItemPropsSetup}
        newItem={newEditableItem}
        itemsSource="children"
        getItemLabel={getEditableItemLabel}

        ref_={this._ref}
      />
    );
    //@@viewOff:render
  }
});

export default InfoCarousel;
