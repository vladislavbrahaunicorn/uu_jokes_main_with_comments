import * as UU5 from "uu5g04";
import "uu5g04-forms";

import Cfg from "../core/_config.js";
import Tools from "../core/tools.js";
import Uu5stringEditorWrapper from "../core/uu5string-editor-wrapper.js";

import Lsi from "../config/lsi.js";
import "./block.less";

export const Block = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.tag("BricksEditable.Block"),
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "box"),
    classNames: {
      main: Cfg.css("editable-block")
    },
    defaults: {
      iconRadiosType: {
        icon: 1,
        iconContent: 2,
        1: "icon",
        2: "iconContent"
      }
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    component: UU5.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      component: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    // get data for form from component
    let temp = {};
    if (typeof this.props.component.getEditablePropsValues === "function") {
      temp = this.props.component.getEditablePropsValues(["icon", "content", "iconContent"]);
    }
    if (temp.content) temp.content = this._contentToString(temp.content);
    temp.type = "BasicEdit";
    if (temp.iconContent) {
      temp.iconRadiosType = 2;
    } else if (temp.icon) {
      temp.iconRadiosType = 1;
    } else {
      temp.iconRadiosType = 1;
      temp.icon = this._getDefaultIcon();
    }

    return temp;
  },

  componentWillReceiveProps(newProps) {
    let received = newProps.component.getEditablePropsValues(["icon", "children", "iconContent"]);
    this.setState(prevState => {
      let obj = {};
      if (prevState.icon !== received.icon) {
        obj.icon = received.icon;
        obj.iconRadiosType = 1;
      }
      if (prevState.iconContent !== received.iconContent) {
        obj.iconContent = received.iconContent;
        obj.iconRadiosType = 2;
      }

      if (obj.icon || this.state.icon) obj.iconRadiosType = 1;
      if (obj.iconContent || this.state.iconContent) obj.iconRadiosType = 2;
      if (
        !obj.icon &&
        (!this.state.icon || this.state.icon === this._getDefaultIcon()) &&
        !obj.iconContent &&
        !this.state.iconContent
      ) {
        obj.icon = this._getDefaultIcon();
        obj.iconRadiosType = 1;
      }
      return obj;
    });
  },

  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getDefaultIcon() {
    const { type } = this.props.component.getEditablePropsValues(["type"]);
    let icon;
    switch (type) {
      case "info":
        icon = "mdi-information";
        break;
      case "success":
        icon = "mdi-checkbox-marked-circle";
        break;
      case "warning":
        icon = "mdi-alert";
        break;
      case "danger":
        icon = "mdi-alert-circle";
        break;
      case "help":
        icon = "mdi-help-circle";
        break;
      case "default":
        icon = "mdi-bowling";
        break;
    }
    return icon;
  },
  _isFalsy(elem) {
    switch (elem) {
      case null:
        return true;
      case undefined:
        return true;
      case "":
        return true;
      case 0:
        return true;
      default:
        return false;
    }
  },
  _checkValues(prev, next) {
    let output = { ...next };
    for (let elem in next) {
      if (next[elem] === prev[elem] || (this._isFalsy(next[elem]) && this._isFalsy(prev[elem]))) {
        delete output[elem];
      }
    }
    return output;
  },
  _save(form) {
    let values = form.values;
    const { icon, iconContent, children, content } = this.props.component.getEditablePropsValues([
      "icon",
      "iconContent",
      "children",
      "content"
    ]);

    values[this.getDefault("iconRadiosType")[this.state.iconRadiosType]] = this._text.getValue();
    if (values.icon === this._getDefaultIcon()) delete values.icon;
    if (!values.icon && icon) values.icon = "";
    if (!values.iconContent && iconContent) values.iconContent = "";
    if (!values.content && this._contentToString(content)) values.content = undefined;
    if (values.radio) delete values.radio;
    if (values.content && children && values.content !== children) values.children = undefined;

    values.contentEditable = true;

    if (values.content === children || values.content === this._contentToString(content)) {
      delete values.content;
    } else {
      let object;
      try {
        JSON.parse(values.content);
        object = true;
      } catch (e) {
        object = false;
      }
      if (object) {
        values.content = values.content ? "<uu5json/>" + values.content : values.content;
      } else {
        let content = this._contentToString(values.content);
        values.content = content ? "<uu5string/>" + content : content;
      }
    }
    const preProps = this.props.component.getEditablePropsValues([
      "icon",
      "contentEditable",
      "content",
      "children",
      "iconContent"
    ]);
    values = this._checkValues(preProps, values);

    // console.log("save end", values)
    this.props.component.endEditation(values);
  },

  _cancel() {
    this._form.reset();
    this.props.component.endEditation();
  },
  _reset() {
    this._content.reset();
  },

  //TODO
  //change content type to uu5stringWithButton when its ready in uu5
  _getBasicEdit(content) {
    const type = this.getDefault("iconRadiosType")[this.state.iconRadiosType];

    let icon = {
      key: type,
      name: type,
      value: this.state[type] || "",
      ref_: ref => (this._text = ref)
    };

    return (
      <UU5.Bricks.Div {...this.getMainPropsToPass()}>
        <UU5.Forms.Radios
          name="radio"
          label={this.getLsiItem(Lsi.blockEditableLabelIcon)}
          labelColWidth="xs-12 s-4"
          inputColWidth="xs-12 s-7"
          value={[
            {
              label: [
                <span key={"labelIcon"}>{this.getLsiItem(Lsi.blockEditableLabelIcon)}</span>,
                (this.state.iconRadiosType === 1 && (
                  <UU5.Forms.Text
                    {...icon}
                    onChange={opt => {
                      this.setState({ [this.getDefault("iconRadiosType")[this.state.iconRadiosType]]: opt.value });
                    }}
                    placeholder={this.getLsiItem(Lsi.blockEditableIconPlaceholder)}
                  />
                )) ||
                  "",
                (this.state.iconRadiosType === 1 && (
                  <UU5.Forms.IconPicker
                    value={this.state.icon}
                    onChange={opt => {
                      opt.component.onChangeDefault(opt);
                      this.setState({ icon: opt.value });
                    }}
                    categories={["mdi", "glyphicon", "fa", "uu5", "plus4u5"]}
                    size="m"
                  />
                )) ||
                  ""
              ],
              name: "icon",
              value: this.state.iconRadiosType === 1
            },
            {
              label: [
                <span key={"labelContent"}>{this.getLsiItem(Lsi.blockEditableLabelIconContent)}</span>,
                (this.state.iconRadiosType === 2 && (
                  <UU5.Forms.Text
                    {...icon}
                    inputAttrs={{
                      spellCheck: "false",
                      autoComplete: "off"
                    }}
                    onChange={opt => {
                      if (opt.value.length <= 2) {
                        this.setState({ iconContent: opt.value, iconContentError: false });
                      } else {
                        this.setState({ iconContentError: true });
                      }
                    }}
                  />
                )) ||
                  ""
              ],
              name: "iconContent",
              value: this.state.iconRadiosType === 2
            }
          ]}
          onChange={opt => {
            this.setState({ iconRadiosType: this.getDefault("iconRadiosType")[opt.value], iconContentError: false });
          }}
        />

        {this.state.iconContentError && (
          <UU5.Bricks.Div>
            <UU5.Bricks.Text
              content={this.getLsiItem(Lsi.blockEditableIconContentError)}
              className={"uu5-col-xs12 uu5-col-s8 uu5-col-m8 uu5-col-l8 uu5-col-xl8"}
              colorSchema={"danger"}
            />
          </UU5.Bricks.Div>
        )}
        <UU5.Forms.Form
          onSave={this._save}
          onCancel={this._cancel}
          onReset={this._reset}
          ref_={ref => (this._form = ref)}
        >
          <Uu5stringEditorWrapper
            name="content"
            value={content}
            label={this.getLsiItem(Lsi.blockEditableLabelText)}
            ref_={ref => (this._content = ref)}
            maxRows={1000}
            rows={5}
            labelColWidth="xs-12"
            inputColWidth="xs-12"
          />
          <UU5.Forms.Controls buttonSubmitProps={{ content: "Potvrdit" }} />
        </UU5.Forms.Form>
      </UU5.Bricks.Div>
    );
  },

  _getChild() {
    const { children, content } = this.props.component.getEditablePropsValues(["children", "content"]);
    const removeEmptySpaceRegex = /\s/g;
    const data = children && children.replace(removeEmptySpaceRegex, "") ? children : this._contentToString(content);
    return this._getBasicEdit(data);
  },

  _contentToString(content) {
    if (content) {
      const jsonRegex = /^<uu5json\/>(.*)/;
      content.replace && (content = content.replace(jsonRegex, "$1"));
      if (Array.isArray(content)) {
        return content.join(" ").replace(UU5.Common.REGEXP.uu5string, "");
      } else if (Tools.assertType(content, Object)) {
        return JSON.stringify(content);
      }
      return content.replace(UU5.Common.REGEXP.uu5string, "");
    } else {
      return content;
    }
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this._getChild();
  }
  //@@viewOff:render
});

export default Block;
