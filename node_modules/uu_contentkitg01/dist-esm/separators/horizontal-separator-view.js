//@@viewOn:imports
import UU5 from "uu5g04";
import "uu5g04-bricks";
import { createVisualComponent, useState } from "uu5g04-hooks";
import { useBinary } from "uu_plus4u5g01-hooks";

import Cfg from "../core/_config.js";
import Css from "./internal/css.js";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Separators.HorizontalSeparator"),
  nestingLevel: UU5.Environment.getNestingLevelList("bigBoxCollection", "box")
};
//@@viewOff:statics

function getCode(code) {
  code && code.match(UU5.Common.REGEXP.uu5data) && (code = UU5.Common.Tools.parseFromUu5Data(code));
  return code;
}

function getClassName(src, { rotate, translate }) {
  let className = "";
  let isEditableMode = window.UuDcc && !window.UuDcc.Environment.getReadOnly();
  rotate = rotate ? `rotate(${isEditableMode ? 0 : rotate}deg)` : "";
  className +=
    " " +
    Css.css`
       content: url("${src}");
       transform: translateY(${isEditableMode ? "0%" : UU5.Common.Tools.fillUnit(translate, "%")}) ${rotate};
       width: 100%;
       @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        &::before {
          content: url("${src}");
        }
       }
       @supports (-ms-ime-align:auto) {
         &::before {
           content: url("${src}");
         }
       }
    `;
  if (!isEditableMode) {
    className +=
      " " +
      Css.css`
       position: absolute;
       display: block;
    `;
  }
  return className;
}

const HorizontalSeparator = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    code: UU5.PropTypes.string,
    translate: UU5.PropTypes.string,
    rotate: UU5.PropTypes.oneOfType([UU5.PropTypes.string, UU5.PropTypes.number])
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  defaultProps: {
    code: "",
    rotate: null,
    translate: "50%"
  },
  //@@viewOff:defaultProps

  render(props) {
    //@@viewOn:hooks
    const { getBinaryDataUri } = useBinary();
    const [token, setToken] = useState({ token: undefined, tokenSet: false });
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    let src;
    if (!token.tokenSet) {
      UU5.Common.Tools.getCallToken(
        getBinaryDataUri(getCode(props.code)),
        UU5.Environment.getSession()).then(result => setToken({ token: result, tokenSet: true })
      );
    } else {
      src = getBinaryDataUri(getCode(props.code)) + (token.token ? "&access_token=" + token.token : "");
    }
    //@@viewOff:private

    //@@viewOn:render
    const currentNestingLevel = UU5.Utils.NestingLevel.getNestingLevel(props, STATICS);
    if (currentNestingLevel) {
      return (
        <UU5.Bricks.Div {...UU5.Common.VisualComponent.getAttrs(props)}>
          {token.tokenSet && <div className={getClassName(src, props)} />}
        </UU5.Bricks.Div>
      );
    } else {
      return null;
    }
    //@@viewOff:render
  }
});

export default HorizontalSeparator;
