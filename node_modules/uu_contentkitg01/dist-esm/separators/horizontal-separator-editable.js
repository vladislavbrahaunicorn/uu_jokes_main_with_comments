//@@viewOn:imports
import UU5, { createHoc, createVisualComponent } from "uu5g04";

import Cfg from "../core/_config.js";
import Lsi from "../config/lsi.js";
import Css from "./internal/css.js";

import HorizontalSeparatorView from "./horizontal-separator-view.js";
import FileManager from "../editable/file-manager";
//@@viewOff:imports

//@@viewOn:statics
const STATICS = {
  displayName: Cfg.tag("Separators.HorizontalSeparatorEditable"),
  classNames: {
    input: () => Css.css`
      &.uu5-forms-input {margin: 0;} 
      width: 140px; 
      display: inline-block;
      
      & .uu5-forms-label {
        display: inline-block;
        width: 80px
      }
      
      & .uu5-forms-input-wrapper {
        display: inline-block;
        width: 60px;
      }
    `
  }
};

const HocFileManager = createHoc({
  getProps(props) {
    return {
      ...props,
      fileTypeFilters: {},
      codePreviewLsi: Lsi.imageCodeSelected,
      noSelectedLsi: Lsi.noImageSelected,
      listOnlyImages: true,
      showWarning: fileData => {
        if (fileData && fileData.type && fileData.type !== "svg") {
          return <UU5.Bricks.Text colorSchema="warning" content={Lsi.help.svgWarning} />;
        }
        return null;
      }
    };
  },
  component: FileManager
});

const componentPropsForm = [
  {
    name: Lsi.setImage,
    setup: [HocFileManager]
  },
  {
    name: Lsi.componentProperties,
    setup: [
      [
        {
          name: "rotate",
          type: "number",
          label: Lsi.rotate,
          getProps: () => ({
            message: Lsi.help.rotate
          })
        },
        {
          name: "translate",
          type: "text",
          label: Lsi.translate,
          getProps: () => ({
            message: Lsi.help.translate
          })
        }
      ]
    ]
  }
];

//@@viewOff:statics
const HorizontalSeparatorEditable = createVisualComponent({
  ...STATICS,

  //@@viewOn:propTypes
  propTypes: {
    props: UU5.PropTypes.shape(HorizontalSeparatorView.propTypes).isRequired,
    onClose: UU5.PropTypes.func.isRequired,
    saveEditation: UU5.PropTypes.func.isRequired,
    componentName: UU5.PropTypes.string.isRequired
  },
  //@@viewOff:propTypes

  //@@viewOn:defaultProps
  //@@viewOff:defaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    return {
      editModalOpen: false,
      props: this.props.props
    };
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getPropsToSave() {
    return { ...this.state.props };
  },
  //@@viewOff:interface

  //@@viewOn:private
  _openEditModal() {
    this.setState({ editModalOpen: true });
  },

  _getToolbarItems() {
    return [
      {
        type: "button",
        props: () => {
          return {
            pressed: this.state.editModalOpen,
            icon: "mdi-settings",
            onClick: () => this._openEditModal(),
            tooltip: Lsi.setImagePlain
          };
        }
      },
      <UU5.Forms.Number
        value={this.state.props.rotate}
        label={Lsi.rotate}
        className={STATICS.classNames.input()}
        buttonHidden
        onBlur={opt => {
          let props = { ...this.state.props, rotate: opt.value };
          this.setState({ props });
        }}
      />,
      <UU5.Forms.Text
        value={this.state.props.translate}
        label={Lsi.translate}
        className={STATICS.classNames.input()}
        onBlur={opt => {
          let props = { ...this.state.props, translate: opt.value };
          this.setState({ props });
        }}
      />
    ];
  },
  //@@viewOff:private

  render() {
    //@@viewOn:hooks
    //@@viewOff:hooks

    //@@viewOn:interface
    //@@viewOff:interface

    //@@viewOn:private
    //@@viewOff:private

    //@@viewOn:render
    return (
      <>
        <UU5.BricksEditable.Toolbar
          onClose={() => this.props.onClose({ ...this.state.props })}
          items={this._getToolbarItems()}
        >
          <HorizontalSeparatorView {...this.state.props} />
        </UU5.BricksEditable.Toolbar>
        {this.state.editModalOpen && (
          <UU5.BricksEditable.Modal
            shown
            onClose={newProps => {
              if (newProps) {
                let props = { ...this.state.props, ...newProps };
                this.setState({ props, editModalOpen: false }, () => this.props.saveEditation(newProps));
              } else {
                this.setState({ editModalOpen: false });
              }
            }}
            componentProps={this.state.props}
            componentName={this.props.componentName}
            componentPropsForm={componentPropsForm}
            menuWidth="250px"
            header={Lsi.editation.horizontalSeparator}
          />
        )}
      </>
    );
    //@@viewOff:render
  }
});

export default HorizontalSeparatorEditable;
