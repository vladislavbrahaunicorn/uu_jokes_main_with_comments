import * as UU5 from "uu5g04";
import "uu5g04-bricks";
import Cfg from "../core/_config.js";

import "./input.less";
import InputText from "../tables-editable/input-text.js";
import InputNumber from "../tables-editable/input-number.js";
import InputModal from "../tables-editable/input-modal.js";
import InputPlainText from "../tables-editable/input-plain-text.js";

export const Input = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.NestingLevelMixin, UU5.Forms.InputMixin, UU5.Common.PureRenderMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.tag("Input"),
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBox", "inline"),
    classNames: {
      main: `${Cfg.CSS} ${Cfg.css("input")}`,
      default: Cfg.css("input-default"),
      focus: Cfg.css("input-focus"),
      coverDiv: Cfg.css("input-cover-div"),
      contentDiv: Cfg.css("input-content-div"),
      modalButton: Cfg.css("input-modal-button"),
      hideButton: Cfg.css("input-hide-button")
    },
    opt: {
      nestingLevelWrapper: true
    },
    defaults: {
      tableMargin: 26
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.any,
    name: UU5.PropTypes.string,
    type: UU5.PropTypes.string,
    options: UU5.PropTypes.object,
    hideButton: UU5.PropTypes.bool,
    validStringHandler: UU5.PropTypes.func,
    table: UU5.PropTypes.bool,
    linkModal: UU5.PropTypes.object,
    onChangeField: UU5.PropTypes.func,
    textCover: UU5.PropTypes.arrayOf([UU5.PropTypes.symbol]),
    tableEditable: UU5.PropTypes.object,
    onGetContextMenuItems: UU5.PropTypes.func,
    onSetColWidth: UU5.PropTypes.func,
    onValidate: UU5.PropTypes.func,
    autofocus: UU5.PropTypes.bool,
    saveOnEnter: UU5.PropTypes.bool,
    placeholder: UU5.PropTypes.string,
    onBlur: UU5.PropTypes.func,
    onClick: UU5.PropTypes.func,
    cursorPosition: UU5.PropTypes.oneOf(["start", "end"]),
    template: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.string]),
    modalRef: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.func])
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: "",
      type: "text",
      options: {},
      hideButton: false,
      table: false,
      saveOnEnter: false,
      modalRef: undefined
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    this._phase = true;
    let value = this.props.data;

    return {
      autofocus: this.props.autofocus,
      value: value,
      phase: this.props.autofocus ? "focus" : "default"
    };
  },

  componentDidMount() {
    if (this.props.saveOnEnter) {
      const onKeyDownHandler = e => {
        if (e.keyCode === 13) {
          document.activeElement.blur();
          e.stopPropagation();
          return e.preventDefault();
        } else {
          return e;
        }
      };

      UU5.Environment.EventListener.addEvent(this.findDOMNode(), "keydown", this.getId(), onKeyDownHandler); // eslint-disable-line
    }

    if (this.props.type === "link") {
      // || this.props.type === "select"
      this._tabindex = { tabIndex: 0 };
      const onKeyDownHandler = e => {
        if (e.keyCode === 13) {
          this.focus_();
          e.stopPropagation();
          return e.preventDefault();
        } else {
          return e;
        }
      };

      UU5.Environment.EventListener.addEvent(this.findDOMNode(), "keydown", this.getId(), onKeyDownHandler); // eslint-disable-line
    }

    this._manageDynamicWidth();
  },

  componentWillUnmount() {
    if (this.props.saveOnEnter) {
      UU5.Environment.EventListener.removeEvent(this.findDOMNode(), "keydown", this.getId()); // eslint-disable-line
    }
  },

  componentWillReceiveProps(nextProps) {
    let obj = {};
    this.setState(prevState => {
      if (this.props.table || this.props.onChangeField) {
        let data = nextProps.data;

        if (prevState.value !== data) {
          obj.value = data;
        }
      }
      if (nextProps.autofocus !== this.state.autofocus) {
        obj.autofocus = nextProps.autofocus;
      }
      if (nextProps.autofocus && prevState.phase !== "focus") {
        obj.phase = "focus";
      }
      return obj;
    });
  },
  componentDidUpdate() {
    this._manageDynamicWidth();
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overriding
  focus_() {
    this._input && this._input.doFocus && this._input.doFocus();
  },
  getValue_() {
    return this.state.value || "";
  },
  //@@viewOff:overriding

  //@@viewOn:private
  _manageDynamicWidth() {
    if (this.props.onSetColWidth && this.state.phase === "default" && this._div) {
      const indexes = this.props.name.split("-");
      const div = this._div.findDOMNode(); //eslint-disable-line
      let width;
      if (div) {
        width = window.getComputedStyle(div).width;
        width.slice(0, width.length - 2);
        width = parseFloat(width) + this.getDefault("tableMargin");
      } else {
        return;
      }

      this.props.onSetColWidth(width, indexes[2]);
    }
  },
  _removeUu5String(value) {
    if (!value) return "";
    if (!value.replace) return value;
    return value.replace(/^<uu5string(\/>| \/>)/, "");
  },

  _capitalizeFirstLetter(string) {
    if (!string) return " ";
    let name = string.split(" ")[0];
    return name.charAt(0).toUpperCase() + name.slice(1);
  },

  _getChild() {
    return (
      <UU5.Bricks.Div {...this.getMainPropsToPass()} ref_={ref => (this._div = ref)}>
        {!this.props.modalRef ? <UU5.Bricks.Modal ref_={modal => (this._modal = modal)} /> : null}
        {this._getView()}
      </UU5.Bricks.Div>
    );
  },

  _onBlur(newValue) {
    if (newValue === null && !this._phase) {
      return;
    }
    let change;
    this._focus = false;
    if (this.props.validStringHandler) {
      try {
        UU5.Common.UU5String.parse(newValue);
        this.props.validStringHandler(false);
      } catch (e) {
        this.props.validStringHandler(true);
      }
    }
    this.setState(
      prevState => {
        let out = {};
        if (this._phase) {
          out.phase = "default";
        }
        if (prevState.autofocus) {
          out.autofocus = false;
        }
        let value = prevState.value;
        if (value !== newValue) {
          out.value = newValue;
          change = true;
        }
        return out;
      },
      () => {
        if (this.props.onChangeField && change) {
          this.props.onChangeField(newValue, this._getIndexes());
        }
        this.props.onValidate && this.props.onValidate(newValue);
        this.props.onBlur && this.props.onBlur();
      }
    );
  },

  _getIndexes() {
    const name = this.props.name;
    const indexes = name.split("-");
    return indexes;
  },

  _getOnClick(e) {
    if (this._focus) return;
    // e.preventDefault();
    // e.stopPropagation();// bad richTextEditor focus
    this._focus = true;
    this.setState(
      prevState => {
        let out = {};

        if (this.props.autofocus || prevState.autofocus) {
          out.autofocus = false;
        }

        if (this._phase) {
          if (prevState.phase !== "focus") out.phase = "focus";
        }
        return out;
      },
      () => {
        this.props.onClick && this.props.onClick();
        if (this._input) {
          this.props.cursorPosition ? this._input.setCursorPosition(this.props.cursorPosition) : this.focus_();
        }
      }
    );
  },

  _getView() {
    let onContextMenu = {};
    if (this.props.tableEditable && this.props.onGetContextMenuItems) {
      onContextMenu = this.props.tableEditable.getListContextMenu(
        this._getIndexes(),
        this.props.onGetContextMenuItems(this.props.tableEditable.addOrRemoveListItem)
      );
    }
    const tabindex = this._tabindex || {};
    return (
      <UU5.Bricks.Div
        className={`${this.getClassName("coverDiv")} ${this.getClassName(this.state.phase)}`}
        name={this.props.type}
        mainAttrs={{ onClick: this._getOnClick }}
      >
        <UU5.Bricks.Div
          className={`${this.getClassName("contentDiv")} ${this.getClassName(this.props.name)}`}
          name={this.props.hideButton ? "hideButton" : ""}
          content={this._getCorrectView(this.props.type)()}
          mainAttrs={{ ...onContextMenu, ...tabindex }}
        />
        <UU5.Bricks.Button
          className={`${this.getClassName("modalButton")} ${
            this.props.hideButton || this.props.type !== "text" ? this.getClassName("hideButton") : ""
          }`}
          size="s"
          onClick={this._openModal}
        >
          <UU5.Bricks.Icon icon="mdi-arrow-expand" />
        </UU5.Bricks.Button>
      </UU5.Bricks.Div>
    );
  },

  _getCorrectView(type) {
    if (this.props.template && this.props.template.input) return this._getCustomInput;
    let view = this[`_get${this._capitalizeFirstLetter(type)}View`];
    if (!view) view = this._getCorrectView("text");
    return view;
  },

  _getCustomInput() {
    let options = this.props.template.options ? this.props.template.options : {};
    let props = {
      ref_: ref => (this._input = ref),
      value: this.state.value,
      phase: this.state.phase,
      onBlur: this._onBlur,
      placeholder: this._capitalizeFirstLetter(this.props.name),
      table: this.props.table,
      autofocus: this.state.autofocus,
      linkModal: this.props.linkModal,
      options: this.props.options,
      ...options
    };
    return this.props.template.input(props);
  },

  _getPlainTextView() {
    return (
      <InputPlainText
        ref_={ref => (this._input = ref)}
        value={this.state.value}
        phase={this.state.phase}
        onBlur={this._onBlur}
        placeholder={this._capitalizeFirstLetter(this.props.name)}
        table={this.props.table}
        textCover={this.props.textCover}
        onSetColWidth={this.props.onSetColWidth}
        autofocus={this.state.autofocus}
      />
    );
  },

  _getTextView() {
    this._phase = false;
    return (
      <InputText
        ref_={ref => (this._input = ref)}
        value={this.state.value}
        onBlur={this._onBlur}
        placeholder={this.props.placeholder || this._capitalizeFirstLetter(this.props.name)}
        table={this.props.table}
        onSetColWidth={this.props.onSetColWidth}
        autofocus={this.state.autofocus}
        options={this.props.options}
      />
    );
  },

  _getNumberView() {
    let value = this.state.value || this.state.value === 0 ? this.state.value : undefined;

    return <InputNumber value={value} onBlur={this._onBlur} />;
  },

  _openModal(component, e) {
    e.stopPropagation();
    e.preventDefault();

    const options = (this.props.template && this.props.template.options) || undefined;

    let modal = this.props.modalRef ? this.props.modalRef.current : this._modal;
    modal.open({
      className: "uumodal-uu5string",
      size: "l",
      header: (
        <UU5.Bricks.Div
          className="uu-dockit-form-header"
          content={<UU5.Bricks.Lsi lsi={{ cs: "Úprava textového pole", en: "Edit text field" }} />}
        />
      ),
      content: (
        <InputModal
          value={this.state.value ? this.state.value.toString() : null}
          onSave={this._saveFromModalToState}
          onCancel={this._closeModal}
          options={options}
        />
      )
    });
  },

  _saveFromModalToState(newValue) {
    this.setState({ value: newValue }, () => {
      if (this.props.onChangeField) {
        this.props.onChangeField(newValue, this._getIndexes());
      }
    });
    this._closeModal();
  },

  _closeModal() {
    let modal = this.props.modalRef ? this.props.modalRef.current : this._modal;
    modal.close();
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getChild() : null;
  }
  //@@viewOff:render
});

export default Input;
