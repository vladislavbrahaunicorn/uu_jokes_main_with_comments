import * as UU5 from "uu5g04";
import Cfg from "../core/_config.js";

export const InputText = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.LIB + ".InputText",
    nestingLevel: "boxCollection",
    classNames: {
      main: Cfg.CSS + "-input-text",
      input: Cfg.CSS + "-input-text-input"
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: UU5.PropTypes.string,
    onBlur: UU5.PropTypes.func,
    placeholder: UU5.PropTypes.string,
    table: UU5.PropTypes.bool,
    autofocus: UU5.PropTypes.bool,
    options: UU5.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: "",
      placeholder: "placeholder",
      table: false,
      autofocus: false,
      uu5string: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentWillReceiveProps(nextProps) {
    let value = nextProps.value;
    const rtValue = this._richText && this._richText.getValue();
    if (this.props.value !== value) {
      if (rtValue !== value && !(value === "" && rtValue === "<uu5string /><br />")) {
        this._richText.setValue(nextProps.value ? nextProps.value.toString() : null);
        this._controlled = true;
      }
    }
  },
  componentDidMount() {
    if (this.props.autofocus) {
      this._autofocus = true;
      this.forceUpdate();
    }
  },
  componentDidUpdate() {
    this._controlled && (this._controlledValue = this._richText.getValue());
    if ((this.props.autofocus || this._autofocus) && this._richText) {
      this._autofocus = undefined;
      setTimeout(() => {
        this._richText.getArea().focus();
      }, 0);
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  setCursorPosition(cursorPosition) {
    setTimeout(() => {
      this._richText.setCursorPosition(cursorPosition);
    }, 0);
    const editor = this._richText
      .getArea()
      .findDOMNode()
      .querySelector(".public-DraftStyleDefault-block"); // eslint-disable-line
    editor.scrollLeft = editor.scrollWidth;
  },
  doFocus() {
    setTimeout(() => {
      this._richText && this._richText.getArea().focus();
    }, 0);
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _checkAndAddUu5string(value) {
    let checkedValue = "<uu5string />" + value;
    if (!value) {
      checkedValue = "";
    } else if (value.search) {
      if (value.search(/^<uu5string(\/>| \/>)$/) === 0) {
        checkedValue = "";
      } else if (value.search(/^<uu5string(\/>| \/>)/) !== -1) {
        checkedValue = value;
      }
    }

    return checkedValue;
  },

  // _checkSingleUu5string(value) {
  //   if (!value) return "";
  //   if (value.search && value.search(/^<uu5string(\/>| \/>)$/) === 0) return "";
  //   else return value;
  // },
  _checkPlaceholder() {
    const split = this.props.placeholder.split("-");
    return split[0];
  },

  _getView() {
    const options = this.props.options;
    const value = this._checkAndAddUu5string(this.props.value);
    return UU5.Common.Tools.findComponent("UU5.RichText.Editor", {
      ref_: ref => (this._richText = ref),
      buttons: [],
      value: value,
      onBlur: this._onBlurHandler,
      placeholder: this._checkPlaceholder(),
      plugins: (options && options.editorPlugins) || {}
    });
  },

  _onBlurHandler(e) {
    this._richText
      .getArea()
      .findDOMNode()
      .querySelector(".public-DraftStyleDefault-block").scrollLeft = 0; // eslint-disable-line
    this._richText
      .getArea()
      .findDOMNode()
      .querySelector(".public-DraftEditor-content").scrollTop = 0; // eslint-disable-line

    const value = this._richText.getValue();
    if (this._controlled) {
      this._controlled = false;
      if (value !== this._controlledValue && !(this.props.value === "" && value === "<uu5string /><br />")) {
        this.props.onBlur(value);
      } else {
        this.props.onBlur(null);
      }
    } else {
      if (value === "<uu5string /><br />" || value === "") {
        this.props.onBlur("");
      } else {
        this.props.onBlur(value);
      }
    }
  },

  _getCorrectView() {
    return <UU5.Bricks.Div {...this.getMainPropsToPass()}>{this._getView()}</UU5.Bricks.Div>;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getCorrectView() : null;
  }
  //@@viewOff:render
});

export default InputText;
