import * as UU5 from "uu5g04";
import "uu5g04-forms";

import Cfg from "../core/_config.js";

export const InputPlainText = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.tag("InputPlainTexts"),
    nestingLevelList: UU5.Environment.getNestingLevelList("smallBox", "inline"),
    classNames: {
      main: Cfg.css("input-plain-text"),
      input: Cfg.css("input-plain-input-text"),
      coverGap: Cfg.css("input-plain-text-cover-gap")
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    value: UU5.PropTypes.string,
    phase: UU5.PropTypes.oneOf(["default", "focus"]),
    onBlur: UU5.PropTypes.func,
    options: UU5.PropTypes.object,
    placeholder: UU5.PropTypes.string,
    table: UU5.PropTypes.bool,
    textCover: UU5.PropTypes.arrayOf([UU5.PropTypes.string]),
    autofocus: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      value: "",
      phase: "default",
      placeholder: "placeholder",
      table: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  componentDidMount() {
    if (this.props.autofocus) {
      this._processAutofocus();
    }
  },
  componentDidUpdate() {
    if (this.props.autofocus) {
      this._processAutofocus();
    }
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  doFocus() {
    setTimeout(() => {
      this._input && this._input.focus();
    }, 0);
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _processAutofocus() {
    if (this.props.autofocus) {
      this._autofocus = true;
      setTimeout(() => {
        this._input.focus();
        this._autofocus = false;
      }, 0);
    }
  },

  _removeUu5String(value) {
    if (!value) return "";
    if (!value.replace) return value;
    const replaced = value.replace(/^<uu5string(\/>| \/>)/, "");
    if (replaced !== value) this._uu5String = true;
    return replaced;
  },

  _checkPlaceholder() {
    const split = this.props.placeholder.split("-");
    return split[0];
  },

  _getFocusView() {
    return (
      <UU5.Forms.TextArea
        className={`${this.getClassName("input")}`}
        ref_={ref => (this._input = ref)}
        rows={1}
        name={this.props.placeholder}
        placeholder={this._checkPlaceholder()}
        value={this._removeUu5String(this.props.value)}
        autoResize={true}
        style={{ resize: "none" }}
        inputAttrs={{
          spellCheck: "false",
          onBlur: this._onBlurHandler,
          autoComplete: "off",
          autoFocus: false
        }}
      />
    );
  },

  _onBlurHandler(e) {
    if (this._autofocus) return;
    const value = this._input.getValue();
    if (!value) {
      this.props.onBlur("");
    } else {
      const pre = this._uu5String ? "<uu5string />" : "";
      this.props.onBlur(pre.concat(value));
    }
  },

  _getCorrectView(type) {
    const view = this._getFocusView();
    return <UU5.Bricks.Div {...this.getMainPropsToPass()}>{view}</UU5.Bricks.Div>;
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getCorrectView(this.props.phase) : null;
  }
  //@@viewOff:render
});

export default InputPlainText;
