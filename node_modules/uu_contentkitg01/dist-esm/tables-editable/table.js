import * as UU5 from "uu5g04";
import "uu5g04-bricks";

import Lsi from "../config/lsi.js";
import Input from "./input.js";
import AbstractTableEditable from "./abstract-table-editable.js";
import Tools from "../core/tools.js";

import "./table.less";
import Cfg from "../core/_config.js";

const Table = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.NestingLevelMixin, UU5.Common.ScreenSizeMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.tag("TablesEditable.Table"),
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "box"),
    classNames: {
      main: `${Cfg.CSS} ${Cfg.css("table")}`,
      table: Cfg.css("table-cover-table-editable"),
      modalNumber: Cfg.css("table-modal-number"),
      modalBody: Cfg.css("table-modal-body")
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    component: UU5.PropTypes.object
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      component: null
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:standardComponentLifeCycle
  getInitialState() {
    const { rowHeader, colHeader, transpose, responsive } = this.props.component.getEditablePropsValues([
      "colHeader",
      "rowHeader",
      "transpose",
      "responsive"
    ]);

    return {
      showColWidth: false,
      rowHeader: rowHeader,
      colHeader: colHeader,
      transpose: transpose,
      responsive: responsive
    };
  },
  //@@viewOff:standardComponentLifeCycle

  //@@viewOn:interface
  getFormValues() {
    return this._getAllValues(this._form.getValues());
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:componentSpecificHelpers
  _getAllValues(form) {
    let values = Object.assign(
      {},
      { header: this._header.getValue() },
      { colWidth: this._tableEditable.getColWidth() },
      (form && form.values) || form,
      { data: this._tableEditable.getFormValues() }
    );
    delete values.showColWidth;
    values.children = null;
    const preProps = this.props.component.getEditablePropsValues([
      "header",
      "children",
      "footer",
      "data",
      "colHeader",
      "rowHeader",
      "transpose",
      "responsive",
      "colWidth"
    ]);
    values = Tools.checkValues(preProps, values);
    return values;
  },

  _onSave(form) {
    const output = this._getAllValues(form);
    this.props.component.endEditation(output);
  },
  _onCancel() {
    this.props.component.endEditation();
  },

  _getCustomMenu() {
    let menu;
    if (!(this.state.responsive && (this.isXs() || this.isS()))) {
      menu = [
        { label: this.getLsiItem(Lsi.LSI_TABLE_SHOW_HIDE_COL_WIDTH), onClick: () => this._customMenuOnClickHandler() }
      ];
    }
    return menu;
  },

  _customMenuOnClickHandler() {
    this.setState(prevState => {
      return { showColWidth: !prevState.showColWidth };
    });
  },

  _onChangeHandler(e) {
    e.component.onChangeDefault(e);
    this.setState({ [e.component.getName()]: e.value });
  },
  _getChild() {
    const { header, footer, colWidth } = this.props.component.getEditablePropsValues(["header", "footer", "colWidth"]);
    const data = this.props.component.getData();

    return (
      <UU5.Bricks.Div {...this.getMainPropsToPass()}>
        <UU5.Bricks.Modal ref_={modal => (this._modal = modal)} />
        <Input name="header" data={header} ref_={ref => (this._header = ref)} />
        <AbstractTableEditable
          className={this.getClassName("table")}
          ref_={ref => (this._tableEditable = ref)}
          data={data}
          modifyRow
          modifyCol
          rowHeader={this.state.rowHeader}
          colHeader={this.state.colHeader}
          transpose={this.state.transpose}
          responsive={this.state.responsive}
          colWidth={colWidth}
          changeWidth={this.state.showColWidth}
          customMenu={this._getCustomMenu()}
          dynamicColWidth
        />
        <UU5.Forms.Form onSave={this._onSave} onCancel={this._onCancel} ref_={ref => (this._form = ref)}>
          <Input name="footer" data={footer} />
          <UU5.Bricks.Panel
            header={this.getLsiItem(Lsi.LSI_MORE_PROPERTIES_BUTTON)}
            iconExpanded="mdi-menu-up"
            iconCollapsed="mdi-menu-down"
          >
            {!(this.state.responsive && (this.isXs() || this.isS())) && (
              <UU5.Forms.Checkbox
                name="showColWidth"
                label={this.getLsiItem(Lsi.LSI_TABLE_SHOW_HIDE_COL_WIDTH)}
                value={this.state.showColWidth}
                onChange={this._onChangeHandler}
                type={2}
              />
            )}
            <UU5.Forms.Checkbox
              name="rowHeader"
              label={this.getLsiItem(Lsi.LSI_TABLE_COVER_ROW_HEADER)}
              value={this.state.rowHeader}
              onChange={this._onChangeHandler}
              type={2}
            />
            <UU5.Forms.Checkbox
              name="colHeader"
              label={this.getLsiItem(Lsi.LSI_TABLE_COVER_COL_HEADER)}
              value={this.state.colHeader}
              onChange={this._onChangeHandler}
              type={2}
            />
            <UU5.Forms.Checkbox
              name="transpose"
              label={this.getLsiItem(Lsi.LSI_TABLE_COVER_TRANSPOSE)}
              value={this.state.transpose}
              onChange={this._onChangeHandler}
              type={2}
            />
            <UU5.Forms.Checkbox
              name="responsive"
              label={this.getLsiItem(Lsi.LSI_TABLE_COVER_RESPONSIVE)}
              value={this.state.responsive}
              onChange={this._onChangeHandler}
              type={2}
            />
          </UU5.Bricks.Panel>
          <UU5.Forms.Controls
            buttonSubmitProps={{ content: this.getLsiItem(Lsi.LSI_BUTTON_OK) }}
            buttonCancelProps={{ content: this.getLsiItem(Lsi.LSI_BUTTON_CANCEL) }}
          />
        </UU5.Forms.Form>
      </UU5.Bricks.Div>
    );
  },
  //@@viewOff:componentSpecificHelpers

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? this._getChild() : null;
  }
  //@@viewOff:render
});

export default Table;
