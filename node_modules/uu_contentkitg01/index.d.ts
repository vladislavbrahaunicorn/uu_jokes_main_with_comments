export = UuContentKit;
declare namespace UuContentKit {
    namespace Links {
        function Link(props: any): any;
        namespace Link {
            interface View$content {
            }
            interface View$Props {
                code?: string;
                fragment?: string;
                colorSchema?: string;
                content?: string | View$content;
                target?: "_blank" | "_parent" | "_top" | "_self";
                type?: "link" | "button";
                bgStyle?: "filled" | "outline" | "transparent" | "underline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                borderRadius?: string | number;
                width?: string | number;
                icon?: string;
            }
            function View(props: View$Props): any;
            const Editable: any;
        }
        function FileLink(props: any): any;
        function FileBlockLink(props: any): any;
    }
    namespace Grids {
        function InfoCarousel(props: any): any;
        namespace InfoCarousel {
            function Item(props: any): any;
        }
    }
    namespace Bricks {
        namespace Bricks {
            const BlockInfo: any;
            const BlockDanger: any;
            const BlockWarning: any;
            const BlockDefault: any;
            const BlockSuccess: any;
            const BlockHelp: any;
            function BasicInfo(props: any): any;
        }
        namespace BricksEditable {
            interface Block$component {
            }
            interface Block$Props {
                component?: Block$component;
            }
            function Block(props: Block$Props): any;
        }
    }
    namespace Images {
        function Image(props: any): any;
        function ImageGallery(props: any): any;
        function ImageRow(props: any): any;
        function ImageColumn(props: any): any;
        function ImagePanel(props: any): any;
        function ImageCarousel(props: any): any;
    }
    namespace Layout {
        function BackgroundImage(props: any): any;
        function Container(props: any): any;
    }
    namespace Tables {
        namespace Tables {
            interface Table$Props {
                data?: any[];
                transpose?: boolean;
                responsive?: boolean;
                rowHeader?: boolean;
                colHeader?: boolean;
                colWidth?: number[];
                header?: string;
                footer?: string;
            }
            function Table(props: Table$Props): any;
            interface BasicInfo$Props {
                data?: any[];
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface AbstractTable$colTemplate {
            }
            interface AbstractTable$Props {
                data?: any[];
                transpose?: boolean;
                responsive?: boolean;
                rowHeader?: boolean;
                colHeader?: boolean;
                colWidth?: number[];
                tableHeaders?: string[];
                sorted?: boolean;
                colTemplate?: AbstractTable$colTemplate;
                showEmpty?: boolean;
                colHeaderTable?: boolean;
            }
            function AbstractTable(props: AbstractTable$Props): any;
        }
    }
    namespace Diagrams {
        interface VerticalTimeline$Props {
            disableAnimate?: boolean;
            singleColumn?: boolean;
            colorSchema?: string;
            itemElevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
            iconBgStyle?: "filled" | "outline";
            itemBgStyle?: "filled" | "outline" | "transparent" | "line";
        }
        function VerticalTimeline(props: VerticalTimeline$Props): any;
        namespace VerticalTimeline {
            interface Item$Props {
                label?: string;
                icon?: string;
                position?: "left" | "right";
                colorSchema?: string;
                iconBgStyle?: "filled" | "outline";
                elevation?: "-1" | "0" | "1" | "2" | "3" | "4" | "5" | -1 | 0 | 1 | 2 | 3 | 4 | 5;
                bgStyle?: "filled" | "outline" | "transparent" | "line";
                onIconClick?(...args: any): any;
                onItemClick?(...args: any): any;
                _defaultPosition?: "left" | "right";
                _odd?: boolean;
                _singleColumn?: boolean;
                _isFirst?: boolean;
                _isLast?: boolean;
            }
            function Item(props: Item$Props): any;
        }
    }
    namespace Separators {
        function HorizontalSeparator(props: any): any;
    }
    namespace TablesEditable {
        namespace TablesEditable {
            interface Table$component {
            }
            interface Table$Props {
                component?: Table$component;
            }
            function Table(props: Table$Props): any;
            interface BasicInfo$component {
            }
            interface BasicInfo$Props {
                component?: BasicInfo$component;
            }
            function BasicInfo(props: BasicInfo$Props): any;
            interface AbstractTable$colTemplate {
            }
            interface AbstractTable$Props {
                data?: any[];
                transpose?: boolean;
                responsive?: boolean;
                rowHeader?: boolean;
                colHeader?: boolean;
                colWidth?: number[];
                tableHeaders?: string[];
                colTemplate?: AbstractTable$colTemplate;
                modifyRow?: boolean;
                modifyCol?: boolean;
                returnEmpty?: boolean;
                customMenu?: any[];
                changeWidth?: boolean;
                dynamicColWidth?: boolean;
                colHeaderTable?: boolean;
                controlled?: boolean;
            }
            function AbstractTable(props: AbstractTable$Props): any;
            interface Input$options {
            }
            interface Input$linkModal {
            }
            interface Input$tableEditable {
            }
            interface Input$template {
            }
            interface Input$modalRef {
            }
            interface Input$Props {
                data?: any;
                name?: string;
                type?: string;
                options?: Input$options;
                hideButton?: boolean;
                validStringHandler?(...args: any): any;
                table?: boolean;
                linkModal?: Input$linkModal;
                onChangeField?(...args: any): any;
                textCover?: any[];
                tableEditable?: Input$tableEditable;
                onGetContextMenuItems?(...args: any): any;
                onSetColWidth?(...args: any): any;
                onValidate?(...args: any): any;
                autofocus?: boolean;
                saveOnEnter?: boolean;
                placeholder?: string;
                onBlur?(...args: any): any;
                onClick?(...args: any): any;
                cursorPosition?: "start" | "end";
                template?: Input$template | string;
                modalRef?: Input$modalRef | ((...args: any)=>any);
            }
            function Input(props: Input$Props): any;
        }
    }
}